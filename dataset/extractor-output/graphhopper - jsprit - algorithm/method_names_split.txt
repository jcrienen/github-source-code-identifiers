when
Adding
Soft
Constraint
manager
Should
Have
It
when
Adding
Two
Soft
Constraints
manager
Should
Have
It
when
Adding
Two
Soft
Constrainta
manager
Should
Sum
Costs
Correctly
when
Getting
Constraints
Via
Constructor
they
Should
Be
Resolved
Correctly
when
Getting
Constraints
Via
Constructor
And
At
Least
One
Constraint
Cannot
Be
Resolved
it
Should
Only
Add
The
Known
Constraints
when
Adding
Soft
Route
Constraint
manager
Should
Have
It
when
Adding
Two
Soft
Route
Constraint
manager
Should
Have
It
when
Adding
Soft
Activity
Constraint
manager
Should
Have
It
when
Adding
Two
Soft
Activity
Constraints
manager
Should
Have
It
do
Before
create
Activities
get
state
Manager
Should
Have
Memorized
Correct
Latest
End
Of
Act3
state
Manager
Should
Have
Memorized
Correct
Latest
End
Of
Act2
state
Manager
Should
Have
Memorized
Correct
Latest
End
Of
Act1
when
New
Job
Is
Inserted
With
Old
Veh
it
Just
Should
Return
True
when
New
Job
Is
Inserted
With
Old
Veh
it
Just
Should
Return
False
when
New
Job
Is
Inserted
In
Between
Act1And2With
Old
Veh
it
Just
Should
Return
True
when
New
Job
Is
Inserted
In
Between
Act1And2With
Old
Veh
it
Just
Should
Return
False
when
Job
Is
Inserted
Along
With
New
Vehicle
That
Needs
To
Be
Home
At60
it
Should
Return
False
when
Job
Is
Inserted
Along
With
New
Vehicle
That
Needs
To
Be
Home
At50
it
Should
Return
False
when
Job
Is
Inserted
Along
With
New
Vehicle
That
Needs
To
Be
Home
At10
it
Should
Return
False
when
Job
Is
Inserted
Along
With
V6Between
S2And
S3
it
Should
Return
False
when
Job
Is
Inserted
Along
With
V6Between
S1And
S2
it
Should
Return
False
when
Job
Is
Inserted
Along
With
V6At
The
End
Of
Route
it
Should
Return
True
when
Job
Is
Inserted
Along
With
New
Vehicle
That
Can
Only
Start
At60
it
Should
Return
False
when
Adding
Soft
Route
Constraint
manager
Should
Have
It
when
Adding
Two
Soft
Route
Constraint
manager
Should
Have
It
when
Adding
Two
Soft
Route
Constraint
manager
Should
Sum
Costs
Correctly
do
Before
when
Job
To
Be
Inserted
Requires
Skills
That
New
Vehicle
Does
Not
Have
it
Should
Return
False
when
Job
To
Be
Inserted
Requires
Skills
That
Vehicle
Have
it
Should
Return
True
when
Route
To
Be
Overtaken
Requires
Skills
That
Vehicle
Does
Not
Have
it
Should
Return
False
when
Route
To
Be
Overtaken
Requires
Skills
That
Vehicle
Does
Not
Have2
it
Should
Return
False
when
Route
To
Be
Overtaken
Requires
Skills
That
Vehicle
Does
Have
it
Should
Return
True
do
Before
ini
shift
Of
Existing
Shipments
Should
Work
act
inserting
Delivery
At
Any
Position
Should
Work
inserting
D2Just
After
Start
Should
Work
inserting
D2After
First
Delivery
Should
Work
inserting
Delivery
In
Between
Shipment
Should
Fail
inserting
Pickup
Shipment
At
Any
Position
Should
Work
inserting
Pickup
Shipment
Should
Work
inserting
Pickup
Shipment
Should
Work2
test
Open
Routes
when
Pickup
Is
Inserted
At0
inserting
Delivery
Shipment
Should
Fail
Where
Constraint
Is
Broken
when
Pickup
Is
Inserted
At1
inserting
Delivery
Shipment
Should
Fail
Where
Constraint
Is
Broken
do
Before
when
End
Location
Is
Set
constraint
Should
Work
insert
New
In
Vehicle
Should
Fail
insert
New
In
Vehicle2Should
Be
Correct
act
new
Act
traveled
Distance
Should
Be
Correct
traveled
Distance
With
Vehicle2Should
Be
Correct
distance
Of
Shipment
In
Route
distance
Of
Shipment
In
Route
Vehicle2
distance
Of
Pickup
In
Route
distance
Of
Pickup
In
Route
Vehicle2
distance
To
Travel
Should
Be
Correct
distance
To
Travel
Should
Be
Correct
Vehicle2
when
Adding
Deliver
Shipment
constraint
Should
Work
when
Adding
Deliver
Shipment
With
Veh
Diff
Start
End
Locs
constraint
Should
Work
do
Before
create
Activities
create
Activities
create
Activities
when
Service
Route
And
New
Service
Fits
In
it
Should
Return
Fulfilled
when
Service
Route
And
New
Service
Fits
In
Between
Start
And
Act1
it
Should
Return
Fulfilled
when
Service
Route
And
New
Service
Fits
In
Between
Ac1And
Act2
it
Should
Return
Fulfilled
when
Service
Route
And
New
Service
Fits
In
Between
Ac2And
End
it
Should
Return
Fulfilled
when
Service
Route
And
New
Service
Does
Not
Fit
In
Between
Start
And
Act1
it
Should
Return
Fulfilled
when
Service
Route
And
New
Service
Does
Not
Fit
In
Between
Ac1And
Act2
it
Should
Return
Fulfilled
when
Service
Route
And
New
Service
Does
Not
Fit
In
Between
Ac2And
End
it
Should
Return
Fulfilled
when
Service
Route
And
New
Service
Does
Not
Fit
In
it
Should
Return
Fulfilled
when
PD
Route
Route
And
New
Pickup
Fits
In
it
Should
Return
Fulfilled
when
PD
Route
Route
And
New
Delivery
Fits
In
it
Should
Return
Fulfilled
when
PD
Route
Route
And
New
Pickup
Does
Not
Fit
In
it
Should
Return
Not
Fulfilled
when
PD
Route
Route
And
New
Delivery
Does
Not
Fit
In
it
Should
Return
Not
Fulfilled
when
PD
Route
new
Pickup
Should
Fit
In
Between
Start
And
Act1
when
PD
Route
new
Pickup
Should
Fit
In
Between
Act1And
Act2
when
PD
Route
new
Pickup
Should
Fit
In
Between
Act2And
End
when
PD
Route
new
Pickup
Should
Not
Fit
In
Between
Start
And
Act1
when
PD
Route
new
Pickup
Should
Not
Fit
In
Between
Act1And
Act2
when
PD
Route
new
Pickup
Should
Not
Fit
In
Between
Act2And
End
when
PD
Route
new
Delivery
Should
Fit
In
Between
Start
And
Act1
when
PD
Route
new
Delivery
Should
Not
Fit
In
Between
Start
And
Act1
when
PD
Route
new
Delivery
Should
Fit
In
Between
Act1And
Act2
when
PD
Route
new
Delivery
Not
Should
Fit
In
Between
Act1And
Act2
when
PD
Route
new
Delivery
Should
Fit
In
Between
Act2And
End
when
PD
Route
new
Delivery
Should
Not
Fit
In
Between
Act2And
End
when
PD
Route
And
New
Service
Fits
In
Between
Ac1And
Act2
it
Should
Return
Fulfilled
when
PD
Route
And
New
Service
Fits
In
Between
Ac2And
End
it
Should
Return
Fulfilled
when
PD
Route
And
New
Service
Does
Not
Fit
In
Between
Start
And
Act1
it
Should
Return
Fulfilled
when
PD
Route
And
New
Service
Does
Not
Fit
In
Between
Ac1And
Act2
it
Should
Return
Fulfilled
when
PD
Route
And
New
Service
Does
Not
Fit
In
Between
Ac2And
End
it
Should
Return
Fulfilled
when
PD
Route
And
New
Service
Does
Not
Fit
In
it
Should
Return
Fulfilled
when
Shipment
Route
And
Pickup
Of
New
Shipment
Should
Fit
In
Between
Start
And
Act1
when
Shipment
Route
And
Pickup
Of
New
Shipment
Should
Not
Fit
In
Between
Start
And
Act1
when
Shipment
Route
And
Pickup
Of
New
Shipment
Should
Fit
In
Between
Act1And
Act2
when
Shipment
Route
And
Pickup
Of
New
Shipment
Should
Not
Fit
In
Between
Act1And
Act2
when
Shipment
Route
And
Pickup
Of
New
Shipment
Should
Fit
In
Between
Act2And
Act3
when
Shipment
Route
And
Pickup
Of
New
Shipment
Should
Not
Fit
In
Between
Act2And
Act3
when
Shipment
Route
And
Pickup
Of
New
Shipment
Should
Fit
In
Between
Act3And
Act4
when
Shipment
Route
And
Pickup
Of
New
Shipment
Should
Not
Fit
In
Between
Act3And
Act4
when
Shipment
Route
And
Pickup
Of
New
Shipment
Should
Fit
In
Between
Act4And
End
when
Shipment
Route
And
Pickup
Of
New
Shipment
Should
Not
Fit
In
Between
Act4And
End
when
Shipment
Route
And
Delivery
Of
New
Shipment
Should
Fit
In
Between
Start
And
Act1
when
Shipment
Route
And
Delivery
Of
New
Shipment
Should
Not
Fit
In
Between
Start
And
Act1
when
Shipment
Route
And
Delivery
Of
New
Shipment
Should
Fit
In
Between
Act1And
Act2
when
Shipment
Route
And
Delivery
Of
New
Shipment
Should
Not
Fit
In
Between
Act1And
Act2
when
Shipment
Route
And
Delivery
Of
New
Shipment
Should
Fit
In
Between
Act2And
Act3
when
Shipment
Route
And
Delivery
Of
New
Shipment
Should
Not
Fit
In
Between
Act2And
Act3
when
Shipment
Route
And
Delivery
Of
New
Shipment
Should
Fit
In
Between
Act3And
Act4
when
Shipment
Route
And
Delivery
Of
New
Shipment
Should
Not
Fit
In
Between
Act3And
Act4
when
Shipment
Route
And
Delivery
Of
New
Shipment
Should
Fit
In
Between
Act4And
End
when
Shipment
Route
And
Delivery
Of
New
Shipment
Should
Not
Fit
In
Between
Act4And
End
do
Before
when
Load
Plus
Delivery
Size
Does
Not
Exceeds
Vehicle
Capacity
it
Should
Return
True
when
Load
Plus
Delivery
Size
Exceeds
Vehicle
Capacity
In
All
Dimension
it
Should
Return
False
when
Load
Plus
Delivery
Size
Exceeds
Vehicle
Capacity
In
One
Dimension
it
Should
Return
False
when
Load
Plus
Delivery
Size
Just
Fit
Into
Vehicle
it
Should
Return
True
when
Load
Plus
Pickup
Size
Does
Not
Exceeds
Vehicle
Capacity
it
Should
Return
True
when
Load
Plus
Pickup
Size
Exceeds
Vehicle
Capacity
In
All
Dimension
it
Should
Return
False
when
Load
Plus
Pickup
Size
Exceeds
Vehicle
Capacity
In
One
Dimension
it
Should
Return
False
when
Load
Plus
Pickup
Size
Just
Fit
Into
Vehicle
it
Should
Return
True
when
Load
Plus
Service
Size
Does
Not
Exceeds
Vehicle
Capacity
it
Should
Return
True
when
Load
Plus
Service
Size
Exceeds
Vehicle
Capacity
In
All
Dimension
it
Should
Return
False
when
Load
Plus
Service
Size
Exceeds
Vehicle
Capacity
In
One
Dimension
it
Should
Return
False
when
Load
Plus
Service
Size
Just
Fit
Into
Vehicle
it
Should
Return
True
when
Adding
A
Service
And
New
Vehicle
Does
Not
Have
The
Capacity
it
Should
Return
False
when
Adding
A
Delivery
And
New
Vehicle
Does
Not
Have
The
Capacity
it
Should
Return
False
when
Adding
A
Pickup
And
New
Vehicle
Does
Not
Have
The
Capacity
it
Should
Return
False
when
New
Vehicle
Capacity
Is
Not
Sufficiant1
return
False
when
New
Vehicle
Capacity
Is
Not
Sufficiant2
return
False
create
Pickup
do
Before
create
Activities
get
state
Manager
Should
Have
Memorized
Correct
Latest
End
Of
Act3
state
Manager
Should
Have
Memorized
Correct
Latest
End
Of
Act2
state
Manager
Should
Have
Memorized
Correct
Latest
End
Of
Act1
when
New
Job
Is
Inserted
With
Old
Veh
it
Just
Should
Return
True
when
New
Job
Is
Inserted
With
Old
Veh
it
Just
Should
Return
False
when
New
Job
Is
Inserted
In
Between
Act1And2With
Old
Veh
it
Just
Should
Return
True
when
New
Job
Is
Inserted
In
Between
Act1And2With
Old
Veh
it
Just
Should
Return
False
when
Job
Is
Inserted
Along
With
New
Vehicle
That
Needs
To
Be
Home
At60
it
Should
Return
False
when
Job
Is
Inserted
Along
With
New
Vehicle
That
Needs
To
Be
Home
At50
it
Should
Return
False
when
Job
Is
Inserted
Along
With
New
Vehicle
That
Needs
To
Be
Home
At10
it
Should
Return
False
when
Job
Is
Inserted
Along
With
V6Between
S2And
S3
it
Should
Return
False
when
Job
Is
Inserted
Along
With
V6Between
S1And
S2
it
Should
Return
False
when
Job
Is
Inserted
Along
With
V6At
The
End
Of
Route
it
Should
Return
True
when
Job
Is
Inserted
Along
With
New
Vehicle
That
Can
Only
Start
At60
it
Should
Return
False
when
Vehicle
Is
Built
Without
Setting
Neither
Location
Nor
Coord
it
Throws
An
Illegal
State
Exception
when
Adding
Driver
Break
it
Should
Be
Added
Correctly
building
A
New
Vehicle
Based
On
Another
One
Should
Work
when
Adding
Skills
they
Should
Be
Added
Correctly
when
Adding
Skills
Case
Sens
they
Should
Be
Added
Correctly
when
Vehicle
Is
Built
To
Return
To
Depot
it
Should
Return
To
Depot
when
Vehicle
Is
Built
To
Not
Return
To
Depot
it
Should
Not
Return
To
Depot
when
Vehicle
Is
Built
With
Location
it
Should
Hv
The
Correct
Location
when
Vehicle
Is
Built
With
Coord
it
Should
Hv
The
Correct
Coord
when
Vehicle
Is
Built
And
Earliest
Start
Is
Not
Set
it
Should
Set
The
Default
Of
Zero
when
Vehicle
Is
Built
And
Earliest
Start
Set
it
Should
Be
Set
Correctly
when
Vehicle
Is
Built
And
Latest
Arrival
Is
Not
Set
it
Should
Set
Default
Of
Double
Max
Value
when
Vehicle
Is
Built
And
Latest
Arrival
Is
Set
it
Should
Be
Set
Correctly
when
No
Vehicle
Is
Create
it
Should
Hv
The
Correct
Id
when
Start
Location
Is
Set
it
Is
Done
Correctly
when
Start
Location
Is
Null
it
Throws
Exception
when
Start
Location
Coord
Is
Set
it
Is
Done
Correctly
when
End
Location
Is
Set
it
Is
Done
Correctly
when
End
Location
Coord
Is
Set
it
Is
Done
Correctly
when
Neither
End
Location
Id
Nor
End
Location
Coord
Are
Set
end
Location
Id
Must
Be
Equal
To
Start
Location
Id
when
Neither
End
Location
Id
Nor
End
Location
Coord
Are
Set
end
Location
Coord
Must
Be
Equal
To
Start
Location
Coord
when
Neither
End
Location
Id
Nor
End
Location
Coord
Are
Set
end
Location
Coord
Must
Be
Equal
To
Start
Location
Coord
V2
when
End
Location
Coordinate
Is
Set
But
No
Id
id
Must
Be
Coord
To
String
when
End
Location
Id
Is
Specified
AND
Return
To
Depot
Is
False
it
Should
Throw
Exception
when
End
Location
Coord
Is
Specified
AND
Return
To
Depot
Is
False
it
Should
Throw
Exception
when
End
Location
Coord
Is
Not
Specified
AND
Return
To
Depot
Is
False
end
Location
Coord
Must
Be
Start
Location
Coord
when
End
Location
Id
Is
Not
Specified
AND
Return
To
Depot
Is
False
end
Location
Id
Must
Be
Start
Location
Id
when
Start
And
End
Are
Unequal
AND
Return
To
Depot
Is
False
it
Should
Throw
Exception
when
Start
And
End
Are
Equal
AND
Return
To
Depot
Is
False
it
Should
Throw
Exception
when
Two
Vehicles
Have
The
Same
Id
they
Should
Be
Equal
when
Adding
Skills
Case
Sens
V2
they
Should
Be
Added
Correctly
when
Setting
User
Data
it
Is
Associated
With
The
Vehicle
type
Identifier
Should
Be
Equal
type
Identifier
Should
Not
Be
Equal
when
Type
Has
Negative
Capacity
Val
throw
Illegal
State
Expception
when
Adding
Two
Cap
Dimension
nu
Of
Dims
Should
Be
Two
when
Adding
Two
Cap
Dimension
dim
Values
Must
Be
Correct
when
Type
Is
Built
Without
Specifying
Capacity
it
Should
Hv
Cap
With
One
Dim
when
Type
Is
Built
Without
Specifying
Capacity
it
Should
Hv
Cap
Dim
Val
Of
Zero
when
Calling
Static
New
Builder
Instance
it
Should
Return
New
Builder
Instance
when
Building
Type
Just
By
Calling
New
Instance
type
Id
Must
Be
Correct
when
Building
Type
Just
By
Calling
New
Instance
cap
Must
Be
Correct
when
Building
Type
With
Cap
Smaller
Than
Zero
throw
Illegal
State
Exception
when
Building
Type
With
Null
Id
throw
Illegal
State
Exception
when
Setting
Max
Velocity
it
Should
Be
Set
Correctly
when
Max
Velocity
Smaller
Than
Zero
it
Should
Throw
Exception
when
Fixed
Costs
Smaller
Than
Zero
it
Should
Throw
Exception
when
Setting
Fixed
Costs
it
Should
Be
Set
Correctly
when
Per
Distance
Costs
Smaller
Than
Zero
it
Should
Throw
Exception
when
Setting
Per
Distance
Costs
it
Should
Be
Set
Correctly
when
Per
Time
Costs
Smaller
Than
Zero
it
Should
Throw
Exception
when
Having
Two
Types
With
The
Same
Id
they
Should
Be
Equal
when
Adding
Profile
it
Should
Be
Correct
when
Setting
User
Data
it
Is
Associated
With
The
Vehicle
Type
types
Should
Be
Equal
types
Should
Be
Not
Equal
types
Should
Be
Not
Equal2
types
Should
Be
Equal2
set
Up
test
Get
Vehicles
test
Lock
test
Lock2
test
Is
Locked
test
Lock
Twice
test
Get
Vehicles
Without
test
Unlock
when
Adding
Two
Vehicles
With
Same
Type
Id
And
Location
get
Available
Vehicle
Should
Return
Only
One
Of
Them
when
Adding
Two
Vehicles
With
Same
Type
Id
Start
And
End
Location
And
Working
Shift
get
Available
Vehicle
Should
Return
Only
One
Of
Them
when
Adding
Two
Vehicles
With
Different
Type
get
Available
Vehicle
Should
Return
Both
when
Adding
Two
Vehicles
With
Different
Start
Location
get
Available
Vehicle
Should
Return
Both
when
Adding
Two
Vehicles
With
Different
End
Location
get
Available
Vehicle
Should
Return
Both
when
Adding
Two
Vehicles
With
Different
Earliest
Start
get
Available
Vehicle
Should
Return
Both
when
Adding
Two
Vehicles
With
Different
Latest
Arr
get
Available
Vehicle
Should
Return
Both
vehicle
In
Collection
when
Finite
Vehicle
Manager
Is
Created
it
Should
Return
Correct
Manager
when
Building
With
Infinite
Fleet
fleet
Size
Should
Be
Infinite
when
Building
With
Finite
Fleet
fleet
Size
Should
Be
Finite
when
Building
With
Four
Vehicles
vrp
Should
Contain
The
Correct
Nu
Of
Vehicles
when
Adding
Four
Vehicles
All
At
Once
vrp
Should
Contain
The
Correct
Nu
Of
Vehicles
when
Building
With
Four
Vehicles
And
Two
Types
vrp
Should
Contain
The
Correct
Nu
Of
Types
when
Shipments
Are
Added
vrp
Should
Contain
Them
when
Services
With
No
Location
Are
Added
vrp
Should
Know
That
when
Services
Are
Added
vrp
Should
Contain
Them
when
Pickups
Are
Added
vrp
Should
Contain
Them
when
Pickups
Are
Added
All
At
Once
vrp
Should
Contain
Them
when
Delivieries
Are
Added
vrp
Should
Contain
Them
when
Delivieries
Are
Added
All
At
Once
vrp
Should
Contain
Them
when
Services
Are
Added
All
At
Once
vrp
Should
Contain
Them
when
Setting
Activity
Costs
vrp
Should
Contain
It
get
Activity
Cost
get
Activity
Duration
when
Setting
Routing
Costs
vpr
Should
Contain
It
get
Distance
get
Transport
Time
get
Transport
Cost
loc
when
Adding
Vehicles
With
Same
Id
it
Should
Throw
Exception
when
Adding
Vehicle
Types
With
Same
Id
But
Different
Costs
it
Should
Throw
Exception
when
Building
Problem
With
Same
Break
Id
it
Should
Throw
Exception
when
Adding
A
Vehicle
get
Added
Vehicle
Types
Should
Return
Its
Type
when
Adding
Two
Vehicle
With
Same
Type
get
Added
Vehicle
Types
Should
Return
Only
One
Type
when
Adding
Two
Vehicle
With
Diff
Type
get
Added
Vehicle
Types
Should
Return
These
Type
when
Adding
Vehicle
With
Diff
Start
And
End
start
Location
Must
Be
Registered
In
Location
Map
when
Adding
Vehicle
With
Diff
Start
And
End
end
Location
Must
Be
Registered
In
Location
Map
when
Adding
Initial
Route
it
Should
Be
Added
Correctly
when
Adding
Initial
Routes
they
Should
Be
Added
Correctly
when
Adding
Initial
Route
location
Of
Vehicle
Must
Be
Memorized
when
Adding
Job
And
Initial
Route
With
That
Job
Afterwards
this
Job
Should
Not
Be
In
Final
Job
Map
when
Adding
Two
Jobs
they
Should
Have
Proper
Indeces
when
Adding
Two
Services
With
The
Same
Id
it
Should
Throw
Exception
when
Adding
Two
Shipments
With
The
Same
Id
it
Should
Throw
Exception
when
Adding
Two
Vehicles
they
Should
Have
Proper
Indices
when
Adding
Two
Vehicles
With
Same
Type
Identifier
type
Identifiers
Should
Have
Same
Indices
when
Adding
Two
Vehicles
Different
Type
Identifier
type
Identifiers
Should
Have
Different
Indices
when
Creating
Solution
With
Two
Routes
solution
Should
Contain
These
Routes
when
Setting
Solution
Costs
To10
solution
Costs
Should
Be10
when
Creating
Sol
With
Costs
Of10And
Setting
Costs
Afterwards
To20
solution
Costs
Should
Be20
size
Of
Bad
Jobs
Should
Be
Correct
size
Of
Bad
Jobs
Should
Be
Correct
2
bad
Jobs
Should
Be
Correct
bad
Jobs
Should
Be
Correct
2
when
Delivery
Is
Added
Before
Pickup
throws
Exception
when
Pickup
Is
Added
Twice
throws
Exception
when
Shipment
Is
Picked
Delivered
And
Delivered
Again
throws
Exception
when
Shipment
Is
Picked
Up
Though
But
Has
Not
Been
Delivered
And
Route
Is
Built
throws
Exception
when
Two
Shipments
Have
Been
Added
nu
Of
Activities
Must
Equal
Four
when
Building
Closed
Route
route
End
Should
Have
Location
Of
Vehicle
when
Building
Open
Route
route
End
Should
Have
Location
Of
Last
Activity
loc
when
Setting
Departure
Time
do
Before
when
Calling
Capacity
it
Should
Return
Correct
Capacity
has
Variable
Location
Should
Be
True
when
Start
Is
Ini
With
Earliest
Start
it
Should
Be
Set
Correctly
when
Start
Is
Ini
With
Latest
Start
it
Should
Be
Set
Correctly
when
Setting
Arr
Time
it
Should
Be
Set
Correctly
when
Setting
End
Time
it
Should
Be
Set
Correctly
when
Copying
Start
it
Should
Be
Done
Correctly
when
Two
Deliveries
Have
The
Same
Underlying
Job
they
Are
Equal
when
Two
Deliveries
Have
The
Different
Underlying
Job
they
Are
Not
Equal
do
Before
when
Calling
Capacity
it
Should
Return
Correct
Capacity
when
Start
Is
Ini
With
Earliest
Start
it
Should
Be
Set
Correctly
when
Start
Is
Ini
With
Latest
Start
it
Should
Be
Set
Correctly
when
Setting
Arr
Time
it
Should
Be
Set
Correctly
when
Setting
End
Time
it
Should
Be
Set
Correctly
when
Ini
Location
Id
it
Should
Be
Set
Correctly
when
Copying
Start
it
Should
Be
Done
Correctly
when
Getting
Capacity
it
Should
Return
It
Correctly
when
Calling
Capacity
it
Should
Return
Empty
Capacity
when
Start
Is
Ini
With
Earliest
Start
it
Should
Be
Set
Correctly
when
Start
Is
Ini
With
Latest
Start
it
Should
Be
Set
Correctly
when
Setting
End
Time
it
Should
Be
Set
Correctly
when
Setting
Earliest
Start
it
Should
Be
Set
Correctly
when
Setting
Latest
Start
it
Should
Be
Set
Correctly
when
Copying
End
it
Should
Be
Done
Correctly
when
Creating
Pickup
Activity
With
Shipment
it
Should
Return
Pickup
Shipment
when
Creating
Deliver
Activity
With
Shipment
it
Should
Return
Deliver
Shipment
overlapping
TW
should
Throw
Exception
overlapping
TW2
should
Throw
Exception
overlapping
TW3
should
Throw
Exception
when
Creating
Activity
With
Service
it
Should
Return
Pickup
Service
when
Creating
Activity
With
Pickup
it
Should
Return
Pickup
Service
when
Creating
Activity
With
Delivery
it
Should
Return
Deliver
Service
when
Calling
Capacity
it
Should
Return
Empty
Capacity
when
Start
Is
Ini
With
Earliest
Start
it
Should
Be
Set
Correctly
when
Start
Is
Ini
With
Latest
Start
it
Should
Be
Set
Correctly
when
Setting
Start
End
Time
it
Should
Be
Set
Correctly
when
Setting
Earliest
Start
it
Should
Be
Set
Correctly
when
Setting
Latest
Start
it
Should
Be
Set
Correctly
when
Copying
Start
it
Should
Be
Done
Correctly
do
Before
when
Calling
Capacity
it
Should
Return
Correct
Capacity
when
Start
Is
Ini
With
Earliest
Start
it
Should
Be
Set
Correctly
when
Start
Is
Ini
With
Latest
Start
it
Should
Be
Set
Correctly
when
Setting
Arr
Time
it
Should
Be
Set
Correctly
when
Setting
End
Time
it
Should
Be
Set
Correctly
when
Ini
Location
Id
it
Should
Be
Set
Correctly
when
Copying
Start
it
Should
Be
Done
Correctly
when
Two
Deliveries
Have
The
Same
Underlying
Job
they
Are
Equal
when
Two
Deliveries
Have
The
Different
Underlying
Job
they
Are
Not
Equal
test
Referencs
do
Smth
do
Before
when
Calling
Capacity
it
Should
Return
Correct
Capacity
when
Start
Is
Ini
With
Earliest
Start
it
Should
Be
Set
Correctly
when
Start
Is
Ini
With
Latest
Start
it
Should
Be
Set
Correctly
when
Setting
Arr
Time
it
Should
Be
Set
Correctly
when
Setting
End
Time
it
Should
Be
Set
Correctly
when
Ini
Location
Id
it
Should
Be
Set
Correctly
when
Copying
Start
it
Should
Be
Done
Correctly
when
Getting
Capacity
it
Should
Return
It
Correctly
do
Before
when
Calling
Capacity
it
Should
Return
Correct
Capacity
when
Start
Is
Ini
With
Earliest
Start
it
Should
Be
Set
Correctly
when
Start
Is
Ini
With
Latest
Start
it
Should
Be
Set
Correctly
when
Setting
Arr
Time
it
Should
Be
Set
Correctly
when
Setting
End
Time
it
Should
Be
Set
Correctly
when
Ini
Location
Id
it
Should
Be
Set
Correctly
when
Copying
Start
it
Should
Be
Done
Correctly
do
Before
when
Adding
Service
Act
service
Act
Is
Added
when
Adding
Service
Act
Twice
an
Exception
Is
Thrown
when
Adding
Service
And
Removing
It
Immediately
tour
Should
Not
Serve
Service
Anymore
when
Adding
A
Service
And
Then
Removing
The
Service
Again
tour
Should
Not
Serve
It
Anymore
when
Adding
A
Shipment
Activity
tour
Should
Serve
Shipment
when
Removing
Shipment
tour
Should
Not
Service
It
Anymore
when
Removing
Shipment
their
Corresponding
Activities
Should
Be
Removed
removing
Non
Job
Activity
Should
Work
removing
Activity
Should
Work
copying
Seq
Should
Work
removing
Shipment
Activity
Should
Work
when
Copying
Shipment
Activity
Seq
job
Size
Should
Be
Correct
when
Copying
Shipment
Activity
Seq
no
Activities
Should
Be
Correct
when
Copying
Shipment
Activity
Seq
it
Should
Containt
Pickup
Act
do
Before
when
Calling
Capacity
it
Should
Return
Correct
Capacity
when
Start
Is
Ini
With
Earliest
Start
it
Should
Be
Set
Correctly
when
Start
Is
Ini
With
Latest
Start
it
Should
Be
Set
Correctly
when
Setting
Arr
Time
it
Should
Be
Set
Correctly
when
Setting
End
Time
it
Should
Be
Set
Correctly
when
Ini
Location
Id
it
Should
Be
Set
Correctly
when
Copying
Start
it
Should
Be
Done
Correctly
do
Before
when
Building
Empty
Route
Correctly
go
when
Building
Empty
Route
Correctly
V2
go
when
Building
Empty
Route
Activity
Iterator
Iterates
Over
Zero
Activities
when
Building
Route
With
Nulls
it
Throws
Exception
when
Building
A
Non
Empty
Tour2Times
tour
Iter
Iterates
Over
Activities
Correctly
when
Building
A
Non
Empty
Tour
tour
Reverse
Iter
Iterates
Over
Activities
Correctly
when
Building
A
Non
Empty
Tour
V2
tour
Reverse
Iter
Iterates
Over
Activities
Correctly
when
Building
A
Non
Empty
Tour2Times
tour
Reverse
Iter
Iterates
Over
Activities
Correctly
when
Building
Route
With
Vehicle
That
Has
Different
Start
And
End
Location
route
Must
Have
Correct
Start
Location
when
Building
Route
With
Vehicle
That
Has
Different
Start
And
End
Location
route
Must
Have
Correct
End
Location
when
Building
Route
With
Vehicle
That
Has
Same
Start
And
End
Location
route
Must
Have
Correct
Start
Location
when
Building
Route
With
Vehicle
That
Has
Same
Start
And
End
Location
route
Must
Have
Correct
End
Location
when
Building
Route
With
Vehicle
That
Has
Same
Start
And
End
Location
route
Must
Have
Correct
Start
Location
V2
when
Building
Route
With
Vehicle
That
Has
Same
Start
And
End
Location
route
Must
Have
Correct
End
Location
V2
when
Building
Route
With
Vehicle
That
Has
Different
Start
And
End
Location
route
Must
Have
Correct
Departure
Time
when
Building
Route
With
Vehicle
That
Has
Different
Start
And
End
Location
route
Must
Have
Correct
End
Time
when
Setting
Departure
Time
In
Between
Earliest
Start
And
Latest
Arr
route
Must
Have
Correct
Departure
Time
when
Setting
Departure
Earlier
Than
Earliest
Start
route
Must
Have
Earliest
Dep
Time
As
Dep
Time
when
Setting
Departure
Time
Later
Than
Latest
Arrival
route
Must
Have
This
Dep
Time
when
Creating
Empty
Route
it
Must
Return
Empty
Route
when
Ini
Route
With
New
Vehicle
start
Location
Must
Be
Correct
when
Ini
Route
With
New
Vehicle
end
Location
Must
Be
Correct
when
Ini
Route
With
New
Vehicle
dep
Time
Must
Be
Earliest
Dep
Time
Of
New
Vehicle
when
Ini
Route
With
New
Vehicle
dep
Time
Must
Be
Set
Dep
Time
when
Adding
Pickup
it
Should
Be
Treated
As
Pickup
when
Adding
Pickup
it
Should
Be
Added
when
Adding
Delivery
it
Should
Be
Treated
As
Delivery
when
Adding
Delivery
it
Should
Be
Added
when
Two
Shipments
Have
The
Same
Id
they
References
Should
Be
Un
Equal
when
Two
Shipments
Have
The
Same
Id
they
Should
Be
Equal
when
Shipment
Is
Instantiated
With
A
Size
Of10
the
Size
Should
Be10
when
Shipment
Is
Built
With
Negative
Demand
it
Should
Throw
Exception
when
Shipment
Is
Built
With
Negative
Demand
it
Should
Throw
Exception
v2
when
Id
Is
Null
it
Should
Throw
Exception
when
Calling
For
A
New
Builder
Instance
it
Should
Return
Builder
Correctly
when
Neither
Pickup
Location
Id
Nor
Pickup
Coord
it
Throws
Exception
when
Neither
Delivery
Location
Id
Nor
Delivery
Coord
it
Throws
Exception
when
Pickup
Location
Id
Is
Set
it
Should
Be
Done
Correctly
when
Pickup
Location
Is
Null
it
Throws
Exception
when
Pickup
Coord
Is
Set
it
Should
Be
Done
Correctly
when
Delivery
Location
Id
Is
Set
it
Should
Be
Done
Correctly
when
Delivery
Coord
Is
Set
it
Should
Be
Done
Correctly
when
Pickup
Service
Time
Is
Not
Set
it
Should
Be
Zero
when
Delivery
Service
Time
Is
Not
Set
it
Should
Be
Zero
when
Pickup
Service
Time
Is
Set
it
Should
Be
Done
Correctly
when
Pickup
Service
Is
Smaller
Than
Zero
it
Should
Throw
Exception
when
Delivery
Service
Time
Is
Set
it
Should
Be
Done
Correctly
when
Delivery
Service
Is
Smaller
Than
Zero
it
Should
Throw
Exception
when
Pickup
Time
Window
Is
Not
Set
it
Should
Be
The
Default
One
when
Pickup
Time
Window
Is
Null
it
Should
Throw
Exception
when
Pickup
Time
Window
Is
Set
it
Should
Be
Done
Correctly
when
Delivery
Time
Window
Is
Not
Set
it
Should
Be
The
Default
One
when
Delivery
Time
Window
Is
Null
it
Should
Throw
Exception
when
Delivery
Time
Window
Is
Set
it
Should
Be
Done
Correctly
when
Using
Add
Delivery
Time
Window
it
Should
Be
Done
Correctly
when
Using
Add
Delivery
Time
Window2
it
Should
Be
Done
Correctly
when
Adding
Multiple
Delivery
Time
Windows
it
Should
Be
Done
Correctly
when
Adding
Multiple
Overlapping
Delivery
Time
Windows
it
Should
Throw
Exception
when
Using
Add
Pickup
Time
Window
it
Should
Be
Done
Correctly
when
Using
Add
Pickup
Time
Window2
it
Should
Be
Done
Correctly
when
Adding
Multiple
Pickup
Time
Windows
it
Should
Be
Done
Correctly
when
Adding
Multiple
Overlapping
Pickup
Time
Windows
it
Should
Throw
Exception
when
Shipment
Has
Negative
Capacity
Val
throw
Illegal
State
Expception
when
Adding
Two
Cap
Dimension
nu
Of
Dims
Should
Be
Two
when
Shipment
Is
Built
Without
Specifying
Capacity
it
Should
Hv
Cap
With
One
Dim
And
Dim
Val
Of
Zero
when
Shipment
Is
Built
With
Constructor
Where
Size
Is
Specified
capacity
Should
Be
Set
Correctly
when
Adding
Skills
they
Should
Be
Added
Correctly
when
Adding
Skills
Case
Sens
they
Should
Be
Added
Correctly
when
Adding
Skills
Case
Sens
V2
they
Should
Be
Added
Correctly
name
Should
Be
Assigned
when
Setting
Location
it
Should
Work
when
Setting
Priorities
it
Should
Be
Set
Correctly
when
Setting
Priorities
it
Should
Be
Set
Correctly2
when
Setting
Priorities
it
Should
Be
Set
Correctly3
when
Not
Setting
Priorities
default
Should
Be2
when
Setting
Incorrect
Priorities
it
Should
Throw
Exception
when
Setting
Incorrect
Priorities
it
Should
Throw
Exception2
when
Setting
User
Data
it
Is
Associated
With
The
Job
when
Adding
Max
Time
In
Vehicle
it
Should
Be
Set
when
Not
Adding
Max
Time
In
Vehicle
it
Should
Be
Default
test
Shipment
Activities
when
Neither
Location
Id
Nor
Coord
Is
Set
it
Throws
Exception
when
Adding
Two
Cap
Dimension
nu
Of
Dims
Should
Be
Two
when
Pickup
Is
Built
Without
Specifying
Capacity
it
Should
Hv
Cap
With
One
Dim
And
Dim
Val
Of
Zero
when
Pickup
Is
Built
With
Constructor
Where
Size
Is
Specified
capacity
Should
Be
Set
Correctly
when
Adding
Skills
they
Should
Be
Added
Correctly
when
Adding
Skills
Case
Sens
they
Should
Be
Added
Correctly
when
Adding
Skills
Case
Sens
V2
they
Should
Be
Added
Correctly
name
Should
Be
Assigned
when
Setting
Priorities
it
Should
Be
Set
Correctly
when
Not
Setting
Priorities
default
Should
Be
when
Adding
Max
Time
In
Vehicle
it
Should
Be
Set
when
Not
Adding
Max
Time
In
Vehicle
it
Should
Be
Default
when
Setting
User
Data
it
Is
Associated
With
The
Job
when
Two
Services
Have
The
Same
Id
their
References
Should
Be
Un
Equal
when
Two
Services
Have
The
Same
Id
they
Should
Be
Equal
no
Name
when
Capacity
Dim
Value
Is
Negative
throw
Illegal
State
Expception
when
Adding
Two
Cap
Dimension
nu
Of
Dims
Should
Be
Two
when
Shipment
Is
Built
Without
Specifying
Capacity
it
Should
Hv
Cap
With
One
Dim
And
Dim
Val
Of
Zero
when
Shipment
Is
Built
With
Constructor
Where
Size
Is
Specified
capacity
Should
Be
Set
Correctly
when
Calling
For
New
Instance
Of
Builder
it
Should
Return
Builder
Correctly
when
Setting
No
Type
it
Should
Return
service
when
Setting
Location
it
Should
Be
Set
Correctly
when
Setting
Location
it
Should
Work
when
Setting
Location
Coord
it
Should
Be
Set
Correctly
when
Service
Time
Smaller
Zero
throw
Illegal
State
Exception
when
Setting
Service
Time
it
Should
Be
Set
Correctly
when
Time
Window
Is
Null
throw
Exception
when
Setting
Time
Window
it
Should
Be
Set
Correctly
when
Adding
Skills
they
Should
Be
Added
Correctly
when
Adding
Skills
Case
Sens
they
Should
Be
Added
Correctly
when
Adding
Several
Time
Windows
it
Should
Be
Set
Correctly
when
Adding
Time
Window
it
Should
Be
Set
Correctly
when
Adding
Skills
Case
Sens
V2
they
Should
Be
Added
Correctly
name
Should
Be
Assigned
should
Know
Multiple
Time
Windows
when
Multiple
TW
Overlap
throw
Ex
when
Multiple
TW
Overlap2
throw
Ex
when
Setting
Priorities
it
Should
Be
Set
Correctly
when
Setting
Priorities
it
Should
Be
Set
Correctly2
when
Setting
Priorities
it
Should
Be
Set
Correctly3
when
Not
Setting
Priorities
default
Should
Be2
when
Setting
Incorrect
Priorities
it
Should
Throw
Exception
when
Setting
Incorrect
Priorities
it
Should
Throw
Exception2
when
Adding
Max
Time
In
Vehicle
it
Should
Throw
Ex
when
Not
Adding
Max
Time
In
Vehicle
it
Should
Be
Default
when
Setting
User
Data
it
Is
Associated
With
The
Job
test
Service
Activity
when
Neither
Location
Id
Nor
Coord
Is
Set
it
Throws
Exception
when
Adding
Two
Cap
Dimension
nu
Of
Dims
Should
Be
Two
when
Pickup
Is
Built
Without
Specifying
Capacity
it
Should
Hv
Cap
With
One
Dim
And
Dim
Val
Of
Zero
when
Pickup
Is
Built
With
Constructor
Where
Size
Is
Specified
capacity
Should
Be
Set
Correctly
when
Adding
Skills
they
Should
Be
Added
Correctly
when
Adding
Skills
Case
Sens
they
Should
Be
Added
Correctly
when
Adding
Skills
Case
Sens
V2
they
Should
Be
Added
Correctly
name
Should
Be
Assigned
when
Setting
Priorities
it
Should
Be
Set
Correctly
when
Not
Setting
Priorities
default
Should
Be
when
Setting
User
Data
it
Is
Associated
With
The
Job
when
Adding
Max
Time
In
Vehicle
it
Should
Throw
Ex
when
Not
Adding
Max
Time
In
Vehicle
it
Should
Be
Default
when
Setting
Simply
One
Cap
Dimension
nu
Of
Dimension
Must
Be
Correct
when
Setting
Two
Cap
Dimension
nu
Of
Dimension
Must
Be
Correct
when
Setting
Random
Nu
Of
Cap
Dimension
nu
Of
Dimension
Must
Be
Correct
when
Setting
One
Dim
Value
value
Must
Be
Correct
when
Getting
Index
Which
Is
Higher
Than
Nu
Of
Cap
Dimensions
it
Should
Return0
when
Setting
No
Dim
Default
Is
One
Dim
With
Dim
Value
Of
Zero
when
Copying
Capacity
With
Two
Cap
Dim
copied
Obj
Should
Hv
Same
Nu
Of
Dims
when
Copying
Capacity
With
Two
Cap
Dim
copied
Obj
Should
Hv
Same
Values
when
Copying
Null
it
Should
Return
Null
when
Adding
Up
Two
One
Dimensional
Capacities
it
Should
Return
Correct
Capacity
Values
when
Adding
Up
Two
One
Dimensional
Capacities
it
Should
Return
Correct
Nu
Of
Dimensions
when
Adding
Up
Two
Three
Dimensional
Capacities
it
Should
Return
Correct
Nu
Of
Dimensions
when
Adding
Up
Two
Three
Dimensional
Capacities
it
Should
Return
Correct
Cap
Values
when
Adding
Up
Two
Capacities
With
Different
Nu
Of
Dimensions
it
Should
Add
Them
Correctly
when
One
Of
Args
Is
Null
When
Adding
it
Should
Throw
Exception
when
Subtracting
Two
One
Dimensional
Capacities
it
Should
Return
Correct
Capacity
Values
when
Subtracting
Two
One
Dimensional
Capacities
it
Should
Return
Correct
Nu
Of
Dimensions
when
Subtracting
Two
Three
Dimensional
Capacities
it
Should
Return
Correct
Nu
Of
Dimensions
when
Subtracting
Two
Three
Dimensional
Capacities
it
Should
Return
Correct
Cap
Values
when
Subtracting
Two
Capacities
With
Different
Nu
Of
Dimensions
it
Should
Subtract
Correctly
when
One
Of
Args
Is
Null
When
Subtracting
it
Should
Throw
Exception
when
Subtracting
Bigger
From
Lower
it
Should
Subtract
Correctly
when
One
Cap
Is
Less
Than
Another
it
Should
Return
Correct
Boolean
when
One
Cap
Is
Less
Than
Another
it
Should
Return
Correct
Boolean
v2
when
One
Cap
Is
Less
Than
Another
it
Should
Return
Correct
Boolean
v3
when
One
Cap
Is
Bigger
Than
Another
it
Should
Return
Correct
Boolean
when
One
Cap
Is
Bigger
Than
Another
greater
Or
Equal
Should
Return
True
when
One
Cap
Is
Bigger
Than
Another
greater
Or
Equal
Should
Return
True
v2
when
One
Cap
Is
Equal
To
Another
greater
Or
Equal
Should
Return
True
when
Adding
Two
it
Should
Return
Correct
Cap
when
Adding
Two
it
Should
Return
Correct
Cap
v2
when
Inverting
Cap
it
Should
Be
Done
Correctly
when
Determining
The
Maximum
Of
Two
Capacities
it
Should
Return
Cap
With
Max
Of
Each
Dimension
when
Determining
The
Maximum
Of
Two
Capacities
it
Should
Return
Cap
With
Max
Of
Each
Dimension
v2
when
Determining
The
Maximum
Of
Two
Capacities
it
Should
Return
Cap
With
Max
Of
Each
Dimension
v3
when
Dividing
Two
Capacities
it
Should
Return05
when
Dividing
Two
Equal
Capacities
it
Should
Return10
when
Dividing
Two
Capacities
it
Should
Return00
when
Dividing
By
A
Zero
Dim
it
Should
Throw
Exception
when
Both
Dim
Of
Nominator
And
Denominator
Are
Zero
division
Should
Ignore
This
Dim
when
Dividing
Zero
Caps
it
Should
Return
Zero
should
Be
Equal
should
Be
Equal2
when
Index
Set
build
Location
when
Name
Set
build
Location
when
Index
Set
Wit
Factory
return
Correct
Location
when
Index
Smaller
Zero
throw
Exception
when
Coordinate
And
Id
And
Index
Not
Set
throw
Exception
when
Id
Set
build
when
Id
Set
With
Factory
return
Correct
Location
when
Coordinate
Set
build
when
Coordinate
Set
With
Factory
return
Correct
Location
when
Setting
User
Data
it
Is
Associated
With
The
Location
when
Skills
Added
they
Should
Bein
Skill
Set
when
Skills
Added
Case
Insensitive
they
Should
Bein
Skill
Set
when
Skills
Added
Case
Insensitive2
they
Should
Bein
Skill
Set
when
Skills
Added
Through
Add
All
they
Should
Bein
Skill
Set
when
Skills
Added
Through
Add
All
Case
Insensitive
they
Should
Bein
Skill
Set
when
Skills
Added
Through
Add
All
Case
Insensitive2
they
Should
Bein
Skill
Set
when
Skills
Added
Preceding
Whitespace
Should
Not
Matter
when
Skills
Added
Trailing
Whitespace
Should
Not
Matter
when
Skills
Added
Trailing
Whitespace
Should
Not
Matter2
do
Before
route
Should
Be
Assigned
job
Should
Be
Assigned
vehicle
Should
Be
Assigned
driver
Should
Be
Assigned
dep
Time
Should
Be
Assigned
related
Activities
Should
Be
Assigned
related
Activity
Context
Should
Be
Assigned
test
Algo
read
Demand
Quantities
read
Distances
it
Should
Find
The
Best
Known
Solution
when
Return
To
Depot
it
Should
Work
With
Matrix
when
Not
Return
To
Depot
it
Should
Work
With
Matrix
when
Calc
Time
With
Solution
Analyser
it
Should
Work
create
Vrp
With
Location
Indeces
And
Matrix
get
Index
it
Should
Solve
Problem
With
Ini
Solution
Externally
Created
service2Should
Not
Be
Inserted
service2Should
Be
Inserted
Into
New
Vehicle
service2Should
Be
Inserted
test
compare
setup
get
Coord
get
Distance
get
Transport
Time
get
Transport
Cost
create
Activities
when
Inserting
The
First
Job
In
An
Empty
Tour
With
Vehicle
it
Calculates
Marginal
Cost
Changes
when
Inserting
The
Second
Job
In
An
Non
Empty
Tour
With
Vehicle
it
Calculates
Marginal
Cost
Changes
when
Inserting
Third
Job
With
Vehicle
it
Calculates
Marginal
Cost
Changes
when
Inserting
Third
Job
With
New
Vehicle
it
Calculates
Marginal
Cost
Changes
when
Inserting
A
Second
Job
With
A
Vehicle
it
Calculates
Local
Marginal
Cost
Changes
when
Inserting
A
Second
Job
With
A
New
Vehicle
it
Calculates
Local
Marginal
Cost
Changes
when
Inserting
Job
And
Curr
Route
Is
Empty
access
Eggress
Calc
Should
Return
Zero
when
Inserting
Job
And
Curr
Route
And
Vehicle
Have
The
Same
Location
access
Eggress
Calc
Should
Return
Zero
when
Inserting
Job
And
Curr
Route
And
New
Vehicle
Have
Different
Locations
access
Eggress
Costs
Must
Be
Correct
get
Distance
get
Transport
Time
get
Transport
Cost
when
Having
Shipments
And
Services
In
One
Problem
and
Insertion
Should
Be
Made
On
Route
Level
throw
Exception
when
Having
Only
Services
In
One
Problem
and
Insertion
Should
Be
Made
On
Route
Level
it
Should
Assert
True
setup
get
Distance
get
Transport
Time
get
Transport
Cost
create
Activities
when
Inserting
The
First
Job
In
An
Empty
Tour
With
Vehicle
it
Calculates
Marginal
Cost
Changes
when
Inserting
Third
Job
With
Vehicle
it
Calculates
Marginal
Cost
Changes
when
Inserting
Third
Job
With
New
Vehicle
it
Calculates
Marginal
Cost
Changes
when
Inserting
A
Second
Job
With
A
Vehicle
it
Calculates
Local
Marginal
Cost
Changes
when
Inserting
A
Second
Job
With
A
New
Vehicle
it
Calculates
Local
Marginal
Cost
Changes
when
Inserting
Service
And
Route
Is
Closed
it
Inserts
Correctly
loc
when
Inserting
Service
And
Route
Is
Open
it
Inserts
Correctly
And
Switches
End
Location
get
Tour
Activities
when
Inserting
Shipment
And
Route
Is
Closed
it
Inserts
Correctly
get
Tour
Activities
when
Inserting
Shipment
And
Route
Is
Open
it
Inserts
Correctly
And
Switches
End
Location
when
Switching
Vehicle
And
Route
Is
Closed
new
Start
And
End
Should
Be
The
Location
Of
New
Vehicle
when
Switching
Vehicle
And
Route
Is
Open
end
Location
Should
Be
The
Location
Of
The
Last
Activity
when
Inserting
Shipment
At
Beginning
And
Switching
Vehicle
And
Route
Is
Open
end
Location
Should
Be
The
Location
Of
The
Last
Activity
get
Activity
Cost
get
Activity
Duration
fulfilled
do
Before
when
Calculating
Insertion
Costs
Of
Shipment
it
Should
Return
Correct
Cost
Value
when
Calculating
Insertion
Into
Existing
Route
it
Should
Return
Correct
Costs
get
Tour
Activities
when
Inserting
Shipment
In
Route
With
Not
Enough
Capacity
it
Should
Return
No
Insertion
fulfilled
when
Inserting
Third
Shipment
it
Should
Calc
Correct
Val
when
Inserting
Third
Shipment
it
Should
Calc
Correct
Val2
when
Insterting
Shipment
With
Load
Constraint
Where
Cap
Is
Not
Sufficient
cap
Constraints
Are
Fulfilled
when
Inserting
Service
While
No
Cap
Is
Available
it
Must
Return
No
Insertion
Data
do
Before
get
Activity
Cost
get
Activity
Duration
create
Activities
when
New
Act
In
Between
First
And
Second
and
forward
Looking
Is0
it
Should
Return
Correct
Costs
when
New
Act
With
TW
In
Between
First
And
Second
and
forward
Looking
Is0
it
Should
Return
Correct
Costs
when
New
Act
With
TW
And
Service
Time
In
Between
First
And
Second
and
forward
Looking
Is0
it
Should
Return
Correct
Costs
when
New
Act
With
TW
And
Service
Time
In
Between
First
And
Second
and
forward
Looking
Is3
it
Should
Return
Correct
Costs
when
New
Act
In
Between
Second
And
Third
and
forward
Looking
Is0
it
Should
Return
Correct
Costs
when
New
Act
In
Between
Second
And
Third
and
forward
Looking
Is3
it
Should
Return
Correct
Costs
when
New
Act
With
TW
In
Between
Second
And
Third
and
forward
Looking
Is3
it
Should
Return
Correct
Costs
do
Before
loc
when
Route
Is
Closed
it
Calculates
Cost
Up
To
End
v1
when
Route
Is
Closed
it
Calculates
Cost
Up
To
End
v2
when
Route
Is
Open
it
Calculates
Cost
Up
To
End
v1
when
Route
Is
Open
it
Calculates
Cost
Up
To
End
v2
get
Activity
Cost
get
Activity
Duration
fulfilled
fulfilled
do
Before
create
Insertion
Calculator
when
Inserting
Service
While
No
Cap
Is
Available
it
Must
Return
The
Correct
Insertion
Index
create
Activities
do
Before
loc
when
Adding
Service
Between
Diff
Start
And
End
cost
Must
Be
Correct
when
Adding
Shipment
Between
Diff
Start
And
End
cost
Must
Be
Correct
when
Inserting
Act
Between
Two
Route
Acts
it
Calcs
Marginal
Tp
Costs
when
Inserting
Act
Between
Last
Act
And
End
it
Calcs
Marginal
Tp
Costs
when
Inserting
Act
Between
Two
Route
Acts
And
Route
Is
Open
it
Calcs
Marginal
Tp
Costs
when
Inserting
Act
Between
Last
Act
And
End
And
Route
Is
Open
it
Calculates
Tp
Costs
From
Prev
To
New
Act
test
when
Adding
New
Between
Start
And
Act
it
Should
Calc
Insertion
Costs
Correctly
when
Adding
New
Between
Start
And
Act2
it
Should
Calc
Insertion
Costs
Correctly
when
Adding
New
In
Empty
Route
it
Should
Calc
Insertion
Costs
Correctly
when
Adding
New
Between
Two
Acts
it
Should
Calc
Insertion
Costs
Correctly
when
Adding
New
With
TW
Between
Two
Acts
it
Should
Calc
Insertion
Costs
Correctly
when
Adding
New
With
TW
Between
Two
Acts2
it
Should
Calc
Insertion
Costs
Correctly
when
Adding
New
With
TW
Between
Two
Acts3
it
Should
Calc
Insertion
Costs
Correctly
when
Adding
New
With
TW
Between
Two
Acts4
it
Should
Calc
Insertion
Costs
Correctly
when
Adding
New
With
TW
Between
Two
Acts4With
Var
Start
it
Should
Calc
Insertion
Costs
Correctly
when
Adding
New
With
TW
Between
Two
Acts3With
Var
Start
it
Should
Calc
Insertion
Costs
Correctly
get
State
Manager
do
Before
get
Activity
Cost
get
Activity
Duration
create
Activities
when
New
Service
Need
To
Be
Inserted
it
Should
Return
Correct
Insertion
Costs
create
Activities
when
New
Service
Need
To
Be
Inserted
it
Should
Return
Correct
Insertion
Index
create
Activities
when
New
Service
With
Service
Time
Need
To
Be
Inserted
it
Should
Return
Correct
Insertion
Data
create
Activities
when
New
Service
With
Service
Time
Need
To
Be
Inserted
And
Route
Is
Empty
it
Should
Return
Correct
Insertion
Data
create
Activities
when
New
Service
With
Service
Time
And
TW
Need
To
Be
Inserted
And
Route
Is
Empty
it
Should
Return
Correct
Insertion
Data
create
Activities
do
Before
when
Having2Vehicle
calc
Insertion
Of
Cheapest
when
Having2Vehicle
calc
Insertion
Of
Cheapest2
get
Activity
Cost
get
Activity
Duration
fulfilled
do
Before
when
Calculating
Insertion
Costs
Of
Shipment
it
Should
Return
Correct
Cost
Value
when
Calculating
Insertion
Into
Existing
Route
it
Should
Return
Correct
Costs
get
Tour
Activities
when
Inserting
Shipment
In
Route
With
Not
Enough
Capacity
it
Should
Return
No
Insertion
fulfilled
when
Inserting
Third
Shipment
it
Should
Calc
Correct
Val
when
Inserting
Third
Shipment
it
Should
Calc
Correct
Val2
when
Insterting
Shipment
With
Load
Constraint
Where
Cap
Is
Not
Sufficient
cap
Constraints
Are
Fulfilled
when
Inserting
Shipment
With
Load
Constraint
Where
Cap
Is
Not
Sufficient
cap
Constraints
Are
Fulfilled
V2
when
Inserting
Service
While
No
Cap
Is
Available
it
Must
Return
No
Insertion
Data
do
Before
when
Old
Vehicle
Is
Null
And
Solution
Complete
it
Should
Return
Fixed
Costs
Of
New
Vehicle
when
Old
Vehicle
Is
Null
And
Solution
Is0Percent
Complete
it
Should
Return
No
Fixed
Costs
when
Old
Vehicle
Is
Null
And
Solution
Is50Percent
Complete
it
Should
Return
Avg
Of
Rel
Fixed
And
Abs
Fixed
Cost
Of
New
Vehicle
when
Old
Vehicle
Is
Null
And
Solution
Is75Percent
Complete
it
Should
Return
Avg
Of
Rel
Fixed
And
Abs
Fixed
Cost
Of
New
Vehicle
when
Old
Vehicle
Is
Null
And
Solution
Complete
And
Weight
Is05
it
Should
Return
Half
Of
Fixed
Costs
Of
New
Vehicle
when
Old
Vehicle
Is
Null
And
Solution
Is0Percent
Complete
And
Weight
Is05
it
Should
Return
Half
Of
No
Fixed
Costs
when
Old
Vehicle
Is
Null
And
Solution
Is50Percent
Complete
And
Weight
Is05
it
Should
Return
Half
Of
Avg
Of
Rel
Fixed
And
Abs
Fixed
Cost
Of
New
Vehicle
when
Old
Vehicle
Is
Null
And
Solution
Is75Percent
Complete
And
Weight
Is05
it
Should
Return
Half
Of
Avg
Of
Rel
Fixed
And
Abs
Fixed
Cost
Of
New
Vehicle
when
Old
Vehicle
Is
Not
Null
And
Solution
Complete
it
Should
Return
Half
Of
Fixed
Costs
Of
New
Vehicle
when
Old
Vehicle
Is
Not
Null
And
Solution
Is0Percent
Complete
it
Should
Return
No
Fixed
Costs
when
Old
Vehicle
Is
Not
Null
And
Solution
Is50Percent
Complete
it
Should
Correct
Val
when
Old
Vehicle
Is
Not
Null
And
Solution
Is75Percent
Complete
it
Should
Return
Correct
Val
when
Old
Vehicle
Is
Not
Null
And
Solution
Complete
And
Weight
Is05
it
Should
Return
Correct
Val
when
Old
Vehicle
Is
Not
Null
And
Solution
Is0Percent
Complete
And
Weight
Is05
it
Should
Return
Correct
Val
when
Old
Vehicle
Is
Not
Null
And
Solution
Is50Percent
Complete
And
Weight
Is05
it
Should
Return
Correct
Val
when
Old
Vehicle
Is
Not
Null
And
Solution
Is75Percent
Complete
And
Weight
Is05
it
Should
Return
Correct
Val
when
Old
Vehicle
Is
Not
Null
And
Current
Load
Is25And
Solution
Is50Percent
Complete
And
Weight
Is05
it
Should
Return
Correct
Val
when
Old
Vehicle
Is
Not
Null
And
Current
Load
Is25And
Solution
Is75Percent
Complete
And
Weight
Is05
it
Should
Return
Correct
Val
when
Old
Vehicle
Is
Not
Null
And
Current
Load
Is25And
Solution
Is50Percent
Complete
And
Weight
Is05With
Multiple
Cap
Dims
it
Should
Return
Correct
Val
when
Old
Vehicle
Is
More
Expensive
small
VS
Medium
Abs
Costs
small
VS
Large
Abs
Costs
large
VS
Medium
Abs
Costs
medium
VS
Large
Abs
Costs
when
Old
Vehicle
Is
More
Expensive2
when
Old
Vehicle
Is
Not
Null
And
Current
Load
Is25And
Solution
Is75Percent
Complete
And
Weight
Is05With
Multiple
Cap
Dims
it
Should
Return
Correct
Val
no
Routes
Should
Be
Correct
no
Jobs
In
Route
Should
Be
Correct
s1Should
Be
Added
First
solution
With
Fast
Regret
Must
Be
Correct
begin
visit
finish
fulfilled
solution
With
Constraint
And
With
Fast
Regret
Must
Be
Correct
solution
With
Constraint
And
With
Fast
Regret
Concurrent
Must
Be
Correct
shipment1Should
Be
Added
First
get
Shipment
Calculator
get
Insertion
Data
inform
Before
Job
Insertion
is
Correct
get
Calculator
get
Insertion
Data
get
Marginal
Cost
get
Cost
do
Before
create
Activities
when
Vehicle
Route
Has
Pickup
And
Delivery
And
Pickup
latest
Start
Time
Of
Act3Must
Be
Correct
when
Vehicle
Route
Has
Pickup
And
Delivery
And
Pickup
latest
Start
Time
Of
Act2Must
Be
Correct
when
Vehicle
Route
Has
Pickup
And
Delivery
And
Pickup
latest
Start
Time
Of
Act1Must
Be
Correct
do
Before
get
test
With
Shipment
do
Before
when
Updating
Route
skills
At
Route
Level
Should
Contain
All
Skills
do
Before
create
Activities
create
Activities
create
Activities
load
At
End
Should
Be15
load
At
Beginning
Should
Be0
load
At
Act1Should
Be10
load
At
Act2Should
Be15
future
Max
Loat
At
Act1Should
Be15
future
Max
Loat
At
Act2Should
Be15
past
Max
Loat
At
Act1Should
Be0
past
Max
Loat
At
Act2Should
Be10
when
pdroute
load
At
End
Should
Be10
when
pdroute
load
At
Beginning
Should
Be5
when
pdroute
load
At
Act1Should
Be15
when
pdroute
load
At
Act2Should
Be10
when
pdroute
future
Max
Loat
At
Act1Should
Be15
when
pdroute
future
Max
Loat
At
Act2Should
Be10
when
pdroute
past
Max
Loat
At
Act1Should
Be15
when
pdroute
past
Max
Loat
At
Act2Should
Be10
when
shipmentroute
load
At
End
Should
Be0
when
shipmentroute
load
At
Beginning
Should
Be0
when
shipmentroute
load
At
Act1Should
Be10
when
shipmentroute
load
At
Act2Should
Be15
when
shipmentroute
load
At
Act3Should
Be10
when
shipmentroute
load
At
Act4Should
Be0
when
shipmentroute
future
Max
Loat
At
Act1Should
Be15
when
shipmentroute
future
Max
Loat
At
Act2Should
Be15
when
shipmentroute
future
Max
Loat
At
Act3Should
Be10
when
shipmentroute
future
Max
Loat
At
Act4Should
Be0
when
shipmentroute
past
Max
Loat
At
Act1Should
Be10
when
shipmentroute
past
Max
Loat
At
Act2Should
Be10
when
shipmentroute
past
Max
Loat
At
Act3Should
Be15
when
shipmentroute
past
Max
Loat
At
Act4Should
Be15
do
Before
when
Pickup
Activity
Is
Inserted
And
Load
Is
Sufficient
return
Full
Filled
when
Pickup
Activity
Is
Inserted
And
Load
Is
Not
Sufficient
return
NOT
Full
Filled
when
Delivery
Activity
Is
Inserted
And
Load
Is
Sufficient
return
Full
Filled
create
Activities
get
Route
do
Before
when
Internal
Route
State
Is
Set
it
Must
Be
Set
Correctly
when
Internal
Route
State
Is
Not
Set
it
Should
Return
Null
when
Vehicle
Dependent
Internal
Route
State
Is
Set
it
Must
Be
Set
Correctly
when
Vehicle
Dependent
Internal
Route
State
Is
Not
Set
it
Must
Be
Set
Correctly
when
Route
State
Is
Set
With
Generic
Method
And
Boolean
it
Must
Be
Set
Correctly
when
Route
State
Is
Set
With
Generic
Method
And
Integer
it
Must
Be
Set
Correctly
when
Route
State
Is
Set
With
Generic
Method
And
Capacity
it
Must
Be
Set
Correctly
when
Activity
State
Is
Set
With
Generic
Method
And
Boolean
it
Must
Be
Set
Correctly
when
Activity
State
Is
Set
With
Generic
Method
And
Integer
it
Must
Be
Set
Correctly
when
Activity
State
Is
Set
With
Generic
Method
And
Capacity
it
Must
Be
Set
Correctly
when
Problem
State
Is
Set
it
Must
Be
Set
Correctly
when
Problem
State
Is
Set
And
State
Manager
Cleared
Afterwards
it
Throws
Exception
when
Problem
State
Is
Set
And
State
Manager
Cleared
Afterwards
it
Returns
Null
when
Creating
New
State
it
Should
Have
An
Index
when
Creating
New
States
they
Should
Have
An
Index
when
Creating
Two
States
With
The
Same
Name
they
Should
Have
The
Same
Index
when
Creating
A
Vehicle
Dependent
Route
State
it
Should
Be
Memorized
when
Creating
A
Vehicle
Dependent
Activity
State
it
Should
Be
Memorized
when
Memorizing
Vehicle
Info
it
Should
Be
Memorized
when
Memorizing
Two
Vehicle
Info
For
Route
it
Should
Be
Memorized
when
Memorizing
Two
Vehicle
Info
For
Act
it
Should
Be
Memorized
when
Clearing
arr
Elements
Should
Be
Null
array
Ini
Should
Work
do
Before
create
Activities
get
when
Switch
Is
Not
Allowed
it
Should
Cal
Only
States
Of
Current
Vehicle
state
Manager
Should
Have
Memorized
Correct
Latest
End
Of
Act3
state
Manager
Should
Have
Memorized
Correct
Latest
End
Of
Act3
v2
state
Manager
Should
Have
Memorized
Correct
Latest
End
Of
Act3With
Vehicle2
state
Manager
Should
Have
Memorized
Correct
Latest
End
Of
Act3With
Vehicle3
state
Manager
Should
Have
Memorized
Correct
Latest
End
Of
Act2
state
Manager
Should
Have
Memorized
Correct
Latest
End
Of
Act2
v2
state
Manager
Should
Have
Memorized
Correct
Latest
End
Of
Act2With
Vehicle2
state
Manager
Should
Have
Memorized
Correct
Latest
End
Of
Act2With
Vehicle3
state
Manager
Should
Have
Memorized
Correct
Latest
End
Of
Act2With
Equivalent
Of
Vehicle3
state
Manager
Should
Have
Memorized
Correct
Latest
End
Of
Act1With
Vehicle2
state
Manager
Should
Have
Memorized
Correct
Latest
End
Of
Act1With
Vehicle3
tw
Update
Should
Work
With
Multiple
T
Ws
get
update
Of
Open
Routes
Should
Be
Done
Correctly
capacity
Should
Not
Be
Exceeded
when
Solving
VRPNC1with
Deliveries
With
Jsprit
solutions
Must
No
Be
Worse
Than5Percent
Of
Best
Known
Solution
job2Should
Be
In
Bad
Job
List
due
To
Time
Window
job2Should
Be
In
Bad
Job
List
due
To
Size
when
Reading
Services
it
Should
Calculate
Correctly
when
Reading
Services
using
Jsprit
it
Should
Calculate
Correctly
when
Reading
Pickups
it
Should
Calculate
Correctly
when
Reading
Deliveries
it
Should
Calculate
Correctly
read
Demand
Quantities
As
Services
get
Buffered
Reader
read
Demand
Quantities
As
Pickups
read
Demand
Quantities
As
Deliveries
read
Line
close
read
Distances
do
Before
activity
Times
Should
Consider
Time
Windows
when
Activating
Via
State
Manager
activity
Times
Should
Consider
Time
Windows
create
Algorithm
do
Before
get
Activity
Cost
get
Activity
Duration
create
Algorithm
get
Costs
plain
Setup
Should
Work
with
Time
Windows
Should
Work
get
Activity
Cost
get
Activity
Duration
when
Time
Threshold2000ms
And
Current
Time0
it
Should
Not
Break
get
Current
Time
when
Time
Threshold2000ms
And
Current
Time2000ms
it
Should
Break
get
Current
Time
it
Should
Terminate
After100
it
Should
Terminate
After1
it
Should
Terminate
After150
when
Running
Jsprit
With
Single
Customer
it
Should
Work
inform
Selected
Strategy
count
when
Activating
Strat
it
Should
Be
Reflected
inform
Selected
Strategy
count
when
Activating
Strat
it
Should
Be
Reflected
V2
inform
Selected
Strategy
count
test
v4
inform
Selected
Strategy
count
strategy
Draw
Should
Be
Reproducible
inform
Selected
Strategy
inform
Selected
Strategy
strategy
Draw
Should
Be
Reproducible
V2
inform
Selected
Strategy
inform
Selected
Strategy
ruined
Jobs
Should
Be
Reproducible
ruin
Starts
ruin
Ends
removed
ruin
Starts
ruin
Ends
removed
ruined
Jobs
Should
Be
Reproducible
V2
ruin
Starts
ruin
Ends
removed
ruin
Starts
ruin
Ends
removed
insertion
Should
Be
Reproducible
inform
Job
Inserted
inform
Job
Inserted
insertion
Should
Be
Reproducible
V2
inform
Before
Job
Insertion
inform
Before
Job
Insertion
compare
it
Should
Make
Correct
Assignment
According
To
Skills
when
A
Null
Module
Is
Added
throw
Exception
when
Strat
Runs
With
One
Module
run
It
Ones
run
And
Get
Solution
get
Name
add
Module
Listener
when
Strat
Runs
With
Two
Module
run
It
Twice
run
And
Get
Solution
get
Name
add
Module
Listener
run
And
Get
Solution
get
Name
add
Module
Listener
when
Strat
Runs
With
N
Module
run
It
N
Times
run
And
Get
Solution
get
Name
add
Module
Listener
when
Selector
Delivers
Null
Solution
throw
Exception
run
And
Get
Solution
get
Name
add
Module
Listener
when
Dealing
With
Open
Route
And
Shipments
insertion
Should
Not
Require
Route
To
Be
Closed
when
Dealing
With
Open
Route
insertion
Should
Not
Require
Route
To
Be
Closed
when
Dealing
With
Open
Route
And
Shipments
algorithm
Should
Calculate
Correct
Costs
when
Dealing
With
Open
Route
algorithm
Should
Calculate
Correct
Costs
when
Dealing
With
Open
Route
And
Great
Circle
Cost
algorithm
Should
Run
Without
Exception
before
when
Solving
nu
Jobs
In
Solution
Should
Be2
when
Solving
nu
Acts
Should
Be2
when
Solving
deliver
Service1
should
Be
In
Route
get
Initial
Job
has
Activity
In
has
Activity
In
has
Activity
In
when
Solving
deliver
Service2
should
Be
In
Route
max
Capacity
Should
Not
Be
Exceeded
second
Act
Is
Pickup
when
All
Jobs
In
Initial
Route
it
Should
Work
build
Without
Time
Constraints
Strategy
Manager
In
Action
adding
Strategy
Is
Successful
Strategy
Manager
In
Action
strategy
Is
Null
throws
Exception
Strategy
Manager
In
Action
probability
Is
Lower
Than
Zero
throws
Exception
it
Should
Return
Strategy2
when
Strat
Weight
Changed
it
Should
Return
Strategy1
it
Should
Return
Strategy1
when
Random
Dices
0point1
returns
Strategy1
when
Random
Dices
0point5
returns
Strategy2
when
Random
Dices
0point0
returns
Strategy1
when
Random
Is
Null
throw
Exception
strategy
Draw
Should
Be
Reproducible
setup
get
Costs
test
VRA
initial
Num
Of
Unassigned
Should
Work
Correctly
proportion
Of
Unassigned
Should
Work
Correctly
proportion
Of
Unassigned
Should
Work
Correctly2
test
test
Algo
read
Demand
Quantities
read
Distances
it
Should
Ruin
Breaks
test
test2
test3
test4
test5
it
Should
Ruin
Two
Obvious
Clusters
when
No
Job
Has
Location
it
Should
Still
Work
get
Nearest
Neighbors
Iterator
initialise
get
Max
Distance
do
Before
when
Requesting
Neighborhood
Of
Target
Job
n
Neighbors
Should
Be
Two
when
Requesting
Neighborhood
Of
Target
Job
s2Should
Be
Neighbor
when
Requesting
Neighborhood
Of
Target
Job
s4Should
Be
Neighbor
when
Requesting
Neighborhood
Of
Target
Job
size
Should
Be4
when
Requesting
More
Neighbors
Than
Existing
it
Should
Return
Max
Neighbors
do
Before
when
Requesting
Neighborhood
Of
Target
Job
n
Neighbors
Should
Be
Two
when
Requesting
Neighborhood
Of
Target
Job
s2Should
Be
Neighbor
when
Requesting
Neighborhood
Of
Target
Job
s4Should
Be
Neighbor
when
Requesting
Neighborhood
Of
Target
Job
size
Should
Be4
when
Requesting
Neighborhood
Of
Target
Job
neighbors
Should
Be
Correct
when
Requesting
More
Neighbors
Than
Existing
it
Should
Return
Max
Neighbors
when
Requesting
Neighbors
For
Zero
Index
Break
it
Should
Return
Empty
Iterator
it
Should
Remove
Correct
Number
it
Should
Remove
Worst
it
Should
Remove
Worst
Two
create
Number
To
Be
Removed
it
Should
Remove
Shipment
create
Number
To
Be
Removed
it
Should
Remove
Shipment
From
Second
Route
create
Number
To
Be
Removed
it
Should
Remove
Service
And
Shipment
From
Second
Route
create
Number
To
Be
Removed
do
Before
get
Coord
distance
Of
Two
Equal
Shipments
Should
Be
Smaller
Than
Any
Other
Distance
when
Services
Have
Same
Location
distance
Should
Be
Zero
main
get
Distance
get
Backward
Transport
Time
get
Backward
Transport
Cost
get
Transport
Cost
get
Transport
Time
when
Vehicle
And
Driver
Is
Null
And
Costs
Does
Not
Provide
A
Method
For
This
throw
Exception
get
Distance
get
Backward
Transport
Time
get
Backward
Transport
Cost
get
Transport
Cost
get
Transport
Time
avg
Distance
Between
Two
Services
Test
avg
Distance
Between
Service
And
Shipment
Test
avg
Distance
Between
Shipment
And
Shipment
Test
it
Should
Ruin
Two
Obvious
Clusters
do
Before
when
Requesting
Neighborhood
Of
Target
Job
n
Neighbors
Should
Be
Two
when
Requesting
Neighborhood
Of
Target
Job
s2Should
Be
Neighbor
when
Requesting
Neighborhood
Of
Target
Job
s4Should
Be
Neighbor
when
Requesting
Neighborhood
Of
Target
Job
size
Should
Be4
when
Requesting
More
Neighbors
Than
Existing
it
Should
Return
Max
Neighbors
when
Requesting
Neighborhood
Of
Target
Job
it
Should
Returnthe
Max
Distance
it
Should
Return
One
Cluster
Of
Size
Two
it
Should
Return
One
Cluster
it
Should
Return
Two
Clusters
do
Not
Ignore
Break
TW
break
Should
Be
Time
when
Solving
VRPNC1With
Pickups
solutions
Must
No
Be
Worse
Than5Percent
Of
Best
Known
Solution
when
Solving
LR101Instance
Of
Li
Lim
solutions
Must
No
Be
Worse
Than5Percent
Of
Best
Known
Solution
create
Solution
With
Cost
setup
respects
The
Zero
Threshold
using
Worst
Cost
Solution
respects
The
Zero
Threshold
using
Better
Cost
Solution
respects
The
Zero
Threshold
using
Same
Cost
Solution
respects
The
Non
Zero
Threshold
using
Worst
Cost
Solution
respects
The
Non
Zero
Threshold
using
Better
Cost
Solution
respects
The
Non
Zero
Threshold
using
Better
But
Below
The
Threshold
Cost
Solution
respects
The
Non
Zero
Threshold
using
Same
Cost
Solution
when
Ini
Threshold
Is
Set
And
Current
Iteration
Is0
it
Should
Just
Accept
Solution
when
Ini
Threshold
Is
Set
And
Current
Iteration
Is500
it
Should
Just
Accept
Solution
when
Ini
Threshold
Is
Set
And
Current
Iteration
Is500
it
Should
Just
Not
Accept
Solution
when
Ini
Threshold
Is
Set
And
Current
Iteration
Is1000
it
Should
Just
Accept
Solution
when
Ini
Threshold
Is
Set
And
Current
Iteration
Is1000
it
Should
Just
Not
Accept
Solution
when
Having
New
Sol
And
Limited
Memory
remove
Worst
And
Add
New
do
Before
when
Employing
Vehicle
With
Different
Working
Shifts
n
Routes
Should
Be
Correct
when
Employing
Vehicle
With
Different
Working
Shifts
certain
Jobs
Can
Never
Be
Assigned
To
Certain
Vehicles
inform
Job
Inserted
when
Employing
Vehicle
With
Different
Working
Shifts
certain
Vehicles
Can
Never
Be
Assigned
To
Certain
Routes
vehicle
Switched
when
Employing
Vehicle
With
Different
Working
Shifts
job2Can
Never
Be
In
Vehicle21
when
Employing
Vehicle
With
Different
Working
Shifts
job1Should
Be
Assigned
Correctly
when
Employing
Vehicle
With
Different
Working
Shifts
job2Should
Be
Assigned
Correctly
when
Employing
Vehicle
With
Different
Working
Shifts
and
vehicle
Switch
Is
Not
Allowed
n
Routes
Should
Be
Correct
when
Employing
Vehicle
With
Different
Working
Shifts
and
vehicle
Switch
Is
Not
Allowed
certain
Jobs
Can
Never
Be
Assigned
To
Certain
Vehicles
inform
Job
Inserted
when
Employing
Vehicle
With
Different
Working
Shifts
and
vehicle
Switch
Is
Not
Allowed
certain
Vehicles
Can
Never
Be
Assigned
To
Certain
Routes
vehicle
Switched
when
Employing
Vehicle
With
Different
Working
Shifts
and
vehicle
Switch
Is
Not
Allowed
job2Can
Never
Be
In
Vehicle21
when
Employing
Vehicle
With
Different
Working
Shifts
and
vehicle
Switch
Is
Not
Allowed
job1Should
Be
Assigned
Correctly
when
Employing
Vehicle
With
Different
Working
Shifts
and
vehicle
Switch
Is
Not
Allowed
job2Should
Be
Assigned
Correctly
when
Using
Jsprit
driver
Times
Should
Be
Met
create
Matrix
contains
Job
get
Route
create
TW
Bug
Problem
when
Setting
Iterations
it
Is
Set
Correctly
when
Setting
Iterations
With
Max
Iterations
it
Is
Set
Correctly
inform
Iteration
Starts
get
Count
Iterations
when
Setting
Iterations
With
Max
Iterations
iter
Are
Executed
Correctly
when
Setting
Iterations
iter
Are
Executed
Correctly
when
Setting
Premature
Termination
it
Is
Executed
Correctly
is
Premature
Break
when
Adding
Premature
Termination
it
Is
Executed
Correctly
is
Premature
Break
when
Adding
Premature
Two
Termination
Criteria
it
Is
Executed
Correctly
is
Premature
Break
is
Premature
Break
when
Having2Solutions
select
Best
when
Having
Only1Solutions
select
This
One
when
Having
No
Solutions
return
Null
when
Having2Solutions
select
Second
when
Having2Solutions
select
First
when
Having
No
Solutions
return
Null
loc
loc
loc
test
test
Meter
when
Adding
Distance
To
Symmetric
Matrix
it
Should
Return
Correct
Values
when
Adding
Distance
To
Asymmetric
Matrix
it
Should
Return
Correct
Values
loc
when
Adding
Time
To
Symmetric
Matrix
it
Should
Return
Correct
Values
when
Adding
Time
And
Distance
To
Symmetric
Matrix
it
Should
Return
Correct
Values2
when
Adding
Time
To
Asymmetric
Matrix
it
Should
Return
Correct
Values
when
Adding
Time
And
Distance
To
Symmetric
Matrix
it
Should
Return
Correct
Values
when
Adding
Time
And
Distance
To
Asymmetric
Matrix
it
Should
Return
Correct
Values
when
Adding
Distance
To
Symmetric
Matrix
it
Should
Return
Correct
Values
when
Adding
Distance
To
Symmetric
Matrix
Using
String
As
Key
it
Should
Return
Correct
Values
when
Adding
Distance
To
Symmetric
Matrix
Where
Key
Already
Exists
it
Should
Override
Values
when
Adding
Distance
To
Symmetric
Matrix
Where
Reverse
Key
Already
Exists
it
Should
Override
Values
when
Adding
Distance
To
Asymmetric
Matrix
it
Should
Return
Correct
Values
loc
when
Requesting
Relation
That
Does
Not
Exist
it
Should
Throw
Exception
when
Adding
Distance
To
Asymmetric
Matrix
Using
String
As
Key
it
Should
Return
Correct
Values
when
Adding
Time
To
Symmetric
Matrix
it
Should
Return
Correct
Values
when
Adding
Time
To
Symmetric
Matrix
Using
String
As
Key
it
Should
Return
Correct
Values
when
Adding
Time
To
Asymmetric
Matrix
it
Should
Return
Correct
Values
when
Requesting
Time
Of
Relation
That
Does
Not
Exist
it
Should
Throw
Exception
when
Adding
Time
To
Asymmetric
Matrix
Using
String
As
Key
it
Should
Return
Correct
Values
when
Adding
Time
To
Asymmetric
Matrix
Using
String
As
Key
it
Should
Return
Correct
Cost
Values
when
Adding
Time
And
Distance
To
Symmetric
Matrix
it
Should
Return
Correct
Values
when
Adding
Time
And
Distance
To
Symmetric
Matrix
Using
String
As
Key
it
Should
Return
Correct
Values
when
Adding
Time
And
Distance
To
Asymmetric
Matrix
it
Should
Return
Correct
Values
when
Adding
Time
And
Distance
To
Asymmetric
Matrix
Using
String
As
Key
it
Should
Return
Correct
Values
when
Adding
Time
And
Distance
To
Asymmetric
Matrix
Using
String
As
Key
it
Should
Return
Correct
Cost
Values
when
Adding
Time
And
Distance
To
Symmetric
Matrix
Using
String
As
Key
and
overrides
Entry
it
Should
Return
Correct
Values
read
build
Shipments
get
Reader
read
Shipments
make
Coord
get
Double
get
Int
six
AM
should
Be
Parsed
Correctly
six
AM
With
White
Space
should
Be
Parsed
Correctly
sixa
M
With
White
Space
should
Be
Parsed
Correctly
sixam
With
White
Space
should
Be
Parsed
Correctly
six
Am
With
White
Space
should
Be
Parsed
Correctly
six
PM
should
Be
Parsed
Correctly
six
PM
With
White
Space
should
Be
Parsed
Correctly
sixp
M
With
White
Space
should
Be
Parsed
Correctly
sixpm
With
White
Space
should
Be
Parsed
Correctly
six
Pm
With
White
Space
should
Be
Parsed
Correctly
six
AM
With
Leading
Zero
should
Be
Parsed
Correctly
six
Hour
twelve
Min
AM
should
Be
Parsed
Correctly
six
Hour
six
Min
AM
should
Be
Parsed
Correctly
six
Hour
six
Min
With
Leading
Zero
AM
should
Be
Parsed
Correctly
six
Hour
twelve
Min
PM
should
Be
Parsed
Correctly
six
Hour
six
Min
PM
should
Be
Parsed
Correctly
six
Hour
six
Min
With
Leading
Zero
PM
should
Be
Parsed
Correctly
six
Hour
six
Min
With
Leading
Zero
twelve
Sec
PM
should
Be
Parsed
Correctly
six
Hour
six
Min
With
Leading
Zero
twelve
Sec
should
Be
Parsed
Correctly
six
Hour
six
Min
With
Leading
Zero
six
Sec
With
Leading
Zero
should
Be
Parsed
Correctly
when
Time
String
Has
No
Digit
it
Throws
Exception
when
Time
String
Has
Milli
Seconds
it
Throws
Exception
zero
Hour
zero
Min
With
Leading
Zero
one
Sec
With
Leading
Zero
should
Be
Parsed
Correctly
when
Sec
Is3600
should
Return
Correct
Time
String
when
Sec
Is4000
should
Return
Correct
Time
String
when
Sec
Is86399
should
Return
Correct
Time
String
should
Return
Single
Job
should
Return
Single
Job
should
Return
Job3
create
Manhattan
Costs
get
Coord
create
Euclidean
Costs
get
Coord
set
Variable
Cost
Projection
Factor
read
set
Coord
Projection
Factor
close
read
Line
make
Coord
get
Reader
set
Time
Projection
Factor
do
Before
should
Return
Correct
Capacity
Reason
Code
should
Return
Correct
Skill
Reason
Code
should
Return
Correct
TW
Reason
Code
should
Return
Correct
Max
Distance
Reason
Code
get
Most
Likely
Test
test
Freq
read
set
Coord
Projection
Factor
close
read
Line
make
Coord
get
Reader
set
Job
Type
do
Before
build
Another
Scenario
With
Only
One
Vehicle
And
Without
Any
Constraints
Before
last
Transport
Costs
Of
Route1Should
Work
last
Transport
Distance
Of
Route1Should
Work
last
Transport
Time
Of
Route1Should
Work
transport
Time
At
Activity
Of
Route1Should
Work
test
Transport
Costs
calc
construction
Should
Work
load
At
Beginning
Of
Route1Should
Work
load
At
Beginning
Of
Route2Should
Work
load
At
End
Of
Route1Should
Work
load
At
End
Of
Route2Should
Work
load
After
Activity
of
Start
Act
Of
Route1Should
Work
load
After
Activity
of
Act1of
Route1Should
Work
load
After
Activity
of
Act2of
Route1Should
Work
load
After
Activity
of
Act3of
Route1Should
Work
load
After
Activity
of
Act4of
Route1Should
Work
load
After
Activity
of
End
Act
Of
Route1Should
Work
load
Before
Activity
of
Start
Act
Of
Route1Should
Work
load
Before
Activity
of
Act1of
Route1Should
Work
load
Before
Activity
of
Act2of
Route1Should
Work
load
Before
Activity
of
Act3of
Route1Should
Work
load
Before
Activity
of
Act4of
Route1Should
Work
load
Before
Activity
of
End
Act
Of
Route1Should
Work
max
Load
Of
Route1Should
Work
pickup
Count
Of
Route1Should
Work
pickup
Count
At
Beginning
Of
Route1Should
Work
pickup
Count
Of
Route1Of
Another
Solution
Should
Work
pickup
Count
At
Beginning
Of
Route1Of
Another
Solution
Should
Work
pickup
Count
on
Solution
Should
Work
pickup
Count
At
Beginning
on
Solution
Should
Work
pickup
Count
on
Another
Solution
Should
Work
pickup
Count
At
Beginning
on
Another
Solution
Should
Work
pickup
Load
Of
Route1Should
Work
pickup
Load
At
Beginning
Of
Route1Should
Work
pickup
Load
Of
Route1Of
Another
Should
Work
pickup
Load
At
Beginning
Of
Route1Of
Another
Should
Work
pickup
Load
on
Solution
Should
Work
pickup
Load
At
Beginning
on
Solution
Should
Work
pickup
Load
on
Another
Solution
Should
Work
pickup
Load
At
Beginning
on
Another
Solution
Should
Work
delivery
Count
Of
Route1Should
Work
delivery
Count
At
End
Of
Route1Should
Work
delivery
Count
Of
Route1Of
Another
Solution
Should
Work
delivery
Count
At
End
Of
Route1Of
Another
Solution
Should
Work
delivery
Count
on
Solution
Should
Work
delivery
Count
At
End
on
Solution
Should
Work
delivery
Count
on
Another
Solution
Should
Work
delivery
Count
At
End
on
Another
Solution
Should
Work
delivery
Load
Of
Route1Should
Work
delivery
Load
At
End
Of
Route1Should
Work
delivery
Load
Of
Route1Of
Another
Solution
Should
Work
delivery
Load
At
End
Of
Route1Of
Another
Solution
Should
Work
delivery
Load
on
Solution
Should
Work
delivery
Load
At
End
on
Solution
Should
Work
delivery
Load
on
Another
Solution
Should
Work
delivery
Load
At
End
on
Another
Solution
Should
Work
operation
Time
Of
Route1Should
Work
waiting
Time
Of
Route1Should
Work
transport
Time
Of
Route1Should
Work
service
Time
Of
Route1Should
Work
distance
Of
Route1Should
Work
waiting
Time
at
Start
Act
Of
Route1Should
Work
waiting
Time
of
Act1of
Route1Should
Work
waiting
Time
of
Act2of
Route1Should
Work
waiting
Time
of
Act3of
Route1Should
Work
waiting
Time
of
Act4of
Route1Should
Work
waiting
Time
of
End
Act
Of
Route1Should
Work
distance
at
Start
Act
Of
Route1Should
Work
distance
of
Act1of
Route1Should
Work
distance
of
Act2of
Route1Should
Work
distance
of
Act3of
Route1Should
Work
distance
of
Act4of
Route1Should
Work
distance
of
End
Act
Of
Route1Should
Work
late
Arrival
Times
at
Start
Act
Of
Route1Should
Work
late
Arrival
Times
of
Act1of
Route1Should
Work
late
Arrival
Times
of
Act2of
Route1Should
Work
late
Arrival
Times
of
Act3of
Route1Should
Work
late
Arrival
Times
of
Act4of
Route1Should
Work
late
Arrival
Times
of
End
Act
Of
Route1Should
Work
late
Arr
Times
Of
Route1Should
Work
variable
Transport
Costs
Of
Route1Should
Work
fixed
Costs
Of
Route1Should
Work
transport
Costs
at
Start
Act
Of
Route1Should
Work
transport
Costs
of
Act1of
Route1Should
Work
transport
Costs
of
Act2of
Route1Should
Work
transport
Costs
of
Act3of
Route1Should
Work
transport
Costs
of
Act4of
Route1Should
Work
transport
Costs
of
End
Act
Of
Route1Should
Work
capacity
Violation
At
Beginning
should
Work
capacity
Violation
At
End
should
Work
capacity
Violation
On
Route
should
Work
When
Violated
capacity
Violation
At
End
should
Work
When
Violated
capacity
Violation
After
Start
should
Work
capacity
Violation
At
Beginning
should
Work
When
Violated
capacity
Violation
After
Start
should
Work
When
Violated
capacity
Violation
After
Act1
should
Work
When
Violated
capacity
Violation
After
Act2
should
Work
When
Violated
capacity
Violation
After
Act3
should
Work
When
Violated
capacity
Violation
After
Act4
should
Work
When
Violated
capacity
Violation
After
Act5
should
Work
When
Violated
capacity
Violation
After
Act6
should
Work
When
Violated
capacity
Violation
After
Act7
should
Work
When
Violated
capacity
Violation
After
Act8
should
Work
When
Violated
capacity
Violation
After
End
should
Work
When
Violated
capacity
Violation
After
Act1
should
Work
capacity
Violation
After
Act2
should
Work
capacity
Violation
After
Act3
should
Work
capacity
Violation
After
Act4
should
Work
capacity
Violation
After
End
should
Work
time
Window
Violation
should
Work
time
Window
Violation
should
Work
When
Violated
time
Window
Violation
At
Start
should
Work
When
Violated
time
Window
Violation
At
Act1
should
Work
When
Violated
time
Window
Violation
At
Act2
should
Work
When
Violated
time
Window
Violation
At
Act3
should
Work
When
Violated
time
Window
Violation
At
Act4
should
Work
When
Violated
time
Window
Violation
At
Act5
should
Work
When
Violated
time
Window
Violation
At
Act6
should
Work
When
Violated
time
Window
Violation
At
Act7
should
Work
When
Violated
time
Window
Violation
At
Act8
should
Work
When
Violated
time
Window
Violation
At
End
should
Work
When
Violated
backhaul
Violation
should
Work
When
Violated
backhaul
Violation
At
Start
should
Work
backhaul
Violation
At
Act1
should
Work
backhaul
Violation
At
Act2
should
Work
backhaul
Violation
At
Act3
should
Work
backhaul
Violation
At
Act4
should
Work
backhaul
Violation
At
Act5
should
Work
backhaul
Violation
At
Act6
should
Work
backhaul
Violation
At
Act7
should
Work
backhaul
Violation
At
Act8
should
Work
backhaul
Violation
At
End
should
Work
shipment
Violation
At
Start
should
Work
shipment
Violation
At
Act1
should
Work
shipment
Violation
At
Act2
should
Work
shipment
Violation
At
Act3
should
Work
shipment
Violation
At
Act4
should
Work
shipment
Violation
At
Act5
should
Work
shipment
Violation
At
Act6
should
Work
shipment
Violation
At
Act7
should
Work
shipment
Violation
At
Act8
should
Work
shipment
Violation
At
End
should
Work
shipment
Violation
should
Work
shipment
Violation
should
Work
When
Violated
shipment
Violation
At
Activity
should
Work
When
Removing
Delivery
shipment
Violation
should
Work
When
Removing
Delivery
shipment
Violation
At
Activity
should
Work
When
Removing
Pickup
shipment
Violation
On
Route
should
Work
When
Removing
Pickup
shipment
Violation
On
Solution
should
Work
When
Removing
Pickup
skill
Violation
On
Route
should
Work
When
Violated
skill
Violation
At
Start
should
Work
skill
Violation
At
Act1
should
Work
skill
Violation
At
Act2
should
Work
skill
Violation
At
Act3
should
Work
skill
Violation
At
Act4
should
Work
skill
Violation
At
End
should
Work
skill
Violation
On
Route
should
Work
When
Not
Violated
skill
Violation
On
Solution
should
Work
backhaul
Violation
On
Solution
should
Work
backhaul
Violation
On
Solution
should
Work
When
Violated
shipment
Violation
On
Solution
should
Work
skill
Violation
On
Solution
should
Work
When
Not
Violated
should
Work
With
Route
Without
Activities
get
Distance
get
Index
set
Index
get
User
Data
set
User
Data
get
Index
set
Index
get
Vehicle
Type
Identifier
set
Vehicle
Identifier
create
Activities
get
Index
make
Array
get
Max
Index
fulfilled
has
Max
Distance
get
Max
Distance
has
Hard
Activity
Constraints
get
Hard
Route
Constraints
get
Critical
Hard
Activity
Constraints
get
High
Prio
Hard
Activity
Constraints
get
Low
Prio
Hard
Activity
Constraints
get
Dependency
Types
set
Dependency
Type
get
Dependency
Type
resolve
Constraints
add
Time
Window
Constraint
add
Load
Constraint
add
Skills
Constraint
add
Constraint
add
Constraint
add
Constraint
add
Constraint
fulfilled
fulfilled
get
Constraints
get
Costs
get
Costs
fulfilled
start
Of
get
Costs
fulfilled
fulfilled
get
Costs
fulfilled
add
Constraint
get
Constraints
get
Costs
add
Constraint
get
Constraints
fulfilled
fulfilled
add
Constraint
get
Constraints
get
Costs
add
Constraint
has
Hard
Activity
Constraints
get
Critical
Constraints
get
High
Prio
Constraints
get
Low
Prio
Constraints
get
All
Constraints
fulfilled
fulfilled
fulfilled
fulfilled
fulfilled
get
Costs
fulfilled
fulfilled
lock
unlock
is
Locked
unlock
All
get
Available
Vehicles
get
Available
Vehicles
get
Available
Vehicle
create
Fleet
Manager
create
Fleet
Manager
new
Instance
add
remove
get
Vehicle
inc
Index
is
Empty
init
to
String
initialize
Vehicle
Types
add
Vehicle
remove
Vehicle
get
Available
Vehicles
get
Available
Vehicles
get
Available
Vehicle
lock
unlock
is
Locked
unlock
All
get
Type
Id
get
Capacity
Dimensions
get
Max
Velocity
get
Vehicle
Cost
Params
get
Profile
get
User
Data
get
Earliest
Departure
get
Latest
Arrival
get
Type
get
Id
is
Return
To
Depot
get
Start
Location
get
End
Location
get
Vehicle
Type
Identifier
get
Skills
get
User
Data
get
Break
new
Instance
to
String
equals
hash
Code
new
Instance
set
User
Data
set
Max
Velocity
set
Fixed
Cost
set
Cost
Per
Distance
set
Cost
Per
Time
set
Cost
Per
Transport
Time
set
Cost
Per
Waiting
Time
set
Cost
Per
Service
Time
build
add
Capacity
Dimension
set
Capacity
Dimensions
set
Profile
equals
hash
Code
get
User
Data
get
Type
Id
get
Vehicle
Cost
Params
to
String
get
Max
Velocity
get
Capacity
Dimensions
get
Profile
equals
hash
Code
to
String
get
Earliest
Departure
get
Latest
Arrival
get
Type
get
Id
is
Return
To
Depot
get
Start
Location
get
End
Location
get
Skills
get
Break
set
Type
set
User
Data
set
Return
To
Depot
set
Start
Location
set
End
Location
set
Earliest
Start
set
Latest
Arrival
add
All
Skills
add
Skill
build
new
Instance
new
Instance
add
Skills
set
Break
copy
Of
create
No
Vehicle
to
String
get
Earliest
Departure
get
Latest
Arrival
get
Type
get
Id
is
Return
To
Depot
get
Start
Location
get
End
Location
get
Skills
get
Break
hash
Code
equals
to
String
extract
Types
lock
unlock
is
Locked
unlock
All
get
Available
Vehicles
get
Available
Vehicles
get
Available
Vehicle
create
Fleet
Manager
new
Instance
create
Activities
inc
Activity
Index
Counter
inc
Vehicle
Type
Id
Index
Counter
get
Location
Map
get
Locations
set
Routing
Cost
set
Job
Activity
Factory
set
Fleet
Size
add
Job
add
Job
add
Location
To
Tentative
Locations
add
Location
To
Tentative
Locations
add
Job
To
Final
Job
Map
And
Create
Activities
add
Breaks
To
Activity
Map
add
Initial
Vehicle
Route
register
Job
And
Activity
add
Initial
Vehicle
Routes
add
Job
To
Final
Map
add
Vehicle
add
Vehicle
inc
Vehicle
Index
Counter
set
Activity
Costs
add
Non
Job
Activities
build
add
Location
add
All
Jobs
add
All
Vehicles
get
Added
Vehicles
get
Added
Vehicle
Types
get
Added
Jobs
to
String
get
Fleet
Size
get
Jobs
get
Jobs
With
Location
get
Jobs
Inclusive
Initial
Jobs
In
Routes
get
Initial
Vehicle
Routes
get
Types
get
Vehicles
get
Transport
Costs
get
Activity
Costs
get
All
Locations
get
Activities
get
Nu
Activities
get
Job
Activity
Factory
copy
And
Get
Activities
addup
subtract
invert
divide
copy
Of
new
Instance
add
Dimension
copy
build
get
Nu
Of
Dimensions
get
is
Less
Or
Equal
is
Greater
Or
Equal
to
String
max
min
equals
hash
Code
create
Solution
get
Costs
copy
Of
empty
Route
new
Instance
new
Instance
create
Activities
set
Job
Activity
Factory
set
Departure
Time
add
Service
add
Service
add
Break
add
Break
add
Break
add
Break
Internally
add
Pickup
add
Pickup
add
Delivery
add
Delivery
add
Pickup
add
Pickup
add
Delivery
add
Delivery
build
get
Activities
get
Tour
Activities
get
Vehicle
get
Driver
set
Vehicle
And
Departure
Time
set
Start
And
End
get
Departure
Time
is
Empty
get
Start
get
End
to
String
get
Activity
State
get
Activity
State
get
Route
State
get
Route
State
visit
visit
finish
visit
begin
add
Activity
Visitor
new
Instance
copy
Of
set
Theoretical
Earliest
Operation
Start
Time
set
Theoretical
Latest
Operation
Start
Time
get
Theoretical
Earliest
Operation
Start
Time
get
Theoretical
Latest
Operation
Start
Time
get
End
Time
set
End
Time
set
Location
get
Location
get
Operation
Time
to
String
get
Name
get
Arr
Time
set
Arr
Time
duplicate
get
Size
get
Activity
Start
Time
get
Name
get
Location
get
Theoretical
Earliest
Operation
Start
Time
get
Theoretical
Latest
Operation
Start
Time
set
Theoretical
Earliest
Operation
Start
Time
set
Theoretical
Latest
Operation
Start
Time
get
Operation
Time
get
Arr
Time
get
End
Time
set
Arr
Time
set
End
Time
duplicate
get
Job
to
String
get
Size
new
Instance
get
Start
get
End
larger
to
String
hash
Code
equals
get
Job
set
Theoretical
Earliest
Operation
Start
Time
set
Theoretical
Latest
Operation
Start
Time
get
Name
get
Location
get
Theoretical
Earliest
Operation
Start
Time
get
Theoretical
Latest
Operation
Start
Time
get
Operation
Time
get
Arr
Time
get
End
Time
set
Arr
Time
set
End
Time
duplicate
to
String
get
Size
get
Arr
Time
set
Arr
Time
get
End
Time
set
End
Time
copy
Of
new
Instance
get
Theoretical
Earliest
Operation
Start
Time
get
Theoretical
Latest
Operation
Start
Time
get
Operation
Time
set
Operation
Time
get
Location
set
Location
get
Job
to
String
set
Theoretical
Earliest
Operation
Start
Time
set
Theoretical
Latest
Operation
Start
Time
get
Name
duplicate
get
Size
new
Instance
copy
Of
get
Theoretical
Earliest
Operation
Start
Time
set
Location
get
Theoretical
Latest
Operation
Start
Time
set
Theoretical
Earliest
Operation
Start
Time
set
Theoretical
Latest
Operation
Start
Time
get
Location
get
Operation
Time
to
String
get
Name
get
Arr
Time
get
End
Time
set
Arr
Time
set
End
Time
duplicate
get
Size
add
get
Time
Windows
to
String
create
Activity
get
Arr
Time
set
Arr
Time
get
End
Time
set
End
Time
copy
Of
new
Instance
hash
Code
equals
get
Theoretical
Earliest
Operation
Start
Time
get
Theoretical
Latest
Operation
Start
Time
set
Theoretical
Earliest
Operation
Start
Time
set
Theoretical
Latest
Operation
Start
Time
get
Operation
Time
get
Location
get
Job
to
String
get
Name
duplicate
get
Size
get
Job
set
Theoretical
Earliest
Operation
Start
Time
set
Theoretical
Latest
Operation
Start
Time
get
Name
get
Location
get
Theoretical
Earliest
Operation
Start
Time
get
Theoretical
Latest
Operation
Start
Time
get
Operation
Time
get
Arr
Time
get
End
Time
set
Arr
Time
set
End
Time
duplicate
to
String
get
Size
get
Location
get
Previous
Location
get
Next
Location
set
Previous
Location
set
Next
Location
duplicate
set
Theoretical
Earliest
Operation
Start
Time
set
Theoretical
Latest
Operation
Start
Time
get
Job
get
Name
get
Location
get
Theoretical
Earliest
Operation
Start
Time
get
Theoretical
Latest
Operation
Start
Time
get
Operation
Time
get
Arr
Time
get
End
Time
set
Arr
Time
set
End
Time
get
Size
duplicate
get
Name
get
Location
set
Theoretical
Earliest
Operation
Start
Time
set
Theoretical
Latest
Operation
Start
Time
get
Theoretical
Earliest
Operation
Start
Time
get
Theoretical
Latest
Operation
Start
Time
get
Operation
Time
get
Arr
Time
get
End
Time
set
Arr
Time
set
End
Time
duplicate
get
Job
to
String
get
Size
get
Activity
Start
Time
get
Time
Windows
create
Activity
begin
visit
finish
create
Pickup
create
Delivery
round
get
Activity
Start
Time
create
Pickup
create
Delivery
begin
visit
finish
copy
Of
has
Next
next
reset
remove
get
Activities
iterator
has
Next
next
remove
is
Empty
get
Jobs
serves
Job
to
String
remove
Job
remove
Activity
add
Activity
add
Activity
add
Job
job
Size
reverse
Activity
Iterator
visit
end
visit
begin
add
Activity
Visitor
copy
Of
get
Routes
get
Cost
set
Cost
get
Unassigned
Jobs
to
String
new
Instance
set
User
Data
set
Pickup
Location
set
Pickup
Service
Time
set
Pickup
Time
Window
set
Delivery
Location
set
Delivery
Service
Time
set
Delivery
Time
Window
add
Size
Dimension
add
All
Size
Dimensions
build
add
Required
Skill
add
All
Required
Skills
add
All
Required
Skills
set
Name
add
Delivery
Time
Window
add
Delivery
Time
Window
add
All
Delivery
Time
Windows
add
Pickup
Time
Window
add
Pickup
Time
Window
add
All
Pickup
Time
Windows
set
Priority
set
Max
Time
In
Vehicle
get
Id
get
Pickup
Location
get
Pickup
Service
Time
get
Delivery
Location
get
Delivery
Service
Time
get
Delivery
Time
Window
get
Delivery
Time
Windows
get
Pickup
Time
Window
get
Pickup
Time
Windows
to
String
hash
Code
equals
get
Size
get
Required
Skills
get
Name
get
Priority
get
Max
Time
In
Vehicle
get
Activities
new
Instance
set
Max
Time
In
Vehicle
build
new
Instance
build
has
Variable
Location
get
Id
get
Size
get
Required
Skills
get
Name
get
Priority
get
Max
Time
In
Vehicle
get
Activities
new
Instance
set
Type
set
Location
set
Service
Time
set
User
Data
add
Size
Dimension
set
Time
Window
add
Time
Window
add
Time
Window
add
All
Time
Windows
build
add
Required
Skill
set
Name
add
All
Required
Skills
add
All
Required
Skills
add
All
Size
Dimensions
set
Priority
set
Max
Time
In
Vehicle
get
Time
Windows
get
Id
get
Location
get
Service
Duration
get
Time
Window
get
Type
to
String
hash
Code
equals
get
Size
get
Required
Skills
get
Name
get
Priority
get
Max
Time
In
Vehicle
get
Activities
set
Time
Windows
set
Service
Time
build
get
Activity
Type
get
Location
get
Time
Windows
get
Service
Time
new
Instance
set
Max
Time
In
Vehicle
build
new
Instance
add
Skill
add
All
Skills
build
values
to
String
contains
Skill
equals
hash
Code
new
Instance
new
Instance
new
Instance
new
Instance
set
User
Data
set
Index
set
Coordinate
set
Id
set
Name
build
get
User
Data
get
Id
get
Index
get
Coordinate
get
Name
equals
hash
Code
to
String
get
Activity
Cost
get
Activity
Duration
get
Transport
Time
get
Distance
get
Transport
Time
get
Transport
Cost
get
Backward
Transport
Time
get
Backward
Transport
Cost
get
Distance
get
Penalty
For
Missed
Time
Window
get
Activity
Cost
get
Activity
Duration
get
Backward
Transport
Cost
get
Backward
Transport
Time
get
Transport
Cost
get
Index
set
Index
get
Id
no
Driver
get
Id
get
Earliest
Start
set
Earliest
Start
get
Latest
End
set
Latest
End
set
Home
Location
get
Home
Location
get
Index
set
Index
get
User
Data
set
User
Data
get
Id
get
Arrival
Time
get
End
Time
get
Insertion
Index
set
Arrival
Time
set
End
Time
set
Insertion
Index
get
Route
get
Job
get
New
Vehicle
get
New
Driver
get
New
Dep
Time
get
Associated
Activities
set
Related
Activity
Context
get
Related
Activity
Context
set
Activity
Context
get
Activity
Context
create
Solution
get
Unassigned
Jobs
set
Insertion
Strategy
set
Route
Level
set
Route
Level
set
Fast
Regret
set
Local
Level
set
Local
Level
consider
Fixed
Costs
set
Activity
Insertion
Cost
Calculator
set
Concurrent
Mode
build
set
Allow
Vehicle
Switch
to
String
get
Insertion
Data
set
Weight
Of
Fix
Cost
to
String
get
Costs
check
Route
Constraints
fulfilled
get
Route
get
Insertion
Data
to
String
insert
Unassigned
Jobs
get
Best
Insertion
inform
vehicles
Different
get
Costs
update
find
Route
get
Comparator
get
Best
score
create
Empty
Insertion
Data
get
Events
get
Additional
Time
add
Failed
Constrain
Name
get
Failed
Constraint
Names
set
Additional
Time
to
String
get
Delivery
Insertion
Index
get
Pickup
Insertion
Index
get
Insertion
Cost
get
Selected
Vehicle
get
Selected
Driver
get
Vehicle
Departure
Time
set
Vehicle
Departure
Time
set
Solution
Completeness
Ratio
get
Solution
Completeness
Ratio
inform
Insertion
Starts
inform
Job
Inserted
get
Initial
Vehicle
Ids
to
String
is
Vehicle
Switch
Allowed
set
Vehicle
Switch
Allowed
get
Insertion
Data
get
Fleet
Manager
is
Vehicle
With
Initial
Route
get
Insertion
Data
compare
set
Time
Window
Param
set
Depot
Distance
Param
score
score
Job
get
Largest
Time
Window
get
Distance
to
String
inform
Insertion
Starts
set
Random
to
String
get
Insertion
Data
set
Departure
Time
Knowledge
get
Costs
to
Depot
is
End
set
Solution
Completeness
Ratio
create
create
inform
get
Additional
Costs
get
Additional
Time
get
Costs
to
String
get
Insertion
Data
calculate
get
Route
get
Insertion
Data
set
Random
insert
Jobs
mark
Unassigned
insert
Unassigned
Jobs
remove
Listener
get
Listeners
add
Listener
insert
Job
set
Scoring
Function
to
String
insert
Unassigned
Jobs
calculate
Best
Job
find
Route
cost
Of
Path
to
String
insert
Unassigned
Jobs
create
Strategy
inform
put
get
Insertion
Data
set
Weight
Of
Fix
Cost
to
String
get
Current
Max
Load
In
Route
get
Costs
geti
Data
get
Version
get
Route
get
Costs
inform
Insertion
Starts
inform
Job
Inserted
score
inform
get
New
Vehicle
get
Vehicle
Route
get
Activity
get
Index
set
Scoring
Function
to
String
insert
Unassigned
Jobs
find
Route
next
Job
get
Scored
Job
score
set
Scoring
Function
to
String
set
Switch
Allowed
get
Initial
Vehicle
Ids
set
Dependency
Types
insert
Unassigned
Jobs
update
Insertion
Data
make
Callables
get
Costs
to
String
get
Insertion
Data
set
Shipment
Insertion
Calculator
Factory
set
Service
Insertion
Calculator
set
Break
Insertion
Calculator
set
Insertion
Strategy
set
Random
set
Route
Level
set
Route
Level
set
Fast
Regret
set
Local
Level
set
Local
Level
consider
Fixed
Costs
set
Activity
Insertion
Cost
Calculator
set
Concurrent
Mode
build
set
Allow
Vehicle
Switch
create
set
Route
Level
set
Route
Level
set
Local
Level
set
Local
Level
consider
Fixed
Costs
set
Activity
Insertion
Cost
Calculator
set
Concurrent
Mode
build
set
Allow
Vehicle
Switch
get
Costs
act
Costs
Old
get
Forward
Looking
Path
set
Forward
Looking
set
Job
Activity
Factory
set
Memory
Size
set
States
set
Nu
Of
Acts
Forward
Looking
to
String
get
Insertion
Data
initialise
Start
And
End
sum
Of
prev
Costs
old
Vehicle
get
Comparator
compare
get
Route
get
Vehicle
get
Departure
Time
get
Empty
Insertion
is
New
Route
get
Job
get
Score
get
Insertion
Data
get
Route
get
Calculator
get
Algorithm
Listener
get
Insertion
Listener
set
Shipment
Calculator
Factory
set
Service
Calculator
Factory
set
Break
Calculator
Factory
set
State
Manager
set
Vehicle
Routing
Problem
set
Vehicle
Fleet
Manager
set
Local
Level
set
Activity
Insertion
Costs
Calculator
set
Route
Level
consider
Fixed
Costs
experimental
Time
Scheduler
build
check
Services
Only
add
Insertion
Listeners
add
Algorithm
Listeners
create
Standard
Local
get
Costs
create
Activities
create
Standard
Route
get
Costs
create
Activities
create
Final
Insertion
set
Constraint
Manager
set
Allow
Vehicle
Switch
get
Insertion
Data
create
Standard
Calculator
get
Insertion
Data
score
insert
Jobs
add
Listener
remove
Listener
get
Listeners
set
Eval
Index
Pickup
set
Eval
Index
Delivery
set
Job
Activity
Factory
to
String
get
Insertion
Data
calculate
to
String
get
Insertion
Data
get
Listeners
inform
Job
Inserted
inform
Vehicle
Switched
inform
Before
Job
Insertion
inform
Insertion
Starts
inform
Insertion
Ends
Listeners
inform
Job
Unassigned
Listeners
add
Listener
remove
Listener
add
All
Listeners
inform
Before
Job
Insertion
inform
Insertion
Starts
vehicle
Switched
inform
Insertion
Ends
inform
Job
Unassigned
inform
Job
Inserted
get
New
Vehicle
get
Vehicle
Route
get
Activity
get
Index
vehicle
Switched
inform
Insertion
Starts
inform
Job
Inserted
handle
Job
Insertion
set
Next
Handler
handle
Job
Insertion
set
Next
Handler
handle
Job
Insertion
set
End
Location
set
Next
Handler
handle
Job
Insertion
set
End
Location
set
Next
Handler
insert
Job
set
Scoring
Function
set
Switch
Allowed
set
Dependency
Types
get
Initial
Vehicle
Ids
to
String
insert
Unassigned
Jobs
update
Insertion
Data
inform
create
inform
Job
Inserted
ruin
Starts
ruin
Ends
removed
inform
Insertion
Starts
set
Vehicles
To
Update
begin
visit
get
Max
Time
In
Vehicle
memorize
Act
Start
finish
finish
act
Start
min
Slack
Time
begin
visit
finish
get
Prev
Location
get
Distance
get
Unique
Vehicles
begin
visit
finish
begin
visit
finish
get
Max
Index
Of
Vehicle
Type
Identifiers
create
State
Id
inc
State
Index
Counter
get
Nu
Vehicle
Types
put
Problem
State
get
Problem
State
clear
fill
three
Dim
Arr
fill
two
Dim
Arr
get
Activity
State
has
Activity
State
get
Activity
State
get
Class
Cast
Exception
get
Route
State
has
Route
State
get
Route
State
put
Activity
State
put
Activity
State
put
Internal
Typed
Activity
State
put
Internal
Typed
Activity
State
put
Route
State
put
Route
State
put
Typed
Internal
Route
State
put
Typed
Internal
Route
State
add
State
Updater
add
All
State
Updater
get
State
Updaters
add
Activity
Visitor
add
Activity
Visitor
add
Route
Visitor
add
Listener
add
Listener
inform
Job
Inserted
inform
Insertion
Starts
re
Calculate
States
inform
Iteration
Starts
ruin
Starts
ruin
Ends
removed
inform
Insertion
Ends
update
Load
States
update
Time
Window
States
time
Window
Update
Is
Activated
update
Skill
States
begin
visit
finish
visit
set
Route
End
To
Last
Activity
begin
visit
finish
begin
visit
finish
create
Id
create
Id
is
Reserved
Id
is
Reserved
Id
throw
Reserved
Id
Exception
get
Index
hash
Code
equals
to
String
visit
begin
visit
finish
begin
visit
finish
begin
visit
finish
begin
visit
finish
insertion
Starts
inform
Insertion
Starts
inform
Job
Inserted
inform
Route
Changed
visit
begin
visit
finish
visit
get
set
Vehicles
To
Update
begin
visit
finish
begin
visit
finish
get
Solution
is
Accepted
get
Strategy
Id
to
String
get
Id
get
Name
set
Name
get
Search
Strategy
Modules
get
Solution
Selector
get
Solution
Acceptor
to
String
run
get
Err
Msg
add
Module
add
Module
Listener
set
Random
get
Strategies
get
Weights
get
Weight
add
Strategy
inform
Strategy
Weight
Changed
update
Sum
Weights
get
Random
Strategy
add
Search
Strategy
Listener
add
Search
Strategy
Module
Listener
add
Core
Constraints
get
create
Calculator
get
Costs
get
Fixed
Costs
to
String
inform
Insertion
Ends
get
Current
Time
set
Time
Getter
to
String
is
Premature
Break
start
now
inform
Algorithm
Starts
get
Remaining
Time
get
Start
Time
to
String
is
Premature
Break
to
String
is
Premature
Break
reset
inform
Algorithm
Starts
inform
Iteration
Ends
inform
Iteration
Ends
to
List
inform
Iteration
Starts
inform
Iteration
Starts
is
Premature
Break
create
Algorithm
to
String
to
String
to
String
create
Algorithm
new
Instance
create
Default
Properties
add
Search
Strategy
set
Vehicle
Fleet
Manager
set
Executor
Service
set
Custom
Acceptor
set
Random
set
Property
set
Property
set
Property
set
State
And
Constraint
Manager
set
Objective
Function
add
Core
State
And
Constraint
Stuff
set
Activity
Insertion
Calculator
set
Regret
Scorer
build
Algorithm
set
Random
create
Number
To
Be
Removed
ini
create
configure
Module
get
Regret
Scorer
handle
Executor
Shutdown
run
inform
Algorithm
Ends
get
Property
to
Boolean
to
Integer
to
Double
get
Objective
Function
get
Costs
inform
Iteration
Starts
get
Costs
set
Random
inform
Iteration
Starts
get
Costs
set
Random
create
Algorithm
create
Greedy
Algorithm
Builder
add
Termination
is
Premature
Break
inc
Counter
reset
add
Initial
Solution
verify
And
Adapt
Solution
set
Premature
Algorithm
Termination
add
Termination
Criterion
get
Search
Strategy
Manager
search
Solutions
add
Best
Ever
log
log
log
memorize
If
Best
Ever
selected
Strategy
algorithm
Ends
get
Algorithm
Listeners
add
Listener
iteration
Ends
iteration
Starts
algorithm
Starts
set
Max
Iterations
get
Max
Iterations
get
Objective
Function
new
Instance
set
Random
with
Strategy
construct
Initial
Solution
With
build
add
Arbitrary
Listener
search
Schrimpf
And
Register
add
Core
State
And
Constraint
Stuff
with
Objective
Function
set
Random
set
Min
Unassigned
Jobs
To
Be
Reinserted
set
Proportion
Of
Unassigned
Jobs
To
Be
Reinserted
run
And
Get
Solution
get
Name
add
Module
Listener
get
Insertion
get
Ruin
run
And
Get
Solution
get
Name
add
Module
Listener
get
Locations
get
Point
get
Job
compute
set
Random
set
Min
Pts
set
Eps
Factor
set
Eps
Distance
get
Clusters
get
Location
Wrappers
get
Clusters
make
List
get
Job
List
get
Random
Cluster
sample
create
Strategy
ruin
add
Listener
remove
Listener
get
Listeners
inform
Iteration
Starts
get
Point
get
Activity
set
No
Clusters
ruin
Routes
ruin
map
to
String
create
Strategy
has
Next
next
remove
ruin
Routes
ruin
to
String
select
Nu
Of
Jobs2Be
Removed
set
Random
set
Ruin
Share
Factory
get
Ruin
Share
Factory
ruin
ruin
Routes
add
Listener
remove
Listener
get
Listeners
remove
Job
job
Is
Initial
remove
Job
has
Next
next
remove
get
Nearest
Neighbors
Iterator
initialise
get
Max
Distance
calculate
Distances
From
Job2Job
get
Comparator
to
String
get
Nearest
Neighbors
Iterator
has
Next
next
remove
initialise
get
Max
Distance
calculate
Distances
From
Job2Job
to
String
set
Noise
Maker
ruin
Routes
relatedness
to
String
get
Nearest
Neighbors
Iterator
has
Next
next
remove
initialise
get
Max
Distance
calculate
Distances
From
Job2Job
set
Noise
Maker
ruin
Routes
ruin
get
Worst
savings
c
to
String
ruin
Starts
ruin
Ends
removed
get
Lower
Bounds
Of
All
Strings
determine
Substring
Length
get
Distance
calc
Dist
get
Distance
get
Distance
get
Distance
calc
Dist
calc
Dist
create
Strategy
create
Number
To
Be
Removed
get
Job
get
Distance
set
No
Routes
set
String
Length
to
String
ruin
Routes
get
Route
Of
ruin
Route
With
Split
String
Ruin
ruin
Route
With
String
Ruin
get
Nearest
Neighbors
Iterator
initialise
get
Max
Distance
ruin
Starts
ruin
Ends
removed
ruin
Starts
ruin
Ends
removed
add
Listener
remove
Listener
get
Listeners
create
Number
To
Be
Removed
set
Number
Of
Ruin
Centers
to
String
ruin
Routes
ruin
Routes
pick
Random
Job
create
Neighborhoods
create
Neighborhoods
create
Strategy
to
String
ruin
Routes
ruin
Routes
inform
Insertion
Starts
to
String
accept
Solution
get
Threshold
to
String
get
Initial
Threshold
get
End
Threshold
set
Initial
Threshold
set
End
Threshold
set
Max
Iterations
inform
Algorithm
Starts
reset
inform
Iteration
Starts
accept
Solution
accept
Solution
to
String
get
Threshold
get
Initial
Threshold
set
Initial
Threshold
set
Max
Iterations
inc
Iteration
inform
Algorithm
Starts
reset
inform
Iteration
Starts
accept
Solution
inform
Algorithm
Starts
inform
Iteration
Ends
accept
Solution
to
String
get
Threshold
inform
Algorithm
Starts
inform
Iteration
Ends
reset
inform
Iteration
Starts
accept
Solution
to
String
accept
Solution
to
String
inform
Iteration
Ends
get
Priority
get
Listener
compare
get
Algorithm
Listeners
remove
add
Listener
add
Listener
algorithm
Ends
iteration
Ends
iteration
Starts
algorithm
Starts
add
add
All
selected
Strategy
inform
Iteration
Starts
inform
Selected
Strategy
inform
Algorithm
Starts
inform
Algorithm
Ends
get
Instance
select
Solution
to
String
select
Solution
get
Instance
select
Solution
set
Random
new
Instance
add
Transport
Distance
add
add
Transport
Time
add
Transport
Time
And
Distance
build
get
Matrix
get
Transport
Time
get
get
Distance
get
Distance
get
Transport
Cost
get
No
Locations
new
Instance
get
Random
set
Seed
reset
reset
get
Act
Arr
Time
get
Act
End
Time
begin
visit
finish
get
Comp
Time
In
Seconds
stop
start
reset
to
String
get
Curr
Time
In
Seconds
get
Activity
End
Time
abbreviation
to
Primitive
Array
to
Primitive
Array
to
String
get
Transport
Cost
calculate
Distance
calculate
Distance
get
Transport
Time
get
Distance
compare
make
Noise
new
Instance
get
X
get
Y
to
String
hash
Code
equals
inform
Algorithm
Ends
get
Coord
get
Most
Likely
Failed
Constraint
Name
ignore
inform
Job
Unassigned
put
get
Reasons
get
Failed
Constraint
Names
Frequency
Mapping
get
Codes
To
Reason
get
Failed
Constraint
Names
To
Code
get
Code
get
Human
Readable
Reason
get
Human
Readable
Reason
get
Most
Likely
Reason
Code
get
Most
Likely
Reason
to
Code
next
Route
next
Job
next
Job
next
Item
next
Item
best
Of
calculate
Distance
calculate
Distance
parse
Seconds
To
Time
parse
Time
To
Seconds
get
Seconds
In
Seconds
get
Min
In
Seconds
get
Hour
In
Seconds
get
Digit
get
Results
get
Vehicles
get
Comp
Times
get
Result
Stats
get
Vehicle
Stats
get
Times
Stats
calculate
Distance
abbreviation
new
Key
hash
Code
equals
new
Instance
add
Transport
Distance
add
Transport
Time
build
get
Transport
Time
get
Time
get
Distance
get
Transport
Cost
get
Distance
get
Transport
Cost
get
Transport
Time
calculate
Distance
calculate
Distance
get
Distance
calculate
Distance
set
Speed
set
Detour
get
Transport
Cost
calculate
Distance
get
Transport
Time
get
Distance
get
As
URL
get
As
Input
Stream
begin
visit
finish
begin
visit
finish
begin
visit
finish
begin
visit
transport
Cost
transport
Time
distance
finish
begin
visit
finish
begin
visit
finish
initialise
refresh
States
recalculate
Solution
Indicators
clear
Solution
Indicators
inform
Solution
Changed
get
Load
At
Beginning
get
Load
At
End
get
Max
Load
get
Load
Right
After
Activity
verify
That
Route
Contains
Act
get
Load
Just
Before
Activity
get
Number
Of
Pickups
get
Number
Of
Deliveries
get
Load
Picked
Up
get
Load
Delivered
get
Capacity
Violation
get
Capacity
Violation
At
Beginning
get
Capacity
Violation
At
End
get
Capacity
Violation
After
Activity
get
Time
Window
Violation
get
Time
Window
Violation
At
Activity
has
Skill
Constraint
Violation
has
Skill
Constraint
Violation
At
Activity
has
Backhaul
Constraint
Violation
has
Backhaul
Constraint
Violation
At
Activity
has
Shipment
Constraint
Violation
has
Shipment
Constraint
Violation
At
Activity
get
Operation
Time
get
Waiting
Time
get
Transport
Time
get
Service
Time
get
Variable
Transport
Costs
get
Fixed
Costs
get
Variable
Transport
Costs
At
Activity
get
Transport
Time
At
Activity
get
Last
Transport
Time
At
Activity
get
Last
Transport
Distance
At
Activity
get
Last
Transport
Cost
At
Activity
get
Last
Transport
get
Waiting
Time
At
Activity
get
Distance
get
Distance
At
Activity
get
Number
Of
Pickups
get
Number
Of
Pickups
At
Beginning
get
Number
Of
Pickups
At
Beginning
get
Number
Of
Deliveries
get
Number
Of
Deliveries
At
End
get
Number
Of
Deliveries
At
End
get
Load
Picked
Up
get
Load
At
Beginning
get
Load
Delivered
get
Load
At
End
get
Distance
get
Operation
Time
get
Max
Operation
Time
get
Waiting
Time
get
Transport
Time
get
Time
Window
Violation
get
Capacity
Violation
get
Service
Time
get
Fixed
Costs
get
Variable
Transport
Costs
get
Total
Costs
has
Shipment
Constraint
Violation
has
Backhaul
Constraint
Violation
has
Skill
Constraint
Violation
print
print
print
print
print
Verbose
print
Verbose
get
Vehicle
String
get
Nu
Of
Jobs
set
Recording
Range
ruin
Starts
mark
All
Nodes
As
Inserted
add
Routes
get
Node
Id
record
ruin
Ends
removed
remove
Shipment
get
Leaving
Edge
get
Entering
Edge
get
To
Node
Id
get
From
Node
Id
remove
Service
remove
Node
And
Belonging
Edges
mark
Removed
make
Edge
Id
inform
Algorithm
Ends
finish
inform
Iteration
Starts
initialise
Graph
add
Job
mark
Shipment
mark
Service
mark
Pickup
mark
Delivery
add
Vehicle
make
Start
Id
make
End
Id
add
Node
inform
Insertion
Ends
remove
Routes
inform
Before
Job
Insertion
insert
Job
insert
Shipment
insert
Service
insert
Node
handle
Vehicle
Switch
mark
Inserted
remove
Edge
mark
Edge
Removed
is
First
is
Last
add
Edge
mark
Edge
Inserted
inform
Insertion
Starts
inform
Algorithm
Starts
get
Comp
Time
In
Seconds
inform
Algorithm
Ends
stop
start
reset
to
String
get
Curr
Time
In
Seconds
inform
Algorithm
Ends
inform
Iteration
Ends
inform
Algorithm
Starts
get
Item
Shape
get
Item
Outline
Paint
get
Item
Paint
set
Scaling
Factor
set
Label
invert
Coordinates
set
Bounding
Box
plot
Shipments
plot
plot
create
Legend
get
Legend
Items
add
Legend
Item
get
Shipment
Renderer
get
Problem
Renderer
get
Range
get
Domain
Range
create
Plot
get
Route
Renderer
save
make
Solution
Series
make
Map
make
Shipment
Series
add
Job
add
Label
get
Size
String
get
Coordinate
retrieve
Activities
mark
Item
save
Chart
As
PNG
new
Instance
add
Data
build
set
Ruin
Delay
set
Recreate
Delay
set
Delay
graph
Attribute
Added
graph
Attribute
Changed
graph
Attribute
Removed
node
Attribute
Added
node
Attribute
Changed
node
Attribute
Removed
edge
Attribute
Added
edge
Attribute
Changed
edge
Attribute
Removed
node
Added
node
Removed
edge
Added
edge
Removed
graph
Cleared
step
Begins
set
Recreation
Delay
set
Ruin
Delay
display
main
sleep
selected
improved
Solution
new
Solution
get
Id
get
Count
Selected
get
Count
Improved
get
Count
New
Solution
get
Improvements
inform
Iteration
Starts
inform
Selected
Strategy
set
Out
Writer
inform
Algorithm
Ends
get
Improvement
is
Better
get
Strategies
create
Multi
Graph
create
Embedded
View
label
With
set
Render
Delay
set
Render
Shipments
set
Graph
Stream
Frame
Scaling
Factor
set
Camera
View
display
create
J
Frame
create
Multi
Graph
render
align
Camera
create
Empty
Label
create
Result
Panel
get
No
Routes
get
Solution
Costs
render
Job
sleep
make
Id
render
Vehicle
render
Route
make
Edge
Id
