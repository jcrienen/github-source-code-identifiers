post
User
update
User
get
User
delete
User
send
Email
verify
User
reset
Verification
Status
test
Post
User
test
Update
User
test
Get
User
test
Delete
User
test
Send
Verification
Email
test
Verify
User
test
Verify
User
Html
test
Verify
User
Json
test
Reset
Verification
Status
test
Reset
Verification
Status
Null
ensure
Post
Works
ensure
Get
Works
ensure
Get
Works
Without
Password
ensure
Update
Works
ensure
Update
Works
Without
Password
ensure
Delete
Works
ensure
Delete
Works
Without
Password
ensure
Send
Email
Works
ensure
Send
Email
Works
Without
Password
ensure
Verify
Works
ensure
Verify
Works
With
Response
Type
ensure
Reset
Verification
Works
ensure
Reset
Verification
Works
Without
Password
ensure
Fake
Client
Persists
assert
Failure
build
Should
Throw
Without
Setting
Endpoint
build
Should
Throw
Without
Setting
Authentication
should
Build
should
Build
With
Access
Token
test
Ensure
Trailing
Slash
Exists
No
Change
test
Ensure
Trailing
Slash
Exists
No
Slash
post
User
update
User
get
User
delete
User
send
Verification
Email
verify
User
verify
User
reset
Verification
Status
fail
endpoint
authentication
authentication
build
build
Http
Client
ensure
Trailing
Slash
Exists
post
User
update
User
update
User
get
User
delete
User
send
Verification
Email
verify
User
verify
User
reset
Verification
Status
builder
fake
fake
test
Hash
Match
test
Hash
Mismatch
test
Hash
Match
test
Hash
Mismatch
test
Hash
Match
test
Hash
Mismatch
test
From
Yaml
test
Bcrypt
Response
Type
Mapping
test
Md5Response
Type
Mapping
test
Simple
Response
Type
Mapping
test
Null
Response
Type
From
String
test
Hash
Match
test
Hash
Mismatch
test
Hash
Same
test
Hash
Different
test
Hash
With
Mistakes
Disabled
test
Hash
With
Mistakes
Enabled
test
Hash
With
Mistakes
Enabled
Incorrect
test
Server
Side
Hash
Disabled
is
Discoverable
test
Default
Message
Options
test
Message
Options
Custom
Placeholder
With
No
Custom
Body
test
Message
Options
Custom
Placeholder
With
Custom
Body
Text
test
Message
Options
Custom
Placeholder
With
Custom
Body
Html
test
Message
Options
Custom
test
Get
File
Contents
From
Path
test
Get
File
Contents
From
Invalid
Path
test
Get
File
Contents
From
Invalid
Resource
test
Null
Constructor
Argument
Throws
test
Provide
Users
Dao
test
Provide
Database
Health
Check
test
Hash
Code
Same
test
Hash
Code
Different
test
Equals
test
To
String
test
Replace
Placeholder
No
Url
test
Replace
Placeholder
With
Url
test
Replace
With
Custom
Placeholder
test
From
Yaml
test
From
Yaml
test
Ses
Client
Created
Once
test
Invalid
Config
test
Send
Email
Amazon
Client
Exception
test
Send
Email
Success
test
Get
Success
Html
test
Null
Constructor
Argument
Throws
test
Check
Healthy
test
Check
Unhealthy
test
Check
Unhealthy
Exception
check
test
From
Yaml
setup
test
Main
test
Initialize
test
Run
test
Run
Without
Verification
test
Open
bad
Config
Should
Open
Without
Replacement
empty
Config
Should
Return
Null
should
Return
Null
When
Secret
Is
Not
Set
should
Throw
When
Retry
Times
Out
should
Read
From
Secrets
Manager
for
Secret
Name
then
Ensure
when
Secrets
Manager
Returns
when
Secrets
Manager
Throws
should
Return
Null
When
Env
Var
Is
Not
Set
should
Read
From
System
Env
Vars
is
Discoverable
test
Env
From
Yaml
test
Secrets
Manager
From
Yaml
No
Optionals
test
Secrets
Manager
From
Yaml
With
Optionals
is
Discoverable
test
Oauth
From
Yaml
No
Audience
test
Oauth
From
Yaml
With
Audience
test
Oauth
From
Yaml
With
Rsa
Public
Key
test
Invalid
Oauth
Config
test
Bad
File
Path
Throws
test
Register
Authentication
test
Register
Authentication
Only
Rsa
null
Token
Fails
Authentication
invalid
Format
Token
Fails
Authentication
unrecognized
Algorithm
Fails
Authentication
expired
Token
Fails
Authentication
incorrect
Audience
Fails
Authentication
incorrect
Issuer
Fails
Authentication
hs256Signed
Token
Passes
hs384Signed
Token
Passes
hs512Signed
Token
Passes
rsa256Signed
Token
Passes
rsa384Signed
Token
Passes
rsa512Signed
Token
Passes
rsa
Token
Fails
When
Key
Is
Null
hmac
Token
Fails
When
Key
Is
Null
test
Hash
Code
Same
test
Hash
Code
Different
test
Equals
test
To
String
test
From
Yaml
No
Keys
test
From
Yaml
With
Keys
test
Register
Authentication
test
Json
Serialization
test
Json
Deserialization
test
From
Yaml
test
Hash
Code
Same
test
Hash
Code
Different
test
Equals
test
To
String
test
Null
Constructor
Argument
Throws
test
Authenticate
With
Valid
Credentials
test
Authenticate
With
Null
Credentials
test
Authenticate
With
Invalid
Credentials
provide
Email
Validator
Should
Use
Custom
Rules
test
Md5Hash
test
Md5Hash
Mismatch
test
Unsupported
Algorithm
Throws
should
Read
Test
File
should
Throw
On
Nonexistent
File
should
Throw
On
Error
should
Read
Rsa
Public
Key
rsa
Should
Throw
On
File
Not
Found
rsa
Should
Throw
On
Error
setup
invalid
User
Provider
create
with
Invalid
User
should
Fail
Validation
create
with
Invalid
Properties
should
Fail
Validation
create
with
Database
Failure
should
Return
Service
Unavailable
create
with
Database
Rejection
should
Return
Internal
Server
Error
create
with
Wrapped
Database
Exception
should
Return
Correct
Response
create
with
Existing
User
should
Return
Conflict
create
with
Timeout
During
Insert
should
Return
Request
Timeout
create
should
Succeed
create
should
Hash
User
Password
run
Create
Test
put
invalid
User
Should
Fail
Validation
put
null
Password
Should
Fail
Validation
put
user
With
Invalid
Properties
Should
Fail
Validation
put
nonexistent
User
Should
Return
Not
Found
put
database
Failure
On
Lookup
Should
Return
Service
Unavailable
put
database
Rejection
On
Lookup
Should
Return
Internal
Server
Error
put
incorrect
Password
Returns
Unauthorized
put
user
Not
Found
During
Update
Returns
Not
Found
put
version
Conflict
Returns
Conflict
put
database
Failure
On
Update
Should
Return
Service
Unavailable
put
timeout
Returns
put
when
Password
Header
Check
Is
Disabled
Then
Missing
Password
Succeeds
put
should
Succeed
put
user
With
New
Email
Succeeds
put
New
Password
Should
Be
Hashed
test
Update
User
Server
Side
Hash
No
Password
Change
get
null
Email
Fails
Validation
get
null
Password
Fails
Validation
get
nonexistent
User
Returns
Not
Found
get
database
Failure
Returns
Service
Unavailable
get
incorrect
Password
Returns
Unauthorized
get
with
Disabled
Password
Check
Succeeds
With
Incorrect
Password
get
timeout
Returns
get
is
Successful
delete
null
Email
Fails
Validation
delete
null
Password
Fails
Validation
delete
nonexistent
User
Returns
Not
Found
delete
database
Down
On
Lookup
Returns
Service
Unavailable
delete
incorrect
Password
Header
Returns
Unauthorized
delete
not
Found
When
Deleting
Returns
Not
Found
delete
database
Erorr
When
Deleting
Returns
Service
Unavailable
delete
null
Password
With
Disabled
Header
Check
Succeeds
delete
timeout
Returns
delete
is
Successful
run
Timeout
Test
setup
email
null
Email
Fails
Validation
email
empty
Email
Fails
Validation
email
null
Password
Fails
Validation
email
empty
Password
Fails
Validation
email
database
Failure
Returns
Service
Unavailable
email
database
Failure
During
Update
Returns
Service
Unavailable
email
incorrect
Password
Returns
Unauthorized
email
email
Failure
Returns
Internal
Server
Error
email
disabled
Password
Header
Check
With
Null
Password
Succeeds
email
timeout
Returns
email
is
Successful
verify
null
Email
Fails
Validation
verify
empty
Email
Fails
Validation
verify
null
Token
Fails
Validation
verify
empty
Token
Fails
Validation
verify
database
Error
Returns
Service
Unavailable
verify
null
Stored
Token
Returns
Internal
Server
Error
verify
empty
Stored
Token
Returns
Internal
Server
Error
verify
incorrect
Token
Returns
Bad
Request
verify
database
Failure
During
Update
Returns
Service
Unavailable
verify
timeout
Returns
verify
is
Successful
verify
with
Html
Response
Type
Is
Successful
reset
null
Email
Fails
Validation
reset
empty
Email
Fails
Validation
reset
null
Password
Fails
Validation
reset
empty
Password
Fails
Validation
reset
database
Failure
During
Find
Returns
Service
Unavailable
reset
database
Failure
During
Update
Returns
Service
Unavailable
reset
incorrect
Password
Returns
Unauthorized
reset
disabled
Password
Header
Check
And
Null
Password
Succeeds
reset
timeout
Returns
reset
is
Successful
test
Get
Success
Html
test
Construction
test
To
Response
test
Unknown
Throwable
To
Response
test
Throwable
To
Response
throwable
Provider
test
From
Yaml
test
From
Yaml
Only
Title
test
Build
setup
test
Initialize
get
Open
Api
Configuration
test
Run
get
Open
Api
Configuration
test
Run
Disabled
get
Open
Api
Configuration
test
Run
Null
Configuration
get
Open
Api
Configuration
test
Get
View
insert
Should
Succeed
insert
Conflict
Should
Fail
insert
Out
Of
Memory
Should
Fail
find
By
Email
Should
Succeed
find
By
Email
Not
Found
Should
Fail
update
New
Email
Should
Succeed
update
Should
Succeed
update
Should
Succeed
With
Same
Email
update
Not
Found
Should
Fail
delete
Should
Succeed
test
In
Memory
Db
Creation
should
Call
Provided
Runtime
check
Returns
Healthy
check
test
Null
Constructor
Argument
Throws
test
Provide
Users
Dao
test
Provide
Database
Health
Check
test
Null
Constructor
Argument
Throws
test
Healthy
test
Unhealthy
check
setup
test
Null
Constructor
Argument
Throws
test
Successful
Insert
test
Conflicting
Insert
test
Insert
Timeout
test
Insert
Rejected
test
Insert
With
Database
Down
test
Insert
With
Request
Rejected
test
Insert
With
Unknown
Exception
test
Successful
Find
By
Email
test
Unsuccessful
Find
By
Email
Empty
Item
test
Find
By
Email
Database
Down
test
Find
By
Email
Request
Rejected
test
Find
By
Email
Unknown
Exception
test
Successful
Update
test
Successful
Email
Update
test
Same
Existing
Email
test
Existing
User
With
New
Email
test
Existing
User
With
New
Email
Database
Down
test
Update
Get
Not
Found
test
Update
Get
Database
Down
test
Update
Get
Request
Rejected
test
Update
Put
Timeout
test
Update
Put
Rejected
test
Update
Put
Database
Down
test
Update
Put
Request
Rejected
test
Update
Put
Request
Unknown
Exception
test
Successful
Delete
test
Unsuccessful
Delete
Get
Failure
test
Unsuccessful
Delete
Database
Down
test
Unsuccessful
Delete
Request
Rejected
test
Unsuccessful
Delete
Unknown
Exception
test
Mongo
Db
Creation
is
Discoverable
test
Dynamo
Db
From
Yaml
test
In
Memory
Db
From
Yaml
test
Mongo
Db
From
Yaml
assert
Database
Error
test
Database
Exception
Creation
test
Response
test
Json
Processing
Exception
test
Io
Exception
test
Null
Constructor
Argument
Throws
test
Check
Healthy
test
Check
Unhealthy
test
Check
Unhealthy
Exception
check
setup
null
Constructor
Argument
Should
Throw
should
Succeed
should
Fail
Correctly
provide
Failure
Test
Args
should
Succeed
should
Fail
Correctly
provide
Failure
Test
Args
should
Succeed
should
Succeed
With
New
Email
Address
should
Fail
When
Get
Fails
provide
Get
Failure
Test
Args
should
Fail
When
Update
Fails
provide
Update
Failure
Test
Args
should
Succeed
should
Fail
Correctly
provide
Failure
Test
Args
test
Dynamo
Db
Creation
test
Dynamo
Client
Created
Once
test
Create
Users
Dao
Table
Exists
test
Create
Users
Dao
Table
Not
Exists
ensure
Checks
Return
Correct
Predicate
provide
Rules
For
Predicate
Test
test
Hash
Code
Same
test
Hash
Code
Different
test
Equals
test
To
String
test
From
Yaml
test
Validate
User
Null
User
test
Validate
User
Null
Email
test
Validate
User
Null
Email
Address
test
Validate
User
Empty
Email
Address
test
Validate
User
Invalid
Email
Address
test
Validate
User
Invalid
Email
Address
Custom
Rule
test
Validate
User
Mismatch
Property
Map
test
Validate
User
Success
test
Validate
Password
And
Email
Null
Email
test
Validate
Password
And
Email
Empty
Email
test
Validate
Password
And
Email
Null
Password
test
Validate
Password
And
Email
Empty
Password
test
Validate
Password
And
Email
Empty
Token
test
Validate
Password
And
Email
Success
test
Validate
Null
Password
test
Validate
Empty
Password
test
Validate
Success
test
Validate
Password
And
Email
Disabled
Header
Check
test
Is
Password
Header
Check
Enabled
verify
Password
Completes
When
Check
Is
Disabled
verify
Password
Completes
When
Check
Is
Enabled
test
Construction
test
Static
Construction
test
Response
test
From
Yaml
test
Hash
Code
Same
test
Hash
Code
Different
test
Equals
test
To
String
setup
null
Configuration
Should
Throw
both
True
Should
Allow
Empty
Map
both
True
Empty
Configuration
Should
Allow
Any
both
True
Should
Allow
Fewer
Properties
both
True
Should
Allow
Extra
Properties
both
True
Should
Fail
On
Incorrect
Type
For
Property
allow
Subset
Should
Allow
Empty
Map
allow
Subset
Empty
Configuration
Should
Allow
None
allow
Subset
Should
Allow
Fewer
Properties
allow
Subset
Should
Not
Allow
Extra
Properties
allow
Subset
Should
Fail
On
Incorrect
Type
For
Property
allow
Superset
Should
Not
Allow
Empty
Map
allow
Superset
Empty
Configuration
Should
Allow
All
allow
Superset
Should
Not
Allow
Fewer
Properties
allow
Superset
Should
Allow
Extra
Properties
But
No
Less
allow
Superset
Should
Fail
On
Incorrect
Type
For
Property
both
False
Should
Not
Allow
Empty
Map
both
False
Empty
Configuration
Should
Allow
None
both
False
Should
Not
Allow
Fewer
Properties
both
False
Should
Not
Allow
Extra
Properties
both
False
Should
Fail
On
Incorrect
Name
For
Property
both
False
Should
Fail
On
Incorrect
Type
For
Property
mismatch
Type
Should
Return
False
type
Should
Validate
test
Get
Type
test
From
Yaml
test
From
Yaml
Disabled
Email
test
From
Yaml
Null
Email
test
From
Yaml
Disabled
Open
Api
get
Path
Of
Resource
read
Resource
File
read
Resource
Yaml
read
Resource
Yaml
create
Yaml
Configuration
Factory
from
String
to
String
new
Hash
Service
is
Match
Exact
hash
is
Match
Exact
hash
is
Match
Exact
hash
is
Match
Exact
hash
get
Algorithm
server
Side
Hash
is
Header
Check
Enabled
allow
Common
Mistakes
is
Match
is
Match
Exact
hash
server
Side
Hash
Enabled
generate
Salt
provide
Email
Service
provide
Email
Health
Check
send
Verification
Email
get
Success
Html
send
Email
replace
Url
Placeholder
check
is
Enabled
create
Email
Service
create
Health
Check
get
Message
Options
Configuration
get
From
Address
is
Enabled
create
Email
Service
create
Health
Check
get
Message
Options
get
Message
Options
get
File
Contents
read
File
From
Path
get
Subject
get
Body
Html
File
Path
get
Body
Text
File
Path
get
Url
Placeholder
String
get
Success
Html
File
Path
send
Email
get
Endpoint
get
Region
create
Email
Service
create
Health
Check
initialize
Ses
Client
is
Filled
Out
to
String
check
get
Endpoint
get
Region
get
Retry
Delay
Seconds
get
Max
Retries
lookup
initialize
Client
lookup
open
register
Authentication
get
Issuer
get
Audience
get
Hmac
Secret
get
Rsa
Public
Key
has
Keys
Configured
register
Authentication
get
Name
authenticate
get
Algorithm
authenticate
get
Name
get
Keys
register
Authentication
provide
Object
Mapper
provide
Metric
Registry
provide
Email
Validator
provide
Property
Validator
provide
Request
Validator
provide
Hash
Service
provide
Secret
Provider
provide
Request
Options
get
User
Resource
get
Verification
Resource
get
Database
Health
Check
get
Email
Health
Check
perform
Hash
read
File
As
Resources
read
Public
Key
From
Path
main
initialize
get
Open
Api
Configuration
run
post
User
update
User
get
User
delete
User
operation
Timeout
set
Timeout
send
Email
verify
Email
reset
Verified
get
Success
Html
generate
Verification
Token
get
Title
get
Swagger
Assets
Path
get
Context
Path
get
Validator
Url
is
Enabled
get
Title
get
Version
get
Description
get
Contact
get
Contact
Email
get
License
get
License
Url
build
initialize
run
get
Open
Api
Configuration
get
max
Memory
free
Memory
total
Memory
get
Max
Memory
Percentage
create
Users
Dao
create
Health
Check
insert
find
By
Email
update
delete
user
Or
Not
Found
memory
Available
max
Memory
free
Memory
total
Memory
check
create
Users
Dao
create
Health
Check
get
Connection
String
get
Database
Name
get
Collection
Name
create
Users
Dao
create
Health
Check
initialize
Mongo
Client
check
insert
find
By
Email
update
delete
convert
To
Database
Exception
provide
Users
Dao
provide
Health
Check
check
get
Error
response
insert
find
By
Email
update
delete
to
Json
from
Json
update
Email
get
Endpoint
get
Region
get
Table
Name
create
Users
Dao
create
Health
Check
initialize
Dynamo
Db
Client
initialize
Dynamo
Db
Table
check
insert
find
By
Email
update
delete
convert
To
Database
Exception
get
Error
response
invalid
Parameters
invalid
Parameters
incorrect
Password
incorrect
Password
incorrect
Token
incorrect
Token
token
Not
Set
token
Not
Set
get
Check
get
Value
get
Rule
equals
hash
Code
to
String
get
Predicate
get
Predicate
get
Predicate
get
Predicate
get
Predicate
get
Rules
get
Name
get
Type
equals
hash
Code
to
String
allow
Superset
allow
Subset
get
Validation
Rules
validate
validate
validate
is
Password
Header
Check
Enabled
verify
Password
Header
is
Valid
Email
is
Valid
Properties
Map
verify
Size
get
Type
get
Users
Dao
Factory
get
Email
Service
Factory
get
Secret
Provider
get
Auth
Configuration
get
Validation
Configuration
get
Hash
Configuration
get
Open
Api
Configuration
get
Request
Options
get
Email
Validation
Configuration
response
response
From
Throwable
setup
test
No
Properties
Json
Serialization
test
No
Properties
Json
Deserialization
test
Multiple
Properties
Json
Serialization
test
Multiple
Properties
Json
Deserialization
no
Property
Constructor
Should
Construct
with
Time
Should
Create
Copy
test
Equals
test
Hash
Code
Same
test
Hash
Code
Different
test
To
String
should
Serialize
To
Json
should
Deserialize
From
Json
equals
Should
Work
Correctly
hash
Code
Should
Be
Consistent
hash
Code
Should
Not
Collide
to
String
Should
Be
Correct
unverified
Should
Create
Unverified
Email
verified
Copy
Should
Be
Correct
json
Type
Should
Map
To
String
html
Type
Should
Map
To
String
unknown
Strings
Should
Map
To
Null
get
Email
get
Password
get
Properties
set
Property
with
Time
equals
hash
Code
to
String
from
String
to
String
get
Address
get
Verification
Token
is
Verified
verified
Copy
equals
hash
Code
to
String
unverified
