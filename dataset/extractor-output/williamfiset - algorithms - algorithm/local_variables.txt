arr
index
t
i
ii
jj
permutation
i
matchingCost
first
toSwap
i
tmp
costMatrix
i
j
n
g
mwpm
cost
matching
expectedMatching
costMatrix
impls
cost
matching
expectedMatching
costMatrix
impls
cost
matching
expectedMatching
costMatrix
impls
cost
matching
expectedMatching
costMatrix
impls
cost
matching
expectedMatching
costMatrix
impls
cost
matching
expectedMatching
n
g
mwpm
cost
matching
expectedMatching
n
g
mwpm
cost
matching
expectedMatching
n
g
mwpm
cost
matching
expectedMatching
n
g
mwpm
cost
expectedCost
matching
expectedMatching
n
g
mwpm
cost
matching
n
g
mwpm
cost
matching
expectedMatching
loop
n
costMatrix
impls
matching
set
i
loop
n
costMatrix
impls
loop
n
costMatrix
impls
matching
bfMwpm
dpSoln
bfSoln
loop
n
costMatrix
impls
bfMwpm
dpSoln
bfSoln
i
j
val
total
i
i
values
coinValues
amount
solution1
solution2
v1
v2
v3
i
values
coinValues
amount
solution
selectedCoinsSum
i
values
coinValues
amount
solution
selectedCoinsSum
str
sa1
sa2
sa3
sa1
sa2
sa3
suffixArrays
i
UNIQUE_CHARS
sa1
sa2
sa3
suffixArrays
i
text
lcpValues
sa1
sa2
sa3
suffixArrays
i
text
lcpValues
sa1
sa2
sa3
suffixArrays
i
text
sa1
sa2
sa3
suffixArrays
i
j
s1
s2
k
m
i
m
i
m
i
m
i
m
i
min_st
max_st
sum_st
mult_st
gcd_st
i
j
values
i
values
i
values
values
st
i
j
min
minIndex
k
loop
values
min_st
max_st
i
j
min
max
minIndex
maxIndex
k
sl
sl
sl
sl
sl
sl
sl
sl
sl
sl
kdTree
pointRoot
pointLeft
pointRight
kdTree
kdTree
kdTree
point1
point2
point3
point4
kdTree
kdTree
kdTree
min1
min2
min3
kdTree
kdTree
kdTree
kdTreeBarren
kdTreeLeft
kdTreeRight
kdTreeTwo
rootPoint
leftPoint
rightPoint
kdTree
point1
point2
point3
point4
point5
point6
point7
point8
kdTree
kdTree
ho
sz
loops
sz
ht
i
map2
loop
rand_nums
count
set
map
loop
keys_set
i
randomVal
keys
map
i
i
map
o1
o2
o3
o4
jmap
loop
probability1
probability2
nums
i
r
key
val
m
hm
loop
sz
probability
i
index
l1
l2
rand_val
lst
i
lst
i
i
hashtable
start
i
val
end
hashtable
start
i
val
end
hashtable
start
i
val
end
jmap
start
i
val
end
o1
o5
on7
jmap
mmap
loop
rand_nums
count
set
o1
o2
o3
o4
o1
o2
o3
map
loop
keys_set
i
randomVal
obj
keys
map
o11
o12
o13
i
i
jmap
loop
probability1
probability2
nums
i
r
key
val
m
hm
loop
sz
probability
i
keyValue
key
l1
l2
randVal
lst
i
randNum
obj
lst
i
obj
ho
map2
loop
rand_nums
count
set
map
loop
keys_set
i
randomVal
keys
map
i
i
map
o1
o2
o3
o4
jmap
loop
probability1
probability2
nums
i
r
key
val
m
hm
loop
sz
probability
i
index
l1
l2
rand_val
lst
i
lst
i
ho
map2
loop
rand_nums
count
set
map
loop
keys_set
i
randomVal
keys
map
i
i
map
o1
o2
o3
o4
jmap
loop
probability1
probability2
nums
i
r
key
val
m
hm
loop
sz
probability
i
index
l1
l2
rand_val
lst
i
lst
i
i
val
i
INITIAL_VALUE
prime
power
i
ch
obj
r1
r1Center
r1NWCorner
r1SWCorner
r1SECorner
r1NECorner
r1Above
r1Below
r1Left
r1Right
r1
r1Center
r1NWCorner
r1SWCorner
r1SECorner
r1NECorner
r1Above
r1Below
r1Left
r1Right
r1
SZ
region
quadTree
i
sum
i
j
test
W
H
quadTree
grid
i
x
y
i
x1
y1
x2
y2
region
expectedPts
quadTreeCount
queue
queue
n
queue
i
i
i
i
i
i
i
i
queue
queue
qSize
intQ
javaQ
operations
r
elem
queues
q
q
nums
i
i
lst
pq
pq2
loop
p1
p2
tmp
ar
d
pq
pq2
i
e
r
strs
q
in
pq
lst
i
lst
i
lst
i
q
q
nums
i
i
i
lst
pq
pq2
q
strs
strs
q
i
randNums
PQ
pq
j
j
randVal
pq
PQ
i
elem
in
removeOrder
in
pq
i
sz
randNums
pq1
pq2
v1
v2
i
sz
randNums
pq1
pq2
index
removeNum
SZs
PQ
pq
nums
i
randNum
removeNum
lst
i
lst
i
lst
i
q
q
nums
i
i
i
lst
pq
pq2
q
strs
strs
q
i
randNums
PQ
pq
j
j
randVal
pq
PQ
i
elem
in
removeOrder
in
pq
i
sz
randNums
pq1
pq2
v1
v2
i
sz
randNums
pq1
pq2
index
removeNum
SZs
PQ
pq
nums
i
randNum
removeNum
lst
i
lst
i
lst
i
pq
pq
pq
pq
pq
pq
pq
pq
pairs
n
pq
i
minIndex
i
pairs
n
pq
i
minValue
i
names
pq
i
i
n
pq
n
bound
randomValues
pq1
pq2
p
i
n
indexes
pq1
pq2
indexesToRemove
p
i
ii
itemsToRemove
iii
indexToRemove
contains1
contains2
lst
i
s
set
i
j
sub
smallPrimes
collisionHappened
s
set
len
i
j
sub
i
j
sub
sz
loops
set
javaset
l
randStr
l
randStr
range
sb
i
s
loop
nums
i
num
s
loop
sz
hs
nums
i
num
obj
ch1
ch2
s
lst
i
lst
i
splayTree
data
splayTree
data
splayTree
data
splayTree
data
splayTree
data
pq
splayTreeMax
q
tree
tree
tree
tree
tree
tree
bst
iter
bst
iter
bst
iter
bst
iter
bst
iter
bst
iter
bst
iter
bst
iter
i
size
tree
lst
j
value
lst
i
out
expected
testTree
tree
iter
i
i
input
i
input
i
input
i
input
strs
javaLinkedList
loops
randNums
i
rm_val
iter1
iter2
i
rm_val
iter1
iter2
javaLinkedList
loops
randNums
i
rm_index
num1
num2
iter1
iter2
javaLinkedList
loops
randNums
i
elem
index1
index2
iter1
iter2
strs
lst
i
i
lst
i
i
r
expected
i
number
i
c
r
i
number
t
t
t
t1
t2
t3
t1
t2
t3
t
t
t
t
c
c
ar
st
n
ar
st
i
j
k
i1
i2
bfSum
segTreeSum
i3
i4
randValue
s
i
m
i
m
i
i
i
i
combinationFns
rangeUpdateFns
n
loop
ar
st
i
j
k
i1
i2
i3
i4
randValue
bf
segTreeAnswer
s
i
m
i
m
i
m
i
gcd
s
i
i
i
i
tree
size
tree
values
tree
n
ar
tree
i
j
bfSum
segTreeSum
s
i
ar
st
n
ar
st
i
j
k
i1
i2
i3
i4
randValue
bfMin
segTreeMin
s
i
m
i
m
i
i
i
i
n
ar
st
i
j
k
i1
i2
bfMin
segTreeMin
i3
i4
randValue
s
i
m
i
m
i
i
i
i
values
st
ar
st
ar
st
ar
st
ar
st
ar
st
ar
st1
st2
ar
st1
ar
st1
combinationFns
rangeUpdateFns
n
ar
st
i
j
k
i1
i2
i3
i4
randValue
bf
segTreeAnswer
s
i
m
i
m
i
i
i
i
ar
st
ar
st
ar
st
ar
st
ar
st
n
ar
st
i
j
k
i1
i2
i3
i4
randValue
bfSum
segTreeSum
s
i
m
i
m
i
i
i
i
ar
st
n
ar
st
i
j
k
i1
i2
i3
i4
randValue
bfSum
segTreeSum
s
i
m
i
m
i
i
i
i
ar
st
n
ar
st
i
j
k
i1
i2
i3
i4
randValue
bfMax
segTreeMax
s
i
m
i
m
i
i
i
i
uf
uf
sz
uf
i
i
i
i
i
j
uf
stacks
ts
i
size
lst
j
value
lst
i
values
set
i
v
ts
i
lst
j
value
treeSetRemove
treeRemove
n
height
upperBound
isValid
lst
i
i
set
i
v
n
height
c
b
upperBound
ts
i
size
lst
j
value
lst
i
ar
ft
ar
ft
ar
ft
i
i
randList
ft
j
sum
N
lo
hi
k
n
randList
ft
j
index
rand_val
SIZE
ft
arr
loop
i
val
lst
i
k
values
ft
values
ft
values
ft
n
values
ft
sum
delta
loop
i
n
values
i
ft
mockedFt
loop
i
delta
lo
hi
pts
expected
hull
pts
expected
hull
pts
expected
hull
pts
expected
hull
pts
expected
hull
pts
expected
hull
pts
cost
pts
cost
pts
cost
n
graph
path
expected
n
graph
expected
path
n
graph
expected
path
loops
i
n
graph
graph2
s
e
bfSolver
p1
p2
edgeMatrix
graph2
numEdges
i
u
v
graph
i
n
graph
solver
sortedBridges
expected
n
graph
solver
sortedBridges
expected
n
graph
solver
sortedBridges
expected
n
graph
solver
sortedBridges
expected
bridges
i
node1
node2
pair
i
i
graph
i
graph
graph1
node6
children
node2
node7
node8
node1
node3
node0
node4
node5
graph
graph
graph
graph
graph
n
loops
tree
impl1
impl2
nodes
g
nextNode
randomNode
n
tree
root
fastSolver
root
fastSolver
root
fastSolver
id
n
g
root1
root2
slowSolver
fastSolver
i
l
r
L
R
lca1
lca2
nodes
g
nextNode
randomNode
n
tree
root
solver
root
solver
root
solver
id
tree1
tree2
tree1
tree2
n
tree1
tree2
tree3
tree1
tree2
tree1
tree2
n
loops
tree1
tree2
impl1
impl2
nodes
g
nextNode
randomNode
graph
graph
graph
graph
graph
tree1
tree2
tree1
tree2
tree1
tree2
n
tree1
tree2
tree3
tree
treeEncoding
expectedEncoding
tree
node0
node1
node2
node3
node4
node5
node6
node7
node8
node9
graph
i
n
graph
solver
actual
expected
n
graph
solver
actual
expected
n
graph
solver
actual
expected
n
graph
solver
actual
expected
n
graph
solver
actual
expected
n
graph
solver
actual
expected
n
graph
solver
actual
expected
n
graph
solver
actual
expected
n
graph
solver
actual
expected
n
graph
solver
actual
expected
n
graph
solver
actual
expected
n
graph
solver
actual
expected
graph
i
n
g
solver
actual
expected
n
g
solver
expectedSccs
n
g
solver
expectedSccs
n
g
solver
expectedSccs
n
g
solver
expectedSccs
n
g
solver
expectedSccs
n
g
solver
expectedSccs
set
sccComponentIds
componentId
m
i
j
n
i
j
v
solver
soln
solver
soln
TRAILS
n
trail
m
numRandomEdges
fw
s
bf
TRAILS
n
trail
m
numRandomEdges
fw
s
bf
TRAILS
n
trail
m
numRandomEdges
fwSolver
s
bfSolver
e
fwp
bfp
n
s
e
m
fw
fwPath
n
s
e
m
i
fw
fwPath
n
s
e
m
solver
soln
edges
n
i
j
g
solver
g
order
dagGen
g
solver
order
p
dagGen
g
solver
order
n
n
n
n
n
n
n
s
t
n
s
t
n
s
t
n
s
t
n
s
t
k
k
t
i
i
n
s
t
n
s
t
g
inFlows
outFlows
i
edges
i
graph
i
n
g
solver
n
g
solver
n
g
solver
graph
i
solver
n
ordering
map
from
hash
count
i
from
to
hash
count
count
graph
solver
graph
solver
n
graph
n
graph
n
graph
solver
n
graph
solver
n
graph
solver
n
graph
solver
n
graph
n
graph
n
graph
solver
n
graph
solver
n
graph
n
graph
n
graph
solver
path
expected
n
graph
graph
i
n
graph
solver
sortedBridges
expected
n
graph
solver
sortedBridges
expected
n
graph
solver
sortedBridges
expected
n
graph
solver
sortedBridges
expected
bridges
i
node1
node2
pair
graph
i
n
g
solver
actual
expected
n
g
solver
expectedSccs
n
g
solver
expectedSccs
n
g
solver
expectedSccs
n
g
solver
expectedSccs
n
g
solver
expectedSccs
n
g
solver
expectedSccs
set
sccComponentIds
componentId
dist
dist
dist
dist
dist
dist
n
dist
expected
tspRecursiveTourCost
tspIterativeTourCost
n
i
dist
dpRecursiveSolver
dpIterativeSolver
dp1
dp2
bf
n
i
dist
dpRecursiveSolver
dpIterativeSolver
bfPath
dp1
dp2
bf
n
dist
bfPath
bf
startNode
dpRecursiveSolver
dpIterativeSolver
dp1
dp2
n
dist
solver
n
dist
solver
i
j
val
total
i
a
lazyRangeAdder
expected
a
lazyRangeAdder
expected
n
arr1
arr2
lazyRangeAdder
i
l
r
x
i
i
values
w
sz
i
r
ar
window
lo
hi
max
i
size
sorter
values
copy
size
sorter
values
copy
size
quickSelect
values
k
copy
kthLargestElement
array
size
values
i
copy
size
values
i
copy
runLength
run
upperCharText
upperCharPattern
maxLengthText
maxLengthPattern
text
pattern
occurrences
textIndex
match
patIndex
allSubstrings
sets
h
string
set
i
j
substring
ans
count
x
expectedLcss
solver
lcss
strs
answers
strs
answers
strs
answers
strs
answers
strs
answers
k
strs
ans
solver
lcss
k
strs
ans
solver
lcss
k
strs
ans
solver
lcss
k
strs
ans
solver
lcss
k
strs
ans
solver
lcss
k
strs
ans
solver
lcss
k
strs
ans
solver
lcss
k
strs
ans
solver
lcss
k
strs
ans
solver
lcss
k
strs
ans
solver
lcss
k
strs
ans
solver
lcss
len
strings
k
solver
lcss
slowSolver
lcss2
len
strings
k
solver
lcss
slowSolver
lcss2
len
strings
k
solver
lcss
slowSolver
lcss2
strings
i
sz
chrs
i
k
strs
i
ans
solver
lcss
i
i
i
zLength
logN
xx
yy
zz
i
nZ
z
nInverse
i
z
n
w
i
i
jMax
kStep
index
step
j
zeta
k
kk
x
y
z
polynomial1
polynomial2
result
numPrimes
primes
index
isComposite
sqrtLimit
i
j
i
primes
factors
divisorQueue
divisor
next_divisor
x
c
y
d
limit
i
x
chunk
mask
numChunks
sqrtLimit
chunks
i
j
limit
sieve
i
ret
tmp
limit
i
v
tmp
v
x
p
r
i
mask
A
N
M
r1
a
n
m
r2
i
ans
i
p
numPrimes
primes
index
isComposite
sqrtLimit
i
j
i
x
factors
divisorQueue
divisor
next_divisor
x
c
y
d
limit
i
lcm
v
tmp
v
gcd
x
d
inv
aNew
mNew
i
factors
iterator
val
total
nextVal
i
j
res
i
M
i
inv
i
x
i
factors
divisorQueue
divisor
next_divisor
x
c
y
d
ret
tmp
limit
i
factorial
i
num
den
gcd
N
R
P
expected
actual
n
arr
k
q
k
r
y
k
kth
wk
exp
length
c
d
e
i
padded
i
n
y
i
i
i
mid1
mid2
res1
res2
lo
hi
minValue
mid
value
lo
hi
target
function
sqrtVal
radiusLowerBound
radiusUpperBound
volume
sphereVolumeFunction
sphereRadius
lo
mid
hi
values
best
mid1
mid2
res1
res2
function
root
dp
c1
c2
dp
history
p1
p2
bestState
minimum
reducedState
matchCost
dp
history
numPairs
pairStates
pairCost
k
i
j
state
state
i
pair
newState
newCost
map
leftNodes
i
state
pairUsed
leftNode
rightNode
i
rightNode
count
toInclude
n
pts
i
cost
i
j
mwpm
minCost
matching
i
ii
jj
costMatrix
mwpm
cost
n
m
dp
i
j
lcsLen
lcs
index
i
j
v
A
B
ln
ribbonSquares
plains
ans
scenes
len
n
dp
i
i
j
dp
i
n
i
j
n
robbedHouses
i
j
robber
houses
amount
robbedHouses
sum
dp
i
dp
count
n
tiles
solver
i
m
dp
substitute
delete
insert
AL
BL
arr
i
j
min
a
b
solver
solver2
m
roomValue
sc
N
K
sum
i
index
N
K
N
K
line
C
N
M
dp
i
cows
day
i
i
day
farms
frequencies
i
ans
state
t3
t4
count
state
s
n
AL
BL
dp
i
j
min
a
b
m
dp
substituteOrSkip
delete
insert
a
b
solver
solver2
n
len
dp
i
j
n
maxValue
sum
i
n
m
dp
i
j
lcsLen
lcs
index
i
j
v
A
B
N
DP
i
w
v
sz
sz
itemsSelected
i
itemIndex
capacity
V
W
N
DP
i
w
v
sz
N
DP
sz
i
W
V
knapsackValue
newCostMatrix
i
j
i
dp
history
matchingCost
p1
p2
bestState
bestMatchingCost
reducedState
matchCost
map
leftNodes
matchingSize
i
state
pairUsed
leftNode
rightNode
i
j
leftNode
rightNode
count
costMatrix
mwpm
cost
matching
i
node1
node2
m
dp
i
coinValue
j
solution
change
coinIndex
coinValue
canSelectCoin
dp
i
solution
i
selectedCoinValue
cellWithFewestCoins
dp
minCoins
value
n
coins
coins
coins
coins
dp
i
n
k
dp
history
numPairs
pairStates
pairCost
k
i
j
state
state
i
pair
newState
newCost
map
leftNodes
i
state
pairUsed
leftNode
rightNode
i
rightNode
count
costMatrix
mwpm
cost
matching
i
node1
node2
t
i
inv
i
i
len
k
sb
i
suffixLen
suffixArray
j
k
suffix
formattedStr
cmp
suffixRanks
ranks
i
pos
i
suffixRank
newRank
i
lastSuffixRank
currSuffixRank
i
sa
i
p
r
sa
min_len
i
i
i
suffix
sa
values
sparseTable
i
i
p
i
leftInterval
rightInterval
length
p
k
length
p
k
leftInterval
rightInterval
gcd
i
i
i
j
leftInterval
rightInterval
i
len
p
leftInterval
rightInterval
len
p
leftInterval
rightInterval
sum
p
result
p
len
p
values
sparseTable
values
sparseTable
values
sparseTable
currLeft
currRight
i
node
nodeHeight
curr
node
node
node
newNode
elemNode
nextNode
leftSubTree
rightSubTree
minSubTree
min
removeElem
replacedPoint
removed
removed
nextNode
replacedPoint
pow2
i
hashtableKeys
i
hashtableValues
i
oldKeyTable
oldValueTable
keyTableTmp
valueTableTmp
i
offset
i
j
x
oldValue
offset
i
j
x
offset
i
j
x
offset
i
x
oldValue
sb
i
MODIFICATION_COUNT
bucketIndex
newEntry
bucketIndex
bucketIndex
entry
bucketIndex
entry
links
bucket
existentEntry
oldVal
bucket
newTable
i
bucketIndex
bucket
keys
values
elementCount
nextIter
sb
i
i
val
i
INITIAL_VALUE
prime
power
i
ch
obj
cx
cy
count
i
heap
neighbors
i
xx
yy
radius
distance
pointQuadrant
radius
cx
cy
dx
dy
checkHorizontalCell
checkVerticalCell
checkDiagonalCell
quadrant
points
i
q
n
intQ
start
i
i
end
arrayDeque
i
i
i
root
j
index
from
to
j
tmp
heapSize
i
i
heapSize
i
i
indexOfLastElem
node1
node2
parent
heapSize
left
right
smallest
elem_i
elem_j
i
indexOfLastElem
removed_data
elem
heapSize
left
right
heapSize
i
i
indexOfLastElem
node1
node2
parent
heapSize
left
right
smallest
i_elem
j_elem
index
indexOfLastElem
removed_data
elem
heapSize
left
right
set
set
set
set1
set2
i
minki
minValue
i
value
i
oldValue
j
index
from
to
j
tmp
lst
i
from
to
j
i
j
i
mod
j
prime
j
j
i
i
i
block
i
i
block
MASK
maxSz
matrix
k
i
block
offset
mask
sb
i
n
bigAlpha
i
mod
i
j
i
k
rightChar
i
k
rightChar
leftChar
N
values
i
i
j
k
sb
l_r
left
right
searchResult
leftSubtree
rightSubtree
temp
temp
temp
temp
p
p
right
left
l_r
splayTree
sc
data
c
cmp
tmp
cmp
expectedNodeCount
stack
node
expectedNodeCount
stack
node
expectedNodeCount
stack1
stack2
node
expectedNodeCount
queue
node
lst
i
lst
i
lst
i
lst
i
sb
lines
level
next
nn
widest
line
aa
tmp
perpiece
i
line
hpw
j
c
k
k
k
j
f
gap1
gap2
k
k
trav
next
temp
i
newNode
data
data
data
i
trav
trav
index
trav
data
sb
trav
node
z
numOfKids
x
tempRight
minimum
arraySize
nodeSequence
i
numRoots
x
degree
next
y
pointer
z
o1Comparable
stack
buf
curr
start
node
created_new_node
is_prefix
i
ch
nextNode
node
i
ch
curNode
node
i
ch
nextNode
N
tm
tm
tm
tm
v
st
i
mid
N
tm
tm
tm
tm
v
st
N
tm
tm
tm
overlapsLeftSegment
overlapsRightSegment
tm
values
st
l
r
values
st
l
r
values
st
l
r
N
tm
segmentValue
minValue
maxValue
segment
tm
tm
v
st
l
r
q
v
st
l
r
q
v
st
l
r
q
N
tm
tm
rangeSum
rangeSum
tm
tm
v
st
l
r
N
tm
tm
tm
tm
v
st
gcd
N
tm
tm
tm
tm
v
st
l
r
q
v
st
l
r
q
v
st
l
r
q
v
st
l
r
q
v
st
v
st
l
r
q
i
res
values
st
values
st
N
tm
tm
tm
tm
v
st
N
tm
tm
tm
tm
v
st
i
root
next
root1
root2
s
n
intStack
start
i
i
end
arrayDeque
i
i
listStack
i
i
arrayStack
i
i
elem
node
cmp
x
y
z
y
y
x
z
x
y
y_original_color
w
w
tmpColor
expectedNodeCount
stack
node
values
rbTree
node
cmp
newRoot
insertedNode
cmp
newLeftNode
newRightNode
leftNodeHeight
rightNodeHeight
newParent
newParent
newRoot
removedNode
cmp
newLeftNode
newRightNode
successorValue
replacement
successorValue
replacement
expectedNodeCount
stack
node
val
isValid
cmp
cmp
newParent
newParent
cmp
cmp
cmp
leftNodeHeight
rightNodeHeight
newParent
newParent
cmp
successorValue
successorValue
expectedNodeCount
stack
node
val
isValid
i
parent
sum
fenwickTree
i
parent
sum
i
i
tmp
index
sb
i
ar
i
A
B
C
D
x1
y1
x2
y2
vx
dx
dy
cx
cy
x1
y1
x2
y2
circleArea
halfCircleArea
threePointsArea
v1x
v1y
v2x
v2y
angle
pizzaSliceArea
v1_x
v1_y
v2_x
v2_y
determinant
dotproduct
v1Length
v2Length
value
center
p1
p2
endpoints
n
singleton
collinearSegments
midPoint1
midPoint2
m
b
m
b
m1
m2
b1
b2
x
y
value
o1
o2
o3
o4
points
p1
p2
p3
p4
points
point
point1
point2
len
dp
i
j
k
v1_x
v1_y
v2_x
v2_y
determinant
area
a
b
c
p2
middle
perpSlope
x
y
fpx
fpy
ptx
pty
x
y
xRotated
yRotated
angle
fixedPoint
point
rotatedPoint
i
p0
lo
hi
mid
p1
sign
p1
p2
boundSign
segSign1
segSign2
ax
ay
bx
by
cx
cy
area
dLat
dLon
a
dotproduct
v1Length
v2Length
value
abc
abc
N
fp
area
fpx
fpy
i
pt1
pt2
a
b
c
d
N
points
r
R
c
C
dist
intersections
d
part1
part2
part3
r
R
c
C
dist
cx
Cx
cy
Cy
vx
vy
x
y
point
angle
pt1
pt2
fpx
fpy
ptx
pty
x
y
xRotated
yRotated
px
py
cx
cy
dx
dy
dist
angle
angle1
angle2
p1
p2
radius
circleCenter
origin
points
pt1
pt2
dotproduct
v1Length
v2Length
value
n
k
hull
i
lastUpperChainIndex
i
index
lastPt
i
value
s
v1_x
v1_y
v2_x
v2_y
determinant
a
b
c
side1
side2
side3
dir1
dir2
dir3
dir1
dir2
dir3
ax
ay
bx
by
cx
cy
area
a
b
c
i
j
p
i
j
p
k1
k2
N
hull
i
top
dx1
dy1
dx2
dy2
area
pts
hull
v1
v2
v3
v4
v3x
v3y
v3z
dx
dy
n
xQueueFront
xQueueBack
yWorkingSet
pt1
pt2
d
i
nextPoint
pt
upperBound
next
dist
lowerBound
dist
l
centroidX
centroidY
i
center
a1
a2
n
res
i
j
d1
d2
a1
a2
b1
b2
c1
c2
det
x
y
cross
list
i
l
temp
i
squarePolygon
p1
p2
list
poly1
poly2
mapping
invMapping
id
oddDegreeNodeCount
i
matrix
i
fromNodeId
toNodeId
wmcm
matching
i
node1
node2
from
to
edge
e1
e2
i
eulerPathSolver
cppTour
tourTotal
newCostMatrix
i
j
i
dp
history
matchingCost
p1
p2
bestState
bestMatchingCost
reducedState
matchCost
map
leftNodes
matchingSize
i
state
pairUsed
leftNode
rightNode
i
j
leftNode
rightNode
count
soln
i
from
startNodes
endNodes
i
start
i
nextEdge
g
i
n
g
solver
path
n
g
cpp
n
sum
visitedNodes
pq
connected
i
edge
i
NUM_NODES
graph
mstCost
edges
destNodeIndex
m
edgeCount
degree
destNodeIndex
edge
g
i
n
g
solver
cost
n
g
solver
cost
n
g
solver
cost
n
g
solver
cost
n
g
solver
cost
n
g
solver
cost
n
g1
g2
i
j
r
eagerSolver
lazySolver
startTime
eagerCost
endTime
lazyCost
i
minki
minValue
i
value
i
oldValue
j
index
from
to
j
tmp
lst
i
from
to
j
END_STATE
memo
end
r
next
subsetWithoutNext
minDist
end
newDistance
i
tourCost
lastIndex
state
i
bestIndex
bestDist
j
newDist
subsets
elementsLeftToPick
i
n
distanceMatrix
startNode
solver
n
g
solver
g
i
m
edgeCount
degree
destNodeIndex
edge
edges
destNodeIndex
i
minki
minValue
i
value
i
oldValue
j
index
from
to
j
tmp
lst
i
from
to
j
edges
m
edgeCount
edge
nodeIndex
g
i
n
g
solver
cost
n
g
solver
cost
n
g
solver
cost
n
g
solver
cost
soln
i
from
startNodes
endNodes
i
start
i
next
graph
i
n
graph
solver
n
graph
solver
i
u
graph
i
n
graph
n
graph
n
graph
n
graph
n
graph
n
solver
sccs
multimap
i
n
inDegree
q
i
index
order
at
g
solver
ordering
g
solver
g
solver
g
solver
dist
path
at
pq
visited
node
edges
i
edge
newDist
i
i
n
graph
solver
bridges
i
node1
node2
graph
i
dist
relaxedAnEdge
v
v
E
V
start
edges
d
i
count
edges
numNodes
graph
nodeCount
list
i
root
next
root1
root2
sum
uf
count
visited
stack
node
edges
numNodes
graph
nodeCount
list
n
permutation
i
bestTour
bestTourCost
tourCost
cost
i
from
to
last
first
first
toSwap
i
tmp
n
matrix
edgeCost
optimalTour
i
bestTour
tourCost
uf
i
edges
numNodes
graph
components
list
i
root
next
root1
root2
path
at
visited
queue
node
edges
graph
i
n
graph
solver
start
end
path
G
F
openSet
closedSet
pq
node
edges
i
edge
g
h
RANDOM
n
graph
i
X
Y
N
connections
locations
m
k
i
j
ii
jj
node1
node2
i
s
e
d
a
dx
dy
dists
pq
visited
node
edges
i
edge
newDist
v
t
dp
i
mask
j
mask
j
subMask
j
k
n
k
i
j
k
i
j
INF
matrix1
matrix2
ret_val
count
visited
queue
DEPTH_TOKEN
node
edges
numNodes
graph
nodeCount
i
j
list
i
graph
i
n
graph
solver
count
components
i
n
visited
order
index
u
v
n
dist
v
newDist
N
adjMatrix
ordering
dists
edges
ordering
visited
i
at
topsort
dist
i
nodeIndex
adjacentEdges
newDist
N
graph
i
ordering
dists
n
degree
leaves
i
edges
processedLeafs
newLeaves
tree
i
graph
graph2
graph3
graph4
graph5
graph6
root
root
node0
node1
node2
node3
node4
node5
node6
node7
node8
total
root
root
node4
node3
node1
nodem6
node0
node7
nodem4
node2
node9
node8
centers1
centers2
rootedTree1
tree1Encoding
rootedTree2
tree2Encoding
n
degree
leaves
i
edges
processedLeafs
newLeaves
root
child
labels
sb
graph
i
tree1
tree2
tree
root0
root
child
graph
i
graph
root
root
subtreeNodeCount
child
count
graph
i
root
solver
n
tree
bestDist
index
edges
tuple
dist
furthestIndex
diameter
graph
numNodes
diameter
graph
i
i
root
solver
lca
n
tree
graph
i
root
rootedTree
subtreeNodeCount
child
eulerTourSize
l
r
i
i
i
p
i
leftInterval
rightInterval
len
p
leftInterval
rightInterval
tree
i
n
degrees
leaves
i
edges
processedLeafs
newLeaves
n
root
degree
parent
visited
leafs
q
at
edges
newLeafs
map
i
treeSize
p
labels
parentInnerParentheses
l1
l2
tree1
tree2
encoding1
encoding2
bestDist
index
edges
result
dist
centers
n
visited
prev
result
furthestNode1
furthestNode2
path
i
tree
i
graph
graph2
graph3
graph4
graph5
graph6
depth
id
edges
diameter
radius
eccentricity
graph
diameter
graph
i
i
stack
parentStack
at
to
parent
edges
n
graph
solver
bridges
i
node1
node2
graph
i
count
visited
stack
node
edges
numNodes
graph
nodeCount
list
edges
destNodeIndex
m
edgeCount
degree
destNodeIndex
edge
g
i
to
cost
m
edgeCount
degree
destNodeIndex
edgeCost
rows
header
percentage
n
g1
g2
numEdgesIncluded
i
j
r
adjListSolver
matrixSolver
start
listCost
end
listTimeMs
matrixCost
matrixTimeMs
i
minki
minValue
i
value
i
oldValue
j
index
from
to
j
tmp
lst
i
from
to
j
n
visited
minCut
maxFlow
flow
cap
i
dfsFlow
flow
i
prev
q
node
cap
bottleNeck
edge
edge
n
s
t
solver
u
v
i
e1
e2
f
cap
bottleNeck
n
s
t
solver
resultGraph
u
v
i
e1
e2
next
f
q
node
cap
numEdges
edge
cap
bottleNeck
n
s
t
solver
mice
holes
M
H
N
S
T
solver
i
i
mouse
j
hole
i
u
v
i
e1
e2
f
edges
bottleNeck
u
v
i
e1
e2
flow
q
prev
node
cap
bottleNeck
edge
edge
n
s
t
solver
resultGraph
u
v
i
e1
e2
f
edges
bottleNeck
n
s
t
solver
resultGraph
path
bottleNeck
dist
prev
i
from
path
edge
n
s
t
solver
N
matches
visited
next
i
oppositeNode
graph
i
n
graph
f
i
edges
rcap
bottleNeck
n
s
t
solver
g
n
s
t
solver
g
n
s
t
solver
nodesVisited
nextColor
visitCount
edges
count
n
graph
n
f
solver
u
v
i
e1
e2
e1
e2
f
i
edges
cap
bottleNeck
n
s
t
solver
n
s
t
solver
dist
i
from
path
bottleNeck
dist
prev
pq
node
edges
i
edge
newDist
path
edge
next
f
i
q
node
cap
numEdges
edge
cap
bottleNeck
n
s
t
solver
n
s
t
solver
i
j
k
i
j
k
i
j
path
at
matrix
i
n
m
solver
dist
i
j
i
j
path
str
i
node
graph
i
n
graph
solver
sccs
multimap
i
i
path
at
k
i
j
k
i
j
n
graph
i
start
solver
d
i
i
strPath
path
nodes
state
memo
prev
index
nextIndex
nextState
minCost
index
next
nextState
newCost
n
distanceMatrix
solver
NUM_NODES
adjMatrix
sccs
u
min
v
v
i
edges
graph
i
n
graph
solver
isArticulationPoint
i
n
graph
solver
isArticulationPoint
i
graph
i
dist
i
i
E
V
start
graph
d
i
i
degree
ipq
visited
nodeId
minValue
newDist
path
dist
at
i
minki
minValue
i
value
i
oldValue
j
index
from
to
j
tmp
lst
i
sccs
i
graph
i
n
graph
cmp
uf
cheapest
stop
i
e
uc
vc
i
e
uf
u
v
u
v
x
y
x
y
n
m
i
g
solver
ans
i
root
next
root1
root2
pq
uf
index
edge
i
root
next
root1
root2
numNodes
edges
solver
cost
visited
queue
at
neighbors
depth
n
graph
i
i
sum
loId
hiId
i
i
loMax
hiMin
i
i
values
range
N
i
j
itemCount
n
usedCount
seq
used
n
subset
i
i
r
set
i
i
array
lazyRangeAdder
used
picked
N
i
i
first
toSwap
i
tmp
sequence
alpha
N
MAX_VAL
subset
i
mask
i
set
used
N
elementsLeftToPick
i
i
i
j
R
set
colors
selection
splitPoint
pivot
i
j
tmp
sorter
array
j
k
m
mid
p
m
k
t
m
tmp
sorter
array
n
i
i
left
right
largest
tmp
sorter
array
sorted
i
tmp
array
sorter
sortedValues
i
n
left
right
n1
n2
n
i1
i2
ar
i
array
max
i
maximum
numberOfDigits
placeValue
range
frequency
sortedValues
i
digit
i
i
digit
sorter
numbers
i
j
tmp
sorter
array
minValue
maxValue
i
sz
b
i
i
k
sorter
nums
N
i
swapIndex
j
tmp
sorter
array
index
splitPoint
pivot
i
j
tmp
quickSelect
array
kthLargestElement
minValue
maxValue
i
N
M
numBuckets
buckets
i
i
bi
bucket
bi
j
bucket
k
sorter
array
ar
i
ar
i
lst
i
lst
i
graph
i
n
levels
nodesPerLevel
n
l
g
levelIndex
l
i
j
gen
i
N
vector
i
j
n
v
expected
result
N
newMatrix
i
N
newMatrix
i
j
k
N
newMatrix
i
P
matrix
matrix2
result
identity
nRows
nCols
lead
r
i
temp
lv
j
j
nCols
y
x
nCols
nEmptyRows
y
x
augmentedMatrix
x
y
z
min
c
j
r
i
v
v
j
i
j
n
i
invI
j
invJ
tmp
matrix
n
m
r
i
k
t
inverse
k
j
c
k
n
augmented
i
j
inv
i
j
nCols
y
x
nCols
nEmptyRows
y
x
ret
tmp
p
augmentedMatrix
inv
i
x
y
z
m
n
n
a
b
c
d
e
f
g
h
i
det
i
c
sign
n
newMatrix
rPtr
i
cPtr
j
aRows
aCols
bRows
bCols
c
i
j
k
a
b
c
N
newMatrix
i
N
newMatrix
i
j
k
N
newMatrix
i
P
T
i
i
initialValues
size
T
result
ans
j
N
DP
n
i
coefficients
k
i
fib
coefficients2
N
DP
n
answer
n
augmented
i
j
inv
i
j
nRows
nCols
lead
r
i
temp
lv
j
j
nCols
y
x
nCols
nEmptyRows
y
x
matrix
inv
N
max
generation
nextGeneration
i
lo
hi
fitness
tour
fittestIndv
fittestIndvFitness
epoch
fitnessSum
i
in
bestEpochIndv
bestEpochFitness
i
in
norm
bestEpochTravelCost
bestTravelCost
bestEpochTravelCost
bestTravelCost
i
parent1
parent2
child
j
fitness
i
from
to
last
first
fitness
i
from
to
last
first
r
mid
l
h
newPath
start
end
minimum
maximum
missing
j
i
i
n
m
path
i
i
from
to
last
first
i
i
j
tmp
index
i
generation
nextGeneration
i
lo
hi
epoch
fitnessSum
i
in
fittest
maxFitness
i
in
norm
i
parent1
parent2
child
j
i
score
i
r
mid
l
h
splitPoint
newDNA
N
generation
nextGeneration
i
lo
hi
fitness
bestFitness
epoch
fitnessSum
i
in
bestEpochFitness
i
norm
i
parent1
parent2
child
j
value
weight
i
r
mid
l
h
splitPoint
newBitSet
i
i
n
multiplier
weights
values
i
cap
gaAns
answer
i
N
DP
i
w
v
sz
matches
m
n
i
j
arr
arr
i
len
matches
size
Z
L
R
k
i
str
sa
text
i
i
p
r
inv
i
i
len
k
i
suffixLen
suffix
f
k
j
sj
i
s
index
strings
sentinelIndexes
t
sa
k
solver
token
t
t
i
inv
i
i
len
k
sb
i
suffixLen
string
j
k
suffix
formattedStr
colors
colorIndex
i
suffixLen
string
j
k
suffix
formattedStr
cmp
suffixRanks
ranks
i
pos
i
suffixRank
newRank
i
lastSuffixRank
currSuffixRank
i
i
k
str
j
asciiVal
sentinel
i
k
str
j
set
i
s
j
suffixArray
tree
lo
hi
shrinkWindow
windowLcp
i
res
pattern
text
sa
text
i
i
p
r
suffix_str
lo
hi
substr_len
mid
suffix_index
suffix_len
cmp
arr
n
c
r
p
i
invI
arr
i
S
centers
palindromes
i
diameter
index
index
s
i
n
i
mod
str
pat
matches
PL
TL
patternHash
rollingHash
BIG_PL
POWERS
i
i
firstValue
lastValue
j
matches
PL
TL
patternHash
rollingHash
BIG_PL
POWERS
i
i
firstValue
lastValue
j
rollingHashes
k
i
str
sa
text
i
i
p
r
inv
i
i
len
k
max_len
lrss
i
i
suffixLen
suffix
occurrences
skipTable
n
textIndex
patternIndex
skipTable
i
searcher
t
p
