testConvertOctalToBinary
testBinaryToOctal
testHexToOct
testDecimalToHexaDecimal
testIntegerToRoman
testRomanToInteger
testBinaryToDecimal
testNegativeBinaryToDecimal
testLargeBinaryToDecimal
testOctalToHexadecimal
testhexaDecimalToDecimal
testOctalToDecimal
testBinaryToHexadecimal
testHexaDecimalToBinary
testingProcesses
addProcessesForFCFS
initialisation0
initialisation1
initialisation2
initialisation3
constructor
sort
scheduling
schedulingOf_TwoProcesses
schedulingOfA_ShortestJobArrivingLast
scheduling_WithProcessesNotComingBackToBack
schedulingOf_nothing
testPreemptivePriorityScheduling
testingProcesses
addProcessesForRR
testEncrypt
testDecrypt
caesarEncryptTest
caesarDecryptTest
caesarBruteForce
testRSA
setUp
testEncrypt
testDecrypt
initialize
clock
getClockBit
vigenereEncryptTest
vigenereDecryptTest
testEncode
testDecode
testIsTextTheSameAfterEncodeAndDecode
simpleSubCipherEncryptTest
simpleSubCipherDecryptTest
testEncrypt
testDecrypt
testIsTextTheSameAfterEncryptionAndDecryption
KMPSearchTestLast
KMPSearchTestFront
KMPSearchTestMiddle
KMPSearchTestNotFound
KMPSearchTest4
setUp
testSearchRoot
testSearchF
testSearchNull
testNullRoot
testSearchValueThatNotExists
RabinKarpAlgorithmTestExample
testBinarySearch
rowColumnSorted2dArrayBinarySearchTestMiddle
rowColumnSorted2dArrayBinarySearchTestSide
rowColumnSorted2dArray_BinarySearchTestUpper
rowColumnSorted2dArray_BinarySearchTestUpperSide
rowColumnSorted2dArray_BinarySearchTestLower
rowColumnSorted2dArray_BinarySearchTestLowerSide
rowColumnSorted2dArray_BinarySearchTestNotFound
testIntegerBinarySearch
testStringBinarySearch
setUp
testSearchRoot
testSearch4
testNullRoot
testSearchValueThatNotExists
quickSelectMinimumOfOneElement
quickSelectMinimumOfTwoElements
quickSelectMinimumOfThreeElements
quickSelectMinimumOfManyElements
quickSelectMaximumOfOneElement
quickSelectMaximumOfTwoElements
quickSelectMaximumOfThreeElements
quickSelectMaximumOfManyElements
quickSelectMedianOfOneElement
quickSelectMedianOfThreeElements
quickSelectMedianOfManyElements
quickSelect30thPercentileOf10Elements
quickSelect30thPercentileOfManyElements
quickSelect70thPercentileOf10Elements
quickSelect70thPercentileOfManyElements
quickSelectMedianOfThreeCharacters
quickSelectMedianOfManyCharacters
quickSelectNullList
quickSelectEmptyList
quickSelectIndexOutOfLeftBound
quickSelectIndexOutOfRightBound
generateRandomIntegers
generateRandomCharacters
getSortedCopyOfList
testHowManyTimesRotated
BinarySearch2dArrayTestMiddle
BinarySearch2dArrayTestMiddleSide
BinarySearch2dArrayTestUpper
BinarySearch2dArrayTestUpperSide
BinarySearch2dArrayTestLower
BinarySearch2dArrayTestLowerSide
BinarySearch2dArrayTestNotFound
BinarySearch2dArrayTestOneRow
BinarySearch2dArrayTestTargetInMiddle
BinarySearch2dArrayTestTargetAboveMiddleRowInMiddleColumn
BinarySearch2dArrayTestEmptyArray
searchItem
notFound
testAscending
testDescending
ElementInMiddle
RightHalfDescOrder
LeftHalfDescOrder
RightHalfAscOrder
LeftHalfAscOrder
ElementNotFound
WiggleTestNumbersEven
WiggleTestNumbersOdd
WiggleTestNumbersOddDuplicates
WiggleTestNumbersOddMultipleDuplicates
WiggleTestNumbersEvenMultipleDuplicates
WiggleTestNumbersEvenDuplicates
WiggleTestStrings
successTest
failureTest
beadSortEmptyArray
beadSortSingleIntegerArray
bogoSortNonDuplicateIntegerArray
bogoSortDuplicateIntegerArray
bucketSortSingleIntegerArray
bucketSortNonDuplicateIntegerArray
bucketSortDuplicateIntegerArray
bucketSortNonDuplicateIntegerArrayWithNegativeNum
bucketSortDuplicateIntegerArrayWithNegativeNum
isSortedEmptyArray
isSortedWithSingleElement
isSortedArrayTrue
isSortedArrayFalse
isSortedListTrue
isSortedListFalse
slowSortEmptyArray
slowSortSingleIntegerElementArray
slowSortSingleStringElementArray
slowSortIntegerArray
slowSortDuplicateIntegerArray
slowSortStringArray
slowSortDuplicateStringArray
slowSortStringSymbolArray
ShellSortEmptyArray
ShellSortSingleIntegerArray
ShellSortSingleStringArray
ShellSortNonDuplicateIntegerArray
ShellSortDuplicateIntegerArray
ShellSortNonDuplicateStringArray
ShellSortDuplicateStringArray
getSortAlgorithm
cocktailShakerSortEmptyArray
cocktailShakerSortSingleStringElementArray
cocktailShakerSortIntegerArray
cocktailShakerSortStringArray
treeSortEmptyArray
treeSortSingleStringElement
treeSortStringArray
treeSortIntegerArray
treeSortDoubleArray
getSortAlgorithm
bogoSortEmptyArray
bogoSortSingleIntegerArray
bogoSortSingleStringArray
bogoSortNonDuplicateIntegerArray
bogoSortDuplicateIntegerArray
bogoSortNonDuplicateStringArray
bogoSortDuplicateStringArray
quickSortEmptyArrayShouldPass
quickSortSingleValueArrayShouldPass
quickSortWithIntegerArrayShouldPass
quickSortForArrayWithNegativeValuesShouldPass
quickSortForArrayWithDuplicateValuesShouldPass
quickSortWithStringArrayShouldPass
pancakeSortEmptyArray
pancakeSort
pancakeSortNonDuplicateIntegerArray
pancakeSortDuplicateIntegerArray
pancakeSortNegativeDuplicateIntegerArray
pancakeSortSingleStringArray
pancakeSortNonDuplicateStringArray
pancakeSortDuplicateStringArray
simpleSortEmptyArray
simpleSortSingleIntegerArray
simpleSortSingleStringArray
simpleSortNonDuplicateIntegerArray
simpleSortDuplicateIntegerArray
simpleSortNonDuplicateStringArray
simpleSortDuplicateStringArray
BinaryInsertionSortTestNonDuplicate
BinaryInsertionSortTestDuplicate
getSortAlgorithm
getSortAlgorithm
getSortAlgorithm
shouldAcceptWhenEmptyArrayIsPassed
shouldAcceptWhenEmptyListIsPassed
shouldAcceptWhenSingleValuedArrayIsPassed
shouldAcceptWhenSingleValuedListIsPassed
shouldAcceptWhenListWithAllPositiveValuesIsPassed
shouldAcceptWhenArrayWithAllPositiveValuesIsPassed
shouldAcceptWhenArrayWithAllNegativeValuesIsPassed
shouldAcceptWhenListWithAllNegativeValuesIsPassed
shouldAcceptWhenArrayWithRealNumberValuesIsPassed
shouldAcceptWhenListWithRealNumberValuesIsPassed
shouldAcceptWhenArrayWithDuplicateValueIsPassed
shouldAcceptWhenListWithDuplicateValueIsPassed
shouldAcceptWhenStringValueArrayIsPassed
shouldAcceptWhenStringValueListIsPassed
shouldAcceptWhenRandomArrayIsPassed
shouldAcceptWhenRandomListIsPassed
setUp
insertionSortSortEmptyArrayShouldPass
testEmptyArray
insertionSortClassicalSortSingleValueArrayShouldPass
testSingleValue
insertionSortClassicalWithIntegerArrayShouldPass
testIntegerArray
insertionSortClassicalForArrayWithNegativeValuesShouldPass
testWithNegativeValues
insertionSortClassicalForArrayWithDuplicateValuesShouldPass
testWithDuplicates
insertionSortClassicalWithStringArrayShouldPass
testWithStringArray
insertionSortClassicalWithRandomArrayPass
testWithRandomArray
IntegerArrTest
StringArrTest
emptyArrTest
StrandSortNonDuplicateTest
StrandSortDuplicateTest
StrandSortEmptyTest
StrandSortNullTest
StrandSortNegativeTest
StrandSortNegativeAndPositiveTest
allSameTest
combSortEmptyArray
combSortSingleStringElement
combSortStringArray
combSortIntegerArray
combSortDoubleArray
DNFSTestOdd
DNFSTestEven
DNFSTestEvenStrings
DNFSTestOddStrings
DNFSTestOddMidGiven
DNFSTestEvenMidGiven
DNFSTestEvenStringsMidGiven
DNFSTestOddStringsMidGiven
StrandSortNonDuplicateTest
StrandSortDuplicateTest
bubbleSortEmptyArray
bubbleSortSingleIntegerElementArray
bubbleSortSingleStringElementArray
bubbleSortIntegerArray
bubbleSortStringArray
gnomeSortEmptyArray
singleIntegerArray
gnomeSortNonDuplicateIntegerArray
gnomeSortDuplicateIntegerArray
gnomeSortNegativeDuplicateIntegerArray
singleStringArray
gnomeSortNonDuplicateStringArray
gnomeSortDuplicateStringArray
testMergeSortRecursiveCase1
testMergeSortRecursiveCase2
oddEvenSortEmptyArray
oddEvenSortNaturalNumberArray
oddEvenSortIntegerArray
generateArray
generateArrayEmpty
generateDouble
testMakeSet
testUnionFindSet
testLeftistHeap
testHeap
test1
test2
getMap
putTest
getTest
deleteTest
containsTest
sizeTest
keysTest
hashTest
testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings
testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger
testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString
testMajorityWithSingleMajorityElement
testMajorityWithMultipleMajorityElements
testMajorityWithNoMajorityElement
testMajorityWithEmptyArray
testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings
testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger
testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString
getMap
insertKey
getKeyIndex
containsKey
removeKey
removeNone
reHashTableIncreasesTableSize
hashFunctionsAreDifferent
avoidInfiniteLoops
testBoruvkaMSTV9E14
testBoruvkaMSTV2E1
testCompleteGraphK4
testNegativeVertices
testEdgesNull
testEdgesEmpty
testEdgesRange
computeTotalWeight
findStronglyConnectedComps
findStronglyConnectedCompsShouldGetSingleNodes
testFindHamiltonianCycleShouldReturnHamiltonianCycle
testFindHamiltonianCycleShouldReturnInfinityArray
findStronglyConnectedComps
findStronglyConnectedCompsShouldGetSingleNodes
testQue
testPQInsertion
testPQDeletion
testPQExtra
add
get
contains
removeFromHead
removeFromTail
checkSortedOnLowestLayer
createSkipList
print
testReverseKGroupWithEmptyList
testReverseKGroupWithSingleNodeList
testReverseKGroupWithKEqualTo2
testReverseKGroupWithKEqualTo3
testRotateRightEmptyList
testRotateRightSingleNodeList
testRotateRightMultipleElementsList
testRotateRightFullRotation
createSampleList
detectLoop
middle
swap
clear
search
deleteNth
reverseList
reverseListNullPointer
reverseListTest
RecursiveReverseList
RecursiveReverseListNullPointer
RecursiveReverseListTest
readWithEnhancedForLoopTest
toStringTest
toStringForEmptyListTest
countTest
countForEmptyListTest
testSortEmptyList
testSortSingleNodeList
testSortMultipleElementsList
testAddElement
testLookup
testCompare
testMerge
increment
merge
compare
testIncrement
testDecrement
testIncrementAndDecrement
testCompare
testMerge
putAndGetIntegerValues
putAndGetStringValues
nullKeysAndValues
overCapacity
testLFUCacheWithIntegerValueShouldPass
testLFUCacheWithStringValueShouldPass
testAddNodeWithUpdatedFrequency
putAndGetIntegerValues
putAndGetStringValues
nullKeysAndValues
overCapacity
testRootNull
testOneNode
testBinaryTreeIsBST
testBinaryTreeWithDuplicatedNodesIsNotBST
testBinaryTreeIsNotBST
testNullRoot
testRecursivePreOrder
testRecursivePreOrderNonBalanced
testRootNull
testKeyPresentRootIsCeil
testKeyPresentLeafIsCeil
testKeyAbsentRootIsCeil
testKeyAbsentLeafIsCeil
testKeyAbsentLeftMostNodeIsCeil
testKeyAbsentCeilIsNull
pointOf
findMin
delete
findNearest
testRootNull
testSingleNodeTree
testVerticalTraversalCompleteTree
testVerticalTraversalDifferentHeight
testBSTIsCorrectlyConstructedFromOneNode
testBSTIsCorrectlyCleanedAndEmpty
testBSTIsCorrectlyCleanedAndNonEmpty
testBSTIsCorrectlyConstructedFromMultipleNodes
createTree
testRootNull
testSingleNodeTree
testLevelOrderTraversalCompleteTree
testLevelOrderTraversalDifferentHeight
testNullArray
testEmptyArray
testSingleElementArray
testCreateBSTFromSmallArray
testCreateBSTFromLongerArray
testShouldNotCreateBSTFromNonSortedArray
testNullRoot
testRecursiveInorder
testRecursiveInorderNonBalanced
testRootNull
testOneNode
testBinaryTreeIsBalancedEqualSubtreeHeights
testBinaryTreeIsBalancedWithDifferentHeights
testBinaryTreeNotBalanced
testBinaryTreeNotBalancedBecauseLeftTreeNotBalanced
testOnNullArraysShouldReturnNullTree
testOnEmptyArraysShouldCreateNullTree
testOnSingleNodeTreeShouldCreateCorrectTree
testOnRightSkewedTreeShouldCreateCorrectTree
testOnLeftSkewedTreeShouldCreateCorrectTree
testOnNormalTreeShouldCreateCorrectTree
checkTree
testRootNull
testSingleNodeTree
testSymmetricTree
testNonSymmetricTree
testNullRoot
testPostOrder
testPostOrderNonBalanced
test1
test2
test3
test4
testBothRootsAreNull
testOneRootIsNull
testSingleNodeTreesAreSame
testSameTreesIsSuccessful
testSameTreesFails
testTreesWithDifferentStructure
build
update
get
updateAndGet
testRootNull
testSingleNodeTree
testZigzagTraversalCompleteTree
testZigzagTraversalDifferentHeight
testBSTIsCorrectlyConstructedFromOneNode
testBSTIsCorrectlyCleanedAndEmpty
testBSTIsCorrectlyCleanedAndNonEmpty
testBSTIsCorrectlyConstructedFromMultipleNodes
setUp
isEmpty
isFull
get
put
concurrentTest
generateInt
shutDownExecutorSafely
getSortedListFrom
testGraphColoring1
testGraphColoring2
testGraphColoring3
createGraph
testForFirstCase
testForSecondCase
testForThirdCase
testForFourthcase
testMaze
testNumberZeroAndPowerZero
testNumberHundredAndPowerTwo
testNumberHundredAndPowerThree
testNoElement
testSingleElement
testMultipleElements
testNBeingZeroOrLess
testNoLengthElement
testLengthOne
testLengthTwo
testLengthFive
test1
test2
test3
testNoElement
testLengthOne
testLengthTwo
testForEmptyImage
testForSingleElementImage
testForImageOne
testForImageTwo
testForImageThree
testForSameNewAndOldColor
testGrahamScan
testIfSumOfTheArrayIsOdd
testIfSizeOfTheArrayIsOne
testIfSumOfTheArrayIsEven1
testIfSumOfTheArrayIsEven2
Test1
Test2
Test3
climbStairsTestForTwo
climbStairsTestForZero
climbStairsTestForOne
climbStairsTestForFive
climbStairsTestForThree
hasMultipleEggSingleFloor
hasSingleEggSingleFloor
hasSingleEggMultipleFloor
hasMultipleEggMultipleFloor
testKnapSackBasic
testKnapSackEmpty
testKnapSackNoCapacity
testKnapSackMaxCapacity
testKnapSackThrowsForInputsOfDifferentLength
testKnapSackThrowsForNullInputs
testKnapSackThrowsForNegativeCapacity
testKnapSackThrowsForNegativeWeight
hasMultipleSubset
singleElementSubset
hasMultipleSubsetSO
singleSubsetSO
testOptimalJobScheduling1
testOptimalJobScheduling2
testOptimalJobScheduling3
testCatalanNumber
testMatchingPattern
testNonMatchingPattern
testEmptyPattern
testMinimumPathSumWithRegularGrid
testMinimumPathSumWithOneRowOneColumnGrid
testMinimumPathSumWithEmptyGrid
testMinimumPathSumWithOneColumnGrid
testMinimumPathSumGridOneRowGrid
testMinimumPathSumWithDiffRowAndColumnGrid
testMinimumPathSumWithNegativeNumberGrid
levenshteinDistanceTest
testMinimumSumPartitionWithEvenSum
testMinimumSumPartitionWithOddSum
testMinimumSumPartitionWithSingleElement
testMinimumSumPartitionWithLargeNumbers
testMinimumSumPartitionWithEmptyArray
testMinimumSumPartitionThrowsForNegativeArray
testUniquePaths_3x3
testUniquePaths_1x1
testUniquePaths_3x7
testUniquePaths_7x3
testUniquePaths_100x100
testUniquePaths2_3x3
testUniquePaths2_1x1
testUniquePaths2_3x7
testUniquePaths2_7x3
testUniquePaths2_100x100
testKnownValues
testFractionalKnapsackWithExampleCase
testFractionalKnapsackWithZeroCapacity
testFractionalKnapsackWithEmptyItems
testJobSequencingWithExampleCase
testActivitySelection
testSingleActivity
testNoOverlap
testCoinChangeProblemWithValidAmount
testCoinChangeProblemWithLargeAmount
testCoinChangeProblemWithPartialCoins2
testCoinChangeProblemWithSmallAmount
testCoinChangeProblemWithLargeAmountAndMultipleDenominations
testCoinChangeProblemWithAllDenominations
testCoinChangeProblemWithZeroAmount
flipBitTest
setBitTest
clearBitTest
getBitTest
testReverseBits
testNonRepeatingNumberFinder
testDifferentSignsPositiveNegative
testDifferentSignsNegativePositive
testSameSignsPositive
testSameSignsNegative
testIsEven
testIsPowerTwo
testHighestSetBit
testHighestSetBit
testIndexOfRightMostSetBit
StrassenMatrixMultiplicationTest2x2
StrassenMatrixMultiplicationTest4x4
StrassenMatrixMultiplicationTestNegetiveNumber4x4
testCalculatePower
testPower
testPeeks
testMixes
testBlockPractical
testCheckAnagrams
testCheckFalseAnagrams
testCheckSameWordAnagrams
testCheckDifferentCasesAnagram
testStringAreValidAnagramsCaseSensitive
testStringAreNotAnagramsCaseSensitive
testOptimisedAlgorithmStringsAreValidAnagrams
testOptimisedAlgorithmShouldThrowExceptionWhenStringsContainUppercaseLetters
numberTests
inputStream
testPangram
main
setUp
testSearch
testEmptyPatterns
testPatternNotFound
testPatternAtBeginning
testPatternAtEnd
testMultipleOccurrencesOfPattern
testCaseInsensitiveSearch
testWordLadder
isAlphabetical
shouldAcceptWhenEmptyStringIsPassed
shouldAcceptNotWhenWhenSingleCharacterIsPassed
shouldAcceptWhenStringIsPassed
toUpperCase
palindrome
toLowerCase
letterCombinationsOfPhoneNumber
isAllCharactersSame
testRotation
palindrome
testHammingDistance
testNotEqualStringLengths
palindrome
testOne
testTwo
testThree
isAlphabetical
ReverseStringTest
isVowel
stringCompressionTest
testFindFirstMatch
testFindFirstNotMatch
testFindFirstPatternLongerText
testFindFirstPatternEmpty
testFindFirstTextEmpty
testFindFirstPatternAndTextEmpty
testFindFirstSpecialCharacter
testFindFirstInsensitiveMatch
testFindFirstInsensitiveNotMatch
testGetLastComparisons
testGetLastComparisonsNotMatch
testFindFirstPatternNull
testFindFirstTextNull
testOne
testTwo
testThree
testFour
testFive
testSix
testSeven
testEvaluate
testIfEvaluateThrowsExceptionForEmptyInput
testIfEvaluateThrowsExceptionForInproperInput
testIfEvaluateThrowsExceptionForInputWithUnknownOperation
testIfEvaluateThrowsExceptionForInputWithTooFewArgsA
testIfEvaluateThrowsExceptionForInputWithTooFewArgsB
testForOneElement
testForTwoElements
testForThreeElements
testForFourElements
testForFiveElements
testForSixElements
testForSevenElements
testMapReduceWithSingleWordSentence
testMapReduceWithMultipleWordSentence
testMedianWithOddNumberOfElements
testMedianWithEvenNumberOfElements
testWhenInvalidInoutProvidedShouldThrowException
testWithNegativeValues
testWithSingleValues
testWithRandomValues
testWithNegativeAndPositiveValues
testWithDuplicateValues
testWithDuplicateValuesB
testWithLargeValues
testWithLargeCountOfValues
testWithThreeValuesInDescendingOrder
testWithThreeValuesInOrder
testWithThreeValuesNotInOrderA
testWithThreeValuesNotInOrderB
testWithFloatValues
testWithByteValues
testWithLongValues
testWithDoubleValues
testMirrorMatrixRegularMatrix
testMirrorMatrixEmptyMatrix
testMirrorMatrixSingleElementMatrix
testMirrorMatrixMultipleRowsOneColumnMatrix
testMirrorMatrixNullInput
testMirrotMarixThrows
testTwoSumExists
testTwoSumNoSolution
testTwoSumMultipleSolutions
testTwoSumMultipleSolution
testTwoSumNegativeNumbers
testTwoSumNoSolutionDuplicatedInputs
testWithEmptyList
testWithSingleElement
testWithListWithOddLengthPositive
testWithListWithOddLengthPositive2
testWithListWithEvenLengthPositive
testWithListWithOddLengthNegative
testWithListWithEvenLengthNegative
twoPointersFirstTestCase
twoPointersSecondTestCase
twoPointersThirdTestCase
twoPointersFourthTestCase
twoPointersFiftiethTestCase
SampleTestCase1
SampleTestCase2
SampleTestCase3
EdgeCase1
EdgeCase2
testForOneElement
testForTwoElements
testForThreeElements
testForFourElements
testForFiveElements
testForSixElements
testForSevenElements
testForEightElements
testCountCharacters
testFitForUseOfOneBlock
testFitForEqualProcecesses
testFitForNoEmptyBlockCell
testFitForSameInputDifferentQuery
testFitForMoreBlocksNoFit
testFitForUseOfOneBlock
testFitForEqualProcecesses
testFitForNoEmptyBlockCell
testFitForSameInputDifferentQuery
testFitForMoreBlocksNoFit
testForOneElement
testForZeroStep
testForEqualSizeStep
testForLowerSizeStep
testForHigherSizeStep
testForOverlap
testForNoOverlap
testForOverlapWhenEndAEqualsStartBAndViceVersa
testForMaximumEndPoint
testWordCount
testSecondaryWordCount
testSetBits
testForOneElement
testForTwoElements
testForThreeElements
testForFourElements
testForFiveElements
testForSixElements
testForSevenElements
testForEightElements
testfFindPrimesTill1
testfFindPrimesTill2
testfFindPrimesTill4
testfFindPrimesTill40
testfFindPrimesTill240
testFindPrimesTillThrowsExceptionForNonPositiveInput
testGenerateWith1
testGenerateWith123456
testGenerateWith1A1Z3E1R1T3G1F1D2E1S1C
testGenerateNextElementWith1
testGenerateNextElementWith123456
testGenerateNextElementWith1A1Z3E1R1T3G1F1D2E1S1C
testFitForUseOfOneBlock
testFitForEqualProcecesses
testFitForNoEmptyBlockCell
testFitForSameInputDifferentQuery
testFitForMoreBlocksNoFit
testFitBadCase
failGenerationWithSameMinMaxLengthTest
generateOneCharacterPassword
failGenerationWithMinLengthSmallerThanMaxLengthTest
generatePasswordNonEmptyTest
testCRC16
testGetEuler
testGetEulerThrowsExceptionForNonPositiveInput
checkWhenMajorityExists
inputStreamWithExistingMajority
checkWhenMajorityExists
inputStreamWithoutMajority
testOne
testTwo
testOne
testTwo
testThree
testFour
testFive
testSix
testSeven
testEight
test1
test2
testFitForUseOfOneBlock
testFitForEqualProcecesses
testFitForNoEmptyBlockCell
testFitForSameInputDifferentQuery
testFitForMoreBlocksNoFit
testForOneElement
testForTwoElements
testForThreeElements
testForFourElements
testForFiveElements
testForSixElements
testForSevenElements
testForEightElements
checkForDifferentBits
checkForDifferentBitsLength
checkForSameBits
checkForLongDataBits
mismatchDataBits
mismatchDataBits2
checkForLongDataBitsSame
checkForEmptyInput
checkForInputOfLength1
computeThrowsExceptionWhenInputsAreNotBitStrs
testIsPalindromicPositive
testIsPalindromicNegative
testIsPalindromicInBasePositive
testIsPalindromicInBaseNegative
testIsPalindromicInBaseThrowsExceptionForNegativeNumbers
testIsPalindromicInBaseThrowsExceptionForWrongBases
testLowestBasePalindrome
medianSingleValue
medianTwoValues
medianThreeValues
medianDecimalValueReturn
medianNegativeValues
setUp
nextNumberFromEvenNumber
nextNumberFromOddNumber
collatzConjecture
sequenceOfNotNaturalFirstNumber
perfectCube
testGetMaxValue
testConstructorWithDenominatorEqualToZero
testPlus
testTimes
testReciprocal
testValue
testEqualsAndHashCode
testToString
testGenericRoot
testGenericRootWithNegativeInputs
testWithNegativeIndexShouldThrowException
testCheckTheFirst4SequenceElements
testCheck10thSequenceElement
testCheck20thSequenceElement
testCheck30thSequenceElement
testCheck40thSequenceElement
testCheck50thSequenceElement
testCheck100thSequenceElement
testCheck200thSequenceElement
checkElement
harshadNumber
validInputStream
invalidInputStream
computeRankTests
computeRankWithInvalidMatrix
perfectNumber
testNullInput
testEmptyInput
testInputOfIncorrectFormat
testPositiveValueIsSuccessfullyConverted
testNegativeValueIsSuccessfullyConverted
testPowerUsingRecursion
testForPronicNumber
testForNonPronicNumber
isDudeney
returnsCorrectValues
throwsIllegalArgumentExceptionForNegativeInput
throwsIllegalArgumentExceptionForLargeInput
testForOneElement
testForsecond
testForThird
testForFourth
testForFifth
testForSixth
testForSeventh
testForEighth
testWhenInvalidInoutProvidedShouldThrowException
testCorrectFactorialCalculation
shouldReturn7
shouldReturn5
shouldReturnNegative1
shouldReturn19
test1
test2
test3
test4
checkValueAtZero
checkValueAtOne
checkValueAtTwo
checkRecurrenceRelation
checkNegativeInput
lucasSeriesTwo
lucasSeriesOne
lucasSeriesSeven
lucasSeriesEleven
testIsSquareFreeInteger
testIsSquareFreeIntegerThrowExceptionIfNumberIsZero
testIsSquareFreeIntegerMustThrowExceptionIfNumberIsNegative
testZero
testPositive
testNegative
testCeil
TestPerfectSquareifiscorrect
TestPerfectSquareifisnotcorrect
TestPerfectSquareifisNegativeNumber
testGetAbsValue
arithmeticMeanZeroNumbers
geometricMeanZeroNumbers
harmonicMeanZeroNumbers
arithmeticMeanSingleNumber
geometricMeanSingleNumber
harmonicMeanSingleNumber
arithmeticMeanMultipleNumbers
geometricMeanMultipleNumbers
harmonicMeanMultipleNumbers
leonardoNumberNegative
leonardoNumberZero
leonardoNumberOne
leonardoNumberFive
leonardoNumberTwenty
testBinomialCoefficient
testReverseNumber
testReverseNumberThrowsExceptionForNegativeInput
testBinPow
numberTests
inputStream
testFindMaxThrowsExceptionForEmptyInput
Testpythagoreantriple
testJosephusProblem
testForEmptyInputArray
testForArrayWithSingleElement
testForArrayWithSameElements
numberTests
inputStream
minTest
passTest1
numberTests
inputStream
testFindMinThrowsExceptionForEmptyInput
testpFactorsMustReturnEmptyList
testpFactorsMustReturnNonEmptyList
testIsStrobogrammatic
volume
testcase1
testcase2
testcase3
testcase4
testcase5
testcase6
testcase7
testcase8
testNumbersArePalindromes
testNumbersAreNotPalindromes
testIfNegativeInputThenExceptionExpected
getRealtest
getImaginaryTest
addTest
addFalseTest
subtractTest
multiplyWithComplexTest
multiplyWithScalarTest
conjugateTest
abs
divideWithComplexTest
divideWithScalarTest
fft
testFloorWholeNumber
testFloorDoubleNumber
testFloorNegativeZero
testPowerOfTwoOrNotForPowersOfTwo
testPowerOfTwoOrNotForNotPowersOfTwo
testFrizziesForBase2
testFrizziesForBase3
testFrizziesForBase69
testSumFrom1To10
testSumOfOddNumbers1To19
testA
testB
testC
testForZeroTerms
testIfThrowsExceptionForNegativeNumberOfTerms
testWithSingleTerm
testWithZeroCommonDiff
testNumberIsFibonacciNumber
testNumberIsNotFibonacciNumber
testfor4
testfor1
testfor2
testfor625
testPollardRhoForNumber315MustReturn5
testPollardRhoForNumber187MustReturn11
testPollardRhoForNumber239MustThrowException
testLiouvilleLambdaMustThrowExceptionIfNumberIsZero
testLiouvilleLambdaMustThrowExceptionIfNumberIsNegative
testLiouvilleLambdaMustReturnNegativeOne
testLiouvilleLambdaMustReturnPositiveOne
testFor1
testFor45
testFor297
testFor2223
testFor857143
testFor3
testFor26
testFor98
testForRangeOfNumber
test1
test2
test3
test4
test5
test6
test7
testArrayGcd1
testArrayGcd2
testArrayGcdForEmptyInput
testfor1
testfor2
testfor625
testMobiusForZero
testMobiusForNegativeNumber
testMobiusFunction
testGetMaxValue
testGetMaxValueWithNoArguments
testAverage_double_12
testAverage_double_20
testAverage_double_4_5
testAverage_int_5
numberTests
inputStream
testFindMaxThrowsExceptionForEmptyInput
test1
test2
test3
test4
test5
test6
test7
testShouldThrowExceptionWhenInvalidRangeProvided
testShouldThrowExceptionWhenInvalidNumbersProvided
testAmicableNumbers
testShouldFindAllAmicableNumbersInRange
checkInvalidRange
checkInvalidNumbers
maxTest
testDeterministicMillerRabinForPrimes
testDeterministicMillerRabinForNotPrimes
testMillerRabinForPrimes
numberTests
inputStream
testFindMaxThrowsExceptionForEmptyInput
testGetWithNewObject
testGetWithSameObject
testGetWithBase1
testGetWithBase2
testGetThrowsAnErrorForNegativeInput
testConstructorThrowsAnErrorForEmptyInput
test1
test2
test3
test4
testGetMinValue
testGetMinValueWithNoArguments
testForOne
testForTwo
testForFive
testForEight
testOne
testTwo
testThree
testNegativeDividend
testDividendLessThanDivisor
testDividendIsZero
testDivisionByZero
testDigitalroot
testSurfaceAreaCube
testSurfaceAreaSphere
testSurfaceAreaRectangle
testSurfaceAreaCylinder
testSurfaceAreaSquare
testSurfaceAreaTriangle
testSurfaceAreaParallelogram
testSurfaceAreaTrapezium
testSurfaceAreaCircle
surfaceAreaHemisphere
surfaceAreaCone
testAllIllegalInput
testForFirst
testForSecond
testAutomorphicNumber
testIsArmstrong
test1
test2
test3
test4
testCalculateAreaWithInvalidInput
testArmstrong
addZerotoZero
addZerotoNumber
addOddtoEven
addEventoOdd
addRandoms
testCombination
testCombinationOptimised
euclideanTest1
euclideanTest2
euclideanTest3
euclideanTest4
manhattantest1
manhattantest2
manhattanTest3
hammingTest1
hammingTest2
hammingTest3
minkowskiTest1
minkowskiTest2
minkowskiTest3
main
convertBinaryToOctal
main
convertOctalToDecimal
main
convertTurkishToLatin
decToHex
main
main
hsvToRgb
rgbToHsv
approximatelyEqualHsv
getRgbBySection
convertToInt
convertOctalToBinary
convertOctalDigitToBinary
getHexaToDec
main
romanToInt
main
main
convertToDecimal
valOfChar
binaryToDecimal
main
integerToRoman
main
main
conventionalConversion
bitwiseConversion
main
main
convertToAnyBase
reVal
octToDec
decimalToHex
main
hex2decimal
decimal2octal
main
main
validForBase
base2base
main
convert
completeDigits
main
binToHex
main
scheduleProcesses
evaluateWaitingTime
evaluateTurnAroundTime
preemptivePriorityScheduling
scheduleProcesses
evaluateTurnAroundTime
evaluateWaitingTime
sortByArrivalTime
scheduleProcesses
findShortestJob
encode
decode
scheduleCore
keyExpansion
splitBlockIntoCells
mergeCellsIntoBlock
addRoundKey
subBytes
subBytesDec
shiftRows
shiftRowsDec
mixColumns
mixColumnsDec
encrypt
decrypt
main
findLocationByCharacter
encrypt
decrypt
main
encrypt
resetCounter
initialize
reInitialize
getNextKeyStream
reInitializeRegisters
incrementFrameCounter
increment
initialize
clock
initialize
clock
clock
getClockBit
get
getLastBit
xorTappingBits
pushBit
rightShift
toString
clock
getMajorityBit
encrypt
decrypt
encrypt
encrypt
decrypt
decrypt
generateKeys
encrpyter
encrpyter
decrypter
tableBuilder
numberOfRows
findElements
sortTable
getColumn
switchColumns
abecedariumBuilder
showTable
main
encrypt
decrypt
determinant
hillCipher
validateDeterminant
main
encode
decode
encryptMessage
decryptCipher
main
main
getSecretEncryptionKey
encryptText
decryptText
bytesToHex
encode
decode
isCapitalLatinLetter
isSmallLatinLetter
bruteforce
hexToBin
binToHex
xor
addBin
f
keyGenerate
round
encrypt
decrypt
sanitize
getKey
setKey
getSubkeys
XOR
createPaddedString
pad
padLast
feistel
encryptBlock
decryptBlock
encrypt
decrypt
search
search
getVisited
recursiveSearch
getVisited
find
main
BinarySearch
binarySearch
main
find
search
main
squareRoot
find
main
run
getResult
BinSearchAlgo
find
search
main
find
union
count
toString
main
main
find
search
main
rotated
main
find
KMPSearch
computeLPSArray
find
main
search
find
main
find
main
find
main
select
selectIndex
selectIndex
partition
pivot
partition5
main
monteCarloTreeSearch
addChildNodes
getPromisingNode
simulateRandomPlay
getWinnerNode
printScores
main
find
find
main
find
find
binsear
main
find
ternarySearch
main
find
search
find
search
sort
doSort
randomPartition
partition
sort012
printArray
main
swap
less
greater
greaterOrEqual
print
print
flip
isSorted
isSorted
generateArray
generateDouble
generateInt
sort
sort
main
isSorted
nextPermutation
sort
main
sort
dualPivotQuicksort
partition
swap
main
sort
main
sort
doSort
main
nextGap
sort
main
main
oddEvenSort
swap
strandSort
merge
sort
main
sort
main
sort
doSort
merge
getMax
countSort
radixsort
print
main
sort
sort
sort
swap
introSort
partition
insertionSort
heapSort
heapify
sort
sort
sentinelSort
main
measureApproxExecTime
call_merge_sort
merge_sort
implement_merge_sort
main
sort
sort
main
sort
main
main
sort
bubbleSort
sort
merge
mergeSort
merge
sort
main
addEdge
sort
sort
isSorted
compare
sortByMergeSort
count
task
task1
sortByInsertionSort
count
sortByHeapSort
count
task
task1
sort
sort
sort
heapify
siftDown
swap
less
sort
sort
streamSort
main
sort
main
sort
mapIndex
triColorSort
wiggleSort
sort
main
sort
getSmallerElementCount
main
main
bucketSort
hash
max
min
sort
binaryInsertSort
sort
sort
dutch_national_flag_sort
sort
replace
main
sort
sort
doTreeSortArray
doTreeSortList
main
compAndSwap
bitonicMerge
bitonicSort
sort
printArray
main
getValue
addChild
getChildren
makeSet
findSet
unionSets
getElement
getElementKey
swap
toggleUp
toggleDown
extractMax
insertElement
deleteElement
getElement
getElement
insertElement
deleteElement
isEmpty
clear
merge
merge
insert
extract_min
in_order
in_order_aux
insert
peek
isEmpty
isFull
print
heapSort
sink
delete
main
getElement
getElementKey
swap
toggleUp
toggleDown
extractMin
insertElement
deleteElement
getElement
getInfo
getKey
toString
equals
hashCode
add
upHeapify
display
size
isEmpty
remove
downHeapify
get
isLarger
swap
updatePriority
empty
insert
deleteMin
findMin
meld
size
countersRep
delete
decreaseKey
potential
totalLinks
totalCuts
updateMin
cascadingCuts
cut
successiveLink
toBuckets
fromBuckets
link
getKey
isMarked
mark
setNext
getNext
isRoot
insertHash
insert
contains
compute
asciiString
main
majority
hashing
insertHash
deleteHash
displayHashtable
insert
findEnd
findKey
delete
delete
display
display
isEmpty
getNext
getKey
setNext
put
reHash
get
remove
containsKey
size
toString
hashFunction1
hashFunction2
insertKey2HashTable
reHashTableIncreasesTableSize
deleteKeyFromHashTable
displayHashtable
findKeyInTable
checkTableContainsKey
checkLoadFactor
isFull
isEmpty
getNumberOfKeysInTable
intersection
put
get
delete
keys
size
contains
hash
put
get
delete
contains
size
keys
increment
resize
main
initBuckets
put
hashFunction
reHash
remove
size
get
toString
containsKey
addEdge
main
kruskal
start
dfs
printAll
main
kosaraju
sortEdgesByLowestFinishTime
createTransposeMatrix
findStronglyConnectedComponents
dfs
dfs2
printPath
main
go
show
addEdge
getEdgeArray
stronglyConnectedComponents
stronglyConnCompsUtil
merge
hasMoreEdgesToAdd
computeCheapestEdges
initializeComponents
find
union
boruvkaMST
checkEdgeVertices
floydwarshall
main
findHamiltonianCycle
isPathFound
isPresent
bipartite
isBipartite
main
minDist
print
dijkstra
main
addEdge
getAdjacents
getVertices
printGraph
calculateInDegree
topSortOrder
main
minKey
printMST
primMST
main
main
setNumberOfVertices
numberOfVertices
setNumberOfEdges
numberOfEdges
setAdjacency
adjacency
adjacencyOfEdgeDoesExist
vertexDoesExist
edgeDoesExist
addEdge
removeEdge
depthFirstOrder
depthFirstOrder
breadthFirstOrder
toString
addAdjacentVertex
removeAdjacentVertex
removeEdge
addEdge
toString
main
getNeighbours
addEdge
getFrom
getTo
getWeight
getDistance
getPath
getEstimated
printSolution
initializeGraph
main
aStar
addEdge
countGraphs
depthFirstSearch
main
isEmpty
enqueue
dequeue
peekFront
peekRear
peek
iterator
hasNext
next
size
clear
toString
main
insert
remove
peekFront
peekRear
isEmpty
isFull
getSize
toString
main
hasElements
peek
add
pull
main
addFirst
addLast
pollFirst
pollLast
peekFirst
peekLast
size
isEmpty
toString
main
swim
sink
insert
remove
peek
isEmpty
isFull
getSize
isEmpty
isFull
enQueue
deQueue
peek
deleteQueue
main
isEmpty
size
add
contains
iterator
hasNext
remove
next
main
main
countRecursion
count
length
reverse
reverseKGroup
printList
indexOf
get
removeByIndex
remove
free
append
alloc
getRandom
main
main
merge
mergeKList
main
searchRecursion
search
printList
createLoop
detectLoop
main
getSize
append
toString
remove
main
sortList
sortList
isEmpty
display
displayBackwards
displayLink
main
insertHead
insertTail
insertElementByIndex
deleteHead
deleteTail
delete
insertOrdered
deleteNode
removeDuplicates
reverse
clearList
add
get
remove
contains
size
toString
next
setNext
setPrevious
previous
getValue
checkLayer
height
nodeHeight
height
nodeHeight
rotateRight
detectLoop
middle
swapNodes
reverseListIter
reverseListRec
clear
isEmpty
size
getHead
setHead
count
search
toString
deleteDuplicates
print
insertHead
insert
insertNth
deleteHead
delete
deleteNth
getNth
checkBounds
main
iterator
hasNext
next
main
merge
increment
decrement
value
compare
merge
increment
value
compare
merge
addElement
lookup
compare
merge
get
put
addNodeWithUpdatedFrequency
removeNode
setCapacity
checkCapacity
evict
get
put
addNewEntry
moveEntryToLast
getPreEntry
setPreEntry
getNextEntry
setNextEntry
getKey
setKey
getValue
setValue
setCapacity
evict
checkCapacity
get
moveNodeToLast
put
addNewEntry
getPreEntry
setPreEntry
getNextEntry
setNextEntry
getKey
setKey
getValue
setValue
main
push
pop
peek
isEmpty
size
print
setHead
setNext
getPrevious
setPrevious
getSize
setSize
getData
main
push
pop
peek
resize
isEmpty
isFull
makeEmpty
size
main
push
pop
isEmpty
peek
size
main
push
pop
peek
toString
isEmpty
getSize
main
reverseStack
insertAtBottom
find
put
remove
findSuccessor
getRoot
inOrder
preOrder
postOrder
bfs
check
equalNodes
inOrder
getRandom
insert
search
delete
sop
isValid
main
recursiveInorder
iterativeInorder
recursiveInorder
isBST
isBSTUtil
printTree
printTreepre
findNode
insert
fixTree
rotateLeft
rotateRight
transplant
treeMinimum
delete
deleteFixup
insertDemo
deleteDemo
createBST
createBST
insert
insert
display
display
height
bf
rightRotate
leftRotate
main
BuildTree
nearestRightKey
insertKey
traverse
printGivenLevel
getCeil
printTopView
main
main
delete
insert
preOrder
postOrder
inOrder
inOrderSort
search
add
remove
inorder
inorderSort
postorder
preorder
find
traverse
getRoot
add
remove
find
getCoordinate
getDimension
equals
toString
comparableDistance
comparableDistanceExceptAxis
getPoint
getLeft
getRight
getAxis
getNearChild
getFarChild
getAxisCoordinate
getRoot
build
insert
insert
search
search
findMin
findMin
findMax
findMax
delete
delete
findNearest
findNearest
verticalTraversal
applyUpdate
shift
merge
getValue
getLeft
getRight
buildTree
updateRange
getRange
getRange
updateRange
getRoot
recursivePostOrder
iterativePostOrder
recursivePostOrder
recursivePreOrder
iterativePreOrder
recursivePreOrder
getRoot
delete
insert
search
add
remove
find
main
dfs
getLCA
update
query
constructTree
updateTree
update
getSumTree
getSum
insert
delete
delete
rebalance
rotateLeft
rotateRight
rotateLeftThenRight
rotateRightThenLeft
height
setBalance
printBalance
printBalance
reheight
search
searchHelper
main
create_treeG
display
display_1
size2call
size2
maxcall
max
heightcall
height
findcall
find
depthcaller
depth
preordercall
preorder
postordercall
postorder
levelorder
removeleavescall
removeleaves
createTree
createTreeOptimized
createTree
createTreeOptimized
isBalancedRecursive
isBalancedRecursive
isBalancedIterative
isSymmetric
isSymmetric
isInvalidSubtree
isEmpty
isFull
get
put
getAndIncrement
add
put
get
remove
getSize
isEmpty
stream
fastRemove
getElement
newCapacity
toString
iterator
hasNext
next
remove
forEachRemaining
main
possiblePaint
combination
backtracking
powSum
Sum
power
main
solve
neighbors
countNeighbors
orphanDetected
printResult
main
placeQueens
getSolution
isPlacedCorrectly
permutation
backtracking
swap
mazeRecursion
setWay
setWay2
combination
initAdjList
addEdge
storeAllPaths
storeAllPathsUtil
allPathsFromSourceToTarget
isValid
doDFS
exist
getPixel
putPixel
floodFill
hull
x
y
orientation
compareTo
polarOrder
compare
toString
partition
Memoized_Matrix_Chain
Lookup_Chain
main
main
LPS
recursiveLPS
getLCS
lcsString
main
knapSack
main
compute
getCount
getCountSO
startAlgo
endAlgo
bpR
bpRS
bpIS
findNthCatalan
main
countFriendsPairing
knapSack
solveKnapsackRecursive
main
subsetSum
main
upperBound
LIS
findLISLen
binarySearchBetween
main
fibMemo
fibBotUp
fibOptimized
fibBinet
main
printOptimalParens
printArray
matrixChainOrder
input
count
col
row
minimum
calculateLevenshteinDistance
main
regexRecursion
regexRecursion
regexRecursion
regexBU
main
findWays
main
numberOfWays
main
LPS
minimalpartitions
main
throwIfInvalidInput
minimumSumPartition
uniquePaths
uniquePaths2
shortestSuperSequence
lcs
main
minimumPathSum
isMatch
WPRecursion
WPTD
WPBU
main
main
networkFlow
minDistance
main
editDistance
editDistance
execute
calculateCost
runningCost
findMin
showResults
getCost
throwIfInvalidInput
knapSack
main
change
minimumCoins
printAmount
cutRod
AlternatingLength
main
main
subsetSum
getPixel
putPixel
boundaryFill
printImageArray
main
minTrials
main
getLongestValidParentheses
nthManShanksPrime
max_Sum
main
compareTo
findJobSequence
activitySelection
fractionalKnapsack
coinChangeProblem
matrixMultiplication
fib
main
findNonRepeatingNumber
isPowerTwo
bitSwap
reverseBits
isEven
findHighestSetBit
differentSigns
indexOfRightMostSetBit
flipBit
setBit
clearBit
getBit
multiply
sub
add
split
join
getPoints
produceSubSkyLines
produceFinalSkyLine
getX
getY
dominates
compare
calculatePower
power
setMinNum
setSecondCount
createLocation
buildLocation
xPartition
yPartition
xQuickSort
yQuickSort
closestPair
bruteForce
main
read
available
peek
peek
pushRefreshData
readBlock
needsRefill
refill
justRefill
assertStreamOpen
close
setCoeffs
process
reverseWordsInString
lengthOfLongestSubstring
isPalindrome
isPalindromeRecursion
isPalindromeTwoPointer
ladderLength
getChild
getSuffixLink
setSuffixLink
getOutputLink
setOutputLink
getPatternInd
setPatternInd
buildTrie
initializeSuffixLinksForChildNodesOfTheRoot
buildSuffixAndOutputLinks
initializePositionByStringIndexValue
searchIn
setUpStartPoints
recordPatternPositions
search
convert
findFirst
findFirstInsensitive
getLastComparisons
firstOccurrence
charEquals
calcShiftValues
getShiftValue
printWords
printWords
generateNumberToCharMap
main
reverse
checkStrings
myAtoi
hasVowels
calculateHammingDistance
main
isAllCharactersSame
main
longestPalindrome
isValid
swapString
main
generatePermutation
main
approach1
approach2
approach3
approach4
approach5
main
rotation
rotation
reverse
isAnagrams
isAnagramsUnicode
isAnagramsOptimised
checkLetter
encode
isValid
main
toLowerCase
main
reverse
reverse2
main
isPangramUsingSet
isPangram
isPangram2
compress
appendCount
main
isAlphabetical
main
toUpperCase
largestRectanglehistogram
main
isOperator
isValidPostfixExpression
getPostfixToInfix
main
check
main
findNextGreaterElements
main
calculateMaxOfMin
main
calculateMaxOfMin
getOperator
performOperation
consumeExpression
postfixEvaluate
main
convert
main
infix2PostFix
precedence
findNextSmallerElements
main
isPaired
isBalanced
main
isPalindrome
calculateAverage
getContrastRatio
getRelativeLuminance
getColor
getColorSRgb
test
main
mapreduce
mirrorMatrix
reverseRow
checkInput
insert
median
calculateAverage
median
sparcity
main
twoSum
main
sortedRange
alteredBinSearch
alteredBinSearchIter
getCountLessThan
getLessThan
main
prime
reverse
functioning
calculateAverage
calculateAverage
main
main
sort012
main
BruteForce
TwoPointer
Hashmap
main
invert
gaussian
boggleBoard
main
explore
getNeighbors
add
calculateAverage
calculateAverage
main
pi
update
dammCheck
addDammChecksum
main
checkAndPrint
generateAndPrint
checkInput
toIntArray
main
checkInput
sievePrimesTill
countPrimes
extractPrimes
findPrimesTill
verhoeffCheck
addVerhoeffChecksum
main
checkAndPrint
generateAndPrint
checkInput
toIntArray
main
KMPmatcher
computePrefixFunction
main
getImage
blackAndWhiteColorMap
colorCodedColorMap
getDistance
getDictionary
main
main
main
reverseUsingRecursion
insertAtEnd
main
sumSquares
isSad
fitProcess
findMaxElement
findBestFit
fitProcess
findWorstFit
fitProcess
findFirstFit
fitProcess
findNextFit
fitProcess
main
generatePassword
main
printPath
compareTo
equals
hashCode
toString
dijkstra
dijkstra
printPath
printAllPaths
main
squareRoot
calculateNeed
checkSafeSystem
main
main
crc16
maximumSubarraySum
countSetBits
main
main
printMatrix
rotate
main
crc32
crc32
compare
printCode
main
shift
main
fact
main
main
miniMax
getRandomScores
log2
setScores
getScores
getHeight
isPairedSum
main
Iterate
GetKochSnowflake
IterationStep
GetImage
toString
add
subtract
multiply
rotate
insert
remove
peekFront
peekBack
isEmpty
isInStackEmpty
isOutStackEmpty
main
main
searchPat
computeFA
getNextState
FindMaximumEndPoint
isOverlap
isSafe
solveSudoku
print
main
getNode
insert
search
isLastNode
suggestionsRec
printAutoSuggestions
main
run
add
print
findSkyline
mergeSkyline
main
main
calc
nextNumber
main
countsetBits
CountCharacters
main
removeDuplicate
print
luhnCheck
main
checkAndPrint
fromString
number
toString
toIntArray
businessExample
getMinKNumsByBFPRT
getMinKthByBFPRT
copyArray
bfprt
medianOfMedians
swap
partition
getMedian
insertionSort
main
checkBase
checkNumber
computeDigitsInBase
isPalindromic
isPalindromicInBase
lowestBasePalindrome
main
searchPat
getWrongMess
getWrongMessCaught
getWrongMessNotCaught
getCorrectMess
refactor
generateRandomMess
divideMessageWithP
changeMess
rotateLeft
main
returnSubsequence
generateList
generateNextElement
checkInput
getEuler
wordCount
removeSpecialCharacters
secondaryWordCount
main
checkChar
compute
compute
findMajor
findCandidate
countOccurrences
isMajority
generatePerlinNoise
generatePerlinNoiseLayer
interpolate
main
isLeafNode
getChildNodes
setChildNodes
getData
setData
isLeafNode
isRootNode
getParent
setParent
getDepth
hasNext
getNextNode
setNextNode
isLeafNode
getLeftNode
setLeftNode
getRightNode
setRightNode
find
find
getProcessId
getArrivalTime
getBurstTime
getWaitingTime
getTurnAroundTimeTime
setProcessId
setArrivalTime
setBurstTime
setWaitingTime
setTurnAroundTimeTime
main
isPythagTriple
isArmstrong
isSquareFreeInteger
isPalindrome
lucasSeries
lucasSeriesIteration
min
gaussian
gaussianElimination
valueOfGaussian
gcd
gcd
main
reverseNumber
main
isDudeney
calculate
main
isPrime
fermatPrimeChecking
modPow
pascal
divide
main
main
findAnySolution
gcd
getX
getY
setX
setY
equals
hashCode
toString
equals
getGcd
setGcd
getSolution
setSolution
hashCode
toString
isKeith
main
isPerfectCube
isPerfectCubeMathCbrt
findAllInRange
isAmicableNumber
sumOfDividers
isHarshad
isHarshad
binomialCoefficient
median
findMax
isAutomorphic
isAutomorphic2
isAutomorphic3
magnitude
dotProduct
crossProduct
displayVector
main
test
getSum
euclideanDistance
manhattanDistance
hammingDistance
minkowskiDistance
main
isPerfectSquare
min
min
perimeterRegularPolygon
perimeterIrregularPolygon
perimeterRectangle
perimeterCircle
plus
times
times
reciprocal
value
toString
max
max
liouvilleLambda
average
average
compute
nextNumber
collatzConjecture
convolution
main
lcm
getTwinPrime
main
gcd
isKMurthy
main
getReal
getImaginary
add
subtract
multiply
multiply
conjugate
abs
divide
divide
fft
findLog2
fftBitReversal
inverseFFT
reverseBits
paddingPowerOfTwo
main
generateArray
findKthMax
partition
swap
stdDev
main
calculatePi
getNthFrizzy
isValid
hasEqualSizes
canMultiply
operate
add
subtract
multiply
assertThat
main
g
pollardRho
max
getAliquotValue
getAliquotSum
digitalRoot
single
fftBluestein
zScore
TrinomialValue
printTrinomial
main
main
eulerStep
eulerFull
ceil
inverseSqrt
inverseSqrt
square_Root
sumOfSeries
kaprekarNumberInRange
isKaprekarNumber
isPerfectNumber
isPerfectNumber2
pfactors
checkIfPowerOfTwoOrNot
main
factorial
getMinValue
main
test
isVampireNumber
splitIntoDigits
computeRank
isZero
deepCopy
validateInputMatrix
hasValidRows
isJaggedMatrix
findPivotRow
normalizePivotRow
eliminateRows
main
sumOfDigits
sumOfDigitsRecursion
sumOfDigitsFast
checkInput
checkDigitAt
digitToInt
parseInt
surfaceAreaCube
surfaceAreaSphere
surfaceAreaRectangle
surfaceAreaCylinder
surfaceAreaSquare
surfaceAreaTriangle
surfaceAreaParallelogram
surfaceAreaTrapezium
surfaceAreaCircle
surfaceAreaHemisphere
surfaceAreaCone
findMin
main
pow
millerRabin
deterministicMillerRabin
checkComposite
powerModP
multiplyModP
squareRoot
generate
areAllSidesPositive
canFormTriangle
herons
main
mode
factorial
get
addUglyNumber
updatePositions
computeCandidate
computeMinimalCandidate
mobius
binPow
leonardoNumber
main
numberOfDigits
numberOfDigitsFast
numberOfDigitsFaster
numberOfDigitsRecursion
getMaxValue
volumeCube
volumeCuboid
volumeSphere
volumeCylinder
volumeHemisphere
volumeCone
volumePrism
volumePyramid
padding
fftCircularConvolution
sumOfDigits
genericRoot
jugglerSequence
main
power
arithmetic
geometric
harmonic
checkIfNotEmpty
padding
convolutionFFT
isStrobogrammatic
getAbsValue
isPronic
findTheWinner
winner
compute
floor
secondBest
findSecondMin
findSecondMax
checkInput
checkOutput
isPerfectSquare
isFibonacciNumber
main
simpsonsMethod
f
determinant
main
factorial
combinations
combinationsOptimized
