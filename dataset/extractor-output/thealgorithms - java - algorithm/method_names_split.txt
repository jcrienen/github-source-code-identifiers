test
Convert
Octal
To
Binary
test
Binary
To
Octal
test
Hex
To
Oct
test
Decimal
To
Hexa
Decimal
test
Integer
To
Roman
test
Roman
To
Integer
test
Binary
To
Decimal
test
Negative
Binary
To
Decimal
test
Large
Binary
To
Decimal
test
Octal
To
Hexadecimal
testhexa
Decimal
To
Decimal
test
Octal
To
Decimal
test
Binary
To
Hexadecimal
test
Hexa
Decimal
To
Binary
testing
Processes
add
Processes
For
FCFS
initialisation0
initialisation1
initialisation2
initialisation3
constructor
sort
scheduling
scheduling
Of
Two
Processes
scheduling
Of
A
Shortest
Job
Arriving
Last
scheduling
With
Processes
Not
Coming
Back
To
Back
scheduling
Of
nothing
test
Preemptive
Priority
Scheduling
testing
Processes
add
Processes
For
RR
test
Encrypt
test
Decrypt
caesar
Encrypt
Test
caesar
Decrypt
Test
caesar
Brute
Force
test
RSA
set
Up
test
Encrypt
test
Decrypt
initialize
clock
get
Clock
Bit
vigenere
Encrypt
Test
vigenere
Decrypt
Test
test
Encode
test
Decode
test
Is
Text
The
Same
After
Encode
And
Decode
simple
Sub
Cipher
Encrypt
Test
simple
Sub
Cipher
Decrypt
Test
test
Encrypt
test
Decrypt
test
Is
Text
The
Same
After
Encryption
And
Decryption
KMP
Search
Test
Last
KMP
Search
Test
Front
KMP
Search
Test
Middle
KMP
Search
Test
Not
Found
KMP
Search
Test4
set
Up
test
Search
Root
test
Search
F
test
Search
Null
test
Null
Root
test
Search
Value
That
Not
Exists
Rabin
Karp
Algorithm
Test
Example
test
Binary
Search
row
Column
Sorted2d
Array
Binary
Search
Test
Middle
row
Column
Sorted2d
Array
Binary
Search
Test
Side
row
Column
Sorted2d
Array
Binary
Search
Test
Upper
row
Column
Sorted2d
Array
Binary
Search
Test
Upper
Side
row
Column
Sorted2d
Array
Binary
Search
Test
Lower
row
Column
Sorted2d
Array
Binary
Search
Test
Lower
Side
row
Column
Sorted2d
Array
Binary
Search
Test
Not
Found
test
Integer
Binary
Search
test
String
Binary
Search
set
Up
test
Search
Root
test
Search4
test
Null
Root
test
Search
Value
That
Not
Exists
quick
Select
Minimum
Of
One
Element
quick
Select
Minimum
Of
Two
Elements
quick
Select
Minimum
Of
Three
Elements
quick
Select
Minimum
Of
Many
Elements
quick
Select
Maximum
Of
One
Element
quick
Select
Maximum
Of
Two
Elements
quick
Select
Maximum
Of
Three
Elements
quick
Select
Maximum
Of
Many
Elements
quick
Select
Median
Of
One
Element
quick
Select
Median
Of
Three
Elements
quick
Select
Median
Of
Many
Elements
quick
Select30th
Percentile
Of10Elements
quick
Select30th
Percentile
Of
Many
Elements
quick
Select70th
Percentile
Of10Elements
quick
Select70th
Percentile
Of
Many
Elements
quick
Select
Median
Of
Three
Characters
quick
Select
Median
Of
Many
Characters
quick
Select
Null
List
quick
Select
Empty
List
quick
Select
Index
Out
Of
Left
Bound
quick
Select
Index
Out
Of
Right
Bound
generate
Random
Integers
generate
Random
Characters
get
Sorted
Copy
Of
List
test
How
Many
Times
Rotated
Binary
Search2d
Array
Test
Middle
Binary
Search2d
Array
Test
Middle
Side
Binary
Search2d
Array
Test
Upper
Binary
Search2d
Array
Test
Upper
Side
Binary
Search2d
Array
Test
Lower
Binary
Search2d
Array
Test
Lower
Side
Binary
Search2d
Array
Test
Not
Found
Binary
Search2d
Array
Test
One
Row
Binary
Search2d
Array
Test
Target
In
Middle
Binary
Search2d
Array
Test
Target
Above
Middle
Row
In
Middle
Column
Binary
Search2d
Array
Test
Empty
Array
search
Item
not
Found
test
Ascending
test
Descending
Element
In
Middle
Right
Half
Desc
Order
Left
Half
Desc
Order
Right
Half
Asc
Order
Left
Half
Asc
Order
Element
Not
Found
Wiggle
Test
Numbers
Even
Wiggle
Test
Numbers
Odd
Wiggle
Test
Numbers
Odd
Duplicates
Wiggle
Test
Numbers
Odd
Multiple
Duplicates
Wiggle
Test
Numbers
Even
Multiple
Duplicates
Wiggle
Test
Numbers
Even
Duplicates
Wiggle
Test
Strings
success
Test
failure
Test
bead
Sort
Empty
Array
bead
Sort
Single
Integer
Array
bogo
Sort
Non
Duplicate
Integer
Array
bogo
Sort
Duplicate
Integer
Array
bucket
Sort
Single
Integer
Array
bucket
Sort
Non
Duplicate
Integer
Array
bucket
Sort
Duplicate
Integer
Array
bucket
Sort
Non
Duplicate
Integer
Array
With
Negative
Num
bucket
Sort
Duplicate
Integer
Array
With
Negative
Num
is
Sorted
Empty
Array
is
Sorted
With
Single
Element
is
Sorted
Array
True
is
Sorted
Array
False
is
Sorted
List
True
is
Sorted
List
False
slow
Sort
Empty
Array
slow
Sort
Single
Integer
Element
Array
slow
Sort
Single
String
Element
Array
slow
Sort
Integer
Array
slow
Sort
Duplicate
Integer
Array
slow
Sort
String
Array
slow
Sort
Duplicate
String
Array
slow
Sort
String
Symbol
Array
Shell
Sort
Empty
Array
Shell
Sort
Single
Integer
Array
Shell
Sort
Single
String
Array
Shell
Sort
Non
Duplicate
Integer
Array
Shell
Sort
Duplicate
Integer
Array
Shell
Sort
Non
Duplicate
String
Array
Shell
Sort
Duplicate
String
Array
get
Sort
Algorithm
cocktail
Shaker
Sort
Empty
Array
cocktail
Shaker
Sort
Single
String
Element
Array
cocktail
Shaker
Sort
Integer
Array
cocktail
Shaker
Sort
String
Array
tree
Sort
Empty
Array
tree
Sort
Single
String
Element
tree
Sort
String
Array
tree
Sort
Integer
Array
tree
Sort
Double
Array
get
Sort
Algorithm
bogo
Sort
Empty
Array
bogo
Sort
Single
Integer
Array
bogo
Sort
Single
String
Array
bogo
Sort
Non
Duplicate
Integer
Array
bogo
Sort
Duplicate
Integer
Array
bogo
Sort
Non
Duplicate
String
Array
bogo
Sort
Duplicate
String
Array
quick
Sort
Empty
Array
Should
Pass
quick
Sort
Single
Value
Array
Should
Pass
quick
Sort
With
Integer
Array
Should
Pass
quick
Sort
For
Array
With
Negative
Values
Should
Pass
quick
Sort
For
Array
With
Duplicate
Values
Should
Pass
quick
Sort
With
String
Array
Should
Pass
pancake
Sort
Empty
Array
pancake
Sort
pancake
Sort
Non
Duplicate
Integer
Array
pancake
Sort
Duplicate
Integer
Array
pancake
Sort
Negative
Duplicate
Integer
Array
pancake
Sort
Single
String
Array
pancake
Sort
Non
Duplicate
String
Array
pancake
Sort
Duplicate
String
Array
simple
Sort
Empty
Array
simple
Sort
Single
Integer
Array
simple
Sort
Single
String
Array
simple
Sort
Non
Duplicate
Integer
Array
simple
Sort
Duplicate
Integer
Array
simple
Sort
Non
Duplicate
String
Array
simple
Sort
Duplicate
String
Array
Binary
Insertion
Sort
Test
Non
Duplicate
Binary
Insertion
Sort
Test
Duplicate
get
Sort
Algorithm
get
Sort
Algorithm
get
Sort
Algorithm
should
Accept
When
Empty
Array
Is
Passed
should
Accept
When
Empty
List
Is
Passed
should
Accept
When
Single
Valued
Array
Is
Passed
should
Accept
When
Single
Valued
List
Is
Passed
should
Accept
When
List
With
All
Positive
Values
Is
Passed
should
Accept
When
Array
With
All
Positive
Values
Is
Passed
should
Accept
When
Array
With
All
Negative
Values
Is
Passed
should
Accept
When
List
With
All
Negative
Values
Is
Passed
should
Accept
When
Array
With
Real
Number
Values
Is
Passed
should
Accept
When
List
With
Real
Number
Values
Is
Passed
should
Accept
When
Array
With
Duplicate
Value
Is
Passed
should
Accept
When
List
With
Duplicate
Value
Is
Passed
should
Accept
When
String
Value
Array
Is
Passed
should
Accept
When
String
Value
List
Is
Passed
should
Accept
When
Random
Array
Is
Passed
should
Accept
When
Random
List
Is
Passed
set
Up
insertion
Sort
Sort
Empty
Array
Should
Pass
test
Empty
Array
insertion
Sort
Classical
Sort
Single
Value
Array
Should
Pass
test
Single
Value
insertion
Sort
Classical
With
Integer
Array
Should
Pass
test
Integer
Array
insertion
Sort
Classical
For
Array
With
Negative
Values
Should
Pass
test
With
Negative
Values
insertion
Sort
Classical
For
Array
With
Duplicate
Values
Should
Pass
test
With
Duplicates
insertion
Sort
Classical
With
String
Array
Should
Pass
test
With
String
Array
insertion
Sort
Classical
With
Random
Array
Pass
test
With
Random
Array
Integer
Arr
Test
String
Arr
Test
empty
Arr
Test
Strand
Sort
Non
Duplicate
Test
Strand
Sort
Duplicate
Test
Strand
Sort
Empty
Test
Strand
Sort
Null
Test
Strand
Sort
Negative
Test
Strand
Sort
Negative
And
Positive
Test
all
Same
Test
comb
Sort
Empty
Array
comb
Sort
Single
String
Element
comb
Sort
String
Array
comb
Sort
Integer
Array
comb
Sort
Double
Array
DNFS
Test
Odd
DNFS
Test
Even
DNFS
Test
Even
Strings
DNFS
Test
Odd
Strings
DNFS
Test
Odd
Mid
Given
DNFS
Test
Even
Mid
Given
DNFS
Test
Even
Strings
Mid
Given
DNFS
Test
Odd
Strings
Mid
Given
Strand
Sort
Non
Duplicate
Test
Strand
Sort
Duplicate
Test
bubble
Sort
Empty
Array
bubble
Sort
Single
Integer
Element
Array
bubble
Sort
Single
String
Element
Array
bubble
Sort
Integer
Array
bubble
Sort
String
Array
gnome
Sort
Empty
Array
single
Integer
Array
gnome
Sort
Non
Duplicate
Integer
Array
gnome
Sort
Duplicate
Integer
Array
gnome
Sort
Negative
Duplicate
Integer
Array
single
String
Array
gnome
Sort
Non
Duplicate
String
Array
gnome
Sort
Duplicate
String
Array
test
Merge
Sort
Recursive
Case1
test
Merge
Sort
Recursive
Case2
odd
Even
Sort
Empty
Array
odd
Even
Sort
Natural
Number
Array
odd
Even
Sort
Integer
Array
generate
Array
generate
Array
Empty
generate
Double
test
Make
Set
test
Union
Find
Set
test
Leftist
Heap
test
Heap
test1
test2
get
Map
put
Test
get
Test
delete
Test
contains
Test
size
Test
keys
Test
hash
Test
test
Generic
Hashmap
Which
Uses
Array
And
Both
Key
And
Value
Are
Strings
test
Generic
Hashmap
Which
Uses
Array
And
Key
Is
String
Value
Is
Integer
test
Generic
Hashmap
Which
Uses
Array
And
Key
Is
Integer
Value
Is
String
test
Majority
With
Single
Majority
Element
test
Majority
With
Multiple
Majority
Elements
test
Majority
With
No
Majority
Element
test
Majority
With
Empty
Array
test
Generic
Hashmap
Which
Uses
Array
And
Both
Key
And
Value
Are
Strings
test
Generic
Hashmap
Which
Uses
Array
And
Key
Is
String
Value
Is
Integer
test
Generic
Hashmap
Which
Uses
Array
And
Key
Is
Integer
Value
Is
String
get
Map
insert
Key
get
Key
Index
contains
Key
remove
Key
remove
None
re
Hash
Table
Increases
Table
Size
hash
Functions
Are
Different
avoid
Infinite
Loops
test
Boruvka
MSTV9E14
test
Boruvka
MSTV2E1
test
Complete
Graph
K4
test
Negative
Vertices
test
Edges
Null
test
Edges
Empty
test
Edges
Range
compute
Total
Weight
find
Strongly
Connected
Comps
find
Strongly
Connected
Comps
Should
Get
Single
Nodes
test
Find
Hamiltonian
Cycle
Should
Return
Hamiltonian
Cycle
test
Find
Hamiltonian
Cycle
Should
Return
Infinity
Array
find
Strongly
Connected
Comps
find
Strongly
Connected
Comps
Should
Get
Single
Nodes
test
Que
test
PQ
Insertion
test
PQ
Deletion
test
PQ
Extra
add
get
contains
remove
From
Head
remove
From
Tail
check
Sorted
On
Lowest
Layer
create
Skip
List
print
test
Reverse
K
Group
With
Empty
List
test
Reverse
K
Group
With
Single
Node
List
test
Reverse
K
Group
With
K
Equal
To2
test
Reverse
K
Group
With
K
Equal
To3
test
Rotate
Right
Empty
List
test
Rotate
Right
Single
Node
List
test
Rotate
Right
Multiple
Elements
List
test
Rotate
Right
Full
Rotation
create
Sample
List
detect
Loop
middle
swap
clear
search
delete
Nth
reverse
List
reverse
List
Null
Pointer
reverse
List
Test
Recursive
Reverse
List
Recursive
Reverse
List
Null
Pointer
Recursive
Reverse
List
Test
read
With
Enhanced
For
Loop
Test
to
String
Test
to
String
For
Empty
List
Test
count
Test
count
For
Empty
List
Test
test
Sort
Empty
List
test
Sort
Single
Node
List
test
Sort
Multiple
Elements
List
test
Add
Element
test
Lookup
test
Compare
test
Merge
increment
merge
compare
test
Increment
test
Decrement
test
Increment
And
Decrement
test
Compare
test
Merge
put
And
Get
Integer
Values
put
And
Get
String
Values
null
Keys
And
Values
over
Capacity
test
LFU
Cache
With
Integer
Value
Should
Pass
test
LFU
Cache
With
String
Value
Should
Pass
test
Add
Node
With
Updated
Frequency
put
And
Get
Integer
Values
put
And
Get
String
Values
null
Keys
And
Values
over
Capacity
test
Root
Null
test
One
Node
test
Binary
Tree
Is
BST
test
Binary
Tree
With
Duplicated
Nodes
Is
Not
BST
test
Binary
Tree
Is
Not
BST
test
Null
Root
test
Recursive
Pre
Order
test
Recursive
Pre
Order
Non
Balanced
test
Root
Null
test
Key
Present
Root
Is
Ceil
test
Key
Present
Leaf
Is
Ceil
test
Key
Absent
Root
Is
Ceil
test
Key
Absent
Leaf
Is
Ceil
test
Key
Absent
Left
Most
Node
Is
Ceil
test
Key
Absent
Ceil
Is
Null
point
Of
find
Min
delete
find
Nearest
test
Root
Null
test
Single
Node
Tree
test
Vertical
Traversal
Complete
Tree
test
Vertical
Traversal
Different
Height
test
BST
Is
Correctly
Constructed
From
One
Node
test
BST
Is
Correctly
Cleaned
And
Empty
test
BST
Is
Correctly
Cleaned
And
Non
Empty
test
BST
Is
Correctly
Constructed
From
Multiple
Nodes
create
Tree
test
Root
Null
test
Single
Node
Tree
test
Level
Order
Traversal
Complete
Tree
test
Level
Order
Traversal
Different
Height
test
Null
Array
test
Empty
Array
test
Single
Element
Array
test
Create
BST
From
Small
Array
test
Create
BST
From
Longer
Array
test
Should
Not
Create
BST
From
Non
Sorted
Array
test
Null
Root
test
Recursive
Inorder
test
Recursive
Inorder
Non
Balanced
test
Root
Null
test
One
Node
test
Binary
Tree
Is
Balanced
Equal
Subtree
Heights
test
Binary
Tree
Is
Balanced
With
Different
Heights
test
Binary
Tree
Not
Balanced
test
Binary
Tree
Not
Balanced
Because
Left
Tree
Not
Balanced
test
On
Null
Arrays
Should
Return
Null
Tree
test
On
Empty
Arrays
Should
Create
Null
Tree
test
On
Single
Node
Tree
Should
Create
Correct
Tree
test
On
Right
Skewed
Tree
Should
Create
Correct
Tree
test
On
Left
Skewed
Tree
Should
Create
Correct
Tree
test
On
Normal
Tree
Should
Create
Correct
Tree
check
Tree
test
Root
Null
test
Single
Node
Tree
test
Symmetric
Tree
test
Non
Symmetric
Tree
test
Null
Root
test
Post
Order
test
Post
Order
Non
Balanced
test1
test2
test3
test4
test
Both
Roots
Are
Null
test
One
Root
Is
Null
test
Single
Node
Trees
Are
Same
test
Same
Trees
Is
Successful
test
Same
Trees
Fails
test
Trees
With
Different
Structure
build
update
get
update
And
Get
test
Root
Null
test
Single
Node
Tree
test
Zigzag
Traversal
Complete
Tree
test
Zigzag
Traversal
Different
Height
test
BST
Is
Correctly
Constructed
From
One
Node
test
BST
Is
Correctly
Cleaned
And
Empty
test
BST
Is
Correctly
Cleaned
And
Non
Empty
test
BST
Is
Correctly
Constructed
From
Multiple
Nodes
set
Up
is
Empty
is
Full
get
put
concurrent
Test
generate
Int
shut
Down
Executor
Safely
get
Sorted
List
From
test
Graph
Coloring1
test
Graph
Coloring2
test
Graph
Coloring3
create
Graph
test
For
First
Case
test
For
Second
Case
test
For
Third
Case
test
For
Fourthcase
test
Maze
test
Number
Zero
And
Power
Zero
test
Number
Hundred
And
Power
Two
test
Number
Hundred
And
Power
Three
test
No
Element
test
Single
Element
test
Multiple
Elements
test
N
Being
Zero
Or
Less
test
No
Length
Element
test
Length
One
test
Length
Two
test
Length
Five
test1
test2
test3
test
No
Element
test
Length
One
test
Length
Two
test
For
Empty
Image
test
For
Single
Element
Image
test
For
Image
One
test
For
Image
Two
test
For
Image
Three
test
For
Same
New
And
Old
Color
test
Graham
Scan
test
If
Sum
Of
The
Array
Is
Odd
test
If
Size
Of
The
Array
Is
One
test
If
Sum
Of
The
Array
Is
Even1
test
If
Sum
Of
The
Array
Is
Even2
Test1
Test2
Test3
climb
Stairs
Test
For
Two
climb
Stairs
Test
For
Zero
climb
Stairs
Test
For
One
climb
Stairs
Test
For
Five
climb
Stairs
Test
For
Three
has
Multiple
Egg
Single
Floor
has
Single
Egg
Single
Floor
has
Single
Egg
Multiple
Floor
has
Multiple
Egg
Multiple
Floor
test
Knap
Sack
Basic
test
Knap
Sack
Empty
test
Knap
Sack
No
Capacity
test
Knap
Sack
Max
Capacity
test
Knap
Sack
Throws
For
Inputs
Of
Different
Length
test
Knap
Sack
Throws
For
Null
Inputs
test
Knap
Sack
Throws
For
Negative
Capacity
test
Knap
Sack
Throws
For
Negative
Weight
has
Multiple
Subset
single
Element
Subset
has
Multiple
Subset
SO
single
Subset
SO
test
Optimal
Job
Scheduling1
test
Optimal
Job
Scheduling2
test
Optimal
Job
Scheduling3
test
Catalan
Number
test
Matching
Pattern
test
Non
Matching
Pattern
test
Empty
Pattern
test
Minimum
Path
Sum
With
Regular
Grid
test
Minimum
Path
Sum
With
One
Row
One
Column
Grid
test
Minimum
Path
Sum
With
Empty
Grid
test
Minimum
Path
Sum
With
One
Column
Grid
test
Minimum
Path
Sum
Grid
One
Row
Grid
test
Minimum
Path
Sum
With
Diff
Row
And
Column
Grid
test
Minimum
Path
Sum
With
Negative
Number
Grid
levenshtein
Distance
Test
test
Minimum
Sum
Partition
With
Even
Sum
test
Minimum
Sum
Partition
With
Odd
Sum
test
Minimum
Sum
Partition
With
Single
Element
test
Minimum
Sum
Partition
With
Large
Numbers
test
Minimum
Sum
Partition
With
Empty
Array
test
Minimum
Sum
Partition
Throws
For
Negative
Array
test
Unique
Paths
3x3
test
Unique
Paths
1x1
test
Unique
Paths
3x7
test
Unique
Paths
7x3
test
Unique
Paths
100x100
test
Unique
Paths2
3x3
test
Unique
Paths2
1x1
test
Unique
Paths2
3x7
test
Unique
Paths2
7x3
test
Unique
Paths2
100x100
test
Known
Values
test
Fractional
Knapsack
With
Example
Case
test
Fractional
Knapsack
With
Zero
Capacity
test
Fractional
Knapsack
With
Empty
Items
test
Job
Sequencing
With
Example
Case
test
Activity
Selection
test
Single
Activity
test
No
Overlap
test
Coin
Change
Problem
With
Valid
Amount
test
Coin
Change
Problem
With
Large
Amount
test
Coin
Change
Problem
With
Partial
Coins2
test
Coin
Change
Problem
With
Small
Amount
test
Coin
Change
Problem
With
Large
Amount
And
Multiple
Denominations
test
Coin
Change
Problem
With
All
Denominations
test
Coin
Change
Problem
With
Zero
Amount
flip
Bit
Test
set
Bit
Test
clear
Bit
Test
get
Bit
Test
test
Reverse
Bits
test
Non
Repeating
Number
Finder
test
Different
Signs
Positive
Negative
test
Different
Signs
Negative
Positive
test
Same
Signs
Positive
test
Same
Signs
Negative
test
Is
Even
test
Is
Power
Two
test
Highest
Set
Bit
test
Highest
Set
Bit
test
Index
Of
Right
Most
Set
Bit
Strassen
Matrix
Multiplication
Test2x2
Strassen
Matrix
Multiplication
Test4x4
Strassen
Matrix
Multiplication
Test
Negetive
Number4x4
test
Calculate
Power
test
Power
test
Peeks
test
Mixes
test
Block
Practical
test
Check
Anagrams
test
Check
False
Anagrams
test
Check
Same
Word
Anagrams
test
Check
Different
Cases
Anagram
test
String
Are
Valid
Anagrams
Case
Sensitive
test
String
Are
Not
Anagrams
Case
Sensitive
test
Optimised
Algorithm
Strings
Are
Valid
Anagrams
test
Optimised
Algorithm
Should
Throw
Exception
When
Strings
Contain
Uppercase
Letters
number
Tests
input
Stream
test
Pangram
main
set
Up
test
Search
test
Empty
Patterns
test
Pattern
Not
Found
test
Pattern
At
Beginning
test
Pattern
At
End
test
Multiple
Occurrences
Of
Pattern
test
Case
Insensitive
Search
test
Word
Ladder
is
Alphabetical
should
Accept
When
Empty
String
Is
Passed
should
Accept
Not
When
When
Single
Character
Is
Passed
should
Accept
When
String
Is
Passed
to
Upper
Case
palindrome
to
Lower
Case
letter
Combinations
Of
Phone
Number
is
All
Characters
Same
test
Rotation
palindrome
test
Hamming
Distance
test
Not
Equal
String
Lengths
palindrome
test
One
test
Two
test
Three
is
Alphabetical
Reverse
String
Test
is
Vowel
string
Compression
Test
test
Find
First
Match
test
Find
First
Not
Match
test
Find
First
Pattern
Longer
Text
test
Find
First
Pattern
Empty
test
Find
First
Text
Empty
test
Find
First
Pattern
And
Text
Empty
test
Find
First
Special
Character
test
Find
First
Insensitive
Match
test
Find
First
Insensitive
Not
Match
test
Get
Last
Comparisons
test
Get
Last
Comparisons
Not
Match
test
Find
First
Pattern
Null
test
Find
First
Text
Null
test
One
test
Two
test
Three
test
Four
test
Five
test
Six
test
Seven
test
Evaluate
test
If
Evaluate
Throws
Exception
For
Empty
Input
test
If
Evaluate
Throws
Exception
For
Inproper
Input
test
If
Evaluate
Throws
Exception
For
Input
With
Unknown
Operation
test
If
Evaluate
Throws
Exception
For
Input
With
Too
Few
Args
A
test
If
Evaluate
Throws
Exception
For
Input
With
Too
Few
Args
B
test
For
One
Element
test
For
Two
Elements
test
For
Three
Elements
test
For
Four
Elements
test
For
Five
Elements
test
For
Six
Elements
test
For
Seven
Elements
test
Map
Reduce
With
Single
Word
Sentence
test
Map
Reduce
With
Multiple
Word
Sentence
test
Median
With
Odd
Number
Of
Elements
test
Median
With
Even
Number
Of
Elements
test
When
Invalid
Inout
Provided
Should
Throw
Exception
test
With
Negative
Values
test
With
Single
Values
test
With
Random
Values
test
With
Negative
And
Positive
Values
test
With
Duplicate
Values
test
With
Duplicate
Values
B
test
With
Large
Values
test
With
Large
Count
Of
Values
test
With
Three
Values
In
Descending
Order
test
With
Three
Values
In
Order
test
With
Three
Values
Not
In
Order
A
test
With
Three
Values
Not
In
Order
B
test
With
Float
Values
test
With
Byte
Values
test
With
Long
Values
test
With
Double
Values
test
Mirror
Matrix
Regular
Matrix
test
Mirror
Matrix
Empty
Matrix
test
Mirror
Matrix
Single
Element
Matrix
test
Mirror
Matrix
Multiple
Rows
One
Column
Matrix
test
Mirror
Matrix
Null
Input
test
Mirrot
Marix
Throws
test
Two
Sum
Exists
test
Two
Sum
No
Solution
test
Two
Sum
Multiple
Solutions
test
Two
Sum
Multiple
Solution
test
Two
Sum
Negative
Numbers
test
Two
Sum
No
Solution
Duplicated
Inputs
test
With
Empty
List
test
With
Single
Element
test
With
List
With
Odd
Length
Positive
test
With
List
With
Odd
Length
Positive2
test
With
List
With
Even
Length
Positive
test
With
List
With
Odd
Length
Negative
test
With
List
With
Even
Length
Negative
two
Pointers
First
Test
Case
two
Pointers
Second
Test
Case
two
Pointers
Third
Test
Case
two
Pointers
Fourth
Test
Case
two
Pointers
Fiftieth
Test
Case
Sample
Test
Case1
Sample
Test
Case2
Sample
Test
Case3
Edge
Case1
Edge
Case2
test
For
One
Element
test
For
Two
Elements
test
For
Three
Elements
test
For
Four
Elements
test
For
Five
Elements
test
For
Six
Elements
test
For
Seven
Elements
test
For
Eight
Elements
test
Count
Characters
test
Fit
For
Use
Of
One
Block
test
Fit
For
Equal
Procecesses
test
Fit
For
No
Empty
Block
Cell
test
Fit
For
Same
Input
Different
Query
test
Fit
For
More
Blocks
No
Fit
test
Fit
For
Use
Of
One
Block
test
Fit
For
Equal
Procecesses
test
Fit
For
No
Empty
Block
Cell
test
Fit
For
Same
Input
Different
Query
test
Fit
For
More
Blocks
No
Fit
test
For
One
Element
test
For
Zero
Step
test
For
Equal
Size
Step
test
For
Lower
Size
Step
test
For
Higher
Size
Step
test
For
Overlap
test
For
No
Overlap
test
For
Overlap
When
End
A
Equals
Start
B
And
Vice
Versa
test
For
Maximum
End
Point
test
Word
Count
test
Secondary
Word
Count
test
Set
Bits
test
For
One
Element
test
For
Two
Elements
test
For
Three
Elements
test
For
Four
Elements
test
For
Five
Elements
test
For
Six
Elements
test
For
Seven
Elements
test
For
Eight
Elements
testf
Find
Primes
Till1
testf
Find
Primes
Till2
testf
Find
Primes
Till4
testf
Find
Primes
Till40
testf
Find
Primes
Till240
test
Find
Primes
Till
Throws
Exception
For
Non
Positive
Input
test
Generate
With1
test
Generate
With123456
test
Generate
With1A1Z3E1R1T3G1F1D2E1S1C
test
Generate
Next
Element
With1
test
Generate
Next
Element
With123456
test
Generate
Next
Element
With1A1Z3E1R1T3G1F1D2E1S1C
test
Fit
For
Use
Of
One
Block
test
Fit
For
Equal
Procecesses
test
Fit
For
No
Empty
Block
Cell
test
Fit
For
Same
Input
Different
Query
test
Fit
For
More
Blocks
No
Fit
test
Fit
Bad
Case
fail
Generation
With
Same
Min
Max
Length
Test
generate
One
Character
Password
fail
Generation
With
Min
Length
Smaller
Than
Max
Length
Test
generate
Password
Non
Empty
Test
test
CRC16
test
Get
Euler
test
Get
Euler
Throws
Exception
For
Non
Positive
Input
check
When
Majority
Exists
input
Stream
With
Existing
Majority
check
When
Majority
Exists
input
Stream
Without
Majority
test
One
test
Two
test
One
test
Two
test
Three
test
Four
test
Five
test
Six
test
Seven
test
Eight
test1
test2
test
Fit
For
Use
Of
One
Block
test
Fit
For
Equal
Procecesses
test
Fit
For
No
Empty
Block
Cell
test
Fit
For
Same
Input
Different
Query
test
Fit
For
More
Blocks
No
Fit
test
For
One
Element
test
For
Two
Elements
test
For
Three
Elements
test
For
Four
Elements
test
For
Five
Elements
test
For
Six
Elements
test
For
Seven
Elements
test
For
Eight
Elements
check
For
Different
Bits
check
For
Different
Bits
Length
check
For
Same
Bits
check
For
Long
Data
Bits
mismatch
Data
Bits
mismatch
Data
Bits2
check
For
Long
Data
Bits
Same
check
For
Empty
Input
check
For
Input
Of
Length1
compute
Throws
Exception
When
Inputs
Are
Not
Bit
Strs
test
Is
Palindromic
Positive
test
Is
Palindromic
Negative
test
Is
Palindromic
In
Base
Positive
test
Is
Palindromic
In
Base
Negative
test
Is
Palindromic
In
Base
Throws
Exception
For
Negative
Numbers
test
Is
Palindromic
In
Base
Throws
Exception
For
Wrong
Bases
test
Lowest
Base
Palindrome
median
Single
Value
median
Two
Values
median
Three
Values
median
Decimal
Value
Return
median
Negative
Values
set
Up
next
Number
From
Even
Number
next
Number
From
Odd
Number
collatz
Conjecture
sequence
Of
Not
Natural
First
Number
perfect
Cube
test
Get
Max
Value
test
Constructor
With
Denominator
Equal
To
Zero
test
Plus
test
Times
test
Reciprocal
test
Value
test
Equals
And
Hash
Code
test
To
String
test
Generic
Root
test
Generic
Root
With
Negative
Inputs
test
With
Negative
Index
Should
Throw
Exception
test
Check
The
First4Sequence
Elements
test
Check10th
Sequence
Element
test
Check20th
Sequence
Element
test
Check30th
Sequence
Element
test
Check40th
Sequence
Element
test
Check50th
Sequence
Element
test
Check100th
Sequence
Element
test
Check200th
Sequence
Element
check
Element
harshad
Number
valid
Input
Stream
invalid
Input
Stream
compute
Rank
Tests
compute
Rank
With
Invalid
Matrix
perfect
Number
test
Null
Input
test
Empty
Input
test
Input
Of
Incorrect
Format
test
Positive
Value
Is
Successfully
Converted
test
Negative
Value
Is
Successfully
Converted
test
Power
Using
Recursion
test
For
Pronic
Number
test
For
Non
Pronic
Number
is
Dudeney
returns
Correct
Values
throws
Illegal
Argument
Exception
For
Negative
Input
throws
Illegal
Argument
Exception
For
Large
Input
test
For
One
Element
test
Forsecond
test
For
Third
test
For
Fourth
test
For
Fifth
test
For
Sixth
test
For
Seventh
test
For
Eighth
test
When
Invalid
Inout
Provided
Should
Throw
Exception
test
Correct
Factorial
Calculation
should
Return7
should
Return5
should
Return
Negative1
should
Return19
test1
test2
test3
test4
check
Value
At
Zero
check
Value
At
One
check
Value
At
Two
check
Recurrence
Relation
check
Negative
Input
lucas
Series
Two
lucas
Series
One
lucas
Series
Seven
lucas
Series
Eleven
test
Is
Square
Free
Integer
test
Is
Square
Free
Integer
Throw
Exception
If
Number
Is
Zero
test
Is
Square
Free
Integer
Must
Throw
Exception
If
Number
Is
Negative
test
Zero
test
Positive
test
Negative
test
Ceil
Test
Perfect
Squareifiscorrect
Test
Perfect
Squareifisnotcorrect
Test
Perfect
Squareifis
Negative
Number
test
Get
Abs
Value
arithmetic
Mean
Zero
Numbers
geometric
Mean
Zero
Numbers
harmonic
Mean
Zero
Numbers
arithmetic
Mean
Single
Number
geometric
Mean
Single
Number
harmonic
Mean
Single
Number
arithmetic
Mean
Multiple
Numbers
geometric
Mean
Multiple
Numbers
harmonic
Mean
Multiple
Numbers
leonardo
Number
Negative
leonardo
Number
Zero
leonardo
Number
One
leonardo
Number
Five
leonardo
Number
Twenty
test
Binomial
Coefficient
test
Reverse
Number
test
Reverse
Number
Throws
Exception
For
Negative
Input
test
Bin
Pow
number
Tests
input
Stream
test
Find
Max
Throws
Exception
For
Empty
Input
Testpythagoreantriple
test
Josephus
Problem
test
For
Empty
Input
Array
test
For
Array
With
Single
Element
test
For
Array
With
Same
Elements
number
Tests
input
Stream
min
Test
pass
Test1
number
Tests
input
Stream
test
Find
Min
Throws
Exception
For
Empty
Input
testp
Factors
Must
Return
Empty
List
testp
Factors
Must
Return
Non
Empty
List
test
Is
Strobogrammatic
volume
testcase1
testcase2
testcase3
testcase4
testcase5
testcase6
testcase7
testcase8
test
Numbers
Are
Palindromes
test
Numbers
Are
Not
Palindromes
test
If
Negative
Input
Then
Exception
Expected
get
Realtest
get
Imaginary
Test
add
Test
add
False
Test
subtract
Test
multiply
With
Complex
Test
multiply
With
Scalar
Test
conjugate
Test
abs
divide
With
Complex
Test
divide
With
Scalar
Test
fft
test
Floor
Whole
Number
test
Floor
Double
Number
test
Floor
Negative
Zero
test
Power
Of
Two
Or
Not
For
Powers
Of
Two
test
Power
Of
Two
Or
Not
For
Not
Powers
Of
Two
test
Frizzies
For
Base2
test
Frizzies
For
Base3
test
Frizzies
For
Base69
test
Sum
From1To10
test
Sum
Of
Odd
Numbers1To19
test
A
test
B
test
C
test
For
Zero
Terms
test
If
Throws
Exception
For
Negative
Number
Of
Terms
test
With
Single
Term
test
With
Zero
Common
Diff
test
Number
Is
Fibonacci
Number
test
Number
Is
Not
Fibonacci
Number
testfor4
testfor1
testfor2
testfor625
test
Pollard
Rho
For
Number315Must
Return5
test
Pollard
Rho
For
Number187Must
Return11
test
Pollard
Rho
For
Number239Must
Throw
Exception
test
Liouville
Lambda
Must
Throw
Exception
If
Number
Is
Zero
test
Liouville
Lambda
Must
Throw
Exception
If
Number
Is
Negative
test
Liouville
Lambda
Must
Return
Negative
One
test
Liouville
Lambda
Must
Return
Positive
One
test
For1
test
For45
test
For297
test
For2223
test
For857143
test
For3
test
For26
test
For98
test
For
Range
Of
Number
test1
test2
test3
test4
test5
test6
test7
test
Array
Gcd1
test
Array
Gcd2
test
Array
Gcd
For
Empty
Input
testfor1
testfor2
testfor625
test
Mobius
For
Zero
test
Mobius
For
Negative
Number
test
Mobius
Function
test
Get
Max
Value
test
Get
Max
Value
With
No
Arguments
test
Average
double
12
test
Average
double
20
test
Average
double
4
5
test
Average
int
5
number
Tests
input
Stream
test
Find
Max
Throws
Exception
For
Empty
Input
test1
test2
test3
test4
test5
test6
test7
test
Should
Throw
Exception
When
Invalid
Range
Provided
test
Should
Throw
Exception
When
Invalid
Numbers
Provided
test
Amicable
Numbers
test
Should
Find
All
Amicable
Numbers
In
Range
check
Invalid
Range
check
Invalid
Numbers
max
Test
test
Deterministic
Miller
Rabin
For
Primes
test
Deterministic
Miller
Rabin
For
Not
Primes
test
Miller
Rabin
For
Primes
number
Tests
input
Stream
test
Find
Max
Throws
Exception
For
Empty
Input
test
Get
With
New
Object
test
Get
With
Same
Object
test
Get
With
Base1
test
Get
With
Base2
test
Get
Throws
An
Error
For
Negative
Input
test
Constructor
Throws
An
Error
For
Empty
Input
test1
test2
test3
test4
test
Get
Min
Value
test
Get
Min
Value
With
No
Arguments
test
For
One
test
For
Two
test
For
Five
test
For
Eight
test
One
test
Two
test
Three
test
Negative
Dividend
test
Dividend
Less
Than
Divisor
test
Dividend
Is
Zero
test
Division
By
Zero
test
Digitalroot
test
Surface
Area
Cube
test
Surface
Area
Sphere
test
Surface
Area
Rectangle
test
Surface
Area
Cylinder
test
Surface
Area
Square
test
Surface
Area
Triangle
test
Surface
Area
Parallelogram
test
Surface
Area
Trapezium
test
Surface
Area
Circle
surface
Area
Hemisphere
surface
Area
Cone
test
All
Illegal
Input
test
For
First
test
For
Second
test
Automorphic
Number
test
Is
Armstrong
test1
test2
test3
test4
test
Calculate
Area
With
Invalid
Input
test
Armstrong
add
Zeroto
Zero
add
Zeroto
Number
add
Oddto
Even
add
Evento
Odd
add
Randoms
test
Combination
test
Combination
Optimised
euclidean
Test1
euclidean
Test2
euclidean
Test3
euclidean
Test4
manhattantest1
manhattantest2
manhattan
Test3
hamming
Test1
hamming
Test2
hamming
Test3
minkowski
Test1
minkowski
Test2
minkowski
Test3
main
convert
Binary
To
Octal
main
convert
Octal
To
Decimal
main
convert
Turkish
To
Latin
dec
To
Hex
main
main
hsv
To
Rgb
rgb
To
Hsv
approximately
Equal
Hsv
get
Rgb
By
Section
convert
To
Int
convert
Octal
To
Binary
convert
Octal
Digit
To
Binary
get
Hexa
To
Dec
main
roman
To
Int
main
main
convert
To
Decimal
val
Of
Char
binary
To
Decimal
main
integer
To
Roman
main
main
conventional
Conversion
bitwise
Conversion
main
main
convert
To
Any
Base
re
Val
oct
To
Dec
decimal
To
Hex
main
hex2decimal
decimal2octal
main
main
valid
For
Base
base2base
main
convert
complete
Digits
main
bin
To
Hex
main
schedule
Processes
evaluate
Waiting
Time
evaluate
Turn
Around
Time
preemptive
Priority
Scheduling
schedule
Processes
evaluate
Turn
Around
Time
evaluate
Waiting
Time
sort
By
Arrival
Time
schedule
Processes
find
Shortest
Job
encode
decode
schedule
Core
key
Expansion
split
Block
Into
Cells
merge
Cells
Into
Block
add
Round
Key
sub
Bytes
sub
Bytes
Dec
shift
Rows
shift
Rows
Dec
mix
Columns
mix
Columns
Dec
encrypt
decrypt
main
find
Location
By
Character
encrypt
decrypt
main
encrypt
reset
Counter
initialize
re
Initialize
get
Next
Key
Stream
re
Initialize
Registers
increment
Frame
Counter
increment
initialize
clock
initialize
clock
clock
get
Clock
Bit
get
get
Last
Bit
xor
Tapping
Bits
push
Bit
right
Shift
to
String
clock
get
Majority
Bit
encrypt
decrypt
encrypt
encrypt
decrypt
decrypt
generate
Keys
encrpyter
encrpyter
decrypter
table
Builder
number
Of
Rows
find
Elements
sort
Table
get
Column
switch
Columns
abecedarium
Builder
show
Table
main
encrypt
decrypt
determinant
hill
Cipher
validate
Determinant
main
encode
decode
encrypt
Message
decrypt
Cipher
main
main
get
Secret
Encryption
Key
encrypt
Text
decrypt
Text
bytes
To
Hex
encode
decode
is
Capital
Latin
Letter
is
Small
Latin
Letter
bruteforce
hex
To
Bin
bin
To
Hex
xor
add
Bin
f
key
Generate
round
encrypt
decrypt
sanitize
get
Key
set
Key
get
Subkeys
XOR
create
Padded
String
pad
pad
Last
feistel
encrypt
Block
decrypt
Block
encrypt
decrypt
search
search
get
Visited
recursive
Search
get
Visited
find
main
Binary
Search
binary
Search
main
find
search
main
square
Root
find
main
run
get
Result
Bin
Search
Algo
find
search
main
find
union
count
to
String
main
main
find
search
main
rotated
main
find
KMP
Search
compute
LPS
Array
find
main
search
find
main
find
main
find
main
select
select
Index
select
Index
partition
pivot
partition5
main
monte
Carlo
Tree
Search
add
Child
Nodes
get
Promising
Node
simulate
Random
Play
get
Winner
Node
print
Scores
main
find
find
main
find
find
binsear
main
find
ternary
Search
main
find
search
find
search
sort
do
Sort
random
Partition
partition
sort012
print
Array
main
swap
less
greater
greater
Or
Equal
print
print
flip
is
Sorted
is
Sorted
generate
Array
generate
Double
generate
Int
sort
sort
main
is
Sorted
next
Permutation
sort
main
sort
dual
Pivot
Quicksort
partition
swap
main
sort
main
sort
do
Sort
main
next
Gap
sort
main
main
odd
Even
Sort
swap
strand
Sort
merge
sort
main
sort
main
sort
do
Sort
merge
get
Max
count
Sort
radixsort
print
main
sort
sort
sort
swap
intro
Sort
partition
insertion
Sort
heap
Sort
heapify
sort
sort
sentinel
Sort
main
measure
Approx
Exec
Time
call
merge
sort
merge
sort
implement
merge
sort
main
sort
sort
main
sort
main
main
sort
bubble
Sort
sort
merge
merge
Sort
merge
sort
main
add
Edge
sort
sort
is
Sorted
compare
sort
By
Merge
Sort
count
task
task1
sort
By
Insertion
Sort
count
sort
By
Heap
Sort
count
task
task1
sort
sort
sort
heapify
sift
Down
swap
less
sort
sort
stream
Sort
main
sort
main
sort
map
Index
tri
Color
Sort
wiggle
Sort
sort
main
sort
get
Smaller
Element
Count
main
main
bucket
Sort
hash
max
min
sort
binary
Insert
Sort
sort
sort
dutch
national
flag
sort
sort
replace
main
sort
sort
do
Tree
Sort
Array
do
Tree
Sort
List
main
comp
And
Swap
bitonic
Merge
bitonic
Sort
sort
print
Array
main
get
Value
add
Child
get
Children
make
Set
find
Set
union
Sets
get
Element
get
Element
Key
swap
toggle
Up
toggle
Down
extract
Max
insert
Element
delete
Element
get
Element
get
Element
insert
Element
delete
Element
is
Empty
clear
merge
merge
insert
extract
min
in
order
in
order
aux
insert
peek
is
Empty
is
Full
print
heap
Sort
sink
delete
main
get
Element
get
Element
Key
swap
toggle
Up
toggle
Down
extract
Min
insert
Element
delete
Element
get
Element
get
Info
get
Key
to
String
equals
hash
Code
add
up
Heapify
display
size
is
Empty
remove
down
Heapify
get
is
Larger
swap
update
Priority
empty
insert
delete
Min
find
Min
meld
size
counters
Rep
delete
decrease
Key
potential
total
Links
total
Cuts
update
Min
cascading
Cuts
cut
successive
Link
to
Buckets
from
Buckets
link
get
Key
is
Marked
mark
set
Next
get
Next
is
Root
insert
Hash
insert
contains
compute
ascii
String
main
majority
hashing
insert
Hash
delete
Hash
display
Hashtable
insert
find
End
find
Key
delete
delete
display
display
is
Empty
get
Next
get
Key
set
Next
put
re
Hash
get
remove
contains
Key
size
to
String
hash
Function1
hash
Function2
insert
Key2Hash
Table
re
Hash
Table
Increases
Table
Size
delete
Key
From
Hash
Table
display
Hashtable
find
Key
In
Table
check
Table
Contains
Key
check
Load
Factor
is
Full
is
Empty
get
Number
Of
Keys
In
Table
intersection
put
get
delete
keys
size
contains
hash
put
get
delete
contains
size
keys
increment
resize
main
init
Buckets
put
hash
Function
re
Hash
remove
size
get
to
String
contains
Key
add
Edge
main
kruskal
start
dfs
print
All
main
kosaraju
sort
Edges
By
Lowest
Finish
Time
create
Transpose
Matrix
find
Strongly
Connected
Components
dfs
dfs2
print
Path
main
go
show
add
Edge
get
Edge
Array
strongly
Connected
Components
strongly
Conn
Comps
Util
merge
has
More
Edges
To
Add
compute
Cheapest
Edges
initialize
Components
find
union
boruvka
MST
check
Edge
Vertices
floydwarshall
main
find
Hamiltonian
Cycle
is
Path
Found
is
Present
bipartite
is
Bipartite
main
min
Dist
print
dijkstra
main
add
Edge
get
Adjacents
get
Vertices
print
Graph
calculate
In
Degree
top
Sort
Order
main
min
Key
print
MST
prim
MST
main
main
set
Number
Of
Vertices
number
Of
Vertices
set
Number
Of
Edges
number
Of
Edges
set
Adjacency
adjacency
adjacency
Of
Edge
Does
Exist
vertex
Does
Exist
edge
Does
Exist
add
Edge
remove
Edge
depth
First
Order
depth
First
Order
breadth
First
Order
to
String
add
Adjacent
Vertex
remove
Adjacent
Vertex
remove
Edge
add
Edge
to
String
main
get
Neighbours
add
Edge
get
From
get
To
get
Weight
get
Distance
get
Path
get
Estimated
print
Solution
initialize
Graph
main
a
Star
add
Edge
count
Graphs
depth
First
Search
main
is
Empty
enqueue
dequeue
peek
Front
peek
Rear
peek
iterator
has
Next
next
size
clear
to
String
main
insert
remove
peek
Front
peek
Rear
is
Empty
is
Full
get
Size
to
String
main
has
Elements
peek
add
pull
main
add
First
add
Last
poll
First
poll
Last
peek
First
peek
Last
size
is
Empty
to
String
main
swim
sink
insert
remove
peek
is
Empty
is
Full
get
Size
is
Empty
is
Full
en
Queue
de
Queue
peek
delete
Queue
main
is
Empty
size
add
contains
iterator
has
Next
remove
next
main
main
count
Recursion
count
length
reverse
reverse
K
Group
print
List
index
Of
get
remove
By
Index
remove
free
append
alloc
get
Random
main
main
merge
merge
K
List
main
search
Recursion
search
print
List
create
Loop
detect
Loop
main
get
Size
append
to
String
remove
main
sort
List
sort
List
is
Empty
display
display
Backwards
display
Link
main
insert
Head
insert
Tail
insert
Element
By
Index
delete
Head
delete
Tail
delete
insert
Ordered
delete
Node
remove
Duplicates
reverse
clear
List
add
get
remove
contains
size
to
String
next
set
Next
set
Previous
previous
get
Value
check
Layer
height
node
Height
height
node
Height
rotate
Right
detect
Loop
middle
swap
Nodes
reverse
List
Iter
reverse
List
Rec
clear
is
Empty
size
get
Head
set
Head
count
search
to
String
delete
Duplicates
print
insert
Head
insert
insert
Nth
delete
Head
delete
delete
Nth
get
Nth
check
Bounds
main
iterator
has
Next
next
main
merge
increment
decrement
value
compare
merge
increment
value
compare
merge
add
Element
lookup
compare
merge
get
put
add
Node
With
Updated
Frequency
remove
Node
set
Capacity
check
Capacity
evict
get
put
add
New
Entry
move
Entry
To
Last
get
Pre
Entry
set
Pre
Entry
get
Next
Entry
set
Next
Entry
get
Key
set
Key
get
Value
set
Value
set
Capacity
evict
check
Capacity
get
move
Node
To
Last
put
add
New
Entry
get
Pre
Entry
set
Pre
Entry
get
Next
Entry
set
Next
Entry
get
Key
set
Key
get
Value
set
Value
main
push
pop
peek
is
Empty
size
print
set
Head
set
Next
get
Previous
set
Previous
get
Size
set
Size
get
Data
main
push
pop
peek
resize
is
Empty
is
Full
make
Empty
size
main
push
pop
is
Empty
peek
size
main
push
pop
peek
to
String
is
Empty
get
Size
main
reverse
Stack
insert
At
Bottom
find
put
remove
find
Successor
get
Root
in
Order
pre
Order
post
Order
bfs
check
equal
Nodes
in
Order
get
Random
insert
search
delete
sop
is
Valid
main
recursive
Inorder
iterative
Inorder
recursive
Inorder
is
BST
is
BST
Util
print
Tree
print
Treepre
find
Node
insert
fix
Tree
rotate
Left
rotate
Right
transplant
tree
Minimum
delete
delete
Fixup
insert
Demo
delete
Demo
create
BST
create
BST
insert
insert
display
display
height
bf
right
Rotate
left
Rotate
main
Build
Tree
nearest
Right
Key
insert
Key
traverse
print
Given
Level
get
Ceil
print
Top
View
main
main
delete
insert
pre
Order
post
Order
in
Order
in
Order
Sort
search
add
remove
inorder
inorder
Sort
postorder
preorder
find
traverse
get
Root
add
remove
find
get
Coordinate
get
Dimension
equals
to
String
comparable
Distance
comparable
Distance
Except
Axis
get
Point
get
Left
get
Right
get
Axis
get
Near
Child
get
Far
Child
get
Axis
Coordinate
get
Root
build
insert
insert
search
search
find
Min
find
Min
find
Max
find
Max
delete
delete
find
Nearest
find
Nearest
vertical
Traversal
apply
Update
shift
merge
get
Value
get
Left
get
Right
build
Tree
update
Range
get
Range
get
Range
update
Range
get
Root
recursive
Post
Order
iterative
Post
Order
recursive
Post
Order
recursive
Pre
Order
iterative
Pre
Order
recursive
Pre
Order
get
Root
delete
insert
search
add
remove
find
main
dfs
get
LCA
update
query
construct
Tree
update
Tree
update
get
Sum
Tree
get
Sum
insert
delete
delete
rebalance
rotate
Left
rotate
Right
rotate
Left
Then
Right
rotate
Right
Then
Left
height
set
Balance
print
Balance
print
Balance
reheight
search
search
Helper
main
create
tree
G
display
display
1
size2call
size2
maxcall
max
heightcall
height
findcall
find
depthcaller
depth
preordercall
preorder
postordercall
postorder
levelorder
removeleavescall
removeleaves
create
Tree
create
Tree
Optimized
create
Tree
create
Tree
Optimized
is
Balanced
Recursive
is
Balanced
Recursive
is
Balanced
Iterative
is
Symmetric
is
Symmetric
is
Invalid
Subtree
is
Empty
is
Full
get
put
get
And
Increment
add
put
get
remove
get
Size
is
Empty
stream
fast
Remove
get
Element
new
Capacity
to
String
iterator
has
Next
next
remove
for
Each
Remaining
main
possible
Paint
combination
backtracking
pow
Sum
Sum
power
main
solve
neighbors
count
Neighbors
orphan
Detected
print
Result
main
place
Queens
get
Solution
is
Placed
Correctly
permutation
backtracking
swap
maze
Recursion
set
Way
set
Way2
combination
init
Adj
List
add
Edge
store
All
Paths
store
All
Paths
Util
all
Paths
From
Source
To
Target
is
Valid
do
DFS
exist
get
Pixel
put
Pixel
flood
Fill
hull
x
y
orientation
compare
To
polar
Order
compare
to
String
partition
Memoized
Matrix
Chain
Lookup
Chain
main
main
LPS
recursive
LPS
get
LCS
lcs
String
main
knap
Sack
main
compute
get
Count
get
Count
SO
start
Algo
end
Algo
bp
R
bp
RS
bp
IS
find
Nth
Catalan
main
count
Friends
Pairing
knap
Sack
solve
Knapsack
Recursive
main
subset
Sum
main
upper
Bound
LIS
find
LIS
Len
binary
Search
Between
main
fib
Memo
fib
Bot
Up
fib
Optimized
fib
Binet
main
print
Optimal
Parens
print
Array
matrix
Chain
Order
input
count
col
row
minimum
calculate
Levenshtein
Distance
main
regex
Recursion
regex
Recursion
regex
Recursion
regex
BU
main
find
Ways
main
number
Of
Ways
main
LPS
minimalpartitions
main
throw
If
Invalid
Input
minimum
Sum
Partition
unique
Paths
unique
Paths2
shortest
Super
Sequence
lcs
main
minimum
Path
Sum
is
Match
WP
Recursion
WPTD
WPBU
main
main
network
Flow
min
Distance
main
edit
Distance
edit
Distance
execute
calculate
Cost
running
Cost
find
Min
show
Results
get
Cost
throw
If
Invalid
Input
knap
Sack
main
change
minimum
Coins
print
Amount
cut
Rod
Alternating
Length
main
main
subset
Sum
get
Pixel
put
Pixel
boundary
Fill
print
Image
Array
main
min
Trials
main
get
Longest
Valid
Parentheses
nth
Man
Shanks
Prime
max
Sum
main
compare
To
find
Job
Sequence
activity
Selection
fractional
Knapsack
coin
Change
Problem
matrix
Multiplication
fib
main
find
Non
Repeating
Number
is
Power
Two
bit
Swap
reverse
Bits
is
Even
find
Highest
Set
Bit
different
Signs
index
Of
Right
Most
Set
Bit
flip
Bit
set
Bit
clear
Bit
get
Bit
multiply
sub
add
split
join
get
Points
produce
Sub
Sky
Lines
produce
Final
Sky
Line
get
X
get
Y
dominates
compare
calculate
Power
power
set
Min
Num
set
Second
Count
create
Location
build
Location
x
Partition
y
Partition
x
Quick
Sort
y
Quick
Sort
closest
Pair
brute
Force
main
read
available
peek
peek
push
Refresh
Data
read
Block
needs
Refill
refill
just
Refill
assert
Stream
Open
close
set
Coeffs
process
reverse
Words
In
String
length
Of
Longest
Substring
is
Palindrome
is
Palindrome
Recursion
is
Palindrome
Two
Pointer
ladder
Length
get
Child
get
Suffix
Link
set
Suffix
Link
get
Output
Link
set
Output
Link
get
Pattern
Ind
set
Pattern
Ind
build
Trie
initialize
Suffix
Links
For
Child
Nodes
Of
The
Root
build
Suffix
And
Output
Links
initialize
Position
By
String
Index
Value
search
In
set
Up
Start
Points
record
Pattern
Positions
search
convert
find
First
find
First
Insensitive
get
Last
Comparisons
first
Occurrence
char
Equals
calc
Shift
Values
get
Shift
Value
print
Words
print
Words
generate
Number
To
Char
Map
main
reverse
check
Strings
my
Atoi
has
Vowels
calculate
Hamming
Distance
main
is
All
Characters
Same
main
longest
Palindrome
is
Valid
swap
String
main
generate
Permutation
main
approach1
approach2
approach3
approach4
approach5
main
rotation
rotation
reverse
is
Anagrams
is
Anagrams
Unicode
is
Anagrams
Optimised
check
Letter
encode
is
Valid
main
to
Lower
Case
main
reverse
reverse2
main
is
Pangram
Using
Set
is
Pangram
is
Pangram2
compress
append
Count
main
is
Alphabetical
main
to
Upper
Case
largest
Rectanglehistogram
main
is
Operator
is
Valid
Postfix
Expression
get
Postfix
To
Infix
main
check
main
find
Next
Greater
Elements
main
calculate
Max
Of
Min
main
calculate
Max
Of
Min
get
Operator
perform
Operation
consume
Expression
postfix
Evaluate
main
convert
main
infix2Post
Fix
precedence
find
Next
Smaller
Elements
main
is
Paired
is
Balanced
main
is
Palindrome
calculate
Average
get
Contrast
Ratio
get
Relative
Luminance
get
Color
get
Color
S
Rgb
test
main
mapreduce
mirror
Matrix
reverse
Row
check
Input
insert
median
calculate
Average
median
sparcity
main
two
Sum
main
sorted
Range
altered
Bin
Search
altered
Bin
Search
Iter
get
Count
Less
Than
get
Less
Than
main
prime
reverse
functioning
calculate
Average
calculate
Average
main
main
sort012
main
Brute
Force
Two
Pointer
Hashmap
main
invert
gaussian
boggle
Board
main
explore
get
Neighbors
add
calculate
Average
calculate
Average
main
pi
update
damm
Check
add
Damm
Checksum
main
check
And
Print
generate
And
Print
check
Input
to
Int
Array
main
check
Input
sieve
Primes
Till
count
Primes
extract
Primes
find
Primes
Till
verhoeff
Check
add
Verhoeff
Checksum
main
check
And
Print
generate
And
Print
check
Input
to
Int
Array
main
KM
Pmatcher
compute
Prefix
Function
main
get
Image
black
And
White
Color
Map
color
Coded
Color
Map
get
Distance
get
Dictionary
main
main
main
reverse
Using
Recursion
insert
At
End
main
sum
Squares
is
Sad
fit
Process
find
Max
Element
find
Best
Fit
fit
Process
find
Worst
Fit
fit
Process
find
First
Fit
fit
Process
find
Next
Fit
fit
Process
main
generate
Password
main
print
Path
compare
To
equals
hash
Code
to
String
dijkstra
dijkstra
print
Path
print
All
Paths
main
square
Root
calculate
Need
check
Safe
System
main
main
crc16
maximum
Subarray
Sum
count
Set
Bits
main
main
print
Matrix
rotate
main
crc32
crc32
compare
print
Code
main
shift
main
fact
main
main
mini
Max
get
Random
Scores
log2
set
Scores
get
Scores
get
Height
is
Paired
Sum
main
Iterate
Get
Koch
Snowflake
Iteration
Step
Get
Image
to
String
add
subtract
multiply
rotate
insert
remove
peek
Front
peek
Back
is
Empty
is
In
Stack
Empty
is
Out
Stack
Empty
main
main
search
Pat
compute
FA
get
Next
State
Find
Maximum
End
Point
is
Overlap
is
Safe
solve
Sudoku
print
main
get
Node
insert
search
is
Last
Node
suggestions
Rec
print
Auto
Suggestions
main
run
add
print
find
Skyline
merge
Skyline
main
main
calc
next
Number
main
countset
Bits
Count
Characters
main
remove
Duplicate
print
luhn
Check
main
check
And
Print
from
String
number
to
String
to
Int
Array
business
Example
get
Min
K
Nums
By
BFPRT
get
Min
Kth
By
BFPRT
copy
Array
bfprt
median
Of
Medians
swap
partition
get
Median
insertion
Sort
main
check
Base
check
Number
compute
Digits
In
Base
is
Palindromic
is
Palindromic
In
Base
lowest
Base
Palindrome
main
search
Pat
get
Wrong
Mess
get
Wrong
Mess
Caught
get
Wrong
Mess
Not
Caught
get
Correct
Mess
refactor
generate
Random
Mess
divide
Message
With
P
change
Mess
rotate
Left
main
return
Subsequence
generate
List
generate
Next
Element
check
Input
get
Euler
word
Count
remove
Special
Characters
secondary
Word
Count
main
check
Char
compute
compute
find
Major
find
Candidate
count
Occurrences
is
Majority
generate
Perlin
Noise
generate
Perlin
Noise
Layer
interpolate
main
is
Leaf
Node
get
Child
Nodes
set
Child
Nodes
get
Data
set
Data
is
Leaf
Node
is
Root
Node
get
Parent
set
Parent
get
Depth
has
Next
get
Next
Node
set
Next
Node
is
Leaf
Node
get
Left
Node
set
Left
Node
get
Right
Node
set
Right
Node
find
find
get
Process
Id
get
Arrival
Time
get
Burst
Time
get
Waiting
Time
get
Turn
Around
Time
Time
set
Process
Id
set
Arrival
Time
set
Burst
Time
set
Waiting
Time
set
Turn
Around
Time
Time
main
is
Pythag
Triple
is
Armstrong
is
Square
Free
Integer
is
Palindrome
lucas
Series
lucas
Series
Iteration
min
gaussian
gaussian
Elimination
value
Of
Gaussian
gcd
gcd
main
reverse
Number
main
is
Dudeney
calculate
main
is
Prime
fermat
Prime
Checking
mod
Pow
pascal
divide
main
main
find
Any
Solution
gcd
get
X
get
Y
set
X
set
Y
equals
hash
Code
to
String
equals
get
Gcd
set
Gcd
get
Solution
set
Solution
hash
Code
to
String
is
Keith
main
is
Perfect
Cube
is
Perfect
Cube
Math
Cbrt
find
All
In
Range
is
Amicable
Number
sum
Of
Dividers
is
Harshad
is
Harshad
binomial
Coefficient
median
find
Max
is
Automorphic
is
Automorphic2
is
Automorphic3
magnitude
dot
Product
cross
Product
display
Vector
main
test
get
Sum
euclidean
Distance
manhattan
Distance
hamming
Distance
minkowski
Distance
main
is
Perfect
Square
min
min
perimeter
Regular
Polygon
perimeter
Irregular
Polygon
perimeter
Rectangle
perimeter
Circle
plus
times
times
reciprocal
value
to
String
max
max
liouville
Lambda
average
average
compute
next
Number
collatz
Conjecture
convolution
main
lcm
get
Twin
Prime
main
gcd
is
K
Murthy
main
get
Real
get
Imaginary
add
subtract
multiply
multiply
conjugate
abs
divide
divide
fft
find
Log2
fft
Bit
Reversal
inverse
FFT
reverse
Bits
padding
Power
Of
Two
main
generate
Array
find
Kth
Max
partition
swap
std
Dev
main
calculate
Pi
get
Nth
Frizzy
is
Valid
has
Equal
Sizes
can
Multiply
operate
add
subtract
multiply
assert
That
main
g
pollard
Rho
max
get
Aliquot
Value
get
Aliquot
Sum
digital
Root
single
fft
Bluestein
z
Score
Trinomial
Value
print
Trinomial
main
main
euler
Step
euler
Full
ceil
inverse
Sqrt
inverse
Sqrt
square
Root
sum
Of
Series
kaprekar
Number
In
Range
is
Kaprekar
Number
is
Perfect
Number
is
Perfect
Number2
pfactors
check
If
Power
Of
Two
Or
Not
main
factorial
get
Min
Value
main
test
is
Vampire
Number
split
Into
Digits
compute
Rank
is
Zero
deep
Copy
validate
Input
Matrix
has
Valid
Rows
is
Jagged
Matrix
find
Pivot
Row
normalize
Pivot
Row
eliminate
Rows
main
sum
Of
Digits
sum
Of
Digits
Recursion
sum
Of
Digits
Fast
check
Input
check
Digit
At
digit
To
Int
parse
Int
surface
Area
Cube
surface
Area
Sphere
surface
Area
Rectangle
surface
Area
Cylinder
surface
Area
Square
surface
Area
Triangle
surface
Area
Parallelogram
surface
Area
Trapezium
surface
Area
Circle
surface
Area
Hemisphere
surface
Area
Cone
find
Min
main
pow
miller
Rabin
deterministic
Miller
Rabin
check
Composite
power
Mod
P
multiply
Mod
P
square
Root
generate
are
All
Sides
Positive
can
Form
Triangle
herons
main
mode
factorial
get
add
Ugly
Number
update
Positions
compute
Candidate
compute
Minimal
Candidate
mobius
bin
Pow
leonardo
Number
main
number
Of
Digits
number
Of
Digits
Fast
number
Of
Digits
Faster
number
Of
Digits
Recursion
get
Max
Value
volume
Cube
volume
Cuboid
volume
Sphere
volume
Cylinder
volume
Hemisphere
volume
Cone
volume
Prism
volume
Pyramid
padding
fft
Circular
Convolution
sum
Of
Digits
generic
Root
juggler
Sequence
main
power
arithmetic
geometric
harmonic
check
If
Not
Empty
padding
convolution
FFT
is
Strobogrammatic
get
Abs
Value
is
Pronic
find
The
Winner
winner
compute
floor
second
Best
find
Second
Min
find
Second
Max
check
Input
check
Output
is
Perfect
Square
is
Fibonacci
Number
main
simpsons
Method
f
determinant
main
factorial
combinations
combinations
Optimized
