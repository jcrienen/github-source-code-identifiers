writeToFileWithCommentsFromDefault
performWrite
getInitialUserComments
getFirstCommentByConfigMe
addMissingMessagesWithCommentMarker
rewriteToFileWithComments
convertLineWithCommentMarkerToYamlComment
getTaskName
executeDefault
findUnusedKeys
walkJavaFileTree
getTaskName
execute
outputVerificationResults
updateMessagesFile
getMessagesFiles
executeDefault
getTaskName
getMessageForJavaDoc
getUnknownKeys
getMissingKeys
getMissingTags
hasErrors
verifyKeys
isNotInnerNode
checkTagsInMessage
messageKeyExists
getTaskName
execute
processClass
mapToSuper
unwrapGenericClass
getDependencies
formatInjectionDependencies
getRelevantAnnotationClass
stripNodesWithNoOutgoingEdges
buildSuperTypesList
executeDefault
getTaskName
loadPartialPluginYmlFile
generateCommands
generatePermissions
addWildcardPermissions
gatherChildren
buildCommandEntry
buildUsage
buildPermissionEntry
buildWildcardPermissionEntry
convertDefaultPermission
executeDefault
getTaskName
getTaskName
executeDefault
checkClass
addErrorEntry
getMocks
returnRealClass
isTestClassWithMocks
formatClassList
main
promptAndExecuteTask
executeAutomaticTasks
applyReplacements
applyReplacements
replaceOptionalTag
replaceIterateTag
create
put
put
getValues
getDependencies
convertToClass
executeDefault
execute
generateFileFromTemplate
writeToFile
writeToFile
appendToFile
readFromFile
readFromFile
readLinesFromFile
listFilesOrThrow
getTaskName
execute
getValue
isEmpty
isEmpty
isEmpty
add
getTaskName
execute
executeDefault
executeTasks
getDocTasks
getTaskName
executeDefault
getTaskName
executeDefault
addCommandsInfo
formatPermissions
formatArguments
getTaskName
executeDefault
computeColor
computeColor
buildLanguageNames
getTranslationInfo
gatherTranslations
processMessagesFile
getSortCode
getCode
getPercentTranslated
executeDefault
constructMethodRows
getTaskName
asString
asString
asString
asString
asString
getMethod
getSaltType
setSaltType
getSaltLength
setSaltLength
getUsage
setUsage
isAsciiRestricted
setAsciiRestricted
hasSeparateSalt
setHasSeparateSalt
getHashLength
setHashLength
getDescriptions
constructDescriptions
createDescription
createEncryptionMethod
gatherAnnotations
getRelevantAnnotations
getSuperClass
setSaltInformation
returnTyped
createInitializer
computeHash
gatherNodesWithJavaDoc
getPermissionClasses
addDescriptionsForClass
extractJavaDocFromSource
getSourceForClass
getTaskName
executeDefault
generatePermissionsList
checkFile
getMissingSections
getUnknownSections
getMissingCommands
getUnknownCommands
checkHelpSections
checkCommands
buildCommandPaths
getYamlPaths
getLeafKeys
getTaskName
execute
processFile
getHelpTranslations
scanEventClasses
shouldExtendFromCustomEvent
shouldHaveStaticEventHandlerMethod
canBeInstantiated
initAuthMe
shouldInitializeAllServices
shouldHandlePrematureShutdownGracefully
getJarFile
getJarPath
getUriOrThrow
setupLogger
setRealLogger
mockIpAddressToPlayer
returnDefaultsForAllProperties
initLogger
initFields
shouldHaveAllInformation
shouldSendPasswordMail
shouldHandleMailCreationError
shouldHandleMailSendingFailure
shouldSendRecoveryCode
shouldHandleMailCreationErrorForRecoveryCode
shouldHandleFailureToSendRecoveryCode
initLogger
initFields
shouldHaveAllInformation
shouldCreateEmailObject
shouldCreateEmailObjectWithAddress
shouldCreateEmailObjectWithOAuth2
shouldHaveLanguageInSyncWithConfigurations
shouldBuildTextFilePaths
shouldRecognizeIfIsMessagesFile
shouldReturnLanguageForMessagesFile
shouldRecognizeIfIsHelpFile
loadMessagesFiles
testAllMessagesYmlFiles
testAllHelpYmlFiles
checkFiles
checkFile
setup
setUpMessages
removeLoggerReferences
shouldLoadMessageAndSplitAtNewLines
shouldLoadMessageAsStringWithNewLines
shouldFormatColorCodes
shouldNotSendEmptyMessage
shouldSendMessageToPlayer
shouldSendMultiLineMessageToPlayer
shouldSendMessageToPlayerWithNameReplacement
shouldSendMessageToPlayerWithTagReplacement
shouldNotLogErrorForKeyWithNoTagReplacements
shouldLogErrorForInvalidReplacementCount
shouldSendErrorForReplacementsOnKeyWithNoTags
shouldNotUseMessageFromDefaultFile
shouldRetrieveMessageWithReplacements
shouldFormatDurationObjects
createMessagesFileHandler
shouldHaveAllMessages
validateMessage
shouldHaveUniqueMessageKeys
shouldHaveWellFormedPlaceholders
shouldHaveAllPlaceholders
findMissingTags
buildParams
findHelpMessagesFiles
shouldHaveRequiredEntries
assertHasAllHelpSectionEntries
getPathForDefaultPermission
notEmptyString
setUpLogger
shouldNotUpdateDefaultFile
shouldAddMissingKeys
shouldMigrateOldEntries
shouldPerformNewerMigrations
shouldHaveAllKeysInConfigurationData
shouldHaveCommentForAllRootPathsInConfigurationData
shouldHasOldKeysThatAreNewParentsFirstInMap
collectParentPathsFromMessageKeys
shouldReadChineseFile
shouldWriteWithCorrectCharset
buildConfigurationData
equalToHash
equalToHash
equalToHash
matchesSafely
describeTo
hasAuthBasicData
matchesSafely
describeTo
describeMismatchSafely
hasRegistrationInfo
matchesSafely
describeTo
describeMismatchSafely
hasAuthLocation
hasAuthLocation
matchesSafely
describeTo
stringWithLength
matchesSafely
describeTo
shouldNotHaveSameName
shouldHaveNonPrivateConstantsOnly
hasIllegalFieldVisibility
formatField
shouldImplementHasCleanup
hasExpiringCollectionAsField
collectionsUnmodifiableList
shouldPerformCleanup
initLogger
shouldNotRunAutoPurge
shouldNotRunAutoPurgeForInvalidInterval
shouldRunAutoPurge
shouldRecognizeNoPlayersToPurge
shouldRunPurge
shouldNotRunPurgeIfProcessIsAlreadyRunning
shouldExecutePurgeActions
assertCorrectPurgeTimestamp
verifyScheduledPurgeTask
initLogger
shouldRunTask
shouldHandleOfflinePlayerWithNullName
shouldStopTaskAndInformSenderUponCompletion
shouldStopTaskAndInformConsoleUser
mockOfflinePlayer
asArray
setPermissionsBehavior
assertRanPurgeWithPlayers
assertRanPurgeWithNames
setUp
shouldAddEmail
shouldReturnErrorWhenMailCannotBeSaved
shouldNotAddMailIfPlayerAlreadyHasEmail
shouldNotAddMailIfItIsInvalid
shouldNotAddMailIfAlreadyUsed
shouldShowLoginMessage
shouldShowRegisterMessage
shouldNotAddOnCancelledEvent
setUp
shouldChangeEmail
shouldNotBeCaseSensitiveWhenComparingEmails
shouldShowErrorIfSaveFails
shouldShowAddEmailUsage
shouldRejectInvalidNewMail
shouldRejectInvalidOldEmail
shouldRejectAlreadyUsedEmail
shouldSendLoginMessage
shouldShowRegistrationMessage
shouldNotChangeOnCancelledEvent
authWithMail
setUpLogger
shouldRejectCommandForUnknownUser
shouldUpdatePasswordOfLoggedInUser
shouldUpdatePasswordOfOfflineUser
shouldReportWhenSaveFailed
initLogger
shouldRejectWrongPassword
shouldPerformUnregister
shouldPerformUnregisterAndNotApplyBlindEffect
shouldNotApplyUnregisteredEffectsForNotForcedRegistration
shouldHandleDatabaseError
shouldNotTeleportOfflinePlayer
shouldPerformAdminUnregister
shouldPerformAdminUnregisterWithoutInitiatorOrPlayer
shouldHandleDatabaseErrorForAdminUnregister
verifyCalledUnregisterEventFor
shouldConstructPlayerAuth
shouldCheckPasswordValidity
shouldDetectInvalidPasswordAndInformPlayer
shouldCreatePlayerAuth
shouldLogPlayerIn
shouldNotLogPlayerIn
mockPlayerWithName
assertIsCloseTo
shouldNotPassEmailValidation
shouldPassVerificationForPlayerWithPermission
shouldPassVerificationForPreviouslyUnregisteredIp
shouldCreatePlayerAuth
shouldPerformActionAfterDataSourceSave
shouldHandleEmailSendingFailure
assertIsCloseTo
shouldDetectAlreadyLoggedInPlayer
shouldStopForDisabledRegistration
shouldStopForAlreadyRegisteredName
shouldStopForCanceledEvent
shouldStopForFailedExecutorCheck
mockPlayerWithName
singletonStoreWillReturn
initLogger
shouldNotForceLoginAlreadyLoggedInPlayer
shouldNotForceLoginNonExistentUser
shouldNotForceLoginInactiveUser
shouldNotForceLoginUserWithAlreadyOnlineIp
shouldNotForceLoginForCanceledEvent
shouldPassMaxLoginPerIpCheck
shouldSkipIpCheckForZeroThreshold
shouldSkipIpCheckForPlayerWithMultipleAccountsPermission
shouldFailIpCheckForIpWithTooManyPlayersOnline
mockPlayer
mockOnlinePlayersInBukkitService
shouldHaveExistingClassesInExclusions
removeTestsExclusionOrThrow
isLimbo
isLimbo
matchesSafely
describeTo
describeMismatchSafely
hasLocation
matchesSafely
describeTo
describeMismatchSafely
hasLocation
hasLocation
matchesSafely
describeTo
describeMismatchSafely
hasLocation
collectionContains
initLogger
mockSettings
shouldCreateLimboPlayer
shouldNotKeepOpStatusForUnregisteredPlayer
shouldClearTasksOnAlreadyExistingLimbo
shouldRestoreData
shouldHandleMissingLimboPlayerWhileRestoring
shouldReplaceTasks
shouldHandleMissingLimboForReplaceTasks
newPlayer
newPlayer
convertToLimboPlayer
getLimboMap
shouldRestoreToExpectedValue
buildParams
create
withLimbo
withPlayer
expect
toString
setupLogger
shouldRegisterMessageTask
shouldNotScheduleTaskForZeroAsInterval
shouldCancelExistingMessageTask
shouldInitializeMessageTaskWithCaptchaMessage
shouldRegisterTimeoutTask
shouldNotRegisterTimeoutTaskForZeroTimeout
shouldCancelExistingTimeoutTask
initLogger
shouldMergeLimboPlayers
shouldFallBackToNewLimboForMissingData
shouldHandleNullInputs
copyTestFiles
shouldReadDataFromFile
shouldReturnNullForUnavailablePlayer
shouldSavePlayerData
initLogger
setUpClasses
shouldMigrateOldSegmentFilesOnStartup
shouldRemovePlayer
shouldAddPlayer
shouldHandleReadErrorGracefully
mockPlayerWithUuid
mockWorldWithName
mockLocation
shouldHaveUniqueImplementationClasses
shouldHaveTypeReturnedFromImplementationClass
shouldHaveDistributionThatIsPowerOf2
shouldHaveDifferentSegmentSizes
shouldCreatePromisedSizeOfSegments
checkTotalSegmentsProduced
toPaddedHex
shouldCreateOneSegment
shouldCreateFourSegments
shouldCreateEightSegments
shouldCreateSixteenSegments
shouldCreateThirtyTwoSegments
shouldCreateSixtyFourSegments
shouldCreate256Segments
setUpLogger
setUpMocks
shouldInitializeProperly
shouldDelegateToHandler
shouldReloadProperly
shouldHandleExceptionWhenGettingLimbo
shouldHandleExceptionWhenSavingLimbo
shouldHandleExceptionWhenRemovingLimbo
getHandler
notNullAndDifferentFrom
shouldRestoreValue
shouldEnableFlight
shouldDisableFlight
shouldNotInteractWithPlayer
shouldRemoveFlightExceptForNothingType
newLimboWithAllowFlight
shouldRemoveDatabaseDefaults
shouldThrowForMissingName
shouldCreatePlayerAuthWithNullValues
shouldAllowCommand
shouldDenyCommand
createQuickCommandsProtectioneManager
mockPlayerWithName
shouldAddCounts
shouldCreateAndCheckCaptcha
shouldGenerateNewCodeOnFailure
shouldHaveSameCodeAfterGeneration
shouldIncreaseAndResetCount
shouldNotIncreaseCountForDisabledCaptcha
shouldNotCheckCountIfCaptchaIsDisabled
mockSettings
assertHasCount
shouldBeDisabled
shouldVerifyCodeSuccessfully
shouldGenerateAndRetrieveCode
getCodeMap
shouldAddCounts
shouldIncreaseAndResetCount
shouldNotIncreaseCountForDisabledTempban
shouldNotCheckCountIfTempbanIsDisabled
shouldNotIssueBanIfDisabled
shouldBanPlayerIp
shouldBanPlayerIpCustom
shouldResetCountAfterBan
shouldPerformCleanup
mockSettings
assertHasNoEntries
assertHasCount
mockCounter
setUpBasicBehavior
shouldRequireVerification
shouldNotRequireVerificationIfEmailSettingsAreIncomplete
shouldNotRequireVerificationForMissingPermission
shouldGenerateCode
shouldRequireCode
shouldVerifyCode
createCodeManager
mockPlayerWithName
setUpLogger
setUpTestPluginFolder
shouldLoadAndReadAllProperties
shouldWriteMissingProperties
shouldReloadSettings
copyFileFromResources
buildConfigurationData
shouldHaveCommentOnEachProperty
shouldNotHaveVeryLongCommentLines
shouldMentionAllEnumValues
getEnumClass
isDeprecated
setUpLogger
shouldRewriteForEmptyFile
shouldRewriteIncompleteFile
shouldNotChangeCompleteFile
shouldHaveAllPropertiesFromCommandConfig
shouldMigrateOldOtherAccountsCommand
getUnknownOnLoginCommand
setup
shouldExecuteCommandsOnLogin
shouldExecuteCommandsOnLoginWithTwoAlts
shouldExecuteCommandsOnLoginWithFifteenAlts
shouldExecuteCommandsOnLoginWithTwentyFiveAlts
shouldExecuteCommandsOnLoginWithIncompleteConfig
shouldExecuteCommandsOnSessionLogin
shouldExecuteCommandsOnFirstLogin
shouldNotExecuteFirstLoginCommandWhoseThresholdIsNotMet
shouldExecuteCommandsOnJoin
shouldExecuteCommandsOnJoinWithIncompleteConfig
shouldExecuteCommandsOnRegister
shouldExecuteCommandOnLogout
shouldExecuteCommandsOnRegisterWithIncompleteConfig
shouldExecuteCommandOnUnregister
initManager
copyJarFileAsCommandsYml
mockPlayer
shouldLoadWithNoMigrations
createPluginFolder
shouldLoadWelcomeMessage
shouldReplaceNameAndIpAndCountry
shouldApplyOtherReplacements
setWelcomeMessageAndReload
setUpLogger
setUpTestPluginFolder
shouldLoadEmailMessage
shouldLoadRecoveryCodeMessage
shouldLoadVerificationMessage
mockPropertyResourceAndReader
createFile
setup
shouldSetSpawn
setUpLogger
shouldPerformMigrationsInMemory
shouldPerformMigrationsAndPersistToDisk
shouldKeepOldOtherAccountsSettings
verifyHasUpToDateSettings
performMigrations
scanForSettingsClasses
shouldHavePublicStaticFinalFields
shouldHaveUniquePaths
shouldHaveAllClassesInConfigurationData
isValidConstantField
shouldReturnAllProperties
shouldLogWarnings
shouldWarnBungeeWithoutSpigot
shouldNotLogAnyWarning
shouldFindWantedThrowable
shouldHandleCircularCausesGracefully
shouldFormatException
getCause
setAuthmeInstance
shouldGetPlayerIp
shouldCheckIfIsNpc
shouldCreateNoArgsTag
shouldCreateDependentTag
shouldReplaceTags
shouldNotCallUnusedTags
pi
self
calcDouble
calcSquare
getAvailableTags
shouldApplyTags
sampleClass
matchesSafely
describeTo
getDescription
initLogger
shouldNotCopyFile
shouldCopyFileFromJar
shouldReturnFalseForInvalidJarFile
shouldReturnFalseForParentInvalidParentFolders
shouldPurgeDirectory
shouldDeleteFile
shouldDoNothingForNullFile
shouldGetResourceFromJar
shouldConstructPath
shouldCreateDirectory
shouldReturnFalseOnDirectoryCreateFail
shouldCreateCurrentTimestampString
shouldCreateBackupFile
createFiles
initLogger
shouldCompilePattern
shouldDefaultToAllAllowedPattern
shouldLogAndSendMessage
shouldHandleNullAsCommandSender
shouldNotSendToCommandSenderTwice
shouldCheckIfCollectionIsEmpty
shouldLogAndSendWarning
shouldLogWarningAndNotSendToConsoleSender
shouldLogWarningAndHandleNullCommandSender
shouldCheckIfClassIsLoaded
shouldDetectIfEmailIsEmpty
shouldGenerateRandomStrings
shouldGenerateRandomHexString
shouldGenerateRandomLowerUpperString
shouldGenerateRandomNumberString
shouldThrowForInvalidLength
shouldReturnZeroForAnyKey
shouldIncrementCount
shouldDecrementCount
shouldSumUpEntries
shouldConvertToAppropriateTimeUnit
check
shouldAddAndRetrieveEntries
shouldRemoveEntry
shouldUpdateExpirationAndSupportNegativeValues
shouldCleanUpExpiredEntries
shouldReturnIfIsEmpty
shouldAddEntry
shouldRemoveEntries
shouldHandleNewExpirationAndSupportNegativeValues
shouldClearAllValues
shouldClearExpiredValues
shouldReturnExpiration
shouldReturnExpirationInSuitableUnits
shouldReturnMinusOneForExpiredEntry
assertIsDuration
shouldFindContainedItem
shouldReturnFalseIfNoneFound
shouldReturnFalseForNullString
shouldCheckIfIsBlankString
shouldGetDifferenceWithNullString
shouldGetDifferenceBetweenTwoString
shouldCheckIfHasNeedleInWord
shouldCheckLocalAddress
testIsLoopback
shouldParseUuidSafely
collectClasses
collectClasses
collectClasses
getInstancesOfType
getInstancesOfType
canInstantiate
gatherClassesFromFile
loadTaskClassFromFile
initAuthMe
shouldWaitForTasksToClose
shouldAbortForNeverEndingTask
shouldStopForInterruptedThread
run
shouldStopForInterruptedThread0
mockActiveWorkers
mockBukkitWorker
setField
setField
getField
getFieldValue
getFieldValue
getMethod
invokeMethod
invokePostConstructMethods
newInstance
shouldLoadValidFile
shouldThrowForInvalidFile
initSettings
shouldStartListenerOnStartup
shouldNotListenForDisabledSetting
shouldActivateAntibot
shouldNotActivateAntibotForDisabledSetting
shouldKeepTrackOfKickedPlayers
shouldAcceptPlayerToJoin
shouldActivateAntibotAfterThreshold
shouldInformPlayersOnActivation
shouldImmediatelyStartAfterFirstStartup
setUpForcedWorlds
shouldNotTeleportPlayerOnJoin
shouldTeleportPlayerToFirstSpawn
shouldTeleportPlayerToSpawn
shouldNotTeleportNewPlayer
shouldNotTeleportPlayerToFirstSpawnIfNoTeleportEnabled
shouldNotTeleportNotNewPlayerToFirstSpawn
shouldNotTeleportPlayerForRemovedLocationInEvent
shouldNotTeleportPlayerForCanceledEvent
shouldNotTeleportUponLogin
shouldTeleportPlayerToSpawnAfterLogin
shouldNotTeleportToSpawnForOtherCaseInWorld
shouldTeleportBackToPlayerAuthLocation
shouldTeleportAccordingToPlayerAuthAndPlayerWorldAsFallback
shouldTeleportWithLimboPlayerIfAuthYCoordIsNotSet
shouldTeleportWithLimboPlayerIfSaveQuitLocIsDisabled
shouldNotTeleportForNullLocationInLimboPlayer
assertCorrectLocation
mockLocation
createAuthWithLocation
initializeGeoLiteApi
shouldGetCountry
shouldNotLookUpCountryForLocalhostIp
shouldLookUpCountryName
shouldNotLookUpCountryNameForLocalhostIp
shouldNotLookUpCountryNameIfDisabled
shouldGetProperty
shouldSendMessageToPlayer
shouldSendMessageWithReplacements
shouldRetrieveSingleMessage
shouldCheckPermission
constructBukkitService
shouldDispatchCommand
shouldDispatchConsoleCommand
shouldScheduleSyncDelayedTask
shouldScheduleSyncDelayedTaskWithDelay
shouldScheduleSyncTask
shouldRunTaskDirectly
shouldRunTask
shouldRunTaskLater
shouldRunTaskInAsync
shouldRunTaskDirectlyIfConfigured
shouldRunTaskAsynchronously
shouldRunTaskTimerAsynchronously
run
shouldRunTaskTimer
shouldBroadcastMessage
shouldCreateAndEmitSyncEvent
shouldCreateAndEmitAsyncEvent
shouldReturnServerIp
setUpLogger
setUpClasses
shouldUpdateCurrentHelpFile
checkCommonEntries
checkSections
checkCommands
checkDescription
checkArgs
arg
setUpLogger
shouldMigratePlaintextHashes
shouldNotMigrateShaHashes
shouldNotMigrateForHashOtherThanPlaintext
authWithNickAndHash
setSha256MockToUppercase
initSettings
shouldBeDisabledForNonPositiveLength
shouldGenerateAndStoreCode
playerHasTriesLeft
playerHasNoTriesLeft
shouldRecognizeCorrectCode
shouldRemoveCode
getCodeMap
getTriesCounter
initSettings
shouldSendRecoveryCode
shouldKeepTrackOfSuccessfulRecoversByIp
shouldRemovePlayerFromSuccessfulRecovers
setLogger
shouldHookIntoEssentials
shouldHookIntoEssentialsAtInitialization
shouldHookIntoCmiAtInitialization
shouldHookIntoMultiverseAtInitialization
shouldReturnEssentialsDataFolder
shouldReturnNullForUnhookedEssentials
shouldSetSocialSpyStatus
shouldNotDoAnythingForUnhookedEssentials
shouldUnhookEssentialsAndMultiverse
shouldHandlePluginRetrievalError
shouldReturnNullForUnavailableMultiverse
shouldGetMultiverseSpawn
shouldReturnNullForNonMvWorld
setPluginAvailable
setPluginAvailable
createService
shouldRejectPasswordSameAsUsername
shouldRejectPasswordNotMatchingPattern
shouldRejectTooShortPassword
shouldRejectTooLongPassword
shouldRejectUnsafePassword
shouldAcceptValidPassword
shouldAcceptEmailWithEmptyLists
shouldAcceptEmailWithWhitelist
shouldRejectEmailNotInWhitelist
shouldAcceptEmailNotInBlacklist
shouldRejectEmailInBlacklist
shouldRejectInvalidEmail
shouldRejectInvalidEmailWithoutDomain
shouldRejectDefaultEmail
shouldAllowRegistration
shouldRejectEmailWithTooManyAccounts
shouldAllowBypassForPresentPermission
shouldRecognizeUnrestrictedNames
shouldNotInvokeGeoLiteApiIfCountryListsAreEmpty
shouldAcceptCountryInWhitelist
shouldRejectCountryMissingFromWhitelist
shouldAcceptCountryAbsentFromBlacklist
shouldRejectCountryInBlacklist
shouldCheckNameRestrictions
shouldLogWarningForInvalidRestrictionRule
mockPlayer
assertErrorEquals
initLogger
setUpEnabledProperty
shouldCheckSessionsEnabledSetting
shouldCheckIfUserHasSession
shouldCheckLastLoginDate
shouldRefuseSessionForAuthWithNullLastLoginTimestamp
shouldCheckLastLoginIp
shouldEmitEventForValidSession
shouldHandleNullPlayerAuth
shouldHandlePlayerAuthWithNullLastIp
mockPlayerWithNameAndIp
setBukkitServiceToScheduleSyncTaskFromOptionallyAsyncTask
setBukkitServiceToRunTaskAsynchronously
setBukkitServiceToRunTaskOptionallyAsync
setBukkitServiceToScheduleSyncDelayedTask
setBukkitServiceToScheduleSyncDelayedTaskWithDelay
setUpCommandHandler
setUpMocks
shouldMapPartsToLoginChildCommand
shouldMapPartsToCommandWithNoCaseSensitivity
shouldRejectCommandWithTooManyArguments
shouldRejectCommandWithTooFewArguments
shouldSuggestCommandWithSimilarLabel
shouldSuggestMostSimilarCommand
shouldHandleBaseWithWrongArguments
shouldHandleUnknownBase
shouldHandleNullInput
shouldMapToBaseWithProperArguments
shouldReturnChildlessBaseCommandWithArgCountError
shouldPassCommandPathAsArgumentsToHelpCommand
shouldRecognizeMissingPermissionForCommand
shouldSupportAuthMePrefix
shouldReturnExecutableCommandClasses
shouldRejectNonPlayerSender
shouldCallRunCommandForPlayer
shouldRejectNonPlayerAndSendAlternative
runCommand
runCommand
getAlternativeCommand
shouldHaveEqualDefinitions
initializeCommands
getLabelsFromPluginFile
initializeCommandCollection
shouldInitializeCommands
shouldNotBeNestedExcessively
shouldHaveConnectionBetweenParentAndChild
accept
shouldUseProperLowerCaseLabels
accept
shouldNotDefineSameLabelTwice
accept
shouldHaveProperDescription
accept
shouldHaveOptionalArgumentsAfterMandatoryOnes
accept
shouldNotHaveArgumentsIfCommandHasChildren
accept
shouldPointToSameExecutableCommandWithConsistentArgumentCount
accept
testCollectionForCommand
walkThroughCommands
walkThroughCommands
commandsIncludeLabel
getAbsoluteLabels
shouldHaveUniqueNonEmptyKeys
initializeHandler
shouldReturnLocalizedCommand
shouldReturnLocalizedCommandWithDefaults
shouldReturnSameCommandForNoLocalization
shouldKeepChildrenInLocalCommand
shouldGetTranslationsForSectionAndMessage
shouldGetLocalCommandDescription
shouldFallbackToDescriptionOnCommandObject
createMessagesFileHandler
setUpCommands
setInitialSettings
shouldShowLongDescription
shouldShowArguments
shouldShowSpecifyIfArgumentIsOptional
shouldNotShowAnythingIfCommandHasNoArguments
shouldShowAndEvaluatePermissions
shouldShowAndEvaluateForbiddenPermissions
shouldNotShowAnythingForEmptyPermissions
shouldNotShowAnythingForNullPermissionsOnCommand
shouldShowAlternatives
shouldNotShowAnythingIfHasNoAlternatives
shouldShowChildren
shouldNotShowCommandsTitleForCommandWithNoChildren
shouldHandleUnboundFoundCommandResult
shouldShowCommandSyntaxWithCorrectLabels
shouldRetainCorrectLabels
shouldReplaceIncorrectLabels
shouldDisableSectionsWithEmptyTranslations
shouldNotReturnAnythingForAllDisabledSections
shouldSkipEmptyHeader
shouldShowAlternativesForRootCommand
newFoundResult
removeColors
getLines
setDefaultHelpMessages
shouldHaveIdenticalTexts
shouldOnlyHaveDescriptionForOneCommand
shouldHaveEntryForEachHelpMessageKey
getAuthMeRegisterDescription
setUpTestCommands
shouldReturnCommandPath
shouldComputeMinAndMaxOnEmptyCommand
shouldComputeMinAndMaxOnCommandWithMandatoryArgs
shouldComputeMinAndMaxOnCommandIncludingOptionalArgs
shouldFormatSimpleArgument
shouldFormatCommandWithMultipleArguments
shouldFormatCommandWithOptionalArgument
checkArgumentCount
getBuilderForArgsTest
initializeCommandMapper
setInjectorToMockExecutableCommandClasses
answer
shouldCallMappedCommandWithArgs
shouldNotCallExecutableCommandIfNoPermission
shouldNotCallExecutableForWrongArguments
shouldUseCustomMessageUponArgumentMismatch
shouldNotCallExecutableForWrongArgumentsAndPermissionDenied
shouldNotCallExecutableForFailedParsing
shouldNotCallExecutableForUnknownLabelAndHaveSuggestion
shouldNotCallExecutableForUnknownLabelAndNotSuggestCommand
shouldStripWhitespace
generateCommands
getCommandWithLabel
getCommandWithLabel
createCommand
newArgument
executeCommand
executeCommand
executeCommand
initLogger
initSettings
shouldHandleMissingMailProperties
shouldShowErrorForAuthenticatedUser
shouldShowRegisterMessageForUnregisteredPlayer
shouldHandleDefaultEmail
shouldHandleInvalidEmailInput
shouldGenerateRecoveryCode
shouldGenerateNewPasswordWithoutRecoveryCode
shouldDefineArgumentMismatchMessage
shouldRejectNonPlayerSender
shouldStopIfVerificationIsRequired
shouldForwardData
shouldDefineArgumentMismatchMessage
initPlayerWithName
setUpLogger
shouldChangePassword
shouldRejectInvalidPassword
shouldDoNothingCantChangePass
shouldRejectNonPlayerSender
shouldForwardData
shouldFailForConfirmationMismatch
shouldDefineArgumentMismatchMessage
shouldSendErrorForInvalidRecoveryCode
shouldSendErrorForNoMoreTries
shouldProcessCorrectCode
shouldShowCurrentEmailMessage
shouldShowHiddenEmailMessage
shouldReturnNoEmailMessage
newAuthWithEmail
newAuthWithNoEmail
shouldDisplayHelp
setUpLogger
shouldAddTotpCodeToUserAfterSuccessfulConfirmation
shouldHandleWrongTotpCode
shouldHandleMissingTotpKey
shouldStopForAlreadyExistingTotpKeyOnAccount
shouldHandleMissingAuthAccount
setUpLogger
shouldRemoveTotpKey
shouldHandleDatabaseError
shouldHandleInvalidCode
shouldHandleUserWithoutTotpKey
shouldHandleNonLoggedInUser
shouldOutputHelp
shouldHandleNonLoggedInUser
shouldNotAddCodeForAlreadyExistingTotp
shouldGenerateTotpCode
mockPlayerWithName
shouldTeleportToSpawn
shouldHandleMissingSpawn
setUpLogger
shouldRejectInvalidPassword
shouldRejectAlreadyRegisteredAccount
shouldHandleSavingError
shouldRegisterOfflinePlayer
shouldRegisterOnlinePlayer
assertAuthHasInfo
initLogger
shouldHandleUnknownUser
shouldInformForUserWithoutTotp
shouldInformForUserWithTotpEnabled
shouldTeleportToFirstSpawn
shouldHandleMissingFirstSpawn
shouldPurgeLastPosOfUser
shouldPurgePositionOfCommandSender
shouldHandleNonExistentUser
shouldResetAllLastPositions
verifyPositionWasReset
shouldDisplayInformation
initLogger
shouldHandleUnknownUser
shouldHandleUserWithNoTotpEnabled
shouldRemoveTotpFromUser
shouldHandleErrorWhileRemovingTotp
shouldForwardRequestToService
offlinePlayersWithNames
asLowerCaseSet
shouldGetIpOfPlayer
shouldReturnIpAddressOfPlayer
shouldHandleUnregisteredOnlinePlayer
mockPlayer
shouldSetFirstSpawn
shouldHandleError
shouldSetSpawn
shouldHandleError
shouldNotExecutePurgeForRegisteredPlayer
shouldExecutePurge
shouldExecutePurgeOfRegisteredPlayer
shouldGetAccountsOfCurrentUser
shouldReturnUnknownUserForNullAuth
shouldReturnUnregisteredMessageForEmptyAuthList
shouldReturnSingleAccountMessage
shouldReturnIpUnknown
shouldReturnSingleAccountForIpQuery
shouldReturnAccountListForIpQuery
getMessagesSentToSender
authWithIp
shouldReportUnknownUser
shouldReturnEmail
shouldShowRecentPlayers
shouldHandlePlayerWithNullLastLogin
shouldForwardRequestToManagement
shouldSendErrorToCommandSender
initLogger
shouldHandleUnknownConversionType
shouldHandleCommandWithNoArgs
shouldHaveUniqueClassForEachConverter
shouldLaunchConverterForAllTypes
shouldCatchExceptionInConverterAndInformSender
createMockReturnedByInjector
setUpLogger
setDefaultSettings
shouldReload
shouldHandleReloadError
shouldIssueWarningForChangedDataSourceSetting
verifyReloadingCalls
shouldRejectInvalidMail
shouldHandleUnknownUser
shouldHandleAlreadyTakenEmail
shouldHandlePersistenceError
shouldUpdateEmail
shouldUpdateEmailAndPlayerCache
shouldStartBackup
shouldRejectNonExistentUser
shouldDisplayLastLoginOfUser
shouldDisplayLastLoginOfCommandSender
shouldHandleNullLastLoginDate
shouldAllHaveDifferentNameProperty
shouldHaveMatchingNullableAndNotNullDefinition
shouldHaveMatchingDefaultValueInNotNullDefinition
verifyHasCorrespondingColumnDefinitions
verifyHasSameDefaultValueInNotNullDefinition
shouldMakeExample
shouldHandleMissingPlayer
shouldDisplayAuthInfo
shouldHandleCornerCases
initMockLogger
shouldFormatLocation
shouldHandleNullWorld
shouldHandleNullLocation
shouldFetchMapInLimboService
shouldHandleErrorGracefully
shouldReturnSameDataSourceInstance
shouldUnwrapCacheDataSource
shouldCastOrReturnNull
collectClasses
shouldAllBePackagePrivate
shouldHaveDifferentSubcommandName
shouldAllHaveDescription
instantiate
initFactory
shouldListAllAvailableDebugSections
shouldNotListAnyDebugSection
shouldRunSection
shouldNotRunSectionForMissingPermission
setUpLimboCacheMap
shouldOutputStatistics
shouldOutputCachedDataSourceStatistics
mockListOfSize
shouldListAllPermissionNodeClasses
shouldShowUsageInfo
shouldShowSuccessfulTestWithRegularPlayer
setUpLogger
shouldReturnMySqlConnection
shouldSetMySqlFieldOnInitialization
shouldLeaveMySqlFieldToNullOnInitialization
createDefaultChanger
shouldRejectOfflinePlayer
shouldRejectInexistentPlayer
shouldRejectPlayerWithMissingPermission
shouldForceLoginPlayer
shouldForceLoginSenderSelf
mockPlayer
shouldHandleInvalidNumber
shouldRejectTooSmallInterval
shouldForwardToService
assertIsCloseTo
setUpLogger
shouldUpdateHelpMessage
shouldCatchAndReportException
shouldReturnAntiBotState
shouldActivateAntiBot
shouldDeactivateAntiBot
shouldShowHelpForUnknownState
shouldHandleUnknownPlayer
shouldInvokeUnregisterProcess
shouldInvokeUnregisterProcessWithNullPlayer
shouldRejectNonPlayerSender
shouldRejectNotLoggedInPlayer
shouldRejectInvalidPassword
shouldForwardTheDataForValidPassword
shouldDefineArgumentMismatchMessage
initPlayerWithName
shouldHandleMissingBaseCommand
shouldHandleWrongCommandWithSuggestion
shouldHandleWrongCommandWithoutSuggestion
shouldShowChildrenOfBaseCommand
shouldShowDetailedHelpForChildCommand
newCommandDescription
removeColors
shouldCatchUnauthenticatedUser
shouldStopForMissingVerificationCode
shouldForwardDataToAsyncTask
shouldStopIfSenderIsNotPlayer
shouldDefineArgumentMismatchMessage
shouldDetectIfPlayerIsLoggedIn
shouldShowLoginUsageIfCaptchaIsNotRequired
shouldHandleCorrectCaptchaInput
shouldHandleWrongCaptchaInput
shouldVerifyWithRegisterCaptchaManager
shouldHandleFailedRegisterCaptcha
shouldShowRegisterUsageWhenRegistrationCaptchaIsSolved
mockPlayerWithName
shouldStopIfSenderIsNotAPlayer
shouldCallManagementForPlayerCaller
setup
linkMocksAndProvideSettingDefaults
shouldNotRunForNonPlayerSender
shouldForwardToManagementForTwoFactor
shouldReturnErrorForEmptyArguments
shouldReturnErrorForMissingConfirmation
shouldReturnErrorForMissingEmailConfirmation
shouldThrowErrorForMissingEmailConfiguration
shouldRejectInvalidEmail
shouldRejectInvalidEmailConfirmation
shouldPerformEmailRegistration
shouldRejectInvalidPasswordConfirmation
shouldPerformPasswordRegistration
shouldPerformMailValidationForPasswordWithEmail
shouldStopForInvalidEmail
shouldPerformNormalPasswordRegisterForOneArgument
shouldRequestCaptcha
mockPlayerWithName
setUpLogger
shouldDetectIfMailHasASetup
shouldRequireAndAcceptCode
shouldRejectCode
shouldRejectVerificationDueToExpiration
shouldRejectVerificationDueToVerifiedIdentity
shouldRejectVerificationDueToUndefinedEmail
shouldDefineArgumentMismatchMessage
mockPlayerWithName
shouldStopIfSenderIsNotAPlayer
shouldCallManagementForPlayerCaller
shouldDefineArgumentMismatchMessage
initLogger
resetConsoleLoggerFactoryToDefaults
removeSettingsAndClearMap
shouldCreateLoggerWithProperNameAndDefaultLogLevel
shouldReturnSameInstanceForName
shouldInitializeAccordingToSettings
setSettings
getConsoleLoggerMap
shouldBlacklistAllSensitiveCommands
getCommand
getCommand
findCommandWithLabel
buildCommandSyntaxes
getCommandPrefixes
shouldIncludeProperLevels
checkLevelInclusion
shouldReplaceSensitiveRecord
shouldNotFilterRegularCommand
shouldManageRecordWithNullMessage
createRecord
shouldFilterSensitiveLogEvent
shouldNotFilterIrrelevantLogEvent
shouldNotFilterNonCommandLogEvent
shouldNotFilterLogEventWithNullMessage
shouldNotFilterWhenLogEventIsNull
shouldFilterSensitiveStringMessage
shouldNotFilterNormalStringMessage
shouldNotFilterNonCommandStringMessage
shouldReturnNeutralForNullMessage
shouldFilterSensitiveObjectMessage
shouldNotFilterNullObjectParam
shouldNotFilterIrrelevantMessage
shouldNotFilterNonSensitiveCommand
shouldFilterSensitiveMessage
shouldNotFilterNonSensitiveMessage
shouldNotFilterNonCommandMessage
shouldNotFilterNullMessage
mockMessage
shouldHandleSimpleEvents
shouldCancelRegainHealthEvent
shouldNotCancelRegainedHealth
shouldCancelEntityDamageByEntityEvent
shouldNotCancelEntityDamageByEntityEvent
shouldCancelEntityDamageEvent
shouldNotCancelEntityDamageEvent
shouldAllowProjectileLaunchFromNonHuman
shouldAllowProjectileLaunchFromAuthedHuman
shouldRejectProjectileLaunchFromUnauthed
shouldHandleOldShooterMethod
shouldCancelEntityTargetEvent
shouldNotCancelEntityTargetEvent
shouldCancelEvent
withServiceMock
check
mockShouldCancel
collectListenerClasses
shouldSetIgnoreCancelledToTrue
shouldHaveOnlyEventListenersAsPublicMembers
shouldNotHaveMonitorLevelEventHandlers
shouldNotHaveMultipleMethodsWithSameName
checkCanceledAttribute
checkPublicMethodsAreListeners
verifyListenerIsNotUsingMonitorPriority
isTestableMethod
initLogger
shouldForwardPluginNameOnEnable
shouldForwardPluginNameOnDisable
checkEnableHandling
checkDisableHandling
verifyNoMoreInteractionsAndReset
mockEventWithPluginName
shouldAllowPlaceEvent
shouldDenyPlaceEvent
shouldAllowBreakEvent
shouldDenyBreakEvent
shouldCancelEvent
setUpLogger
shouldNotDoAnythingForNormalEvent
shouldRefuseNonVipPlayerForFullServer
shouldKickNonVipForJoiningVipPlayer
shouldKickVipPlayerIfNoPlayerCanBeKicked
shouldKickNonRegistered
shouldNotKickRegisteredPlayer
shouldNotKickUnregisteredPlayer
shouldAllowValidName
shouldRejectTooLongName
shouldRejectTooShortName
shouldRejectNameWithInvalidCharacters
shouldAllowProperlyCasedName
shouldRejectNameWithWrongCasing
shouldUpdateMissingRealName
shouldUpdateDefaultRealName
shouldAcceptCasingMismatchForDisabledSetting
shouldAcceptNameForUnregisteredAccount
shouldAcceptNameThatIsNotOnline
shouldRejectNameAlreadyOnline
shouldAcceptAlreadyOnlineNameForDisabledSetting
shouldAllowUser
shouldAllowUserWithAuth
shouldAllowUserWithBypassPermission
shouldKickUserForFailedAntibotCheck
shouldNotCheckCountry
shouldCheckAndAcceptUnregisteredPlayerCountry
shouldCheckAndAcceptRegisteredPlayerCountry
shouldThrowForBannedCountry
expectValidationExceptionWith
exceptionWithData
matchesSafely
describeTo
initializeDefaultSettings
shouldHandleEventWithNullEntity
shouldHandleEntityEventWithNonPlayerEntity
shouldAllowAuthenticatedPlayer
shouldDenyUnLoggedPlayer
shouldAllowUnloggedPlayerForOptionalRegistration
shouldAllowUnrestrictedName
shouldAllowNpcPlayer
shouldHandlePlayerEvent
shouldHandlePlayerEventWithNullPlayer
shouldVerifyBasedOnPlayer
mockPlayerWithName
getHandlers
shouldCancelKick
shouldNotCancelKick
shouldNotCancelOrdinaryKick
shouldHandleSimpleCancelableEvents
shouldAllowEssentialsMotd
shouldNotStopAllowedCommand
shouldNotCancelEventForAuthenticatedPlayer
shouldCancelCommandEvent
shouldCancelFastCommandEvent
shouldAllowChat
shouldCancelChatForUnauthedPlayer
shouldSendChatToEveryone
shouldHideChatFromUnauthed
shouldCancelChatEventForNoRemainingRecipients
shouldAllowChatForBypassPermission
shouldAllowUnlimitedMovement
shouldAllowFalling
shouldAllowMovementForAuthedPlayer
shouldCancelEventForDisabledUnauthedMovement
shouldTeleportPlayerInDifferentWorldToSpawn
shouldAllowMovementWithinRadius
shouldRejectMovementOutsideOfRadius
shouldIgnorePlayerRespawnWithNoTeleport
shouldIgnorePlayerRespawn
shouldHandlePlayerRespawn
shouldIgnorePlayerRespawnUnloadedWorld
shouldHandlePlayerRespawnNoChanges
shouldHandlePlayerJoining
shouldNotInterfereWithUnrestrictedUser
shouldStopHandlingForFullServer
shouldStopHandlingEventForBadResult
shouldPerformAllJoinVerificationsSuccessfullyPreLoginLowest
shouldKickPreLoginLowestUnresolvedHostname
shouldPerformAllJoinVerificationsSuccessfullyPreLoginHighest
shouldPerformAllJoinVerificationsSuccessfullyLogin
shouldAbortPlayerJoinForInvalidName
shouldRemoveMessageOnQuit
shouldRemoveMessageForUnloggedUser
shouldProcessPlayerAndKeepQuitMessage
shouldCancelInventoryClickEvent
shouldAllowInventoryClickEvent
shouldAllowSignChangeEvent
shouldCancelSignChangeEvent
shouldAllowInventoryOpen
shouldCancelInventoryOpen
shouldNotModifyJoinMessage
shouldRemoveJoinMessage
shouldUseCustomMessage
shouldDelayJoinMessage
shouldCancelPlayerEditBookEvent
shouldCancelPlayerInteractAtEntityEvent
mockPlayerWithName
playerWithMockedServer
mockCommandEvent
newAsyncChatEvent
verifyNoModifyingCalls
verifyNoModifyingCalls
verifyNoModifyingCalls
mockAddrWithIp
gatherPermissionNodes
shouldHaveAllPermissionsInPluginYml
shouldNotHaveUnknownPermissionsInPluginYml
doesPermissionExist
getPermissionsFromClasses
getPermissionsFromPluginYmlFile
addChildren
validateChildren
mapToDefaultPermission
removePermissionsPrefix
collectChildren
removeStart
shouldHaveDefinedAndUniqueNames
shouldRecognizePermissionSystemType
shouldAllStartWitRequiredPrefix
shouldHaveUniqueNodes
getPermissionNodes
getRequiredPrefix
shouldNotStartWithOtherPrefixes
getPermissionNodes
getRequiredPrefix
startsWithAny
getPermissionNodes
getRequiredPrefix
getNode
getDefaultPermission
setUpLogger
setUp
shouldInitializeHandler
shouldInitializeToVaultIfSoConfigured
shouldNotHookIntoDisabledPlugin
shouldCatchInitializationException
createParameters
setUpForPermissionSystemTest
setUpForVault
getHandlerFieldValue
shouldReturnGroups
shouldHandleNullAsGroups
create
getVaultPermission
getPermissionNodes
getRequiredPrefix
shouldUseDefaultPermissionForCommandSender
shouldGrantToOpCommandSender
shouldDenyPermissionEvenForOpCommandSender
shouldAllowForNonOpPlayer
shouldDenyForNonOpPlayer
shouldAllowForOpPlayer
shouldDenyEvenForOpPlayer
shouldHandleNullPermissionForCommandSender
shouldHandleNullPermissionForPlayer
getPermissionNodes
getRequiredPrefix
setMockLogger
closeFileHandlers
resetConsoleToDefault
shouldLogToFile
shouldNotLogToFile
shouldLogStackTraceToFile
shouldSupportVariousDebugMethods
shouldCloseFileWriterDespiteExceptionOnFlush
shouldHandleExceptionOnFileWriterClose
newSettings
toString
hasEqualValuesOnAllFields
matchesSafely
describeTo
assertAreFieldsEqual
getAllFields
initLogger
shouldLogException
shouldFetchNullableStatus
shouldReturnFalseForUnknownNullableStatus
shouldThrowForUnknownColumnInNullableCheck
shouldGetDefaultValue
shouldThrowForUnknownColumnInDefaultValueRetrieval
shouldHandleNullDefaultValue
initializeLogger
shouldCloseResources
getObjectUnderTest
verifyHaveMocksBeenClosed
buildParamListForMethod
getMethodParameter
getTypedCollection
isAssignableFrom
getDefaultParameters
initConnection
preparedStatementAnswer
answer
resultSetAnswer
answer
initResultSet
answer
initMocks
shouldConvertFromSqlite
shouldConvertFromMySql
initializeMySqlTable
assertIsCloseTo
initLogger
shouldThrowForDestinationTypeMismatch
shouldHandleSourceThrowingException
shouldConvertAndSkipExistingPlayers
mockAuthWithName
getSource
initializeLogger
shouldImportUsers
shouldStopForNonExistentFile
assertNameAndRealName
initializeSettings
initializeConnectionAndTable
closeConnection
shouldSetUpTableIfMissing
shouldCreateMissingColumns
getDataSource
set
silentClose
createMySql
createPostgres
createSqlite
reload
connect
initializeSettings
initializeConnectionAndTable
closeConnection
getDataSource
set
silentClose
createDataSource
getDataSource
getDataSource
shouldReturnIfAuthIsAvailableOrNot
shouldReturnPassword
shouldReturnPasswordWithEmptySaltColumn
shouldGetAuth
shouldCountAuthsByEmail
shouldReturnAllAuths
shouldUpdatePassword
shouldUpdatePasswordWithNoSalt
shouldUpdatePasswordWithPlayerAuth
shouldRemovePlayerAuth
shouldUpdateSession
shouldUpdateLastLoc
shouldDeletePlayers
shouldUpdateEmail
shouldCountAuths
shouldGetAllUsersByIp
shouldUpdateRealName
shouldGetRecordsToPurge
shouldPerformOperationsOnIsLoggedColumnSuccessfully
shouldPerformPurgeOperation
shouldFetchEmail
shouldGetLoggedPlayersWithoutEmail
shouldGrantAndRetrieveSessionFlag
shouldRevokeSession
shouldGetRecentlyLoggedInPlayers
shouldSetTotpKey
shouldRemoveTotpKey
setup
shouldRun
getByNameOrFail
createDataSource
createExtension
createExtension
createExtension
shouldNotHaveAnyInteractionsWithConnection
createExtension
initSettings
getObjectUnderTest
createExtension
createParameters
createExtension
initializeSettings
getObjectUnderTest
createDataSource
data
getDataSourceMethods
createDataSource
initializeSettings
initializeConnectionAndTable
closeConnection
getDataSource
set
silentClose
setUpConfigAndInjector
shouldHaveUniqueClassForEntries
shouldBeAbleToInstantiateEncryptionAlgorithms
shouldBeDeprecatedIfEncryptionClassIsDeprecated
testHashEqualityForSameSalt
shouldGenerateWith2aPrefix
mockSettings
mockSettings
shouldGenerateWith2yPrefixAndCostFactor10
shouldDetectMatchForHashWithOtherRoundNumber
mockSettings
setupLogger
verifyCorrectConstructorIsUsed
testGivenPasswords
testPasswordEquality
testMalformedHashes
doesGivenHashMatch
generateTest
testHashEqualityForSameSalt
shouldGenerateWith2aPrefixAndCostFactor10
shouldMatchPhpassSaltedMd5Hashes
shouldMatchUnsaltedMd5Hashes
initLogger
shouldGenerateBarcodeUrl
shouldHandleInvalidHash
shouldHandleInvalidInput
testHashEqualityForSameSalt
shouldCreateHashesWith2aAndCostFactor13
shouldThrowForInvalidSalt
verifyCorrectConstructorIsUsed
shouldGenerateFourCharSalt
shouldHashMd5
shouldHashSha1
shouldHashSha256
shouldHashSha512
shouldRetrieveMd5Instance
shouldCheckForValidBcryptHashStart
shouldCompareStrings
shouldGenerateTotpKey
shouldRemoveGeneratedTotpKey
shouldCheckGeneratedTotpKey
shouldRemoveExpiredEntries
mockPlayerWithName
initializeTotpAuthenticator
shouldGenerateTotpKey
shouldCheckCodeAndDeclareItValidOnlyOnce
shouldHandleInvalidNumberInput
shouldVerifyCode
shouldRemoveOldEntries
createGoogleAuthenticator
setUpTest
setUpMocks
answer
shouldReturnPasswordMatch
shouldReturnPasswordMismatch
shouldReturnFalseIfPlayerDoesNotExist
shouldTryOtherMethodsForFailedPassword
shouldTryLegacyMethodsAndFail
shouldHashPassword
shouldSkipCheckIfMandatorySaltIsUnavailable
shouldReloadSettings
shouldReturnInstanceOrNull
shouldReturnIfPlayerIsAuthenticated
shouldReturnIfPlayerIsNpc
shouldReturnIfPlayerIsUnrestricted
shouldGetLastLocation
shouldGetLastIp
shouldReturnNullAsLastIpForUnknownUser
shouldGetLastLogin
shouldHandleNullLastLogin
shouldGetLastLoginTime
testGetLastLoginMillis
shouldHandleNullLastLoginTime
shouldReturnNullForUnavailablePlayer
shouldCheckForRegisteredName
shouldCheckPassword
shouldReturnAuthNames
shouldReturnAuthRealNames
shouldUnregisterPlayer
shouldUnregisterPlayerByName
shouldChangePassword
shouldReturnAuthMeInstance
shouldReturnVersion
shouldForceLogin
shouldForceLogout
shouldForceRegister
shouldForceRegisterAndNotAutoLogin
shouldRegisterPlayer
shouldNotRegisterAlreadyRegisteredPlayer
shouldGetNamesByIp
shouldReturnGeoIpInfo
shouldReturnAuthMePlayerInfo
shouldReturnNullForNonExistentAuth
mockPlayerWithName
shouldMapNullWithoutError
shouldMapFromPlayerAuth
shouldHandleNullAndDefaultValues
emptyOptional
describeTo
matchesSafely
getPlayer
canRegister
setCanRegister
getHandlerList
getHandlers
getHandlerList
getHandlers
getHandlerList
getHandlers
getPlayer
getFrom
setTo
getTo
setCancelled
isCancelled
getPlayer
isLogin
getHandlerList
getHandlers
getHandlerList
getHandlers
getMethod
setMethod
getHandlerList
getHandlers
getPlayer
getHandlerList
getHandlers
getPlayer
getPlayer
isCancelled
setCancelled
getHandlerList
getHandlers
getPlayer
canLogin
setCanLogin
getHandlerList
getHandlers
isAuthenticated
getHandlerList
getHandlers
getPlayer
getHandlerList
getHandlers
isCancelled
setCancelled
getPlayer
getHandlerList
getHandlers
getPlayerName
getInitiator
getHandlerList
getHandlers
isCancelled
getPlayer
getOldEmail
getNewEmail
setCancelled
getHandlers
getHandlerList
getPlayer
getHandlerList
getHandlers
getStoredInventory
getStoredArmor
getPlayer
setCancelled
isCancelled
getHandlerList
getHandlers
generateImage
hasAllInformation
sendPasswordMail
sendVerificationMail
sendRecoveryCode
generatePasswordImage
embedImageIntoEmailContent
replaceTagsForPasswordMail
replaceTagsForVerificationEmail
replaceTagsForRecoveryCodeMail
hasAllInformation
initializeMail
sendEmail
setPropertiesForPort
getMechanismName
hasInitialResponse
evaluateChallenge
isComplete
unwrap
wrap
getNegotiatedProperty
dispose
createSaslClient
getMechanismNames
reload
getLanguage
getUserLanguageFile
getFilename
hasSection
getMessage
getMessageIfExists
createFilePath
initializeFile
reload
reloadInternal
createFilePath
send
send
retrieve
formatDuration
retrieveMessage
retrieveMessage
retrieveSingle
retrieveSingle
getKey
getTags
toString
createMessageFilePath
createHelpMessageFilePath
isMessagesFile
getLanguageIfIsMessagesFile
isHelpFile
getMessage
getDefault
createFilePath
getMessageFromJar
getString
loadJarFile
loadFromFile
loadFromStream
contains
getKeys
getChildKeys
getObject
getString
getInt
getDouble
getBoolean
getList
readStreamToMap
getIfIsMap
migrateAndSave
migrateAndSave
migrateKeys
moveIfApplicable
migrateOldKeys
addMissingKeys
backupMessagesFile
createConfigurationData
getFromReader
addMessageKey
getAllProperties
migrateOldPaths
moveIfApplicable
replaceOldPlaceholders
createReader
createNewYaml
escapePathElementIfNeeded
initializeValues
getValue
getAllMessageProperties
getMessage
setMessage
getPluginName
getPluginVersion
getPluginBuildNumber
onEnable
loadPluginInfo
initialize
instantiateServices
registerEventListeners
stopOrUnload
onDisable
onCommand
getServerNameVersionSafe
initialize
initializeSharedSettings
initializeSettings
getLogLevel
getName
warning
logException
info
fine
debug
debug
debug
debug
debug
logAndWriteWithDebugPrefix
closeFileWriter
writeLog
closeSafely
initializeFileWriter
run
executePurge
purgeAntiXray
purgeFromAuthMe
purgeLimitedCreative
purgeDat
purgeEssentials
purgePermissions
runAutoPurge
runPurge
purgePlayers
setPurging
executePurge
run
finish
sendMessage
setMuted
run
run
addEmail
sendUnloggedMessage
changeEmail
saveNewEmail
outputUnloggedMessage
changePassword
changePasswordAsAdmin
processQuit
processSyncQuit
processJoin
handlePlayerWithUnmetNameRestriction
processJoinSync
validatePlayerCountForIp
countOnlinePlayersByIp
unregister
adminUnregister
performPostUnregisterActions
applyBlindEffect
logout
processSyncLogout
applyLogoutEffect
requestLogin
processPasswordRegister
processEmailRegister
of
getLoginAfterRegister
getPassword
setHashedPassword
getHashedPassword
createPlayerAuthObject
performLoginAfterRegister
getPlayer
getPlayerName
isRegistrationAdmitted
buildPlayerAuth
executePostPersistAction
createPlayerAuthObject
createPlayerAuth
isRegistrationAdmitted
buildPlayerAuth
executePostPersistAction
isRegistrationAdmitted
createPlayerAuthObject
executePostPersistAction
of
getEmail
of
isRegistrationAdmitted
buildPlayerAuth
createPlayerAuthObject
performLoginAfterRegister
executePostPersistAction
getExecutorClass
of
getEmail
setPassword
getPassword
register
preRegisterCheck
executeRegistration
isPlayerIpAllowedToRegister
processSyncEmailRegister
processSyncPasswordRegister
processSyncPlayerLogout
processSyncPlayerLogin
processSyncPlayerQuit
runTask
performLogin
forceLogin
forceLogin
performLogout
performRegister
performUnregister
performUnregisterByAdmin
performJoin
performQuit
performAddEmail
performChangeEmail
performPasswordChange
performPasswordChangeAsAdmin
runTask
restoreInventory
processPlayerLogin
login
forceLogin
forceLogin
getPlayerAuth
getPlayerAuth
checkPlayerInfo
handleWrongPassword
performLogin
displayOtherAccounts
hasReachedMaxLoggedInPlayersForIp
restoreFlySpeed
restoreWalkSpeed
restoreFlySpeed
restoreWalkSpeed
restoreFlySpeed
restoreWalkSpeed
restoreFlySpeed
restoreWalkSpeed
restoreFlySpeed
restoreWalkSpeed
createLimboPlayer
getLimboPlayer
hasLimboPlayer
restoreData
replaceTasksAfterRegistration
resetMessageTask
muteMessageTask
unmuteMessageTask
getLimboOrLogError
setGroup
useAuthGroups
reload
getLocation
isOperator
getGroups
isCanFly
getWalkSpeed
getFlySpeed
getTimeoutTask
setTimeoutTask
getMessageTask
setMessageTask
clearTasks
getState
setState
restoreAllowFlight
restoreAllowFlight
restoreAllowFlight
restoreAllowFlight
processPlayer
restoreAllowFlight
processPlayer
getGroupName
getContextMap
equals
hashCode
getLimboPlayer
saveLimboPlayer
removeLimboPlayer
getType
serialize
getDistribution
getLength
getTotalSegments
getLimboPlayer
saveLimboPlayer
removeLimboPlayer
getType
getLimboPlayer
saveLimboPlayer
removeLimboPlayer
getType
saveEntries
readLimboPlayers
getPlayerSegmentFile
getSegmentFile
convertOldDataToCurrentSegmentScheme
saveToNewSegments
groupBySegment
deleteEmptyFiles
isLimboJsonFile
listFiles
getLimboPlayer
saveLimboPlayer
removeLimboPlayer
reload
deserialize
deserializeLocation
getString
getLimboGroups
getBoolean
getFloat
getFloat
getDouble
getNumberFromElement
createSegmentName
getPrefix
buildSegmentName
buildCharMap
getImplementationClass
getLimboPlayer
saveLimboPlayer
removeLimboPlayer
getType
createLimboPlayer
revokeLimboStates
merge
firstNotNull
getLimboGroups
registerMessageTask
registerTimeoutTask
setMuted
getMessageKey
setJoin
shouldSavePlayer
processJoin
isAllowed
reload
performCleanup
setNickname
getNickname
getRealName
setRealName
getGroupId
setQuitLocation
getQuitLocX
setQuitLocX
getQuitLocY
setQuitLocY
getQuitLocZ
setQuitLocZ
getWorld
setWorld
getYaw
getPitch
getLastIp
setLastIp
getLastLogin
setLastLogin
getEmail
setEmail
getPassword
setPassword
getRegistrationIp
getRegistrationDate
setRegistrationDate
getTotpKey
setTotpKey
getUuid
setUuid
equals
hashCode
toString
builder
build
isEqualTo
name
realName
password
password
totpKey
lastIp
location
locX
locY
locZ
locWorld
locYaw
locPitch
lastLogin
groupId
email
registrationIp
registrationDate
uuid
updatePlayer
removePlayer
isAuthenticated
getAuth
getLogged
getCache
increaseCount
resetCount
shouldTempban
tempbanPlayer
reload
performCleanup
isCaptchaRequired
getCaptchaCodeOrGenerateNew
checkCode
reload
performCleanup
setExpirationInMinutes
setCaptchaLength
getCodeOrGenerateNew
generateCode
checkCode
removeExpiredEntries
isCaptchaRequired
getCaptchaCodeOrGenerateNew
checkCode
increaseLoginFailureCount
isCaptchaRequired
getCaptchaCodeOrGenerateNew
checkCode
resetLoginFailureCount
reload
performCleanup
canSendMail
isVerificationRequired
isCodeRequired
isPlayerVerified
hasCode
hasEmail
codeExistOrGenerateNew
generateCode
checkCode
verify
unverify
reload
performCleanup
setActiveSession
processProxySessionMessage
shouldResumeSession
performCleanup
getPasswordEmailMessage
getVerificationEmailMessage
getRecoveryCodeEmailMessage
loadSettingsFromFiles
reload
readFile
registerComments
getOnJoin
setOnJoin
getOnLogin
setOnLogin
getOnSessionLogin
setOnSessionLogin
getOnFirstLogin
setOnFirstLogin
getOnRegister
setOnRegister
getOnUnregister
setOnUnregister
getOnLogout
setOnLogout
checkAndMigrate
moveOtherAccountsConfig
replaceOldPlaceholdersWithNew
isAnyCommandMissing
copyWithCommand
setValuesToCopyWithNewCommand
getCommand
setCommand
getExecutor
setExecutor
getDelay
setDelay
toString
copyWithCommand
getIfNumberOfAccountsAtLeast
setIfNumberOfAccountsAtLeast
getIfNumberOfAccountsLessThan
setIfNumberOfAccountsLessThan
runCommandsOnJoin
runCommandsOnRegister
runCommandsOnLogin
runCommandsOnSessionLogin
runCommandsOnFirstLogin
runCommandsOnUnregister
runCommandsOnLogout
executeCommands
executeCommands
dispatchCommand
shouldCommandBeRun
reload
newReplacer
newOnLoginCmdReplacer
buildAvailableTags
performMigrations
hasDeprecatedProperties
hasOldOtherAccountsCommand
getOldOtherAccountsCommand
getOldOtherAccountsCommandThreshold
performMailTextToFileMigration
migrateJoinLeaveMessages
migrateForceSpawnSettings
migratePoolSizeSetting
changeBooleanSettingToLogLevelProperty
hasOldHelpHeaderProperty
hasSupportOldPasswordProperty
convertToRegistrationType
mergeAndMovePermissionGroupSettings
moveDeprecatedHashAlgorithmIntoLegacySection
moveSaltColumnConfigWithOtherColumnConfigs
setOldOtherAccountsCommandFieldsIfSet
moveProperty
reload
getWelcomeMessage
sendWelcomeMessage
readWelcomeFile
getFromReader
toEnum
toExportValue
registerComments
registerComments
buildConfigurationData
logWarningsForMisconfigurations
isTrue
reload
getSpawn
setSpawn
getFirstSpawn
setFirstSpawn
loadEssentialsSpawn
unloadEssentialsSpawn
loadCmiSpawn
unloadCmiSpawn
getSpawnLocation
isValidSpawnPoint
setLocation
saveAuthMeConfig
getPlayerLocationOrSpawn
getLocationFromConfiguration
getLocationFromCmiConfiguration
containsAllSpawnFields
isLocationCompleteInCmiConfig
getFloat
getDifference
containsAny
isBlank
isInsideString
getPlayerIp
isNpc
copyFileFromResource
createDirectory
getResourceFromJar
purgeDirectory
delete
create
makePath
createCurrentTimeString
createBackupFilePath
findThrowableInCause
formatException
parseUuidSafely
safePatternCompile
isClassLoaded
logAndSendMessage
logAndSendWarning
isCollectionEmpty
isEmailEmpty
newReplacer
getAdaptedMessages
determineUsedTags
toString
getName
getValue
getName
getValue
createTag
createTag
getName
getValue
getAdaptedItems
generate
generateHex
generateNum
generateLowerUpper
generateString
get
increment
decrement
total
get
put
remove
removeExpiredEntries
setExpiration
isEmpty
getEntries
getValue
getExpiration
createWithSuitableUnit
getDuration
getTimeUnit
add
contains
remove
clear
removeExpiredEntries
getExpiration
setExpiration
isEmpty
isLocalAddress
isLoopbackAddress
isLoopbackAddress
isIPv6UniqueSiteLocal
reset
handle
get
createDataSource
checkDataSourceSize
performCleanup
get
reload
reload
run
sleep
getPendingTasks
sendMetrics
setupConsoleFilter
setLog4JFilter
scheduleRecallEmailTask
run
saveAllPlayers
savePlayer
saveLoggedinPlayer
reload
teleportOnJoin
prepareOnJoinSpawnLocation
teleportNewPlayerToFirstSpawn
teleportOnLogin
mustForceSpawnAfterLogin
buildLocationFromAuth
teleportBackFromSpawn
teleportToSpawn
performTeleportation
isEventValid
loadFromFile
createReader
getFile
isDataAvailable
updateDatabase
startReading
downloadDatabaseArchive
downloadDatabaseArchive
verifyChecksum
extractDatabase
getCountryCode
getCountryName
getCountry
changePlainTextToSha256
doBackup
doBackup
doBackup
performMySqlBackup
performFileBackup
useWindowsCommand
buildMysqlDumpArguments
constructBackupFile
copy
initEmailCooldownSet
createAndSendRecoveryCode
generateAndSendNewPassword
addSuccessfulRecovery
removeFromSuccessfulRecovery
checkEmailCooldown
canChangePassword
reload
performCleanup
reload
startProtection
stopProtection
getAntiBotStatus
overrideAntiBotStatus
shouldKick
wasPlayerKicked
addPlayerKick
updateHelpFile
exportToYaml
generateHelpMessageEntries
generateCommandEntries
reload
handleBroadcast
handle
onPluginMessageReceived
performLogin
reload
isEnabled
sendBungeecordMessage
sendForwardedBungeecordMessage
connectPlayerOnLogin
sendAuthMeBungeecordMessage
getId
isBroadcast
fromId
scheduleSyncDelayedTask
scheduleSyncDelayedTask
scheduleSyncTaskFromOptionallyAsyncTask
runTask
runTaskLater
runTaskOptionallyAsync
runTaskAsynchronously
runTaskTimerAsynchronously
runTaskTimer
broadcastMessage
getPlayerExact
getOfflinePlayer
getBannedPlayers
getOfflinePlayers
getOnlinePlayers
callEvent
createAndCallEvent
getWorld
dispatchCommand
dispatchConsoleCommand
reload
sendBungeeMessage
banIp
isBungeeCordConfiguredForSpigot
getIp
reload
validatePassword
validateEmail
isEmailFreeForRegistration
isCountryAdmitted
isUnrestricted
fulfillsNameRestrictions
getHostName
validateWhitelistAndBlacklist
containsIgnoreCase
loadNameRestrictions
hasError
getMessageKey
getArgs
getProperty
send
send
retrieveSingleMessage
hasPermission
canResumeSession
fetchSessionStatus
grantSession
revokeSession
reload
putMessage
sendMessage
isRecoveryCodeNeeded
generateCode
isCodeValid
hasTriesLeft
getTriesLeft
removeCode
reload
performCleanup
setEssentialsSocialSpyStatus
getEssentialsDataFolder
getCmiDataFolder
getMultiverseSpawn
isEssentialsAvailable
isCmiAvailable
isMultiverseAvailable
tryHookToEssentials
tryHookToCmi
tryHookToMultiverse
unhookEssentials
unhookCmi
unhookMultiverse
getPlugin
processCommand
handleCommandResult
initializeCommands
executeCommand
skipEmptyArguments
sendUnknownCommandMessage
sendImproperArgumentsMessage
showHelpForCommand
executeCommand
runCommand
getAlternativeCommand
mapPartsToCommand
getCommandClasses
getCommandWithSmallestDifference
getBaseCommand
getSuitableChild
transformResultForHelp
getPermissionAwareStatus
hasSuitableArgumentCount
getLabelDifference
getLabels
hasLabel
getExecutableCommand
getParent
getLabelCount
getChildren
getArguments
getDescription
getDetailedDescription
getPermission
builder
register
build
labels
labels
description
detailedDescription
executableCommand
parent
withArgument
permission
getCommandDescription
getArguments
getLabels
getDifference
getResultStatus
executeCommand
getArgumentsMismatchMessage
getKey
getEntryKey
buildHelpOutput
outputHelp
reload
filterDisabledSections
flagFor
addArgumentsInfo
addAlternativesInfo
addPermissionsInfo
getLocalPermissionText
addChildrenInfo
hasFlag
filterCorrectLabels
buildLocalizedDescription
getDescription
getMessage
getMessage
getMessage
getDefaultPermissionsSubPath
getText
reloadMessagesFile
getCommandSubPath
getKey
getEntryKey
getMinNumberOfArguments
getMaxNumberOfArguments
constructParentList
constructCommandPath
buildSyntax
formatArgument
getCommands
buildCommands
buildAuthMeBaseCommand
buildEmailBaseCommand
buildTotpBaseCommand
setHelpOnAllBases
getName
getDescription
isOptional
runCommand
runCommand
getArgumentsMismatchMessage
runCommand
runCommand
getArgumentsMismatchMessage
executeCommand
runCommand
getArgumentsMismatchMessage
runCommand
emailMask
runCommand
processCode
runCommand
removeTotpKeyFromDatabase
runCommand
verifyTotpCodeConfirmation
insertTotpKeyIntoDatabase
runCommand
executeCommand
runCommand
executeCommand
run
executeCommand
resetLastPosition
runCommand
runCommand
executeCommand
executeCommand
executeCommand
getZoneId
formatPlayerMessage
executeCommand
executeCommand
performReloadOnServices
executeCommand
executeCommand
createLastLoginIntervalMessage
executeCommand
executeCommand
executeCommand
executeCommand
removeTotpKey
executeCommand
executeCommand
executeCommand
getConverterClassFromArgs
getConverters
executeCommand
outputAccountsList
executeCommand
printDeveloper
isPlayerOnline
executeCommand
runCommand
executeCommand
formatLocation
formatLocation
round
getLimboPlayerEntriesField
applyToLimboPlayersMap
castToTypeOrNull
unwrapSourceFromCacheDataSource
getName
getDescription
execute
getRequiredPermission
displayUsageHint
validatePassword
validateEmail
validateUsername
matchesAny
matches
getName
getDescription
execute
getRequiredPermission
performPermissionCheck
getPermissionNode
createPermNode
getNode
getDefaultPermission
getName
getDescription
execute
getRequiredPermission
getName
getDescription
execute
getRequiredPermission
outputDatabaseStats
outputInjectorStats
getName
getDescription
execute
getRequiredPermission
sendEntry
getData
getName
getDescription
execute
getRequiredPermission
displayAuthToSender
safeSubstring
formatDate
getName
getDescription
execute
getRequiredPermission
outputInfoForIpAddr
outputInfoForPlayer
executeCommand
findDebugSection
sendAvailableSections
executeSection
getSections
getName
getDescription
execute
getRequiredPermission
showGeneralInfo
showHelp
showPlayerSpawn
setMySqlField
getName
getDescription
getRequiredPermission
execute
changeColumnToNotNullWithDefault
removeNotNullAndDefault
showColumnDetails
displayUsageHints
constructColumnListWithMetadata
formatColumnWithMetadata
getConnection
matchToEnum
getColumnNameProperty
getNullableDefinition
getNotNullDefinition
getDefaultValue
getName
getDescription
execute
getRequiredPermission
getName
getDescription
execute
getRequiredPermission
getEmail
sendTestEmail
executeCommand
executeCommand
executeCommand
executeCommand
runCommand
getAlternativeCommand
getArgumentsMismatchMessage
runCommand
getArgumentsMismatchMessage
getAlternativeCommand
runCommand
checkLoginCaptcha
checkRegisterCaptcha
runCommand
runCommand
getAlternativeCommand
getArgumentsMismatchMessage
isCaptchaFulfilled
handlePasswordRegistration
getEmailIfAvailable
isSecondArgValidForPasswordRegistration
handleEmailRegistration
isSecondArgValidForEmailRegistration
runCommand
getArgumentsMismatchMessage
executeCommand
runCommand
getArgumentsMismatchMessage
getAlternativeCommand
get
reloadSettings
getTotalLoggers
createLogger
isSensitiveAuthMeCommand
withAndWithoutAuthMePrefix
isLoggable
validateMessage
validateMessage
filter
filter
filter
filter
includes
isPlayerSpawnLocationEventCalled
onPlayerSpawn
reload
checkAntibot
checkKickNonRegistered
checkIsValidName
refusePlayerForFullServer
checkNameCasing
checkPlayerCountry
checkSingleSession
generateKickPlayer
onBlockPlace
onBlockBreak
getReason
getArgs
toString
onPluginDisable
onPluginEnable
onDamage
onAttack
onEntityTarget
onFoodLevelChange
entityRegainHealthEvent
onEntityInteract
onLowestEntityInteract
onProjectileLaunch
onShoot
onPlayerSwapHandItems
onAsyncPlayerPreLoginEventLowest
onAsyncPlayerPreLoginEventHighest
onPlayerLogin
onPlayerJoin
onJoinMessage
onPlayerQuit
onPlayerKick
removeUnauthorizedRecipients
onPlayerChat
onPlayerCommandPreprocess
onPlayerMove
onPlayerRespawn
onPlayerInteract
onPlayerInteractEntity
onPlayerInteractAtEntity
onPlayerHitPlayerEvent
onPlayerShear
onPlayerFish
onPlayerBedEnter
onPlayerEditBook
onSignChange
onPlayerPickupItem
onPlayerDropItem
onPlayerHeldItem
onPlayerConsumeItem
isInventoryWhitelisted
onPlayerInventoryOpen
onPlayerInventoryClick
setup
disable
sendBlankInventoryPacket
reload
onPacketSending
register
shouldHideInventory
unregister
sendBlankInventoryPacket
onPacketReceiving
register
unregister
onPlayerAirChange
shouldCancelEvent
shouldCancelEvent
shouldCancelEvent
shouldCancelEvent
reload
checkAuth
getDisplayName
getPluginName
toString
isPermissionSystem
getNode
getDefaultPermission
evaluate
evaluate
evaluate
evaluate
isEnabled
setup
createPermissionHandler
unhook
reload
onPluginEnable
onPluginDisable
getPermissionSystem
hasPermission
hasPermissionOffline
hasPermissionOffline
hasGroupSupport
getGroups
getPrimaryGroup
isInGroup
addGroup
addGroups
removeGroup
removeGroups
setGroup
removeAllGroups
loadUserData
loadUserData
addToGroup
hasGroupSupport
hasPermissionOffline
isInGroup
removeFromGroup
setGroup
getGroups
getPrimaryGroup
getPermissionSystem
loadUserData
getGroup
getContexts
getVaultPermission
addToGroup
hasGroupSupport
hasPermissionOffline
isInGroup
removeFromGroup
setGroup
getGroups
getPrimaryGroup
getPermissionSystem
addToGroup
hasGroupSupport
hasPermissionOffline
removeFromGroup
setGroup
getGroups
getPrimaryGroup
getPermissionSystem
addToGroup
hasGroupSupport
hasPermissionOffline
isInGroup
removeFromGroup
setGroup
getGroups
getPermissionSystem
loadUserData
buildGroupNode
sortGroups
addToGroup
hasGroupSupport
hasPermissionOffline
isInGroup
removeFromGroup
setGroup
getGroups
getPermissionSystem
getNode
getDefaultPermission
getNode
getDefaultPermission
getNode
getDefaultPermission
getNode
getDefaultPermission
execute
execute
convert
getIdPlayer
getXAuthPlayers
getPassword
execute
migrateAccount
getSource
execute
getSource
execute
getSource
execute
execute
performConversion
migrateData
buildAuthFromLoginSecurity
createConnectionOrInformSender
createSqliteConnection
createMySqlConnection
execute
isUuidInstance
getName
load
reload
getCachedAuths
reload
isCached
isAuthAvailable
getPassword
getAuth
saveAuth
updatePassword
updatePassword
updateSession
updateQuitLoc
getRecordsToPurge
removeAuth
closeConnection
updateEmail
getAllAuthsByIp
countAuthsByEmail
purgeRecords
getType
isLogged
setLogged
setUnlogged
hasSession
grantSession
revokeSession
purgeLogged
getAccountsRegistered
updateRealName
getEmail
getAllAuths
getLoggedPlayersWithEmptyMail
getRecentlyLoggedInPlayers
setTotpKey
invalidateCache
refreshCache
isCached
isAuthAvailable
getPassword
getAuth
saveAuth
updateSession
updatePassword
updatePassword
getRecordsToPurge
purgeRecords
removeAuth
updateQuitLoc
getAllAuthsByIp
countAuthsByEmail
updateEmail
closeConnection
getType
isLogged
setLogged
setUnlogged
hasSession
grantSession
revokeSession
purgeLogged
getLoggedPlayersWithEmptyMail
getAccountsRegistered
updateRealName
getEmail
getAllAuths
getRecentlyLoggedInPlayers
setTotpKey
removeTotpKey
reload
invalidateCache
refreshCache
migrateLastIpColumn
migrateLastLoginColumn
migrateLastLoginColumnFromInt
addRegistrationDateColumn
setParameters
setConnectionArguments
reload
getConnection
checkTablesAndColumns
isColumnMissing
getAuth
saveAuth
getJdbcUrl
getRecordsToPurge
removeAuth
closeConnection
purgeRecords
getType
getAllAuths
getLoggedPlayersWithEmptyMail
getRecentlyLoggedInPlayers
setTotpKey
buildAuthFromResultSet
getDriverClassName
setParameters
setConnectionArguments
reload
getConnection
checkTablesAndColumns
isColumnMissing
getAuth
saveAuth
getJdbcUrl
getRecordsToPurge
removeAuth
closeConnection
purgeRecords
getType
getAllAuths
getLoggedPlayersWithEmptyMail
getRecentlyLoggedInPlayers
setTotpKey
buildAuthFromResultSet
isAuthAvailable
getPassword
saveAuth
hasSession
updateSession
updatePassword
updatePassword
updateQuitLoc
getAllAuthsByIp
countAuthsByEmail
updateEmail
isLogged
setLogged
setUnlogged
grantSession
revokeSession
purgeLogged
getAccountsRegistered
updateRealName
getEmail
getJdbcUrl
logSqlException
getNullableLong
isNotNullColumn
getColumnDefaultValue
getColumnSize
isMigrationRequired
performMigration
createBackup
recreateDatabaseWithNewDefinitions
replaceColumnVariables
getConnection
connect
setup
migrateIfNeeded
isColumnMissing
reload
getAuth
getRecordsToPurge
purgeRecords
removeAuth
closeConnection
getType
getAllAuths
getLoggedPlayersWithEmptyMail
getRecentlyLoggedInPlayers
setTotpKey
buildAuthFromResultSet
addRegistrationDateColumn
getJdbcUrl
close
getJdbcUrl
getDriverClassName
getType
createForSqlite
createForMySql
update
update
update
update
retrieve
retrieve
retrieve
insert
count
createInteger
createInteger
createLong
createString
createDouble
createFloat
createInternal
isOptional
hasDefaultForNull
containsInArray
getValueFromDependent
getNameProperty
resolveName
getType
isColumnUsed
useDefaultForNullValue
getName
hasDefaultSupport
buildExtension
saveAuth
extendAuth
changePassword
removeAuth
retrieveIdFromTable
saveAuth
saveSpecifics
addMetaRow
saveAuth
saveAuth
updateSpecificsOnSave
saveAuth
updateXenforoTablesOnSave
extendAuth
changePassword
removeAuth
sha1
sha256
sha512
md5
getDigest
isValidBcryptHash
isEqual
hash
hash
computeHash
computeHash
comparePassword
getSaltLength
computeHash
computeHash
computeHash
comparePassword
generateSalt
hasSeparateSalt
isLibraryLoaded
computeHash
comparePassword
hash
hashWithRawSalt
comparePassword
generateSalt
computeHash
generateSalt
computeHash
computeHash
computeHash
comparePassword
generateSalt
hasSeparateSalt
computeHash
comparePassword
getSaltLength
createHasher
computeHash
computeHash
comparePassword
generateSalt
hasSeparateSalt
computeHash
computeHash
comparePassword
generateSalt
hasSeparateSalt
computeHash
computeHash
computeHash
generateSalt
comparePassword
hasSeparateSalt
computeHash
computeHash
computeHash
comparePassword
hashInternal
generateSalt
hasSeparateSalt
getQrBarcodeUrl
computeHash
comparePassword
checkPassword
checkCode
verifyCode
computeHash
generateSalt
computeHash
computeHash
comparePassword
generateSalt
hasSeparateSalt
computeHash
computeHash
comparePassword
generateSalt
hasSeparateSalt
md5
hexToInt
bytes2hex
pack
_hash_encode64
_hash_crypt_private
phpbb_check_hash
computeHash
generateSalt
computeHash
comparePassword
getSaltLength
getWhirlpool
computeHash
comparePassword
getSaltLength
byteArrayToHexString
computeHash
computeHash
comparePassword
getSaltLength
computeHash
computeHash
computeHash
generateSalt
computeHash
computeHash
comparePassword
generateSalt
hasSeparateSalt
getSaltLength
computeHash
computeHash
comparePassword
generateSalt
hasSeparateSalt
getHash
getSalt
getHashFromBlob
serializeHash
display
processBuffer
NESSIEinit
NESSIEadd
NESSIEfinalize
NESSIEadd
computeHash
computeHash
generateSalt
encode64
crypt
gensaltPrivate
stringToUtf8
computeHash
comparePassword
computeHash
comparePassword
getSaltLength
computeHash
generateSalt
getKey
generateTotpKey
getGeneratedTotpKey
removeGenerateTotpKey
isTotpCodeCorrectForGeneratedTotpKey
performCleanup
createGoogleAuthenticator
checkCode
checkCode
generateTotpKey
performCleanup
getTotpKey
getAuthenticatorQrCodeUrl
getClazz
reload
computeHash
comparePassword
comparePassword
compareWithLegacyHashes
methodMatches
initializeEncryptionMethodWithEvent
initializeEncryptionMethod
hashAndSavePasswordWithNewAlgorithm
fromPlayerAuth
getName
getUuid
getEmail
getRegistrationDate
getRegistrationIpAddress
getLastLoginDate
getLastLoginIpAddress
toInstant
nullIfDefault
getName
getUuid
getEmail
getRegistrationDate
getRegistrationIpAddress
getLastLoginDate
getLastLoginIpAddress
getInstance
getPlugin
getPluginVersion
isAuthenticated
isNpc
isUnrestricted
getLastLocation
getPlayerInfo
getLastIp
getNamesByIp
getLastLogin
getLastLoginTime
getLastLoginMillis
isRegistered
checkPassword
registerPlayer
forceLogin
forceLogout
forceRegister
forceRegister
forceUnregister
forceUnregister
changePassword
getRegisteredNames
getRegisteredRealNames
getCountryCode
getCountryName
