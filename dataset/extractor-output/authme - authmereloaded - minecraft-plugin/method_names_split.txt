write
To
File
With
Comments
From
Default
perform
Write
get
Initial
User
Comments
get
First
Comment
By
Config
Me
add
Missing
Messages
With
Comment
Marker
rewrite
To
File
With
Comments
convert
Line
With
Comment
Marker
To
Yaml
Comment
get
Task
Name
execute
Default
find
Unused
Keys
walk
Java
File
Tree
get
Task
Name
execute
output
Verification
Results
update
Messages
File
get
Messages
Files
execute
Default
get
Task
Name
get
Message
For
Java
Doc
get
Unknown
Keys
get
Missing
Keys
get
Missing
Tags
has
Errors
verify
Keys
is
Not
Inner
Node
check
Tags
In
Message
message
Key
Exists
get
Task
Name
execute
process
Class
map
To
Super
unwrap
Generic
Class
get
Dependencies
format
Injection
Dependencies
get
Relevant
Annotation
Class
strip
Nodes
With
No
Outgoing
Edges
build
Super
Types
List
execute
Default
get
Task
Name
load
Partial
Plugin
Yml
File
generate
Commands
generate
Permissions
add
Wildcard
Permissions
gather
Children
build
Command
Entry
build
Usage
build
Permission
Entry
build
Wildcard
Permission
Entry
convert
Default
Permission
execute
Default
get
Task
Name
get
Task
Name
execute
Default
check
Class
add
Error
Entry
get
Mocks
return
Real
Class
is
Test
Class
With
Mocks
format
Class
List
main
prompt
And
Execute
Task
execute
Automatic
Tasks
apply
Replacements
apply
Replacements
replace
Optional
Tag
replace
Iterate
Tag
create
put
put
get
Values
get
Dependencies
convert
To
Class
execute
Default
execute
generate
File
From
Template
write
To
File
write
To
File
append
To
File
read
From
File
read
From
File
read
Lines
From
File
list
Files
Or
Throw
get
Task
Name
execute
get
Value
is
Empty
is
Empty
is
Empty
add
get
Task
Name
execute
execute
Default
execute
Tasks
get
Doc
Tasks
get
Task
Name
execute
Default
get
Task
Name
execute
Default
add
Commands
Info
format
Permissions
format
Arguments
get
Task
Name
execute
Default
compute
Color
compute
Color
build
Language
Names
get
Translation
Info
gather
Translations
process
Messages
File
get
Sort
Code
get
Code
get
Percent
Translated
execute
Default
construct
Method
Rows
get
Task
Name
as
String
as
String
as
String
as
String
as
String
get
Method
get
Salt
Type
set
Salt
Type
get
Salt
Length
set
Salt
Length
get
Usage
set
Usage
is
Ascii
Restricted
set
Ascii
Restricted
has
Separate
Salt
set
Has
Separate
Salt
get
Hash
Length
set
Hash
Length
get
Descriptions
construct
Descriptions
create
Description
create
Encryption
Method
gather
Annotations
get
Relevant
Annotations
get
Super
Class
set
Salt
Information
return
Typed
create
Initializer
compute
Hash
gather
Nodes
With
Java
Doc
get
Permission
Classes
add
Descriptions
For
Class
extract
Java
Doc
From
Source
get
Source
For
Class
get
Task
Name
execute
Default
generate
Permissions
List
check
File
get
Missing
Sections
get
Unknown
Sections
get
Missing
Commands
get
Unknown
Commands
check
Help
Sections
check
Commands
build
Command
Paths
get
Yaml
Paths
get
Leaf
Keys
get
Task
Name
execute
process
File
get
Help
Translations
scan
Event
Classes
should
Extend
From
Custom
Event
should
Have
Static
Event
Handler
Method
can
Be
Instantiated
init
Auth
Me
should
Initialize
All
Services
should
Handle
Premature
Shutdown
Gracefully
get
Jar
File
get
Jar
Path
get
Uri
Or
Throw
setup
Logger
set
Real
Logger
mock
Ip
Address
To
Player
return
Defaults
For
All
Properties
init
Logger
init
Fields
should
Have
All
Information
should
Send
Password
Mail
should
Handle
Mail
Creation
Error
should
Handle
Mail
Sending
Failure
should
Send
Recovery
Code
should
Handle
Mail
Creation
Error
For
Recovery
Code
should
Handle
Failure
To
Send
Recovery
Code
init
Logger
init
Fields
should
Have
All
Information
should
Create
Email
Object
should
Create
Email
Object
With
Address
should
Create
Email
Object
With
O
Auth2
should
Have
Language
In
Sync
With
Configurations
should
Build
Text
File
Paths
should
Recognize
If
Is
Messages
File
should
Return
Language
For
Messages
File
should
Recognize
If
Is
Help
File
load
Messages
Files
test
All
Messages
Yml
Files
test
All
Help
Yml
Files
check
Files
check
File
setup
set
Up
Messages
remove
Logger
References
should
Load
Message
And
Split
At
New
Lines
should
Load
Message
As
String
With
New
Lines
should
Format
Color
Codes
should
Not
Send
Empty
Message
should
Send
Message
To
Player
should
Send
Multi
Line
Message
To
Player
should
Send
Message
To
Player
With
Name
Replacement
should
Send
Message
To
Player
With
Tag
Replacement
should
Not
Log
Error
For
Key
With
No
Tag
Replacements
should
Log
Error
For
Invalid
Replacement
Count
should
Send
Error
For
Replacements
On
Key
With
No
Tags
should
Not
Use
Message
From
Default
File
should
Retrieve
Message
With
Replacements
should
Format
Duration
Objects
create
Messages
File
Handler
should
Have
All
Messages
validate
Message
should
Have
Unique
Message
Keys
should
Have
Well
Formed
Placeholders
should
Have
All
Placeholders
find
Missing
Tags
build
Params
find
Help
Messages
Files
should
Have
Required
Entries
assert
Has
All
Help
Section
Entries
get
Path
For
Default
Permission
not
Empty
String
set
Up
Logger
should
Not
Update
Default
File
should
Add
Missing
Keys
should
Migrate
Old
Entries
should
Perform
Newer
Migrations
should
Have
All
Keys
In
Configuration
Data
should
Have
Comment
For
All
Root
Paths
In
Configuration
Data
should
Has
Old
Keys
That
Are
New
Parents
First
In
Map
collect
Parent
Paths
From
Message
Keys
should
Read
Chinese
File
should
Write
With
Correct
Charset
build
Configuration
Data
equal
To
Hash
equal
To
Hash
equal
To
Hash
matches
Safely
describe
To
has
Auth
Basic
Data
matches
Safely
describe
To
describe
Mismatch
Safely
has
Registration
Info
matches
Safely
describe
To
describe
Mismatch
Safely
has
Auth
Location
has
Auth
Location
matches
Safely
describe
To
string
With
Length
matches
Safely
describe
To
should
Not
Have
Same
Name
should
Have
Non
Private
Constants
Only
has
Illegal
Field
Visibility
format
Field
should
Implement
Has
Cleanup
has
Expiring
Collection
As
Field
collections
Unmodifiable
List
should
Perform
Cleanup
init
Logger
should
Not
Run
Auto
Purge
should
Not
Run
Auto
Purge
For
Invalid
Interval
should
Run
Auto
Purge
should
Recognize
No
Players
To
Purge
should
Run
Purge
should
Not
Run
Purge
If
Process
Is
Already
Running
should
Execute
Purge
Actions
assert
Correct
Purge
Timestamp
verify
Scheduled
Purge
Task
init
Logger
should
Run
Task
should
Handle
Offline
Player
With
Null
Name
should
Stop
Task
And
Inform
Sender
Upon
Completion
should
Stop
Task
And
Inform
Console
User
mock
Offline
Player
as
Array
set
Permissions
Behavior
assert
Ran
Purge
With
Players
assert
Ran
Purge
With
Names
set
Up
should
Add
Email
should
Return
Error
When
Mail
Cannot
Be
Saved
should
Not
Add
Mail
If
Player
Already
Has
Email
should
Not
Add
Mail
If
It
Is
Invalid
should
Not
Add
Mail
If
Already
Used
should
Show
Login
Message
should
Show
Register
Message
should
Not
Add
On
Cancelled
Event
set
Up
should
Change
Email
should
Not
Be
Case
Sensitive
When
Comparing
Emails
should
Show
Error
If
Save
Fails
should
Show
Add
Email
Usage
should
Reject
Invalid
New
Mail
should
Reject
Invalid
Old
Email
should
Reject
Already
Used
Email
should
Send
Login
Message
should
Show
Registration
Message
should
Not
Change
On
Cancelled
Event
auth
With
Mail
set
Up
Logger
should
Reject
Command
For
Unknown
User
should
Update
Password
Of
Logged
In
User
should
Update
Password
Of
Offline
User
should
Report
When
Save
Failed
init
Logger
should
Reject
Wrong
Password
should
Perform
Unregister
should
Perform
Unregister
And
Not
Apply
Blind
Effect
should
Not
Apply
Unregistered
Effects
For
Not
Forced
Registration
should
Handle
Database
Error
should
Not
Teleport
Offline
Player
should
Perform
Admin
Unregister
should
Perform
Admin
Unregister
Without
Initiator
Or
Player
should
Handle
Database
Error
For
Admin
Unregister
verify
Called
Unregister
Event
For
should
Construct
Player
Auth
should
Check
Password
Validity
should
Detect
Invalid
Password
And
Inform
Player
should
Create
Player
Auth
should
Log
Player
In
should
Not
Log
Player
In
mock
Player
With
Name
assert
Is
Close
To
should
Not
Pass
Email
Validation
should
Pass
Verification
For
Player
With
Permission
should
Pass
Verification
For
Previously
Unregistered
Ip
should
Create
Player
Auth
should
Perform
Action
After
Data
Source
Save
should
Handle
Email
Sending
Failure
assert
Is
Close
To
should
Detect
Already
Logged
In
Player
should
Stop
For
Disabled
Registration
should
Stop
For
Already
Registered
Name
should
Stop
For
Canceled
Event
should
Stop
For
Failed
Executor
Check
mock
Player
With
Name
singleton
Store
Will
Return
init
Logger
should
Not
Force
Login
Already
Logged
In
Player
should
Not
Force
Login
Non
Existent
User
should
Not
Force
Login
Inactive
User
should
Not
Force
Login
User
With
Already
Online
Ip
should
Not
Force
Login
For
Canceled
Event
should
Pass
Max
Login
Per
Ip
Check
should
Skip
Ip
Check
For
Zero
Threshold
should
Skip
Ip
Check
For
Player
With
Multiple
Accounts
Permission
should
Fail
Ip
Check
For
Ip
With
Too
Many
Players
Online
mock
Player
mock
Online
Players
In
Bukkit
Service
should
Have
Existing
Classes
In
Exclusions
remove
Tests
Exclusion
Or
Throw
is
Limbo
is
Limbo
matches
Safely
describe
To
describe
Mismatch
Safely
has
Location
matches
Safely
describe
To
describe
Mismatch
Safely
has
Location
has
Location
matches
Safely
describe
To
describe
Mismatch
Safely
has
Location
collection
Contains
init
Logger
mock
Settings
should
Create
Limbo
Player
should
Not
Keep
Op
Status
For
Unregistered
Player
should
Clear
Tasks
On
Already
Existing
Limbo
should
Restore
Data
should
Handle
Missing
Limbo
Player
While
Restoring
should
Replace
Tasks
should
Handle
Missing
Limbo
For
Replace
Tasks
new
Player
new
Player
convert
To
Limbo
Player
get
Limbo
Map
should
Restore
To
Expected
Value
build
Params
create
with
Limbo
with
Player
expect
to
String
setup
Logger
should
Register
Message
Task
should
Not
Schedule
Task
For
Zero
As
Interval
should
Cancel
Existing
Message
Task
should
Initialize
Message
Task
With
Captcha
Message
should
Register
Timeout
Task
should
Not
Register
Timeout
Task
For
Zero
Timeout
should
Cancel
Existing
Timeout
Task
init
Logger
should
Merge
Limbo
Players
should
Fall
Back
To
New
Limbo
For
Missing
Data
should
Handle
Null
Inputs
copy
Test
Files
should
Read
Data
From
File
should
Return
Null
For
Unavailable
Player
should
Save
Player
Data
init
Logger
set
Up
Classes
should
Migrate
Old
Segment
Files
On
Startup
should
Remove
Player
should
Add
Player
should
Handle
Read
Error
Gracefully
mock
Player
With
Uuid
mock
World
With
Name
mock
Location
should
Have
Unique
Implementation
Classes
should
Have
Type
Returned
From
Implementation
Class
should
Have
Distribution
That
Is
Power
Of2
should
Have
Different
Segment
Sizes
should
Create
Promised
Size
Of
Segments
check
Total
Segments
Produced
to
Padded
Hex
should
Create
One
Segment
should
Create
Four
Segments
should
Create
Eight
Segments
should
Create
Sixteen
Segments
should
Create
Thirty
Two
Segments
should
Create
Sixty
Four
Segments
should
Create256Segments
set
Up
Logger
set
Up
Mocks
should
Initialize
Properly
should
Delegate
To
Handler
should
Reload
Properly
should
Handle
Exception
When
Getting
Limbo
should
Handle
Exception
When
Saving
Limbo
should
Handle
Exception
When
Removing
Limbo
get
Handler
not
Null
And
Different
From
should
Restore
Value
should
Enable
Flight
should
Disable
Flight
should
Not
Interact
With
Player
should
Remove
Flight
Except
For
Nothing
Type
new
Limbo
With
Allow
Flight
should
Remove
Database
Defaults
should
Throw
For
Missing
Name
should
Create
Player
Auth
With
Null
Values
should
Allow
Command
should
Deny
Command
create
Quick
Commands
Protectione
Manager
mock
Player
With
Name
should
Add
Counts
should
Create
And
Check
Captcha
should
Generate
New
Code
On
Failure
should
Have
Same
Code
After
Generation
should
Increase
And
Reset
Count
should
Not
Increase
Count
For
Disabled
Captcha
should
Not
Check
Count
If
Captcha
Is
Disabled
mock
Settings
assert
Has
Count
should
Be
Disabled
should
Verify
Code
Successfully
should
Generate
And
Retrieve
Code
get
Code
Map
should
Add
Counts
should
Increase
And
Reset
Count
should
Not
Increase
Count
For
Disabled
Tempban
should
Not
Check
Count
If
Tempban
Is
Disabled
should
Not
Issue
Ban
If
Disabled
should
Ban
Player
Ip
should
Ban
Player
Ip
Custom
should
Reset
Count
After
Ban
should
Perform
Cleanup
mock
Settings
assert
Has
No
Entries
assert
Has
Count
mock
Counter
set
Up
Basic
Behavior
should
Require
Verification
should
Not
Require
Verification
If
Email
Settings
Are
Incomplete
should
Not
Require
Verification
For
Missing
Permission
should
Generate
Code
should
Require
Code
should
Verify
Code
create
Code
Manager
mock
Player
With
Name
set
Up
Logger
set
Up
Test
Plugin
Folder
should
Load
And
Read
All
Properties
should
Write
Missing
Properties
should
Reload
Settings
copy
File
From
Resources
build
Configuration
Data
should
Have
Comment
On
Each
Property
should
Not
Have
Very
Long
Comment
Lines
should
Mention
All
Enum
Values
get
Enum
Class
is
Deprecated
set
Up
Logger
should
Rewrite
For
Empty
File
should
Rewrite
Incomplete
File
should
Not
Change
Complete
File
should
Have
All
Properties
From
Command
Config
should
Migrate
Old
Other
Accounts
Command
get
Unknown
On
Login
Command
setup
should
Execute
Commands
On
Login
should
Execute
Commands
On
Login
With
Two
Alts
should
Execute
Commands
On
Login
With
Fifteen
Alts
should
Execute
Commands
On
Login
With
Twenty
Five
Alts
should
Execute
Commands
On
Login
With
Incomplete
Config
should
Execute
Commands
On
Session
Login
should
Execute
Commands
On
First
Login
should
Not
Execute
First
Login
Command
Whose
Threshold
Is
Not
Met
should
Execute
Commands
On
Join
should
Execute
Commands
On
Join
With
Incomplete
Config
should
Execute
Commands
On
Register
should
Execute
Command
On
Logout
should
Execute
Commands
On
Register
With
Incomplete
Config
should
Execute
Command
On
Unregister
init
Manager
copy
Jar
File
As
Commands
Yml
mock
Player
should
Load
With
No
Migrations
create
Plugin
Folder
should
Load
Welcome
Message
should
Replace
Name
And
Ip
And
Country
should
Apply
Other
Replacements
set
Welcome
Message
And
Reload
set
Up
Logger
set
Up
Test
Plugin
Folder
should
Load
Email
Message
should
Load
Recovery
Code
Message
should
Load
Verification
Message
mock
Property
Resource
And
Reader
create
File
setup
should
Set
Spawn
set
Up
Logger
should
Perform
Migrations
In
Memory
should
Perform
Migrations
And
Persist
To
Disk
should
Keep
Old
Other
Accounts
Settings
verify
Has
Up
To
Date
Settings
perform
Migrations
scan
For
Settings
Classes
should
Have
Public
Static
Final
Fields
should
Have
Unique
Paths
should
Have
All
Classes
In
Configuration
Data
is
Valid
Constant
Field
should
Return
All
Properties
should
Log
Warnings
should
Warn
Bungee
Without
Spigot
should
Not
Log
Any
Warning
should
Find
Wanted
Throwable
should
Handle
Circular
Causes
Gracefully
should
Format
Exception
get
Cause
set
Authme
Instance
should
Get
Player
Ip
should
Check
If
Is
Npc
should
Create
No
Args
Tag
should
Create
Dependent
Tag
should
Replace
Tags
should
Not
Call
Unused
Tags
pi
self
calc
Double
calc
Square
get
Available
Tags
should
Apply
Tags
sample
Class
matches
Safely
describe
To
get
Description
init
Logger
should
Not
Copy
File
should
Copy
File
From
Jar
should
Return
False
For
Invalid
Jar
File
should
Return
False
For
Parent
Invalid
Parent
Folders
should
Purge
Directory
should
Delete
File
should
Do
Nothing
For
Null
File
should
Get
Resource
From
Jar
should
Construct
Path
should
Create
Directory
should
Return
False
On
Directory
Create
Fail
should
Create
Current
Timestamp
String
should
Create
Backup
File
create
Files
init
Logger
should
Compile
Pattern
should
Default
To
All
Allowed
Pattern
should
Log
And
Send
Message
should
Handle
Null
As
Command
Sender
should
Not
Send
To
Command
Sender
Twice
should
Check
If
Collection
Is
Empty
should
Log
And
Send
Warning
should
Log
Warning
And
Not
Send
To
Console
Sender
should
Log
Warning
And
Handle
Null
Command
Sender
should
Check
If
Class
Is
Loaded
should
Detect
If
Email
Is
Empty
should
Generate
Random
Strings
should
Generate
Random
Hex
String
should
Generate
Random
Lower
Upper
String
should
Generate
Random
Number
String
should
Throw
For
Invalid
Length
should
Return
Zero
For
Any
Key
should
Increment
Count
should
Decrement
Count
should
Sum
Up
Entries
should
Convert
To
Appropriate
Time
Unit
check
should
Add
And
Retrieve
Entries
should
Remove
Entry
should
Update
Expiration
And
Support
Negative
Values
should
Clean
Up
Expired
Entries
should
Return
If
Is
Empty
should
Add
Entry
should
Remove
Entries
should
Handle
New
Expiration
And
Support
Negative
Values
should
Clear
All
Values
should
Clear
Expired
Values
should
Return
Expiration
should
Return
Expiration
In
Suitable
Units
should
Return
Minus
One
For
Expired
Entry
assert
Is
Duration
should
Find
Contained
Item
should
Return
False
If
None
Found
should
Return
False
For
Null
String
should
Check
If
Is
Blank
String
should
Get
Difference
With
Null
String
should
Get
Difference
Between
Two
String
should
Check
If
Has
Needle
In
Word
should
Check
Local
Address
test
Is
Loopback
should
Parse
Uuid
Safely
collect
Classes
collect
Classes
collect
Classes
get
Instances
Of
Type
get
Instances
Of
Type
can
Instantiate
gather
Classes
From
File
load
Task
Class
From
File
init
Auth
Me
should
Wait
For
Tasks
To
Close
should
Abort
For
Never
Ending
Task
should
Stop
For
Interrupted
Thread
run
should
Stop
For
Interrupted
Thread0
mock
Active
Workers
mock
Bukkit
Worker
set
Field
set
Field
get
Field
get
Field
Value
get
Field
Value
get
Method
invoke
Method
invoke
Post
Construct
Methods
new
Instance
should
Load
Valid
File
should
Throw
For
Invalid
File
init
Settings
should
Start
Listener
On
Startup
should
Not
Listen
For
Disabled
Setting
should
Activate
Antibot
should
Not
Activate
Antibot
For
Disabled
Setting
should
Keep
Track
Of
Kicked
Players
should
Accept
Player
To
Join
should
Activate
Antibot
After
Threshold
should
Inform
Players
On
Activation
should
Immediately
Start
After
First
Startup
set
Up
Forced
Worlds
should
Not
Teleport
Player
On
Join
should
Teleport
Player
To
First
Spawn
should
Teleport
Player
To
Spawn
should
Not
Teleport
New
Player
should
Not
Teleport
Player
To
First
Spawn
If
No
Teleport
Enabled
should
Not
Teleport
Not
New
Player
To
First
Spawn
should
Not
Teleport
Player
For
Removed
Location
In
Event
should
Not
Teleport
Player
For
Canceled
Event
should
Not
Teleport
Upon
Login
should
Teleport
Player
To
Spawn
After
Login
should
Not
Teleport
To
Spawn
For
Other
Case
In
World
should
Teleport
Back
To
Player
Auth
Location
should
Teleport
According
To
Player
Auth
And
Player
World
As
Fallback
should
Teleport
With
Limbo
Player
If
Auth
Y
Coord
Is
Not
Set
should
Teleport
With
Limbo
Player
If
Save
Quit
Loc
Is
Disabled
should
Not
Teleport
For
Null
Location
In
Limbo
Player
assert
Correct
Location
mock
Location
create
Auth
With
Location
initialize
Geo
Lite
Api
should
Get
Country
should
Not
Look
Up
Country
For
Localhost
Ip
should
Look
Up
Country
Name
should
Not
Look
Up
Country
Name
For
Localhost
Ip
should
Not
Look
Up
Country
Name
If
Disabled
should
Get
Property
should
Send
Message
To
Player
should
Send
Message
With
Replacements
should
Retrieve
Single
Message
should
Check
Permission
construct
Bukkit
Service
should
Dispatch
Command
should
Dispatch
Console
Command
should
Schedule
Sync
Delayed
Task
should
Schedule
Sync
Delayed
Task
With
Delay
should
Schedule
Sync
Task
should
Run
Task
Directly
should
Run
Task
should
Run
Task
Later
should
Run
Task
In
Async
should
Run
Task
Directly
If
Configured
should
Run
Task
Asynchronously
should
Run
Task
Timer
Asynchronously
run
should
Run
Task
Timer
should
Broadcast
Message
should
Create
And
Emit
Sync
Event
should
Create
And
Emit
Async
Event
should
Return
Server
Ip
set
Up
Logger
set
Up
Classes
should
Update
Current
Help
File
check
Common
Entries
check
Sections
check
Commands
check
Description
check
Args
arg
set
Up
Logger
should
Migrate
Plaintext
Hashes
should
Not
Migrate
Sha
Hashes
should
Not
Migrate
For
Hash
Other
Than
Plaintext
auth
With
Nick
And
Hash
set
Sha256Mock
To
Uppercase
init
Settings
should
Be
Disabled
For
Non
Positive
Length
should
Generate
And
Store
Code
player
Has
Tries
Left
player
Has
No
Tries
Left
should
Recognize
Correct
Code
should
Remove
Code
get
Code
Map
get
Tries
Counter
init
Settings
should
Send
Recovery
Code
should
Keep
Track
Of
Successful
Recovers
By
Ip
should
Remove
Player
From
Successful
Recovers
set
Logger
should
Hook
Into
Essentials
should
Hook
Into
Essentials
At
Initialization
should
Hook
Into
Cmi
At
Initialization
should
Hook
Into
Multiverse
At
Initialization
should
Return
Essentials
Data
Folder
should
Return
Null
For
Unhooked
Essentials
should
Set
Social
Spy
Status
should
Not
Do
Anything
For
Unhooked
Essentials
should
Unhook
Essentials
And
Multiverse
should
Handle
Plugin
Retrieval
Error
should
Return
Null
For
Unavailable
Multiverse
should
Get
Multiverse
Spawn
should
Return
Null
For
Non
Mv
World
set
Plugin
Available
set
Plugin
Available
create
Service
should
Reject
Password
Same
As
Username
should
Reject
Password
Not
Matching
Pattern
should
Reject
Too
Short
Password
should
Reject
Too
Long
Password
should
Reject
Unsafe
Password
should
Accept
Valid
Password
should
Accept
Email
With
Empty
Lists
should
Accept
Email
With
Whitelist
should
Reject
Email
Not
In
Whitelist
should
Accept
Email
Not
In
Blacklist
should
Reject
Email
In
Blacklist
should
Reject
Invalid
Email
should
Reject
Invalid
Email
Without
Domain
should
Reject
Default
Email
should
Allow
Registration
should
Reject
Email
With
Too
Many
Accounts
should
Allow
Bypass
For
Present
Permission
should
Recognize
Unrestricted
Names
should
Not
Invoke
Geo
Lite
Api
If
Country
Lists
Are
Empty
should
Accept
Country
In
Whitelist
should
Reject
Country
Missing
From
Whitelist
should
Accept
Country
Absent
From
Blacklist
should
Reject
Country
In
Blacklist
should
Check
Name
Restrictions
should
Log
Warning
For
Invalid
Restriction
Rule
mock
Player
assert
Error
Equals
init
Logger
set
Up
Enabled
Property
should
Check
Sessions
Enabled
Setting
should
Check
If
User
Has
Session
should
Check
Last
Login
Date
should
Refuse
Session
For
Auth
With
Null
Last
Login
Timestamp
should
Check
Last
Login
Ip
should
Emit
Event
For
Valid
Session
should
Handle
Null
Player
Auth
should
Handle
Player
Auth
With
Null
Last
Ip
mock
Player
With
Name
And
Ip
set
Bukkit
Service
To
Schedule
Sync
Task
From
Optionally
Async
Task
set
Bukkit
Service
To
Run
Task
Asynchronously
set
Bukkit
Service
To
Run
Task
Optionally
Async
set
Bukkit
Service
To
Schedule
Sync
Delayed
Task
set
Bukkit
Service
To
Schedule
Sync
Delayed
Task
With
Delay
set
Up
Command
Handler
set
Up
Mocks
should
Map
Parts
To
Login
Child
Command
should
Map
Parts
To
Command
With
No
Case
Sensitivity
should
Reject
Command
With
Too
Many
Arguments
should
Reject
Command
With
Too
Few
Arguments
should
Suggest
Command
With
Similar
Label
should
Suggest
Most
Similar
Command
should
Handle
Base
With
Wrong
Arguments
should
Handle
Unknown
Base
should
Handle
Null
Input
should
Map
To
Base
With
Proper
Arguments
should
Return
Childless
Base
Command
With
Arg
Count
Error
should
Pass
Command
Path
As
Arguments
To
Help
Command
should
Recognize
Missing
Permission
For
Command
should
Support
Auth
Me
Prefix
should
Return
Executable
Command
Classes
should
Reject
Non
Player
Sender
should
Call
Run
Command
For
Player
should
Reject
Non
Player
And
Send
Alternative
run
Command
run
Command
get
Alternative
Command
should
Have
Equal
Definitions
initialize
Commands
get
Labels
From
Plugin
File
initialize
Command
Collection
should
Initialize
Commands
should
Not
Be
Nested
Excessively
should
Have
Connection
Between
Parent
And
Child
accept
should
Use
Proper
Lower
Case
Labels
accept
should
Not
Define
Same
Label
Twice
accept
should
Have
Proper
Description
accept
should
Have
Optional
Arguments
After
Mandatory
Ones
accept
should
Not
Have
Arguments
If
Command
Has
Children
accept
should
Point
To
Same
Executable
Command
With
Consistent
Argument
Count
accept
test
Collection
For
Command
walk
Through
Commands
walk
Through
Commands
commands
Include
Label
get
Absolute
Labels
should
Have
Unique
Non
Empty
Keys
initialize
Handler
should
Return
Localized
Command
should
Return
Localized
Command
With
Defaults
should
Return
Same
Command
For
No
Localization
should
Keep
Children
In
Local
Command
should
Get
Translations
For
Section
And
Message
should
Get
Local
Command
Description
should
Fallback
To
Description
On
Command
Object
create
Messages
File
Handler
set
Up
Commands
set
Initial
Settings
should
Show
Long
Description
should
Show
Arguments
should
Show
Specify
If
Argument
Is
Optional
should
Not
Show
Anything
If
Command
Has
No
Arguments
should
Show
And
Evaluate
Permissions
should
Show
And
Evaluate
Forbidden
Permissions
should
Not
Show
Anything
For
Empty
Permissions
should
Not
Show
Anything
For
Null
Permissions
On
Command
should
Show
Alternatives
should
Not
Show
Anything
If
Has
No
Alternatives
should
Show
Children
should
Not
Show
Commands
Title
For
Command
With
No
Children
should
Handle
Unbound
Found
Command
Result
should
Show
Command
Syntax
With
Correct
Labels
should
Retain
Correct
Labels
should
Replace
Incorrect
Labels
should
Disable
Sections
With
Empty
Translations
should
Not
Return
Anything
For
All
Disabled
Sections
should
Skip
Empty
Header
should
Show
Alternatives
For
Root
Command
new
Found
Result
remove
Colors
get
Lines
set
Default
Help
Messages
should
Have
Identical
Texts
should
Only
Have
Description
For
One
Command
should
Have
Entry
For
Each
Help
Message
Key
get
Auth
Me
Register
Description
set
Up
Test
Commands
should
Return
Command
Path
should
Compute
Min
And
Max
On
Empty
Command
should
Compute
Min
And
Max
On
Command
With
Mandatory
Args
should
Compute
Min
And
Max
On
Command
Including
Optional
Args
should
Format
Simple
Argument
should
Format
Command
With
Multiple
Arguments
should
Format
Command
With
Optional
Argument
check
Argument
Count
get
Builder
For
Args
Test
initialize
Command
Mapper
set
Injector
To
Mock
Executable
Command
Classes
answer
should
Call
Mapped
Command
With
Args
should
Not
Call
Executable
Command
If
No
Permission
should
Not
Call
Executable
For
Wrong
Arguments
should
Use
Custom
Message
Upon
Argument
Mismatch
should
Not
Call
Executable
For
Wrong
Arguments
And
Permission
Denied
should
Not
Call
Executable
For
Failed
Parsing
should
Not
Call
Executable
For
Unknown
Label
And
Have
Suggestion
should
Not
Call
Executable
For
Unknown
Label
And
Not
Suggest
Command
should
Strip
Whitespace
generate
Commands
get
Command
With
Label
get
Command
With
Label
create
Command
new
Argument
execute
Command
execute
Command
execute
Command
init
Logger
init
Settings
should
Handle
Missing
Mail
Properties
should
Show
Error
For
Authenticated
User
should
Show
Register
Message
For
Unregistered
Player
should
Handle
Default
Email
should
Handle
Invalid
Email
Input
should
Generate
Recovery
Code
should
Generate
New
Password
Without
Recovery
Code
should
Define
Argument
Mismatch
Message
should
Reject
Non
Player
Sender
should
Stop
If
Verification
Is
Required
should
Forward
Data
should
Define
Argument
Mismatch
Message
init
Player
With
Name
set
Up
Logger
should
Change
Password
should
Reject
Invalid
Password
should
Do
Nothing
Cant
Change
Pass
should
Reject
Non
Player
Sender
should
Forward
Data
should
Fail
For
Confirmation
Mismatch
should
Define
Argument
Mismatch
Message
should
Send
Error
For
Invalid
Recovery
Code
should
Send
Error
For
No
More
Tries
should
Process
Correct
Code
should
Show
Current
Email
Message
should
Show
Hidden
Email
Message
should
Return
No
Email
Message
new
Auth
With
Email
new
Auth
With
No
Email
should
Display
Help
set
Up
Logger
should
Add
Totp
Code
To
User
After
Successful
Confirmation
should
Handle
Wrong
Totp
Code
should
Handle
Missing
Totp
Key
should
Stop
For
Already
Existing
Totp
Key
On
Account
should
Handle
Missing
Auth
Account
set
Up
Logger
should
Remove
Totp
Key
should
Handle
Database
Error
should
Handle
Invalid
Code
should
Handle
User
Without
Totp
Key
should
Handle
Non
Logged
In
User
should
Output
Help
should
Handle
Non
Logged
In
User
should
Not
Add
Code
For
Already
Existing
Totp
should
Generate
Totp
Code
mock
Player
With
Name
should
Teleport
To
Spawn
should
Handle
Missing
Spawn
set
Up
Logger
should
Reject
Invalid
Password
should
Reject
Already
Registered
Account
should
Handle
Saving
Error
should
Register
Offline
Player
should
Register
Online
Player
assert
Auth
Has
Info
init
Logger
should
Handle
Unknown
User
should
Inform
For
User
Without
Totp
should
Inform
For
User
With
Totp
Enabled
should
Teleport
To
First
Spawn
should
Handle
Missing
First
Spawn
should
Purge
Last
Pos
Of
User
should
Purge
Position
Of
Command
Sender
should
Handle
Non
Existent
User
should
Reset
All
Last
Positions
verify
Position
Was
Reset
should
Display
Information
init
Logger
should
Handle
Unknown
User
should
Handle
User
With
No
Totp
Enabled
should
Remove
Totp
From
User
should
Handle
Error
While
Removing
Totp
should
Forward
Request
To
Service
offline
Players
With
Names
as
Lower
Case
Set
should
Get
Ip
Of
Player
should
Return
Ip
Address
Of
Player
should
Handle
Unregistered
Online
Player
mock
Player
should
Set
First
Spawn
should
Handle
Error
should
Set
Spawn
should
Handle
Error
should
Not
Execute
Purge
For
Registered
Player
should
Execute
Purge
should
Execute
Purge
Of
Registered
Player
should
Get
Accounts
Of
Current
User
should
Return
Unknown
User
For
Null
Auth
should
Return
Unregistered
Message
For
Empty
Auth
List
should
Return
Single
Account
Message
should
Return
Ip
Unknown
should
Return
Single
Account
For
Ip
Query
should
Return
Account
List
For
Ip
Query
get
Messages
Sent
To
Sender
auth
With
Ip
should
Report
Unknown
User
should
Return
Email
should
Show
Recent
Players
should
Handle
Player
With
Null
Last
Login
should
Forward
Request
To
Management
should
Send
Error
To
Command
Sender
init
Logger
should
Handle
Unknown
Conversion
Type
should
Handle
Command
With
No
Args
should
Have
Unique
Class
For
Each
Converter
should
Launch
Converter
For
All
Types
should
Catch
Exception
In
Converter
And
Inform
Sender
create
Mock
Returned
By
Injector
set
Up
Logger
set
Default
Settings
should
Reload
should
Handle
Reload
Error
should
Issue
Warning
For
Changed
Data
Source
Setting
verify
Reloading
Calls
should
Reject
Invalid
Mail
should
Handle
Unknown
User
should
Handle
Already
Taken
Email
should
Handle
Persistence
Error
should
Update
Email
should
Update
Email
And
Player
Cache
should
Start
Backup
should
Reject
Non
Existent
User
should
Display
Last
Login
Of
User
should
Display
Last
Login
Of
Command
Sender
should
Handle
Null
Last
Login
Date
should
All
Have
Different
Name
Property
should
Have
Matching
Nullable
And
Not
Null
Definition
should
Have
Matching
Default
Value
In
Not
Null
Definition
verify
Has
Corresponding
Column
Definitions
verify
Has
Same
Default
Value
In
Not
Null
Definition
should
Make
Example
should
Handle
Missing
Player
should
Display
Auth
Info
should
Handle
Corner
Cases
init
Mock
Logger
should
Format
Location
should
Handle
Null
World
should
Handle
Null
Location
should
Fetch
Map
In
Limbo
Service
should
Handle
Error
Gracefully
should
Return
Same
Data
Source
Instance
should
Unwrap
Cache
Data
Source
should
Cast
Or
Return
Null
collect
Classes
should
All
Be
Package
Private
should
Have
Different
Subcommand
Name
should
All
Have
Description
instantiate
init
Factory
should
List
All
Available
Debug
Sections
should
Not
List
Any
Debug
Section
should
Run
Section
should
Not
Run
Section
For
Missing
Permission
set
Up
Limbo
Cache
Map
should
Output
Statistics
should
Output
Cached
Data
Source
Statistics
mock
List
Of
Size
should
List
All
Permission
Node
Classes
should
Show
Usage
Info
should
Show
Successful
Test
With
Regular
Player
set
Up
Logger
should
Return
My
Sql
Connection
should
Set
My
Sql
Field
On
Initialization
should
Leave
My
Sql
Field
To
Null
On
Initialization
create
Default
Changer
should
Reject
Offline
Player
should
Reject
Inexistent
Player
should
Reject
Player
With
Missing
Permission
should
Force
Login
Player
should
Force
Login
Sender
Self
mock
Player
should
Handle
Invalid
Number
should
Reject
Too
Small
Interval
should
Forward
To
Service
assert
Is
Close
To
set
Up
Logger
should
Update
Help
Message
should
Catch
And
Report
Exception
should
Return
Anti
Bot
State
should
Activate
Anti
Bot
should
Deactivate
Anti
Bot
should
Show
Help
For
Unknown
State
should
Handle
Unknown
Player
should
Invoke
Unregister
Process
should
Invoke
Unregister
Process
With
Null
Player
should
Reject
Non
Player
Sender
should
Reject
Not
Logged
In
Player
should
Reject
Invalid
Password
should
Forward
The
Data
For
Valid
Password
should
Define
Argument
Mismatch
Message
init
Player
With
Name
should
Handle
Missing
Base
Command
should
Handle
Wrong
Command
With
Suggestion
should
Handle
Wrong
Command
Without
Suggestion
should
Show
Children
Of
Base
Command
should
Show
Detailed
Help
For
Child
Command
new
Command
Description
remove
Colors
should
Catch
Unauthenticated
User
should
Stop
For
Missing
Verification
Code
should
Forward
Data
To
Async
Task
should
Stop
If
Sender
Is
Not
Player
should
Define
Argument
Mismatch
Message
should
Detect
If
Player
Is
Logged
In
should
Show
Login
Usage
If
Captcha
Is
Not
Required
should
Handle
Correct
Captcha
Input
should
Handle
Wrong
Captcha
Input
should
Verify
With
Register
Captcha
Manager
should
Handle
Failed
Register
Captcha
should
Show
Register
Usage
When
Registration
Captcha
Is
Solved
mock
Player
With
Name
should
Stop
If
Sender
Is
Not
A
Player
should
Call
Management
For
Player
Caller
setup
link
Mocks
And
Provide
Setting
Defaults
should
Not
Run
For
Non
Player
Sender
should
Forward
To
Management
For
Two
Factor
should
Return
Error
For
Empty
Arguments
should
Return
Error
For
Missing
Confirmation
should
Return
Error
For
Missing
Email
Confirmation
should
Throw
Error
For
Missing
Email
Configuration
should
Reject
Invalid
Email
should
Reject
Invalid
Email
Confirmation
should
Perform
Email
Registration
should
Reject
Invalid
Password
Confirmation
should
Perform
Password
Registration
should
Perform
Mail
Validation
For
Password
With
Email
should
Stop
For
Invalid
Email
should
Perform
Normal
Password
Register
For
One
Argument
should
Request
Captcha
mock
Player
With
Name
set
Up
Logger
should
Detect
If
Mail
Has
A
Setup
should
Require
And
Accept
Code
should
Reject
Code
should
Reject
Verification
Due
To
Expiration
should
Reject
Verification
Due
To
Verified
Identity
should
Reject
Verification
Due
To
Undefined
Email
should
Define
Argument
Mismatch
Message
mock
Player
With
Name
should
Stop
If
Sender
Is
Not
A
Player
should
Call
Management
For
Player
Caller
should
Define
Argument
Mismatch
Message
init
Logger
reset
Console
Logger
Factory
To
Defaults
remove
Settings
And
Clear
Map
should
Create
Logger
With
Proper
Name
And
Default
Log
Level
should
Return
Same
Instance
For
Name
should
Initialize
According
To
Settings
set
Settings
get
Console
Logger
Map
should
Blacklist
All
Sensitive
Commands
get
Command
get
Command
find
Command
With
Label
build
Command
Syntaxes
get
Command
Prefixes
should
Include
Proper
Levels
check
Level
Inclusion
should
Replace
Sensitive
Record
should
Not
Filter
Regular
Command
should
Manage
Record
With
Null
Message
create
Record
should
Filter
Sensitive
Log
Event
should
Not
Filter
Irrelevant
Log
Event
should
Not
Filter
Non
Command
Log
Event
should
Not
Filter
Log
Event
With
Null
Message
should
Not
Filter
When
Log
Event
Is
Null
should
Filter
Sensitive
String
Message
should
Not
Filter
Normal
String
Message
should
Not
Filter
Non
Command
String
Message
should
Return
Neutral
For
Null
Message
should
Filter
Sensitive
Object
Message
should
Not
Filter
Null
Object
Param
should
Not
Filter
Irrelevant
Message
should
Not
Filter
Non
Sensitive
Command
should
Filter
Sensitive
Message
should
Not
Filter
Non
Sensitive
Message
should
Not
Filter
Non
Command
Message
should
Not
Filter
Null
Message
mock
Message
should
Handle
Simple
Events
should
Cancel
Regain
Health
Event
should
Not
Cancel
Regained
Health
should
Cancel
Entity
Damage
By
Entity
Event
should
Not
Cancel
Entity
Damage
By
Entity
Event
should
Cancel
Entity
Damage
Event
should
Not
Cancel
Entity
Damage
Event
should
Allow
Projectile
Launch
From
Non
Human
should
Allow
Projectile
Launch
From
Authed
Human
should
Reject
Projectile
Launch
From
Unauthed
should
Handle
Old
Shooter
Method
should
Cancel
Entity
Target
Event
should
Not
Cancel
Entity
Target
Event
should
Cancel
Event
with
Service
Mock
check
mock
Should
Cancel
collect
Listener
Classes
should
Set
Ignore
Cancelled
To
True
should
Have
Only
Event
Listeners
As
Public
Members
should
Not
Have
Monitor
Level
Event
Handlers
should
Not
Have
Multiple
Methods
With
Same
Name
check
Canceled
Attribute
check
Public
Methods
Are
Listeners
verify
Listener
Is
Not
Using
Monitor
Priority
is
Testable
Method
init
Logger
should
Forward
Plugin
Name
On
Enable
should
Forward
Plugin
Name
On
Disable
check
Enable
Handling
check
Disable
Handling
verify
No
More
Interactions
And
Reset
mock
Event
With
Plugin
Name
should
Allow
Place
Event
should
Deny
Place
Event
should
Allow
Break
Event
should
Deny
Break
Event
should
Cancel
Event
set
Up
Logger
should
Not
Do
Anything
For
Normal
Event
should
Refuse
Non
Vip
Player
For
Full
Server
should
Kick
Non
Vip
For
Joining
Vip
Player
should
Kick
Vip
Player
If
No
Player
Can
Be
Kicked
should
Kick
Non
Registered
should
Not
Kick
Registered
Player
should
Not
Kick
Unregistered
Player
should
Allow
Valid
Name
should
Reject
Too
Long
Name
should
Reject
Too
Short
Name
should
Reject
Name
With
Invalid
Characters
should
Allow
Properly
Cased
Name
should
Reject
Name
With
Wrong
Casing
should
Update
Missing
Real
Name
should
Update
Default
Real
Name
should
Accept
Casing
Mismatch
For
Disabled
Setting
should
Accept
Name
For
Unregistered
Account
should
Accept
Name
That
Is
Not
Online
should
Reject
Name
Already
Online
should
Accept
Already
Online
Name
For
Disabled
Setting
should
Allow
User
should
Allow
User
With
Auth
should
Allow
User
With
Bypass
Permission
should
Kick
User
For
Failed
Antibot
Check
should
Not
Check
Country
should
Check
And
Accept
Unregistered
Player
Country
should
Check
And
Accept
Registered
Player
Country
should
Throw
For
Banned
Country
expect
Validation
Exception
With
exception
With
Data
matches
Safely
describe
To
initialize
Default
Settings
should
Handle
Event
With
Null
Entity
should
Handle
Entity
Event
With
Non
Player
Entity
should
Allow
Authenticated
Player
should
Deny
Un
Logged
Player
should
Allow
Unlogged
Player
For
Optional
Registration
should
Allow
Unrestricted
Name
should
Allow
Npc
Player
should
Handle
Player
Event
should
Handle
Player
Event
With
Null
Player
should
Verify
Based
On
Player
mock
Player
With
Name
get
Handlers
should
Cancel
Kick
should
Not
Cancel
Kick
should
Not
Cancel
Ordinary
Kick
should
Handle
Simple
Cancelable
Events
should
Allow
Essentials
Motd
should
Not
Stop
Allowed
Command
should
Not
Cancel
Event
For
Authenticated
Player
should
Cancel
Command
Event
should
Cancel
Fast
Command
Event
should
Allow
Chat
should
Cancel
Chat
For
Unauthed
Player
should
Send
Chat
To
Everyone
should
Hide
Chat
From
Unauthed
should
Cancel
Chat
Event
For
No
Remaining
Recipients
should
Allow
Chat
For
Bypass
Permission
should
Allow
Unlimited
Movement
should
Allow
Falling
should
Allow
Movement
For
Authed
Player
should
Cancel
Event
For
Disabled
Unauthed
Movement
should
Teleport
Player
In
Different
World
To
Spawn
should
Allow
Movement
Within
Radius
should
Reject
Movement
Outside
Of
Radius
should
Ignore
Player
Respawn
With
No
Teleport
should
Ignore
Player
Respawn
should
Handle
Player
Respawn
should
Ignore
Player
Respawn
Unloaded
World
should
Handle
Player
Respawn
No
Changes
should
Handle
Player
Joining
should
Not
Interfere
With
Unrestricted
User
should
Stop
Handling
For
Full
Server
should
Stop
Handling
Event
For
Bad
Result
should
Perform
All
Join
Verifications
Successfully
Pre
Login
Lowest
should
Kick
Pre
Login
Lowest
Unresolved
Hostname
should
Perform
All
Join
Verifications
Successfully
Pre
Login
Highest
should
Perform
All
Join
Verifications
Successfully
Login
should
Abort
Player
Join
For
Invalid
Name
should
Remove
Message
On
Quit
should
Remove
Message
For
Unlogged
User
should
Process
Player
And
Keep
Quit
Message
should
Cancel
Inventory
Click
Event
should
Allow
Inventory
Click
Event
should
Allow
Sign
Change
Event
should
Cancel
Sign
Change
Event
should
Allow
Inventory
Open
should
Cancel
Inventory
Open
should
Not
Modify
Join
Message
should
Remove
Join
Message
should
Use
Custom
Message
should
Delay
Join
Message
should
Cancel
Player
Edit
Book
Event
should
Cancel
Player
Interact
At
Entity
Event
mock
Player
With
Name
player
With
Mocked
Server
mock
Command
Event
new
Async
Chat
Event
verify
No
Modifying
Calls
verify
No
Modifying
Calls
verify
No
Modifying
Calls
mock
Addr
With
Ip
gather
Permission
Nodes
should
Have
All
Permissions
In
Plugin
Yml
should
Not
Have
Unknown
Permissions
In
Plugin
Yml
does
Permission
Exist
get
Permissions
From
Classes
get
Permissions
From
Plugin
Yml
File
add
Children
validate
Children
map
To
Default
Permission
remove
Permissions
Prefix
collect
Children
remove
Start
should
Have
Defined
And
Unique
Names
should
Recognize
Permission
System
Type
should
All
Start
Wit
Required
Prefix
should
Have
Unique
Nodes
get
Permission
Nodes
get
Required
Prefix
should
Not
Start
With
Other
Prefixes
get
Permission
Nodes
get
Required
Prefix
starts
With
Any
get
Permission
Nodes
get
Required
Prefix
get
Node
get
Default
Permission
set
Up
Logger
set
Up
should
Initialize
Handler
should
Initialize
To
Vault
If
So
Configured
should
Not
Hook
Into
Disabled
Plugin
should
Catch
Initialization
Exception
create
Parameters
set
Up
For
Permission
System
Test
set
Up
For
Vault
get
Handler
Field
Value
should
Return
Groups
should
Handle
Null
As
Groups
create
get
Vault
Permission
get
Permission
Nodes
get
Required
Prefix
should
Use
Default
Permission
For
Command
Sender
should
Grant
To
Op
Command
Sender
should
Deny
Permission
Even
For
Op
Command
Sender
should
Allow
For
Non
Op
Player
should
Deny
For
Non
Op
Player
should
Allow
For
Op
Player
should
Deny
Even
For
Op
Player
should
Handle
Null
Permission
For
Command
Sender
should
Handle
Null
Permission
For
Player
get
Permission
Nodes
get
Required
Prefix
set
Mock
Logger
close
File
Handlers
reset
Console
To
Default
should
Log
To
File
should
Not
Log
To
File
should
Log
Stack
Trace
To
File
should
Support
Various
Debug
Methods
should
Close
File
Writer
Despite
Exception
On
Flush
should
Handle
Exception
On
File
Writer
Close
new
Settings
to
String
has
Equal
Values
On
All
Fields
matches
Safely
describe
To
assert
Are
Fields
Equal
get
All
Fields
init
Logger
should
Log
Exception
should
Fetch
Nullable
Status
should
Return
False
For
Unknown
Nullable
Status
should
Throw
For
Unknown
Column
In
Nullable
Check
should
Get
Default
Value
should
Throw
For
Unknown
Column
In
Default
Value
Retrieval
should
Handle
Null
Default
Value
initialize
Logger
should
Close
Resources
get
Object
Under
Test
verify
Have
Mocks
Been
Closed
build
Param
List
For
Method
get
Method
Parameter
get
Typed
Collection
is
Assignable
From
get
Default
Parameters
init
Connection
prepared
Statement
Answer
answer
result
Set
Answer
answer
init
Result
Set
answer
init
Mocks
should
Convert
From
Sqlite
should
Convert
From
My
Sql
initialize
My
Sql
Table
assert
Is
Close
To
init
Logger
should
Throw
For
Destination
Type
Mismatch
should
Handle
Source
Throwing
Exception
should
Convert
And
Skip
Existing
Players
mock
Auth
With
Name
get
Source
initialize
Logger
should
Import
Users
should
Stop
For
Non
Existent
File
assert
Name
And
Real
Name
initialize
Settings
initialize
Connection
And
Table
close
Connection
should
Set
Up
Table
If
Missing
should
Create
Missing
Columns
get
Data
Source
set
silent
Close
create
My
Sql
create
Postgres
create
Sqlite
reload
connect
initialize
Settings
initialize
Connection
And
Table
close
Connection
get
Data
Source
set
silent
Close
create
Data
Source
get
Data
Source
get
Data
Source
should
Return
If
Auth
Is
Available
Or
Not
should
Return
Password
should
Return
Password
With
Empty
Salt
Column
should
Get
Auth
should
Count
Auths
By
Email
should
Return
All
Auths
should
Update
Password
should
Update
Password
With
No
Salt
should
Update
Password
With
Player
Auth
should
Remove
Player
Auth
should
Update
Session
should
Update
Last
Loc
should
Delete
Players
should
Update
Email
should
Count
Auths
should
Get
All
Users
By
Ip
should
Update
Real
Name
should
Get
Records
To
Purge
should
Perform
Operations
On
Is
Logged
Column
Successfully
should
Perform
Purge
Operation
should
Fetch
Email
should
Get
Logged
Players
Without
Email
should
Grant
And
Retrieve
Session
Flag
should
Revoke
Session
should
Get
Recently
Logged
In
Players
should
Set
Totp
Key
should
Remove
Totp
Key
setup
should
Run
get
By
Name
Or
Fail
create
Data
Source
create
Extension
create
Extension
create
Extension
should
Not
Have
Any
Interactions
With
Connection
create
Extension
init
Settings
get
Object
Under
Test
create
Extension
create
Parameters
create
Extension
initialize
Settings
get
Object
Under
Test
create
Data
Source
data
get
Data
Source
Methods
create
Data
Source
initialize
Settings
initialize
Connection
And
Table
close
Connection
get
Data
Source
set
silent
Close
set
Up
Config
And
Injector
should
Have
Unique
Class
For
Entries
should
Be
Able
To
Instantiate
Encryption
Algorithms
should
Be
Deprecated
If
Encryption
Class
Is
Deprecated
test
Hash
Equality
For
Same
Salt
should
Generate
With2a
Prefix
mock
Settings
mock
Settings
should
Generate
With2y
Prefix
And
Cost
Factor10
should
Detect
Match
For
Hash
With
Other
Round
Number
mock
Settings
setup
Logger
verify
Correct
Constructor
Is
Used
test
Given
Passwords
test
Password
Equality
test
Malformed
Hashes
does
Given
Hash
Match
generate
Test
test
Hash
Equality
For
Same
Salt
should
Generate
With2a
Prefix
And
Cost
Factor10
should
Match
Phpass
Salted
Md5Hashes
should
Match
Unsalted
Md5Hashes
init
Logger
should
Generate
Barcode
Url
should
Handle
Invalid
Hash
should
Handle
Invalid
Input
test
Hash
Equality
For
Same
Salt
should
Create
Hashes
With2a
And
Cost
Factor13
should
Throw
For
Invalid
Salt
verify
Correct
Constructor
Is
Used
should
Generate
Four
Char
Salt
should
Hash
Md5
should
Hash
Sha1
should
Hash
Sha256
should
Hash
Sha512
should
Retrieve
Md5Instance
should
Check
For
Valid
Bcrypt
Hash
Start
should
Compare
Strings
should
Generate
Totp
Key
should
Remove
Generated
Totp
Key
should
Check
Generated
Totp
Key
should
Remove
Expired
Entries
mock
Player
With
Name
initialize
Totp
Authenticator
should
Generate
Totp
Key
should
Check
Code
And
Declare
It
Valid
Only
Once
should
Handle
Invalid
Number
Input
should
Verify
Code
should
Remove
Old
Entries
create
Google
Authenticator
set
Up
Test
set
Up
Mocks
answer
should
Return
Password
Match
should
Return
Password
Mismatch
should
Return
False
If
Player
Does
Not
Exist
should
Try
Other
Methods
For
Failed
Password
should
Try
Legacy
Methods
And
Fail
should
Hash
Password
should
Skip
Check
If
Mandatory
Salt
Is
Unavailable
should
Reload
Settings
should
Return
Instance
Or
Null
should
Return
If
Player
Is
Authenticated
should
Return
If
Player
Is
Npc
should
Return
If
Player
Is
Unrestricted
should
Get
Last
Location
should
Get
Last
Ip
should
Return
Null
As
Last
Ip
For
Unknown
User
should
Get
Last
Login
should
Handle
Null
Last
Login
should
Get
Last
Login
Time
test
Get
Last
Login
Millis
should
Handle
Null
Last
Login
Time
should
Return
Null
For
Unavailable
Player
should
Check
For
Registered
Name
should
Check
Password
should
Return
Auth
Names
should
Return
Auth
Real
Names
should
Unregister
Player
should
Unregister
Player
By
Name
should
Change
Password
should
Return
Auth
Me
Instance
should
Return
Version
should
Force
Login
should
Force
Logout
should
Force
Register
should
Force
Register
And
Not
Auto
Login
should
Register
Player
should
Not
Register
Already
Registered
Player
should
Get
Names
By
Ip
should
Return
Geo
Ip
Info
should
Return
Auth
Me
Player
Info
should
Return
Null
For
Non
Existent
Auth
mock
Player
With
Name
should
Map
Null
Without
Error
should
Map
From
Player
Auth
should
Handle
Null
And
Default
Values
empty
Optional
describe
To
matches
Safely
get
Player
can
Register
set
Can
Register
get
Handler
List
get
Handlers
get
Handler
List
get
Handlers
get
Handler
List
get
Handlers
get
Player
get
From
set
To
get
To
set
Cancelled
is
Cancelled
get
Player
is
Login
get
Handler
List
get
Handlers
get
Handler
List
get
Handlers
get
Method
set
Method
get
Handler
List
get
Handlers
get
Player
get
Handler
List
get
Handlers
get
Player
get
Player
is
Cancelled
set
Cancelled
get
Handler
List
get
Handlers
get
Player
can
Login
set
Can
Login
get
Handler
List
get
Handlers
is
Authenticated
get
Handler
List
get
Handlers
get
Player
get
Handler
List
get
Handlers
is
Cancelled
set
Cancelled
get
Player
get
Handler
List
get
Handlers
get
Player
Name
get
Initiator
get
Handler
List
get
Handlers
is
Cancelled
get
Player
get
Old
Email
get
New
Email
set
Cancelled
get
Handlers
get
Handler
List
get
Player
get
Handler
List
get
Handlers
get
Stored
Inventory
get
Stored
Armor
get
Player
set
Cancelled
is
Cancelled
get
Handler
List
get
Handlers
generate
Image
has
All
Information
send
Password
Mail
send
Verification
Mail
send
Recovery
Code
generate
Password
Image
embed
Image
Into
Email
Content
replace
Tags
For
Password
Mail
replace
Tags
For
Verification
Email
replace
Tags
For
Recovery
Code
Mail
has
All
Information
initialize
Mail
send
Email
set
Properties
For
Port
get
Mechanism
Name
has
Initial
Response
evaluate
Challenge
is
Complete
unwrap
wrap
get
Negotiated
Property
dispose
create
Sasl
Client
get
Mechanism
Names
reload
get
Language
get
User
Language
File
get
Filename
has
Section
get
Message
get
Message
If
Exists
create
File
Path
initialize
File
reload
reload
Internal
create
File
Path
send
send
retrieve
format
Duration
retrieve
Message
retrieve
Message
retrieve
Single
retrieve
Single
get
Key
get
Tags
to
String
create
Message
File
Path
create
Help
Message
File
Path
is
Messages
File
get
Language
If
Is
Messages
File
is
Help
File
get
Message
get
Default
create
File
Path
get
Message
From
Jar
get
String
load
Jar
File
load
From
File
load
From
Stream
contains
get
Keys
get
Child
Keys
get
Object
get
String
get
Int
get
Double
get
Boolean
get
List
read
Stream
To
Map
get
If
Is
Map
migrate
And
Save
migrate
And
Save
migrate
Keys
move
If
Applicable
migrate
Old
Keys
add
Missing
Keys
backup
Messages
File
create
Configuration
Data
get
From
Reader
add
Message
Key
get
All
Properties
migrate
Old
Paths
move
If
Applicable
replace
Old
Placeholders
create
Reader
create
New
Yaml
escape
Path
Element
If
Needed
initialize
Values
get
Value
get
All
Message
Properties
get
Message
set
Message
get
Plugin
Name
get
Plugin
Version
get
Plugin
Build
Number
on
Enable
load
Plugin
Info
initialize
instantiate
Services
register
Event
Listeners
stop
Or
Unload
on
Disable
on
Command
get
Server
Name
Version
Safe
initialize
initialize
Shared
Settings
initialize
Settings
get
Log
Level
get
Name
warning
log
Exception
info
fine
debug
debug
debug
debug
debug
log
And
Write
With
Debug
Prefix
close
File
Writer
write
Log
close
Safely
initialize
File
Writer
run
execute
Purge
purge
Anti
Xray
purge
From
Auth
Me
purge
Limited
Creative
purge
Dat
purge
Essentials
purge
Permissions
run
Auto
Purge
run
Purge
purge
Players
set
Purging
execute
Purge
run
finish
send
Message
set
Muted
run
run
add
Email
send
Unlogged
Message
change
Email
save
New
Email
output
Unlogged
Message
change
Password
change
Password
As
Admin
process
Quit
process
Sync
Quit
process
Join
handle
Player
With
Unmet
Name
Restriction
process
Join
Sync
validate
Player
Count
For
Ip
count
Online
Players
By
Ip
unregister
admin
Unregister
perform
Post
Unregister
Actions
apply
Blind
Effect
logout
process
Sync
Logout
apply
Logout
Effect
request
Login
process
Password
Register
process
Email
Register
of
get
Login
After
Register
get
Password
set
Hashed
Password
get
Hashed
Password
create
Player
Auth
Object
perform
Login
After
Register
get
Player
get
Player
Name
is
Registration
Admitted
build
Player
Auth
execute
Post
Persist
Action
create
Player
Auth
Object
create
Player
Auth
is
Registration
Admitted
build
Player
Auth
execute
Post
Persist
Action
is
Registration
Admitted
create
Player
Auth
Object
execute
Post
Persist
Action
of
get
Email
of
is
Registration
Admitted
build
Player
Auth
create
Player
Auth
Object
perform
Login
After
Register
execute
Post
Persist
Action
get
Executor
Class
of
get
Email
set
Password
get
Password
register
pre
Register
Check
execute
Registration
is
Player
Ip
Allowed
To
Register
process
Sync
Email
Register
process
Sync
Password
Register
process
Sync
Player
Logout
process
Sync
Player
Login
process
Sync
Player
Quit
run
Task
perform
Login
force
Login
force
Login
perform
Logout
perform
Register
perform
Unregister
perform
Unregister
By
Admin
perform
Join
perform
Quit
perform
Add
Email
perform
Change
Email
perform
Password
Change
perform
Password
Change
As
Admin
run
Task
restore
Inventory
process
Player
Login
login
force
Login
force
Login
get
Player
Auth
get
Player
Auth
check
Player
Info
handle
Wrong
Password
perform
Login
display
Other
Accounts
has
Reached
Max
Logged
In
Players
For
Ip
restore
Fly
Speed
restore
Walk
Speed
restore
Fly
Speed
restore
Walk
Speed
restore
Fly
Speed
restore
Walk
Speed
restore
Fly
Speed
restore
Walk
Speed
restore
Fly
Speed
restore
Walk
Speed
create
Limbo
Player
get
Limbo
Player
has
Limbo
Player
restore
Data
replace
Tasks
After
Registration
reset
Message
Task
mute
Message
Task
unmute
Message
Task
get
Limbo
Or
Log
Error
set
Group
use
Auth
Groups
reload
get
Location
is
Operator
get
Groups
is
Can
Fly
get
Walk
Speed
get
Fly
Speed
get
Timeout
Task
set
Timeout
Task
get
Message
Task
set
Message
Task
clear
Tasks
get
State
set
State
restore
Allow
Flight
restore
Allow
Flight
restore
Allow
Flight
restore
Allow
Flight
process
Player
restore
Allow
Flight
process
Player
get
Group
Name
get
Context
Map
equals
hash
Code
get
Limbo
Player
save
Limbo
Player
remove
Limbo
Player
get
Type
serialize
get
Distribution
get
Length
get
Total
Segments
get
Limbo
Player
save
Limbo
Player
remove
Limbo
Player
get
Type
get
Limbo
Player
save
Limbo
Player
remove
Limbo
Player
get
Type
save
Entries
read
Limbo
Players
get
Player
Segment
File
get
Segment
File
convert
Old
Data
To
Current
Segment
Scheme
save
To
New
Segments
group
By
Segment
delete
Empty
Files
is
Limbo
Json
File
list
Files
get
Limbo
Player
save
Limbo
Player
remove
Limbo
Player
reload
deserialize
deserialize
Location
get
String
get
Limbo
Groups
get
Boolean
get
Float
get
Float
get
Double
get
Number
From
Element
create
Segment
Name
get
Prefix
build
Segment
Name
build
Char
Map
get
Implementation
Class
get
Limbo
Player
save
Limbo
Player
remove
Limbo
Player
get
Type
create
Limbo
Player
revoke
Limbo
States
merge
first
Not
Null
get
Limbo
Groups
register
Message
Task
register
Timeout
Task
set
Muted
get
Message
Key
set
Join
should
Save
Player
process
Join
is
Allowed
reload
perform
Cleanup
set
Nickname
get
Nickname
get
Real
Name
set
Real
Name
get
Group
Id
set
Quit
Location
get
Quit
Loc
X
set
Quit
Loc
X
get
Quit
Loc
Y
set
Quit
Loc
Y
get
Quit
Loc
Z
set
Quit
Loc
Z
get
World
set
World
get
Yaw
get
Pitch
get
Last
Ip
set
Last
Ip
get
Last
Login
set
Last
Login
get
Email
set
Email
get
Password
set
Password
get
Registration
Ip
get
Registration
Date
set
Registration
Date
get
Totp
Key
set
Totp
Key
get
Uuid
set
Uuid
equals
hash
Code
to
String
builder
build
is
Equal
To
name
real
Name
password
password
totp
Key
last
Ip
location
loc
X
loc
Y
loc
Z
loc
World
loc
Yaw
loc
Pitch
last
Login
group
Id
email
registration
Ip
registration
Date
uuid
update
Player
remove
Player
is
Authenticated
get
Auth
get
Logged
get
Cache
increase
Count
reset
Count
should
Tempban
tempban
Player
reload
perform
Cleanup
is
Captcha
Required
get
Captcha
Code
Or
Generate
New
check
Code
reload
perform
Cleanup
set
Expiration
In
Minutes
set
Captcha
Length
get
Code
Or
Generate
New
generate
Code
check
Code
remove
Expired
Entries
is
Captcha
Required
get
Captcha
Code
Or
Generate
New
check
Code
increase
Login
Failure
Count
is
Captcha
Required
get
Captcha
Code
Or
Generate
New
check
Code
reset
Login
Failure
Count
reload
perform
Cleanup
can
Send
Mail
is
Verification
Required
is
Code
Required
is
Player
Verified
has
Code
has
Email
code
Exist
Or
Generate
New
generate
Code
check
Code
verify
unverify
reload
perform
Cleanup
set
Active
Session
process
Proxy
Session
Message
should
Resume
Session
perform
Cleanup
get
Password
Email
Message
get
Verification
Email
Message
get
Recovery
Code
Email
Message
load
Settings
From
Files
reload
read
File
register
Comments
get
On
Join
set
On
Join
get
On
Login
set
On
Login
get
On
Session
Login
set
On
Session
Login
get
On
First
Login
set
On
First
Login
get
On
Register
set
On
Register
get
On
Unregister
set
On
Unregister
get
On
Logout
set
On
Logout
check
And
Migrate
move
Other
Accounts
Config
replace
Old
Placeholders
With
New
is
Any
Command
Missing
copy
With
Command
set
Values
To
Copy
With
New
Command
get
Command
set
Command
get
Executor
set
Executor
get
Delay
set
Delay
to
String
copy
With
Command
get
If
Number
Of
Accounts
At
Least
set
If
Number
Of
Accounts
At
Least
get
If
Number
Of
Accounts
Less
Than
set
If
Number
Of
Accounts
Less
Than
run
Commands
On
Join
run
Commands
On
Register
run
Commands
On
Login
run
Commands
On
Session
Login
run
Commands
On
First
Login
run
Commands
On
Unregister
run
Commands
On
Logout
execute
Commands
execute
Commands
dispatch
Command
should
Command
Be
Run
reload
new
Replacer
new
On
Login
Cmd
Replacer
build
Available
Tags
perform
Migrations
has
Deprecated
Properties
has
Old
Other
Accounts
Command
get
Old
Other
Accounts
Command
get
Old
Other
Accounts
Command
Threshold
perform
Mail
Text
To
File
Migration
migrate
Join
Leave
Messages
migrate
Force
Spawn
Settings
migrate
Pool
Size
Setting
change
Boolean
Setting
To
Log
Level
Property
has
Old
Help
Header
Property
has
Support
Old
Password
Property
convert
To
Registration
Type
merge
And
Move
Permission
Group
Settings
move
Deprecated
Hash
Algorithm
Into
Legacy
Section
move
Salt
Column
Config
With
Other
Column
Configs
set
Old
Other
Accounts
Command
Fields
If
Set
move
Property
reload
get
Welcome
Message
send
Welcome
Message
read
Welcome
File
get
From
Reader
to
Enum
to
Export
Value
register
Comments
register
Comments
build
Configuration
Data
log
Warnings
For
Misconfigurations
is
True
reload
get
Spawn
set
Spawn
get
First
Spawn
set
First
Spawn
load
Essentials
Spawn
unload
Essentials
Spawn
load
Cmi
Spawn
unload
Cmi
Spawn
get
Spawn
Location
is
Valid
Spawn
Point
set
Location
save
Auth
Me
Config
get
Player
Location
Or
Spawn
get
Location
From
Configuration
get
Location
From
Cmi
Configuration
contains
All
Spawn
Fields
is
Location
Complete
In
Cmi
Config
get
Float
get
Difference
contains
Any
is
Blank
is
Inside
String
get
Player
Ip
is
Npc
copy
File
From
Resource
create
Directory
get
Resource
From
Jar
purge
Directory
delete
create
make
Path
create
Current
Time
String
create
Backup
File
Path
find
Throwable
In
Cause
format
Exception
parse
Uuid
Safely
safe
Pattern
Compile
is
Class
Loaded
log
And
Send
Message
log
And
Send
Warning
is
Collection
Empty
is
Email
Empty
new
Replacer
get
Adapted
Messages
determine
Used
Tags
to
String
get
Name
get
Value
get
Name
get
Value
create
Tag
create
Tag
get
Name
get
Value
get
Adapted
Items
generate
generate
Hex
generate
Num
generate
Lower
Upper
generate
String
get
increment
decrement
total
get
put
remove
remove
Expired
Entries
set
Expiration
is
Empty
get
Entries
get
Value
get
Expiration
create
With
Suitable
Unit
get
Duration
get
Time
Unit
add
contains
remove
clear
remove
Expired
Entries
get
Expiration
set
Expiration
is
Empty
is
Local
Address
is
Loopback
Address
is
Loopback
Address
is
I
Pv6Unique
Site
Local
reset
handle
get
create
Data
Source
check
Data
Source
Size
perform
Cleanup
get
reload
reload
run
sleep
get
Pending
Tasks
send
Metrics
setup
Console
Filter
set
Log4J
Filter
schedule
Recall
Email
Task
run
save
All
Players
save
Player
save
Loggedin
Player
reload
teleport
On
Join
prepare
On
Join
Spawn
Location
teleport
New
Player
To
First
Spawn
teleport
On
Login
must
Force
Spawn
After
Login
build
Location
From
Auth
teleport
Back
From
Spawn
teleport
To
Spawn
perform
Teleportation
is
Event
Valid
load
From
File
create
Reader
get
File
is
Data
Available
update
Database
start
Reading
download
Database
Archive
download
Database
Archive
verify
Checksum
extract
Database
get
Country
Code
get
Country
Name
get
Country
change
Plain
Text
To
Sha256
do
Backup
do
Backup
do
Backup
perform
My
Sql
Backup
perform
File
Backup
use
Windows
Command
build
Mysql
Dump
Arguments
construct
Backup
File
copy
init
Email
Cooldown
Set
create
And
Send
Recovery
Code
generate
And
Send
New
Password
add
Successful
Recovery
remove
From
Successful
Recovery
check
Email
Cooldown
can
Change
Password
reload
perform
Cleanup
reload
start
Protection
stop
Protection
get
Anti
Bot
Status
override
Anti
Bot
Status
should
Kick
was
Player
Kicked
add
Player
Kick
update
Help
File
export
To
Yaml
generate
Help
Message
Entries
generate
Command
Entries
reload
handle
Broadcast
handle
on
Plugin
Message
Received
perform
Login
reload
is
Enabled
send
Bungeecord
Message
send
Forwarded
Bungeecord
Message
connect
Player
On
Login
send
Auth
Me
Bungeecord
Message
get
Id
is
Broadcast
from
Id
schedule
Sync
Delayed
Task
schedule
Sync
Delayed
Task
schedule
Sync
Task
From
Optionally
Async
Task
run
Task
run
Task
Later
run
Task
Optionally
Async
run
Task
Asynchronously
run
Task
Timer
Asynchronously
run
Task
Timer
broadcast
Message
get
Player
Exact
get
Offline
Player
get
Banned
Players
get
Offline
Players
get
Online
Players
call
Event
create
And
Call
Event
get
World
dispatch
Command
dispatch
Console
Command
reload
send
Bungee
Message
ban
Ip
is
Bungee
Cord
Configured
For
Spigot
get
Ip
reload
validate
Password
validate
Email
is
Email
Free
For
Registration
is
Country
Admitted
is
Unrestricted
fulfills
Name
Restrictions
get
Host
Name
validate
Whitelist
And
Blacklist
contains
Ignore
Case
load
Name
Restrictions
has
Error
get
Message
Key
get
Args
get
Property
send
send
retrieve
Single
Message
has
Permission
can
Resume
Session
fetch
Session
Status
grant
Session
revoke
Session
reload
put
Message
send
Message
is
Recovery
Code
Needed
generate
Code
is
Code
Valid
has
Tries
Left
get
Tries
Left
remove
Code
reload
perform
Cleanup
set
Essentials
Social
Spy
Status
get
Essentials
Data
Folder
get
Cmi
Data
Folder
get
Multiverse
Spawn
is
Essentials
Available
is
Cmi
Available
is
Multiverse
Available
try
Hook
To
Essentials
try
Hook
To
Cmi
try
Hook
To
Multiverse
unhook
Essentials
unhook
Cmi
unhook
Multiverse
get
Plugin
process
Command
handle
Command
Result
initialize
Commands
execute
Command
skip
Empty
Arguments
send
Unknown
Command
Message
send
Improper
Arguments
Message
show
Help
For
Command
execute
Command
run
Command
get
Alternative
Command
map
Parts
To
Command
get
Command
Classes
get
Command
With
Smallest
Difference
get
Base
Command
get
Suitable
Child
transform
Result
For
Help
get
Permission
Aware
Status
has
Suitable
Argument
Count
get
Label
Difference
get
Labels
has
Label
get
Executable
Command
get
Parent
get
Label
Count
get
Children
get
Arguments
get
Description
get
Detailed
Description
get
Permission
builder
register
build
labels
labels
description
detailed
Description
executable
Command
parent
with
Argument
permission
get
Command
Description
get
Arguments
get
Labels
get
Difference
get
Result
Status
execute
Command
get
Arguments
Mismatch
Message
get
Key
get
Entry
Key
build
Help
Output
output
Help
reload
filter
Disabled
Sections
flag
For
add
Arguments
Info
add
Alternatives
Info
add
Permissions
Info
get
Local
Permission
Text
add
Children
Info
has
Flag
filter
Correct
Labels
build
Localized
Description
get
Description
get
Message
get
Message
get
Message
get
Default
Permissions
Sub
Path
get
Text
reload
Messages
File
get
Command
Sub
Path
get
Key
get
Entry
Key
get
Min
Number
Of
Arguments
get
Max
Number
Of
Arguments
construct
Parent
List
construct
Command
Path
build
Syntax
format
Argument
get
Commands
build
Commands
build
Auth
Me
Base
Command
build
Email
Base
Command
build
Totp
Base
Command
set
Help
On
All
Bases
get
Name
get
Description
is
Optional
run
Command
run
Command
get
Arguments
Mismatch
Message
run
Command
run
Command
get
Arguments
Mismatch
Message
execute
Command
run
Command
get
Arguments
Mismatch
Message
run
Command
email
Mask
run
Command
process
Code
run
Command
remove
Totp
Key
From
Database
run
Command
verify
Totp
Code
Confirmation
insert
Totp
Key
Into
Database
run
Command
execute
Command
run
Command
execute
Command
run
execute
Command
reset
Last
Position
run
Command
run
Command
execute
Command
execute
Command
execute
Command
get
Zone
Id
format
Player
Message
execute
Command
execute
Command
perform
Reload
On
Services
execute
Command
execute
Command
create
Last
Login
Interval
Message
execute
Command
execute
Command
execute
Command
execute
Command
remove
Totp
Key
execute
Command
execute
Command
execute
Command
get
Converter
Class
From
Args
get
Converters
execute
Command
output
Accounts
List
execute
Command
print
Developer
is
Player
Online
execute
Command
run
Command
execute
Command
format
Location
format
Location
round
get
Limbo
Player
Entries
Field
apply
To
Limbo
Players
Map
cast
To
Type
Or
Null
unwrap
Source
From
Cache
Data
Source
get
Name
get
Description
execute
get
Required
Permission
display
Usage
Hint
validate
Password
validate
Email
validate
Username
matches
Any
matches
get
Name
get
Description
execute
get
Required
Permission
perform
Permission
Check
get
Permission
Node
create
Perm
Node
get
Node
get
Default
Permission
get
Name
get
Description
execute
get
Required
Permission
get
Name
get
Description
execute
get
Required
Permission
output
Database
Stats
output
Injector
Stats
get
Name
get
Description
execute
get
Required
Permission
send
Entry
get
Data
get
Name
get
Description
execute
get
Required
Permission
display
Auth
To
Sender
safe
Substring
format
Date
get
Name
get
Description
execute
get
Required
Permission
output
Info
For
Ip
Addr
output
Info
For
Player
execute
Command
find
Debug
Section
send
Available
Sections
execute
Section
get
Sections
get
Name
get
Description
execute
get
Required
Permission
show
General
Info
show
Help
show
Player
Spawn
set
My
Sql
Field
get
Name
get
Description
get
Required
Permission
execute
change
Column
To
Not
Null
With
Default
remove
Not
Null
And
Default
show
Column
Details
display
Usage
Hints
construct
Column
List
With
Metadata
format
Column
With
Metadata
get
Connection
match
To
Enum
get
Column
Name
Property
get
Nullable
Definition
get
Not
Null
Definition
get
Default
Value
get
Name
get
Description
execute
get
Required
Permission
get
Name
get
Description
execute
get
Required
Permission
get
Email
send
Test
Email
execute
Command
execute
Command
execute
Command
execute
Command
run
Command
get
Alternative
Command
get
Arguments
Mismatch
Message
run
Command
get
Arguments
Mismatch
Message
get
Alternative
Command
run
Command
check
Login
Captcha
check
Register
Captcha
run
Command
run
Command
get
Alternative
Command
get
Arguments
Mismatch
Message
is
Captcha
Fulfilled
handle
Password
Registration
get
Email
If
Available
is
Second
Arg
Valid
For
Password
Registration
handle
Email
Registration
is
Second
Arg
Valid
For
Email
Registration
run
Command
get
Arguments
Mismatch
Message
execute
Command
run
Command
get
Arguments
Mismatch
Message
get
Alternative
Command
get
reload
Settings
get
Total
Loggers
create
Logger
is
Sensitive
Auth
Me
Command
with
And
Without
Auth
Me
Prefix
is
Loggable
validate
Message
validate
Message
filter
filter
filter
filter
includes
is
Player
Spawn
Location
Event
Called
on
Player
Spawn
reload
check
Antibot
check
Kick
Non
Registered
check
Is
Valid
Name
refuse
Player
For
Full
Server
check
Name
Casing
check
Player
Country
check
Single
Session
generate
Kick
Player
on
Block
Place
on
Block
Break
get
Reason
get
Args
to
String
on
Plugin
Disable
on
Plugin
Enable
on
Damage
on
Attack
on
Entity
Target
on
Food
Level
Change
entity
Regain
Health
Event
on
Entity
Interact
on
Lowest
Entity
Interact
on
Projectile
Launch
on
Shoot
on
Player
Swap
Hand
Items
on
Async
Player
Pre
Login
Event
Lowest
on
Async
Player
Pre
Login
Event
Highest
on
Player
Login
on
Player
Join
on
Join
Message
on
Player
Quit
on
Player
Kick
remove
Unauthorized
Recipients
on
Player
Chat
on
Player
Command
Preprocess
on
Player
Move
on
Player
Respawn
on
Player
Interact
on
Player
Interact
Entity
on
Player
Interact
At
Entity
on
Player
Hit
Player
Event
on
Player
Shear
on
Player
Fish
on
Player
Bed
Enter
on
Player
Edit
Book
on
Sign
Change
on
Player
Pickup
Item
on
Player
Drop
Item
on
Player
Held
Item
on
Player
Consume
Item
is
Inventory
Whitelisted
on
Player
Inventory
Open
on
Player
Inventory
Click
setup
disable
send
Blank
Inventory
Packet
reload
on
Packet
Sending
register
should
Hide
Inventory
unregister
send
Blank
Inventory
Packet
on
Packet
Receiving
register
unregister
on
Player
Air
Change
should
Cancel
Event
should
Cancel
Event
should
Cancel
Event
should
Cancel
Event
reload
check
Auth
get
Display
Name
get
Plugin
Name
to
String
is
Permission
System
get
Node
get
Default
Permission
evaluate
evaluate
evaluate
evaluate
is
Enabled
setup
create
Permission
Handler
unhook
reload
on
Plugin
Enable
on
Plugin
Disable
get
Permission
System
has
Permission
has
Permission
Offline
has
Permission
Offline
has
Group
Support
get
Groups
get
Primary
Group
is
In
Group
add
Group
add
Groups
remove
Group
remove
Groups
set
Group
remove
All
Groups
load
User
Data
load
User
Data
add
To
Group
has
Group
Support
has
Permission
Offline
is
In
Group
remove
From
Group
set
Group
get
Groups
get
Primary
Group
get
Permission
System
load
User
Data
get
Group
get
Contexts
get
Vault
Permission
add
To
Group
has
Group
Support
has
Permission
Offline
is
In
Group
remove
From
Group
set
Group
get
Groups
get
Primary
Group
get
Permission
System
add
To
Group
has
Group
Support
has
Permission
Offline
remove
From
Group
set
Group
get
Groups
get
Primary
Group
get
Permission
System
add
To
Group
has
Group
Support
has
Permission
Offline
is
In
Group
remove
From
Group
set
Group
get
Groups
get
Permission
System
load
User
Data
build
Group
Node
sort
Groups
add
To
Group
has
Group
Support
has
Permission
Offline
is
In
Group
remove
From
Group
set
Group
get
Groups
get
Permission
System
get
Node
get
Default
Permission
get
Node
get
Default
Permission
get
Node
get
Default
Permission
get
Node
get
Default
Permission
execute
execute
convert
get
Id
Player
get
X
Auth
Players
get
Password
execute
migrate
Account
get
Source
execute
get
Source
execute
get
Source
execute
execute
perform
Conversion
migrate
Data
build
Auth
From
Login
Security
create
Connection
Or
Inform
Sender
create
Sqlite
Connection
create
My
Sql
Connection
execute
is
Uuid
Instance
get
Name
load
reload
get
Cached
Auths
reload
is
Cached
is
Auth
Available
get
Password
get
Auth
save
Auth
update
Password
update
Password
update
Session
update
Quit
Loc
get
Records
To
Purge
remove
Auth
close
Connection
update
Email
get
All
Auths
By
Ip
count
Auths
By
Email
purge
Records
get
Type
is
Logged
set
Logged
set
Unlogged
has
Session
grant
Session
revoke
Session
purge
Logged
get
Accounts
Registered
update
Real
Name
get
Email
get
All
Auths
get
Logged
Players
With
Empty
Mail
get
Recently
Logged
In
Players
set
Totp
Key
invalidate
Cache
refresh
Cache
is
Cached
is
Auth
Available
get
Password
get
Auth
save
Auth
update
Session
update
Password
update
Password
get
Records
To
Purge
purge
Records
remove
Auth
update
Quit
Loc
get
All
Auths
By
Ip
count
Auths
By
Email
update
Email
close
Connection
get
Type
is
Logged
set
Logged
set
Unlogged
has
Session
grant
Session
revoke
Session
purge
Logged
get
Logged
Players
With
Empty
Mail
get
Accounts
Registered
update
Real
Name
get
Email
get
All
Auths
get
Recently
Logged
In
Players
set
Totp
Key
remove
Totp
Key
reload
invalidate
Cache
refresh
Cache
migrate
Last
Ip
Column
migrate
Last
Login
Column
migrate
Last
Login
Column
From
Int
add
Registration
Date
Column
set
Parameters
set
Connection
Arguments
reload
get
Connection
check
Tables
And
Columns
is
Column
Missing
get
Auth
save
Auth
get
Jdbc
Url
get
Records
To
Purge
remove
Auth
close
Connection
purge
Records
get
Type
get
All
Auths
get
Logged
Players
With
Empty
Mail
get
Recently
Logged
In
Players
set
Totp
Key
build
Auth
From
Result
Set
get
Driver
Class
Name
set
Parameters
set
Connection
Arguments
reload
get
Connection
check
Tables
And
Columns
is
Column
Missing
get
Auth
save
Auth
get
Jdbc
Url
get
Records
To
Purge
remove
Auth
close
Connection
purge
Records
get
Type
get
All
Auths
get
Logged
Players
With
Empty
Mail
get
Recently
Logged
In
Players
set
Totp
Key
build
Auth
From
Result
Set
is
Auth
Available
get
Password
save
Auth
has
Session
update
Session
update
Password
update
Password
update
Quit
Loc
get
All
Auths
By
Ip
count
Auths
By
Email
update
Email
is
Logged
set
Logged
set
Unlogged
grant
Session
revoke
Session
purge
Logged
get
Accounts
Registered
update
Real
Name
get
Email
get
Jdbc
Url
log
Sql
Exception
get
Nullable
Long
is
Not
Null
Column
get
Column
Default
Value
get
Column
Size
is
Migration
Required
perform
Migration
create
Backup
recreate
Database
With
New
Definitions
replace
Column
Variables
get
Connection
connect
setup
migrate
If
Needed
is
Column
Missing
reload
get
Auth
get
Records
To
Purge
purge
Records
remove
Auth
close
Connection
get
Type
get
All
Auths
get
Logged
Players
With
Empty
Mail
get
Recently
Logged
In
Players
set
Totp
Key
build
Auth
From
Result
Set
add
Registration
Date
Column
get
Jdbc
Url
close
get
Jdbc
Url
get
Driver
Class
Name
get
Type
create
For
Sqlite
create
For
My
Sql
update
update
update
update
retrieve
retrieve
retrieve
insert
count
create
Integer
create
Integer
create
Long
create
String
create
Double
create
Float
create
Internal
is
Optional
has
Default
For
Null
contains
In
Array
get
Value
From
Dependent
get
Name
Property
resolve
Name
get
Type
is
Column
Used
use
Default
For
Null
Value
get
Name
has
Default
Support
build
Extension
save
Auth
extend
Auth
change
Password
remove
Auth
retrieve
Id
From
Table
save
Auth
save
Specifics
add
Meta
Row
save
Auth
save
Auth
update
Specifics
On
Save
save
Auth
update
Xenforo
Tables
On
Save
extend
Auth
change
Password
remove
Auth
sha1
sha256
sha512
md5
get
Digest
is
Valid
Bcrypt
Hash
is
Equal
hash
hash
compute
Hash
compute
Hash
compare
Password
get
Salt
Length
compute
Hash
compute
Hash
compute
Hash
compare
Password
generate
Salt
has
Separate
Salt
is
Library
Loaded
compute
Hash
compare
Password
hash
hash
With
Raw
Salt
compare
Password
generate
Salt
compute
Hash
generate
Salt
compute
Hash
compute
Hash
compute
Hash
compare
Password
generate
Salt
has
Separate
Salt
compute
Hash
compare
Password
get
Salt
Length
create
Hasher
compute
Hash
compute
Hash
compare
Password
generate
Salt
has
Separate
Salt
compute
Hash
compute
Hash
compare
Password
generate
Salt
has
Separate
Salt
compute
Hash
compute
Hash
compute
Hash
generate
Salt
compare
Password
has
Separate
Salt
compute
Hash
compute
Hash
compute
Hash
compare
Password
hash
Internal
generate
Salt
has
Separate
Salt
get
Qr
Barcode
Url
compute
Hash
compare
Password
check
Password
check
Code
verify
Code
compute
Hash
generate
Salt
compute
Hash
compute
Hash
compare
Password
generate
Salt
has
Separate
Salt
compute
Hash
compute
Hash
compare
Password
generate
Salt
has
Separate
Salt
md5
hex
To
Int
bytes2hex
pack

hash
encode64

hash
crypt
private
phpbb
check
hash
compute
Hash
generate
Salt
compute
Hash
compare
Password
get
Salt
Length
get
Whirlpool
compute
Hash
compare
Password
get
Salt
Length
byte
Array
To
Hex
String
compute
Hash
compute
Hash
compare
Password
get
Salt
Length
compute
Hash
compute
Hash
compute
Hash
generate
Salt
compute
Hash
compute
Hash
compare
Password
generate
Salt
has
Separate
Salt
get
Salt
Length
compute
Hash
compute
Hash
compare
Password
generate
Salt
has
Separate
Salt
get
Hash
get
Salt
get
Hash
From
Blob
serialize
Hash
display
process
Buffer
NESSI
Einit
NESSI
Eadd
NESSI
Efinalize
NESSI
Eadd
compute
Hash
compute
Hash
generate
Salt
encode64
crypt
gensalt
Private
string
To
Utf8
compute
Hash
compare
Password
compute
Hash
compare
Password
get
Salt
Length
compute
Hash
generate
Salt
get
Key
generate
Totp
Key
get
Generated
Totp
Key
remove
Generate
Totp
Key
is
Totp
Code
Correct
For
Generated
Totp
Key
perform
Cleanup
create
Google
Authenticator
check
Code
check
Code
generate
Totp
Key
perform
Cleanup
get
Totp
Key
get
Authenticator
Qr
Code
Url
get
Clazz
reload
compute
Hash
compare
Password
compare
Password
compare
With
Legacy
Hashes
method
Matches
initialize
Encryption
Method
With
Event
initialize
Encryption
Method
hash
And
Save
Password
With
New
Algorithm
from
Player
Auth
get
Name
get
Uuid
get
Email
get
Registration
Date
get
Registration
Ip
Address
get
Last
Login
Date
get
Last
Login
Ip
Address
to
Instant
null
If
Default
get
Name
get
Uuid
get
Email
get
Registration
Date
get
Registration
Ip
Address
get
Last
Login
Date
get
Last
Login
Ip
Address
get
Instance
get
Plugin
get
Plugin
Version
is
Authenticated
is
Npc
is
Unrestricted
get
Last
Location
get
Player
Info
get
Last
Ip
get
Names
By
Ip
get
Last
Login
get
Last
Login
Time
get
Last
Login
Millis
is
Registered
check
Password
register
Player
force
Login
force
Logout
force
Register
force
Register
force
Unregister
force
Unregister
change
Password
get
Registered
Names
get
Registered
Real
Names
get
Country
Code
get
Country
Name
