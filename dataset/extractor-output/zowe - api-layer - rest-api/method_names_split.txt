main
main
get
Uri
setup
create
Entry
read
All
Entries
read
Entry
update
Entry
delete
Entry
response
Is
Forbidden
then
Return
Message
set
Up
given
There
Are
No
Items
then
Nothing
Is
Removed
given
There
Is
One
Item
then
It
Is
Removed
given
There
Is
More
Items
then
The
Older
One
Is
Removed
set
Up
given
Valid
Z
File
Behavior
then
Record
Is
Inserted
And
Deleted
given
Z
File
Not
Located
then
Record
Is
Not
Deleted
default
Configuration
set
Up
given
Use
Old
Strategy
then
Return
Oldest
Strategy
given
Use
Reject
Strategy
then
Return
Reject
Strategy
given
Existing
Reject
Strategy
then
Return
Existing
Strategy
prepare
Config
bytes
Represent
The
Record
Structure
bytes
Hold
Key
Value
Serialization
In
Json
Format
key
Bytes
Represent
The
Key
record
Can
Be
Created
From
Bytes
record
Cannot
Be
Created
From
Illegal
Bytes
record
Bytes
That
Exceed
Length
Of
Record
Cannot
Be
Created
to
String
Can
Be
Called
After
Record
Is
Created
prepare
Config
can
Get
Information
About
Key
can
Get
Key
can
Get
Key
With
Just
The
Sid
can
Get
Key
From
Key
Value
has
Minimal
Length
prepare
Config
has
Valid
File
Name
has
Invalid
File
Name
given
Null
Config
Exception
Is
Thrown
given
Open
Z
File
Throws
Exception
Exception
Is
Thrown
given
Null
Record
Exception
Is
Thrown
given
Z
File
Throws
Error
The
Error
Is
Propagated
given
Record
Doesnt
Exists
No
Record
Is
Returned
given
Existing
Record
then
It
Is
Returned
given
Null
Record
Exception
Is
Thrown
given
Z
File
Throws
Error
The
Error
Is
Propagated
given
Record
Doesnt
Exists
No
Record
Is
Returned
given
Existing
Record
then
It
Is
Updated
given
Null
Record
Exception
Is
Thrown
given
Z
File
Throws
Error
The
Error
Is
Propagated
given
Record
Doesnt
Exists
No
Record
Is
Returned
given
Existing
Record
It
Is
Deleted
given
Null
Record
Exception
Is
Thrown
given
Record
Already
Exists
No
Record
Is
Returned
given
Z
File
Throws
Error
The
Error
Is
Propagated
given
Valid
Record
then
It
Is
Returned
given
Invalid
Service
Id
Exception
Is
Thrown
given
Valid
Service
Id
all
Service
Records
Are
Returned
given
Zfile
Throws
Error
then
Empty
List
Is
Returned
given
Valid
Service
Id
all
Service
Records
Are
Returned
given
Z
File
file
Is
Closed
given
No
Z
File
file
Is
Not
Closed
given
Z
File
Close
Error
No
Exception
Thrown
given
Exception
Reading
File
then
Return
Zero
given
No
File
Content
then
Return
Zero
given
Records
then
Return
Count
set
Initial
Creation
given
Vsam
File
Exception
then
Throw
Exception
given
Valid
Vsam
then
Create
Vsam
File
given
Proper
Answer
proper
Bytes
Are
Returned
given
Nothing
Is
Read
nothing
Is
Returned
prepare
Answer
records
To
Return
default
Vsam
Record
vsam
Record
z
File
Exception
set
Up
given
No
Invalid
Filename
when
Create
Vsam
Storage
then
Throw
Exception
given
Valid
Service
Id
Key
Value
then
It
Is
Properly
Returned
given
The
Key
Already
Exists
then
Exception
Is
Thrown
given
The
Size
Was
Exceeded
then
The
Exception
Is
Thrown
In
Reject
given
Key
Is
In
Cache
then
It
Is
Returned
given
Key
Isnt
In
Cache
then
Exception
Is
Thrown
given
Key
Is
In
Cache
then
It
Is
Updated
given
Key
Isnt
In
Cache
then
Exception
Is
Thrown
given
Key
Is
In
Cache
then
It
Is
Deleted
given
Key
Isnt
In
Cache
then
Exception
Is
Thrown
given
Value
For
Service
then
All
Are
Returned
given
Valid
Vsam
File
Is
Created
then
All
Are
Removed
then
Throw
Exception
then
Throw
Exception
then
Throw
Exception
then
Throw
Exception
then
Throw
Exception
set
Up
given
Invalid
Name
Exception
Is
Thrown
given
Valid
Name
Jzos
Not
Found
set
Up
remove
Oldest
set
Up
given
Default
Storage
Constructor
when
Storage
Constructed
then
Can
Use
Storage
given
There
Is
No
Value
For
Service
then
It
Is
Stored
given
The
Storage
Is
Full
And
Strategy
Is
Reject
then
The
Insufficient
Storage
Exception
Is
Raised
given
The
Storage
Is
Full
And
Strategy
Is
Remove
Oldest
then
The
Oldest
Error
Is
Evicted
given
There
Is
Value
For
Service
then
It
Is
Replaced
given
There
Is
No
Service
Cache
then
Null
Is
Returned
given
There
Is
No
Key
then
Null
Is
Returned
given
Value
Was
Already
Added
To
The
Storage
then
It
Will
Be
Returned
given
No
Value
Was
Stored
For
The
Service
then
Null
Will
Be
Returned
given
Key
Doesnt
Exist
then
Null
Is
Returned
given
Service
Storage
Doesnt
Exist
then
Null
Is
Returned
given
Key
Exists
then
Key
Value
Is
Returned
And
Key
Is
Removed
given
Service
Has
Stored
Values
then
All
Are
Returned
given
Service
Has
Stored
Values
then
None
Remains
then
Throw
Exception
then
Throw
Exception
then
Throw
Exception
then
Throw
Exception
then
Throw
Exception
set
Up
evict
Throws
Exception
setup
given
Null
Sentinel
then
Return
False
given
Sentinel
Not
Enabled
then
Return
False
given
Valid
Sentinel
then
Return
True
given
Username
And
Password
then
Use
Both
given
Only
Password
then
Use
Given
Password
And
Default
Username
given
No
Username
Or
Password
then
Use
Default
Username
And
No
Password
given
Password
then
Set
Password
given
No
Password
then
No
Password
given
Port
then
Set
Port
given
No
Port
then
Use
Default
Port
given
Username
And
Password
And
No
Port
given
Username
And
Password
And
Port
given
No
Credentials
And
Port
given
No
Credentials
And
No
Port
given
Null
Ssl
Config
then
Return
False
given
Ssl
Not
Enabled
then
Return
False
given
Enabled
Ssl
then
Return
True
set
Up
given
Tls
False
then
Return
Standard
Redis
Client
given
Redis
Config
when
Creating
Uri
With
Master
Replica
then
Return
Redis
Uri
With
Properties
use
Sentinel
given
No
Nodes
then
Throw
Illegal
State
Exception
given
Sentinel
Nodes
then
Return
Redis
Uri
set
Up
mock
Redis
Command
given
New
Entry
then
Return
True
given
Existing
Entry
then
Return
False
given
Redis
Out
Of
Memory
then
Throw
Out
Of
Memory
Exception
given
Interrupted
Exception
then
Throw
Retry
Exception
given
Execution
Exception
then
Throw
Retry
Exception
given
Redis
Entry
Exception
then
Return
False
given
Existing
Entry
then
Update
Entry
given
Existing
Entry
And
Failure
Updating
then
Dont
Update
Entry
given
Not
Existing
Entry
then
Dont
Update
Entry
given
Redis
Out
Of
Memory
then
Throw
Out
Of
Memory
Exception
given
Interrupted
Exception
then
Throw
Retry
Exception
given
Execution
Exception
then
Throw
Retry
Exception
given
Redis
Entry
Exception
then
Return
False
mock
Redis
Command
given
Existing
Key
then
Return
Entry
given
Not
Existing
Key
then
Return
Null
given
Key
With
Invalid
Serialized
Value
then
Return
Null
given
Interrupted
Exception
then
Throw
Retry
Exception
given
Execution
Exception
then
Throw
Retry
Exception
mock
Redis
Command
given
Entries
then
Return
List
Of
Entries
given
No
Entries
then
Return
Empty
List
given
Entry
With
Invalid
Serialized
Value
then
Return
Valid
Entries
given
Interrupted
Exception
then
Throw
Retry
Exception
given
Execution
Exception
then
Throw
Retry
Exception
mock
Redis
Command
given
Existing
Key
then
Delete
Key
given
Not
Existing
Key
then
Dont
Delete
Key
given
Interrupted
Exception
then
Throw
Retry
Exception
given
Execution
Exception
then
Throw
Retry
Exception
mock
Redis
Command
given
Existing
Entries
then
Delete
All
Entries
given
No
Entries
then
Return
False
given
Interrupted
Exception
then
Throw
Retry
Exception
given
Execution
Exception
then
Throw
Retry
Exception
given
Redis
Execution
Exception
Not
Out
Of
Memory
then
Throw
Retryable
Redis
Exception
given
Connection
And
Client
then
Close
Connection
And
Client
given
Connection
then
Close
Connection
And
Not
Client
given
Client
then
Close
Client
And
Not
Connection
given
No
Connection
Or
Client
then
Close
Nothing
set
Up
given
New
Key
then
Create
Entry
given
Existing
Key
then
Throw
Exception
given
Redis
Out
Of
Memory
then
Throw
Exception
given
Existing
Key
then
Return
Key
Pair
given
Not
Existing
Key
then
Throw
Exception
given
Existing
Key
then
Update
Key
Pair
given
New
Key
then
Throw
Exception
given
Redis
Out
Of
Memory
then
Throw
Exception
given
Existing
Key
then
Remove
Key
given
New
Key
then
Throw
Exception
given
Service
With
Entries
then
Return
Entries
given
Service
With
No
Entries
then
Return
Empty
Map
given
Service
Id
then
Call
Delete
With
Service
Id
given
Failure
To
Delete
then
Dont
Throw
Exception
then
Throw
Exception
then
Throw
Exception
then
Throw
Exception
then
Throw
Exception
then
Throw
Exception
given
Key
Value
then
Directly
Use
Key
Value
given
Serialized
Key
Value
then
Deserialize
Key
Value
given
Invalid
Serialized
Key
Value
then
Throw
Exception
given
Null
Serialized
Key
Value
then
Throw
Exception
given
Serializable
Key
Value
then
Return
String
Json
given
Serializing
Error
then
Throw
Redis
Entry
Exception
then
Return
Message
And
Cause
when
Keyring
Url
Is
Invalid
And
Missing
Password
then
Fix
Keyring
Url
And
Set
Password
when
Keyring
Url
Is
Invalid
And
Set
Password
then
Fix
Keyring
Url
when
Keystore
then
Dont
Update
setup
create
Empty
Store
when
Read
then
Exception
Is
Thrown
when
Update
then
Exception
Is
Thrown
when
Add
New
return
Null
when
Delete
then
Exception
Is
Thrown
create
Store
With
Entry
exception
Is
Thrown
entry
Is
Returned
cache
Is
Updated
item
Is
Deleted
return
All
remove
All
create
Empty
Store
create
Store
With
Entry
add
Token
update
Token
return
Token
List
create
Storage
return
All
For
Given
Service
return
All
For
Another
Service
return
None
For
Unknown
Service
create
Storage
then
Evict
Items
when
Cache
Is
Requested
then
Return
Not
Null
set
Up
given
Storage
Returns
Valid
Values
then
Return
Proper
Values
given
Storage
Throws
Internal
Exception
then
Properly
Return
Error
given
Storage
Raises
No
Exception
then
Return
Ok
given
Storage
Throws
Internal
Exception
then
Properly
Return
Error
given
Storage
Returns
Valid
Value
then
Return
Proper
Value
given
No
Key
then
Response
Bad
Request
given
Store
With
No
Key
then
Response
Not
Found
given
Error
Reading
Storage
then
Response
Internal
Error
given
Storage
then
Response
Created
given
Storage
With
Existing
Key
then
Response
Conflict
given
Storage
With
Error
then
Response
Internal
Error
given
Storage
With
Key
then
Response
No
Content
given
Storage
With
No
Key
then
Response
Not
Found
given
Storage
With
Key
then
Response
No
Content
given
No
Key
then
Response
Bad
Request
given
Storage
With
No
Key
then
Response
Not
Found
given
No
Payload
when
Validate
Payload
then
Response
Bad
Request
given
Various
Key
Value
when
Validate
Payload
then
Response
Accordingly
provide
Strings
For
Given
Various
Key
Value
given
No
Certificate
Information
In
Header
when
Get
All
Values
then
Return
Unauthorized
set
Up
given
Service
Id
Header
then
Return
Proper
Values
given
Service
Id
Header
And
Certificate
Header
For
Read
For
Service
then
Return
Proper
Values
given
Correct
Payload
then
Store
given
Incorrect
Payload
then
Return
Bad
Request
given
Error
On
Transaction
then
Return
Internal
Error
given
Storage
With
Existing
Value
then
Response
Conflict
given
Correct
Request
then
Return
List
given
Correct
Request
then
Return
All
Lists
given
No
Certificate
Information
then
Return
Unauthorized
given
Error
Reading
Storage
then
Response
Bad
Request
given
Correct
Request
then
Remove
Tokens
And
Rules
given
In
Correct
Request
then
Return500
open
API
message
Service
tomcat
Customizer
web
Security
Customizer
filter
Chain
x509User
Details
Service
current
Time
main
on
Application
Event
vsam
get
Bytes
get
Key
Bytes
get
Service
Id
get
Key
Value
to
String
open
Zfile
close
create
handle
Record
Found
handle
No
Record
Found
read
update
delete
record
Operation
read
For
Service
delete
For
Service
service
Wide
Operation
read
Bytes
count
All
Records
open
Zfile
handle
Record
Found
handle
No
Record
Found
resolve
Valid
Record
storage
Warmup
warm
Up
Vsam
File
provide
Strategy
create
store
Map
Item
get
All
Map
Items
get
All
Maps
above
Threshold
read
update
delete
read
For
Service
delete
For
Service
remove
Non
Relevant
Tokens
remove
Non
Relevant
Rules
evict
remove
Oldest
Record
check
And
Remove
Record
new
Vsam
File
eviction
Strategy
to
String
get
Key
get
Key
get
Key
Bytes
get
Key
Bytes
get
Key
Sid
Only
get
Key
Bytes
Sid
Only
in
Memory
create
store
Map
Item
get
All
Map
Items
get
All
Maps
read
update
delete
read
For
Service
delete
For
Service
remove
Non
Relevant
Tokens
remove
Non
Relevant
Rules
is
Key
Not
In
Cache
above
Threshold
evict
get
Service
Id
get
Entry
get
Entry
As
String
init
uses
Sentinel
uses
Ssl
uri
Contains
Credentials
uri
Contains
Port
parse
Credentials
From
Uri
parse
Host
From
Uri
parse
Port
From
Uri
redis
create
Redis
Uri
create
Redis
Client
close
Connection
create
update
get
get
collect
Entries
delete
delete
handle
Write
Operation
Execution
Exception
handle
Interrupted
Exception
create
store
Map
Item
get
All
Map
Items
get
All
Maps
read
update
delete
read
For
Service
delete
For
Service
remove
Non
Relevant
Tokens
remove
Non
Relevant
Rules
update
Keyring
cache
Manager
lock
storage
create
store
Map
Item
get
All
Map
Items
get
All
Maps
read
update
delete
read
For
Service
delete
For
Service
remove
Non
Relevant
Tokens
remove
Token
remove
Non
Relevant
Rules
complete
Join
evict
evict
evict
create
store
Map
Item
get
All
Map
Items
get
All
Maps
read
update
delete
read
For
Service
delete
For
Service
remove
Non
Relevant
Rules
remove
Non
Relevant
Tokens
get
All
Values
delete
All
Values
get
Unauthorized
Response
get
Value
delete
create
Key
store
Map
Item
get
All
Map
Items
get
All
Maps
evict
Rules
evict
Tokens
update
exception
To
Response
key
Request
key
Value
Request
map
Key
Value
Request
get
Service
Id
get
Header
handle
Internal
Error
handle
Incompatible
Storage
Method
key
Not
In
Cache
invalid
Payload
check
For
Invalid
Payload
storage
Request
storage
Request
storage
Request
set
Up
then
Bad
Credentials
Error
then
Token
Not
Valid
Error
then
Token
Not
Provided
Error
then
Token
Not
In
Response
Error
then
Auth
General
Error
then
Credentials
Not
Found
Error
then
Auth
Method
Not
Supported
Error
then
Generic
Error
With
No
Log
Message
then
Generic
Error
With
Log
Message
then
Gateway
Not
Available
Error
then
Service
Unavailable
Error
then
Http
Server
Error
then
User
Suspended
Error
then
Invalid
New
Password
Error
then
Expired
Password
Error
should
Authenticate
Valid
Token
should
Support
Token
Authentication
should
Not
Support
Generic
Authentication
setup
setup
given
Valid
Auth
then
Get
Token
given
Valid
Update
Password
Request
then
Get
Token
given
Valid
Auth
then
Successful
Response
given
Gateway
Unauthorized
then
Throw
Exception
setup
given
Invalid
Message
Key
given
Gateway
Unauthorized
then
Throw
Exception
given
Valid
Message
Key
then
Handle
Error
Type
For
That
Message
Key
given
Invalid
Username
Password
given
Valid
Login
Request
With
Username
Password
given
Valid
Username
Password
given
Username
Password
Authentication
Token
should
Not
Support
Generic
Authentication
gateway
Instance
Initializer
message
Service
handle
Error
Type
handle
Exception
add
Debug
Message
authenticate
supports
login
query
get
Error
Type
extract
Token
authenticate
supports
tear
Down
it
Doesnt
Modify
Context
it
Doesnt
Modify
Context
it
Registers
New
Beans
it
Doesnt
Replace
It
set
Up
get
Test
Resources
Path
it
Returns
No
Packages
To
Scan
it
Returns
Package
Name
To
Scan
it
Returns
Package
Name
To
Scan
it
Returns
No
Packages
To
Scan
plugin
Dir
Is
Not
Set
Locally
installed
Components
Are
Not
Set
enabled
Components
Are
Not
Set
extension
Directory
Is
Not
Set
workspace
Directory
Is
Not
Set
default
Env
get
Plugins
Dir
get
Components
get
Installed
Components
get
Enabled
Components
get
Extension
Directory
get
Workspace
Directory
on
Application
Event
get
Base
Packages
get
Enabled
Extensions
read
Component
Manifest
read
Component
Manifest
With
Charset
main
init
then
Container
Cache
Is
Populated
then
Api
Doc
Cache
Is
Populated
then
Version
Cache
Is
Populated
read
Test
Data
init
given
Definition
Directory
Not
Exist
when
Initialize
Cache
given
Api
Doc
Invalid
Name
when
Initialize
Cache
given
Invalid
App
Json
when
Initialize
Cache
set
Test
Data
when
Retrieve
Api
Doc
when
Retrieve
Default
Api
Doc
when
Retrieve
Api
Versions
when
Retrieve
Default
Api
Version
when
Retrieve
Api
Doc
when
Retrieve
Default
Api
Doc
when
Retrieve
Api
Versions
when
Retrieve
Default
Api
Version
gateway
Config
Properties
For
Mock
test
Event
Is
Called
Only
Once
not
Called
If
Standalone
Disabled
mock
Context
get
Standalone
Initializer
test1
existing
Get
Example
non
Existing
Get
Example
replay
ant
Matcher
Is
Working
when
Default
Then
Return200
when
Is
Numeric
Then
Parse
when
Is
Not
Numeric
Then
Return0
create
Operation
when
Contains
Success
Response
Code
when
Doesnt
Contains
Success
Response
Code
when
Is
Empty
test
Status
Is
Up
When
Gateway
Is
Available
test
Status
Is
Down
When
Gateway
Is
Not
Available
create
Containers
Services
And
Instances
mock
Service
Retrieval
From
Cache
create
Instance
generate
Instances
And
Services
add
Instances
To
Applications
add
Api
Service
get
Instance
create
App
create
Instance
create
Instance
create
Instance
create
Instance
create
Instance
when
Version
Is
Lower
then
Return
Minus
One
when
Version
Is
Higher
then
Return
One
set
Up
get
Catalog
Uri
With
Path
test
Context
Starts
then
Return
Message
given
Security
Scheme
when
It
Is
Serializing
To
Json
then
Enum
Types
Should
Printed
Lowercase
get
Dummy
Scheme
setup
test
Transform
Api
Doc
when
There
Is
Not
Api
Doc
Match
test
Transform
Api
Doc
when
Swagger
Doc
Is
Present
test
Transform
Api
Doc
when
Open
Doc
Is
Present
test
Parse
Api
Info
test
Parse
Api
Info
With
Gateway
Url
Slashes
transform
Api
Doc
update
Paths
update
External
Doc
set
Up
given
Swagger
Json
when
Get
Api
Doc
Service
then
Return
Api
Doc
V2Service
given
Open
Api
Json
when
Get
Api
Doc
Service
then
Return
Api
Doc
V3Service
given
Swagger
Yml
when
Get
Api
Doc
Service
then
Return
Api
Doc
V2Service
given
Open
Api
Yml
when
Get
Api
Doc
Service
then
Return
Api
Doc
V3Service
given
Api
Doc
Not
In
Open
Api
Nor
Swagger
when
Get
Api
Doc
Service
then
Return
Null
given
Ap
Doc
Version
Is
Not
As
Expected
Format
when
Get
Api
Doc
Service
then
Throw
Exception
set
Up
given
Routed
Url
And
Endpoint
when
Get
Short
Endpoint
then
Return
Endpoint
given
Path
And
Endpoint
then
Return
Them
given
Base
Path
And
Endpoint
That
Will
Result
In
Malformed
Url
then
Return
Normalized
Endpoint
given
Swagger
Template
Character
then
Return
Template
Not
Normalized
given
Routed
Endpoint
when
Get
Endpoint
Pairs
then
Return
Routed
Pair
given
Null
Api
Info
when
Get
Routed
Service
By
Api
Info
then
Return
Null
given
Swagger
Doc
when
Prepare
Paths
then
Setpaths
In
Swagger
Doc
convert
Open
Api
To
Json
get
Dummy
Open
Api
Object
get
Properties
set
Up
given
Swagger
Json
Not
As
Expected
Format
when
Convert
To
Swagger
then
Throw
IO
Exception
given
Swagger
Valid
Json
given
Swagger
Valid
Yaml
given
Api
Info
Null
And
Base
Path
As
Not
Root
given
Api
Info
Null
And
Base
Path
As
Root
given
Multiple
Routed
Service
given
Service
Url
As
Root
given
Apiml
Hidden
Tag
then
Should
Be
Same
Description
And
Paths
verify
Swagger2
given
Input
File
then
Parse
It
Correctly
update
External
Doc
convert
Swagger
To
Json
convert
Swagger
To
Yaml
write
Open
Api
As
String
convert
Json
To
Swagger
convert
Yaml
To
Swagger
read
String
To
Open
Api
get
Dummy
Swagger
Object
get
Properties
set
Up
given
Open
Api
Valid
Json
given
Open
Api
Valid
Yaml
given
Empty
Json
given
Invalid
Json
given
Valid
Api
Doc
then
Dont
Capitalize
Enums
verify
Open
Api3
given
Input
File
then
Parse
It
Correctly
update
External
Doc
convert
Open
Api
To
Json
convert
Open
Api
To
Yaml
write
Open
Api
As
String
convert
Json
To
Open
Api
convert
Yaml
To
Open
Api
read
String
To
Open
Api
get
Dummy
Open
Api
Object
get
Properties
test
Creation
Of
Object
And
Values
Set
test
Equals
And
Has
Code
test
Returning
No
Services
test
Returning
One
Service
test
Get
A
Service
get
Standard
Instance
set
Up
prepare
Instances
create
New
update
assert
That
Container
Is
Correct
assert
That
Instance
Is
Correct
assert
That
Metadata
Are
Correct
prepare
Existing
Instance
tile
Isnt
Present
In
Cache
prepare
Tile
With
Multiple
Instances
Of
Same
Service
tile
Is
In
Cache
But
Service
Isnt
In
Tile
prepare
Tile
With
Multiple
Instances
Of
Same
Service
tile
Is
In
Cache
But
Service
Isnt
In
Tile
nothing
Happens
return
Existing
Tiles
return
Only
One
Service
prepare
Applications
container
Status
Is
Up
container
Status
Is
Down
container
Status
Is
Warning
group
Them
return
Non
Sso
return
Sso
then
Set
To
Api
Service
assert
That
Container
Has
Valid
State
no
Services
Are
Within
The
Container
set
Up
when
Retrieving
when
Updating
given
Invalid
Api
Doc
when
Retrieving
then
Throw
Exception
when
Retrieving
when
Updating
given
Invalid
Api
Version
when
Retrieving
then
Throw
Exception
when
Retrieving
Default
then
Return
Latest
Api
when
Updating
Default
then
Retrieve
Default
when
Retrieving
Default
Noc
Content
then
Exception
given
Invalid
Api
Doc
when
Retrieving
Default
then
Throw
Exception
when
Retrieve
Default
Version
when
Update
Default
Version
given
Error
Retrieving
Default
Api
Version
when
Get
Default
Version
then
Throw
Exception
retrieve
And
Register
All
Instances
With
Catalog
only
Once
then
Return
Message
given
Cached
Services
when
Get
Cached
Applications
State
then
Return
State
given
Containers
when
Get
Containers
State
Events
then
Return
Events
when
Get
Api
Doc
For
Service
then
Successful
Response
when
Get
Default
Api
Doc
For
Service
then
Successful
Response
when
Get
Api
Diff
then
Returns
Api
Diff
given
Invalid
AP
Is
when
Difference
Is
Produced
then
The
Proper
Exception
Is
Raised
given
Updated
Containers
when
Get
Recently
Updated
Containers
then
Updated
Containers
Are
Returned
create
Containers
get
Standard
Instance
setup
given
Valid
Api
Info
then
Return
Api
Doc
given
No
Api
Doc
Found
For
Service
given
Server
Error
When
Requesting
Swagger
Url
given
No
Instance
Metadata
given
No
Swagger
Url
then
Return
Substitute
Api
Doc
given
Api
Doc
Url
In
Routing
then
Create
Api
Doc
Url
From
Routing
And
Return
Api
Doc
should
Create
Api
Doc
Url
From
Routing
And
Use
Http
then
Return
Api
Doc
when
Incorrect
Response
From
Server
then
Return
Default
Doc
given
Default
Api
Doc
then
Return
It
given
No
Default
Api
Doc
then
Return
Highest
Version
given
No
Default
Api
Doc
And
Different
Version
Format
then
Return
Highest
Version
given
No
Api
Docs
then
Return
Null
given
Api
Versions
then
Return
Them
given
No
Api
Versions
then
Throw
Exception
given
Default
Api
Version
then
Return
It
given
No
Default
Api
Version
then
Return
Highest
Version
given
No
Api
Info
then
Throw
Exception
get
Standard
Instance
get
Standard
Metadata
get
Metadata
Without
Swagger
Url
get
Metadata
With
Multiple
Api
Info
get
Metadata
With
Multiple
Api
Info
With
Different
Version
Format
get
Metadata
Without
Api
Info
get
Properties
given
Service
Not
Found
Exception
when
Call
Refresh
API
then
Response
Should
Be503With
Specific
Message
given
Rest
Client
Exception
when
Call
Refresh
API
then
Response
Should
Be500With
Specific
Message
given
Success
Static
Response
when
Call
Refresh
API
then
Response
Code
Should
Be200
message
Service
static
API
Refresh
Controller
Exception
Handler
api
Catalog
Controller
static
Definition
Controller
Exception
Handler
static
API
Refresh
Controller
setup
given
Refresh
API
With
Secure
Discovery
Service
then
Return
Api
Response
Code
With
Body
given
Refresh
API
With
Un
Secure
Discovery
Service
then
Return
Api
Response
Code
With
Body
setup
when
First
Succeeds
then
Return
Response
From
First
when
First
Fails
then
Return
Response
From
Second
when
Both
Fail
then
Return
Response
From
Second
given
No
Discovery
Locations
when
Attempt
Refresh
then
Return500
mock
Rest
Template
Exchange
then
Response
Should
Be500With
Specific
Message
then
Response
Is400
then
Response
Should
Be409With
Specific
Message
then
Response
Is201
then
Response
Is201
given
Valid
Id
then
Response
Is
OK
set
Up
given
Request
With
Invalid
Service
Id
then
Throw400
given
Delete
Request
With
Invalid
Service
Id
then
Throw400
given
Create
Request
With
Valid
Service
Id
then
Status
OK
given
Delete
Request
With
Valid
Service
Id
then
Status
OK
given
Delete
Non
Existing
File
Request
then
Status
Not
Found
given
File
Already
Exists
then
Throw
Exception
set
Up
given
Invalid
Request
then
Throw
Exception
given
Valid
Service
Id
then
Response
Is
OK
discovery
Config
Properties
setup
when
Discovery
Service
Is
Not
Available
then
Try
Others
From
The
List
test
Get
Instance
Info
when
Service
Id
Is
UNKNOWN
provided
No
Instance
Info
Is
Returned
then
Instance
Initialization
Exception
Is
Thrown
test
Get
Instance
Info
when
Response
Has
Empty
Body
test
Get
Instance
Info
when
Response
Code
Is
Success
With
Un
Parsed
Json
Text
test
Get
Instance
Info
when
Unexpected
Error
Happened
test
Get
Instance
Info
test
Get
All
Instances
From
Discovery
when
Response
Code
Is
Not
Success
test
Get
All
Instances
From
Discovery
when
Response
Code
Is
Success
With
Un
Parsed
Json
Text
test
Get
All
Instances
From
Discovery
when
Need
Applications
Without
Filter
test
Get
All
Instances
From
Discovery
when
Need
Applications
With
Delta
Filter
create
Instances
get
Standard
Instance
test
Retrieve
And
Register
All
Instances
With
Catalog
should
Throw
Exception
When
Catalog
Not
Found
should
Throw
Retry
Exception
On
Instance
Initialization
Exception
should
Throw
Retry
Exception
On
Gateway
Not
Available
Exception
create
Instances
get
Metadata
By
Catalog
Ui
Title
Id
get
Standard
Instance
setup
prepare
State
prepare
Application
add
Service
To
Cache
prepare
Service
service
Is
Removed
From
Cache
service
Is
Modified
In
Cache
teach
Mocks
cache
Isnt
Updated
cache
Isnt
Updated
add
Api
Catalog
To
Cache
catalog
Api
Doc
Controller
message
Service
catalog
Api
Doc
Controller
Exception
Handler
get
Containers
catalog
Api
Doc
Controller
message
Service
catalog
Api
Doc
Controller
Exception
Handler
get
Api
Doc
And
Fail
Then
Throw
Api
Doc
Not
Found
Exception
setup
when
Create
Controller
then
It
Is
Instantiated
given
Api
Doc
then
Return
Api
Doc
given
No
Api
Doc
then
Throw
Exception
given
Api
Doc
Exists
then
Return
It
given
No
Api
Doc
Exists
then
Throw
Exception
when
Get
Api
Diff
then
Return
Api
Diff
Html
when
Get
Request
when
Post
Request
mock
Controller
set
Up
then
Download
Image
then
Download
Image
then
Download
Image
then
Return
File
Not
Found
api
Catalog
Controller
message
Service
api
Catalog
Controller
Exception
Handler
get
Api
Doc
For
Service
Down
set
Up
then
Return
No
Content
then
Return
Ok
prepare
Applications
then
Return
Containers
With
State
then
Populate
Api
Doc
For
Services
then
Populate
Api
Doc
For
Services
Except
One
Which
Fails
then
Populate
Api
Versions
For
Services
Except
One
Which
Fails
assert
There
Is
One
Container
create
Containers
get
Standard
Instance
test
On
Logout
Success
message
Service
Catalog
transform
Service
add
Resource
Handlers
cache
Manager
servlet
Container
initialize
Cache
load
Application
Cache
load
Open
API
Cache
create
Container
From
File
create
Api
Doc
Info
load
Api
Doc
Cache
load
Api
Doc
Version
Cache
get
Files
retrieve
Api
Doc
retrieve
Default
Api
Doc
retrieve
Api
Versions
retrieve
Default
Api
Version
gateway
Config
Properties
For
Mock
add
Example
get
First
Api
Responses
get
Response
Code
generate
Example
generate
Examples
get
Example
reply
Example
is
Matching
init
permit
All
on
Application
Event
is
Standalone
do
Health
Check
title
description
status
secured
base
Url
home
Page
Url
base
Path
api
Doc
sso
instance
Id
apis
build
add
Service
update
Last
Updated
Timestamp
is
Recent
Updated
compare
To
main
open
Api
generate
Substitute
Swagger
For
Service
transform
Api
Doc
serialize
add
Prefix
add
Short
Path
add
Long
Path
transform
Api
Doc
update
Paths
update
External
Doc
get
Hostname
prepare
Path
get
End
Point
get
End
Point
Pairs
get
Short
End
Point
get
Routed
Service
By
Api
Info
transform
Api
Doc
update
Scheme
Host
And
Link
update
Paths
update
External
Doc
get
Open
Api
Link
get
Base
Path
bean
Api
Doc
Factory
abstract
Api
Doc
Service
transform
Api
Doc
update
Server
And
Link
update
Paths
get
Best
Matching
Server
get
Base
Path
update
External
Doc
update
Server
Url
is
Hidden
initialize
Object
Mapper
get
All
Containers
get
Container
By
Id
get
Recently
Updated
Containers
add
Service
To
Container
save
Container
From
Instance
remove
Instance
calculate
Container
Service
Values
set
Custom
Ui
Config
get
Container
Count
get
Instance
Home
Page
Url
get
Api
Base
Path
has
Home
Page
create
New
Container
From
Service
create
API
Service
From
Instance
is
Sso
update
set
Status
get
All
Cached
Services
get
Service
update
Service
clear
All
Services
get
Version
Delta
set
Version
Delta
get
Api
Doc
For
Service
update
Api
Doc
For
Service
get
Default
Api
Doc
For
Service
update
Default
Api
Doc
For
Service
get
Api
Versions
For
Service
update
Api
Versions
For
Service
get
Default
Api
Version
For
Service
update
Default
Api
Version
For
Service
reset
Cache
on
Application
Event
on
Application
Event
fill
In
Stack
Trace
fill
In
Stack
Trace
get
Cached
Application
State
Response
get
Cached
Application
State
get
Containers
State
As
Events
get
Service
Cached
Api
Doc
Info
get
Service
Cached
Default
Api
Doc
Info
get
Api
Diff
Info
get
Recently
Updated
Containers
As
Events
add
Container
Event
create
Headers
set
Time
Stamp
from
Contents
retrieve
Api
Versions
retrieve
Api
Versions
retrieve
Default
Api
Version
retrieve
Default
Api
Version
retrieve
Api
Doc
build
Api
Doc
Info
retrieve
Default
Api
Doc
get
Default
Api
Info
get
Api
Info
Set
As
Default
get
Highest
Api
Version
is
Higher
Version
get
Major
Version
get
Api
Doc
Url
get
Api
Doc
Content
By
Url
get
Api
Doc
Info
By
Substitute
Swagger
find
Api
get
Instance
Info
create
Api
Doc
Url
From
Routing
generate
Static
Def
override
Static
Def
delete
Static
Def
refresh
is
Successful
get
Http
Request
get
Discovery
Service
Urls
generate
File
override
File
delete
File
get
Absolute
Path
get
Invalid
Response
normalize
To
Unix
Line
Endings
write
Content
To
File
check
If
File
Exists
retrieve
Static
Def
Location
service
Id
Is
Valid
handle
Service
Not
Found
Exception
handle
Service
Not
Found
Exception
refresh
Static
Apis
handle
IO
Exception
handle
File
Already
Exists
Exception
start
refresh
Cache
From
Discovery
compare
Services
process
Service
Instances
process
Service
Instance
process
Instance
update
Service
update
Container
update
Delta
get
Instance
Info
get
All
Instances
From
Discovery
extract
Applications
query
Discovery
For
Instances
extract
Single
Instance
From
Application
construct
Service
Info
Query
Request
create
Request
Header
retrieve
And
Register
All
Instances
With
Catalog
recover
update
Cache
With
All
Instances
create
Containers
get
All
Instances
handle
Service
Not
Found
Exception
handle
Api
Doc
Not
Found
Exception
handle
Service
Not
Found
Exception
handle
Error
get
Error
Path
customize
mock
Endpoint
get
Api
Doc
Info
get
Default
Api
Doc
Info
get
Api
Diff
download
Image
get
All
API
Containers
get
API
Container
By
Id
set
Api
Doc
To
Service
to
List
basic
Auth
Or
Token
Or
Cert
Api
Doc
Filter
Chain
x509User
Details
Service
reversed
Categorize
Cert
Filter
web
Security
Customizer
basic
Auth
Or
Token
All
Endpoints
Filter
Chain
base
Configuration
mainframe
Credentials
Configuration
configure
login
Filter
basic
Filter
cookie
Filter
bearer
Content
Filter
logout
Success
Handler
on
Logout
Success
setup
Method
get
Token
get
Dummy
Key
get
Config
Properties
get
Auth
Header
prepare
Response
prepare
Response
For
Server
Unavailable
prepare
Response
For
Unexpected
Exception
assert
That
Exception
Contain
Valid
Code
test
Login
With
Credentials
Valid
User
Name
Valid
Password
provide
Invalid
Username
Password
give
Invalid
Credentials
when
Login
Is
Requested
then
Proper
Exception
Is
Raised
test
Login
With
Credentials
Server
Unavailable
test
Login
With
Credentials
Unexpected
Exception
test
Login
With
Auth
Header
Valid
User
Name
Valid
Password
provide
Invalid
Auth
Headers
do
Login
With
Auth
Header
In
Valid
Username
test
Login
With
Auth
Header
Server
Unavailable
test
Login
With
Auth
Header
Unexpected
Exception
test
Query
With
Correct
Token
Valid
Token
Valid
Token
Details
test
Query
With
Token
Invalid
Token
Zaas
Client
Exception
test
Query
With
Token
Expired
Token
Zaas
Client
Exception
test
Query
With
Token
When
Response
Code
Is404
Zaas
Client
Exception
test
Login
With
Token
When
Response
Code
Is400
Zaas
Client
Exception
test
Pass
Ticket
With
Token
Valid
Token
Valid
Pass
Ticket
given
Valid
Token
when
Logout
then
Success
given
Invalid
Token
when
Logout
then
Throw
Exception
given
Valid
Token
In
Bearer
when
Logout
then
Success
given
Logout
Request
when
Response
Code
Is401
then
Throw
Exception
given
Logout
Call
when
Get
IO
Exception
then
Throw
Exception
test
Http
Client
Provider
Can
Create
Http
Client
setup
get
Config
Properties
test
Get
Https
Client
With
Key
Store
And
Trust
Store
give
No
Key
Store
Path
when
The
Client
Is
Constructed
then
Empty
Key
Store
Is
Used
when
Get
Https
Client
With
Key
Store
And
Trust
Store
then
Identical
Client
Returned
given
Null
Trust
Store
when
The
Client
Is
Constructed
then
Exceptions
Is
Thrown
give
Invalid
Trust
Store
Path
when
The
Client
Is
Constructed
then
Exceptions
Is
Thrown
given
Invalid
Key
Store
Path
when
The
Client
Is
Constructed
then
Exception
Is
Thrown
given
Invalid
Key
Store
Type
when
The
Client
Is
Constructed
then
Exception
Is
Thrown
given
Invalid
Trust
Store
Type
when
The
Client
Is
Constructed
then
Exception
Is
Thrown
is
Keyring
Returns
True
If
It
Is
Valid
format
Keyring
Url
Fix
The
Format
If
Possible
set
Up
assert
That
Exception
Contain
Valid
Code
provide
Invalid
Username
Password
provide
Valid
Username
Password
With
Invalid
New
Password
given
Fully
Invalid
Credentials
when
Logging
In
then
Exception
Is
Raised
given
Fully
Invalid
Credentials
when
Logging
In
With
Password
Change
then
Exception
Is
Raised
provide
Null
Empty
Arguments
given
Fully
Invalid
Authorization
Header
when
Logging
In
then
Exception
Is
Raised
provide
Invalid
Pass
Ticket
Source
given
Fully
Invalid
Application
Id
when
Getting
Passticket
then
Exception
Is
Raised
given
Valid
Credentials
when
Login
Api
Is
Called
then
Raised
Exception
Is
Rethrown
given
Valid
Credentials
when
Login
With
Password
Change
Api
Is
Called
then
Raised
Exception
Is
Rethrown
given
Valid
Token
when
Login
Api
Is
Called
then
Raised
Exception
Is
Rethrown
given
Valid
Token
when
Query
Api
Is
Called
then
Raised
Exception
Is
Rethrown
given
Valid
Token
Appl
Id
when
Pass
Ticket
Api
Is
Called
then
Raised
Client
Exception
Is
Rethrown
given
Invalid
Key
Configuration
when
Pass
Ticket
Api
Is
Called
then
Raised
Configuration
Exception
Is
Rethrown
given
Valid
Token
when
Logout
Is
Called
then
Success
Logout
given
Null
Key
Store
Path
when
The
Client
Is
Constructed
then
Exception
Is
Thrown
create
Config
Properties
when
Call
Deprecated
Login
then
The
New
Method
Is
Called
And
Temp
Memory
Erased
when
Call
Deprecated
Login
With
Nulls
then
It
Works
when
Call
Deprecated
Login
To
Change
Password
then
The
New
Method
Is
Called
And
Temp
Memory
Erased
when
Call
Deprecated
Login
To
Change
Password
With
Nulls
then
It
Works
set
Up
given
Jwt
Token
when
Logout
then
Set
Cookie
given
Authorization
Header
With
Jwt
Token
when
Logout
then
Authorization
Header
given
Valid
Jwt
Token
when
Query
Token
then
Return
Token
given
No
Jwt
Token
when
Query
Token
then
Throw
Exception
given
Empty
Jwt
Token
when
Query
Token
then
Throw
Exception
given
Invalid
Jwt
Token
when
Query
Token
then
Throw
Exception
given
Expired
Token
when
Query
Token
then
Throw
Exception
given
Jwt
Token
In
Cookie
when
Query
Request
then
Return
Token
given
Jwt
Token
In
Header
when
Query
Request
then
Return
Token
given
No
Jwt
Token
In
Request
when
Query
Request
then
Throw
Exception
given
Headers
And
Cookies
But
No
Token
In
Request
when
Query
Request
then
Throw
Exception
given
Header
With
Empty
Authorization
when
Query
Request
then
Throw
Exception
given
Expired
Password
when
Login
then
Throw
Exception
given
Expired
Password
when
Query
then
Throw
Exception
mock
Http
Client
mock
Http
Client
zaas
Client
Test
Assert
Throws
test
Http
Only
Zaas
Client
Can
Be
Created
given
Base
Url
then
Transform
To
Or
Dont
Change
Zowe
V2Base
Url
given
Base
Url
then
Normalize
It
given
Base
Url
Is
Null
then
Transform
To
Zowe
V2Base
Url
get
Id
get
Message
to
String
get
Id
get
Message
get
Return
Code
by
Error
Number
to
String
get
Error
Code
get
Error
Code
get
Config
Properties
zaas
Client
without
Key
Store
set
Apiml
Base
Url
login
login
login
query
query
logout
is
Keyring
format
Keyring
Url
clear
Cookie
Store
get
Http
Client
initialize
Trust
Manager
Factory
initialize
Key
Store
Manager
Factory
get
Keystore
get
Empty
Keystore
get
Correct
Input
Stream
get
SSL
Context
shared
Http
Client
Configuration
build
Custom
Request
Config
login
login
login
With
Credentials
login
login
With
Header
query
query
logout
get
Jwt
Token
From
Request
get
Jwt
Token
From
Cookie
extract
Jwt
Token
From
Authorization
Header
query
With
Jwt
Token
logout
Jwt
Token
clear
Zaas
Client
Cookies
get
Client
With
Response
finally
Close
handle
Error
Message
handle
Error
Message
extract
Zaas
Token
extract
Token
do
Request
do
Request
extract
request
pass
Ticket
extract
Pass
Ticket
pass
Ticket
get
Http
Client
get
Token
Provider
get
Token
Provider
Without
Cert
get
Scheme
login
login
login
login
login
query
query
pass
Ticket
logout
login
login
login
login
login
query
query
pass
Ticket
logout
should
Set
System
Property
When
Property
Not
Set
should
Not
Set
System
Property
When
Property
Is
Set
From
Before
then
Filter
then
Filter
set
Up
given
Log
Level
And
Workspace
Directory
when
The
Application
Starts
then
The
Paramters
Are
Verified
given
Null
Log
Level
And
Workspace
Directory
when
The
Application
Starts
then
The
Logger
Doesnt
Start
given
Log
Level
And
Null
Workspace
Directory
when
The
Application
Starts
then
The
Logger
Doesnt
Start
given
Log
Level
And
Workspace
Directory
when
The
Application
Starts
then
The
Logger
Starts
set
Up
test
Decide
when
Application
Running
In
Debug
Mode
test
Decide
when
Logger
Level
Is
Low
Than
Info
test
Decide
when
Ignored
Messages
Are
Present
test
Decide
when
Ignored
Messages
Are
Present
With
Exception
set
Up
create
Active
Filter
In
Normal
Mode
create
Inactive
Filter
In
Debug
Mode
create
Inactive
Filter
In
Debug
Mode
With
Dev
Profile
filters
Level
Test
filters
Level
Test
With
Marker
package
Filter
Test
setup
clean
Up
given
Logs
And
Level
Filter
when
Search
then
Find
Logs
given
Logs
And
Level
Filter
when
Search
then
Find
No
Logs
given
Logs
And
Level
Filter
when
Check
Exist
then
Logs
Exist
given
Logs
And
Level
Filter
when
Check
Exist
then
Logs
Dont
Exist
given
Logs
when
Get
Logs
then
All
Logs
Found
given
Formatted
Log
when
Look
For
Log
then
Find
Formatted
Log
given
Log
Tracker
when
Clean
Up
then
Logs
Released
From
Tracking
test
Inject
apiml
Log
Injector
test
Component
setup
given
Multiple
Patterns
then
Return
Mask
Regex
For
Both
given
Jsons
then
Mask
Regex
With
Json
Format
setup
given
Nothing
To
Mask
then
No
Mask
given
Sensitive
Data
then
Mask
Data
initialize
post
Process
After
Initialization
post
Process
Before
Initialization
get
Class
decide
is
Low
Than
Info
Level
get
Filter
Reply
start
Tracking
stop
Tracking
contains
contains
contains
contains
search
search
search
search
count
Events
get
All
Logged
Events
get
All
Logged
Events
With
Level
start
verify
Startup
Params
decide
is
Level
Info
Or
Lower
is
Internal
Logger
do
Layout
mask
Message
add
add
add
Json
Value
build
decide
on
Service
Startup
run
configure
given
Url
Greeting
when
Send
Request
then
Receive
Greeting
given
Url
Greeting
With
Name
when
Send
Request
then
Receive
Greetingwith
Name
configure
given
Url
Application
Info
when
Send
Request
then
Receive
Info
Attributes
As
Empty
given
Url
Application
Health
when
Send
Request
then
Receive
Health
As
Up
test
On
Context
Creation
Register
With
Eureka
test
On
Context
Destroy
Unregister
With
Eureka
set
Valid
Parameters
To
context
Initialized
context
Destroyed
greeting
default
Greeting
get
Date
get
Content
get
Discovery
Info
get
Health
then
Return
Message
then
Return
Message
And
Cause
provided
Certificate
In
Correct
Format
then
Populate
Request
when
Exception
Occurs
then
Create
Correct
Response
when
Connection
Is
Secure
when
Connection
Is
Not
Secure
then
Respond
With
Error
Code
when
Context
Is
Not
Initialized
then
Respond
With
Error
Code
add
Header
when
Set
Header
Fails
then
Throw
Exception
when
Content
Should
Be
Empty
then
Return
True
when
G
Zipped
Body
Is
Empty
then
Return
True
given
String
On
Input
then
Compress
when
Request
Print
Writer
then
The
Same
Instance
Is
Returned
when
Print
Writer
Already
Created
then
Throw
Exception
When
Output
Stream
Is
Requested
setup
flush
Not
Null
Stream
when
Writer
Is
Requested
flush
Newly
Created
Buffer
close
Not
Null
Stream
when
Writer
Is
Requested
close
Newly
Created
Buffer
set
Up
get
Connector
customize
when
Invalid
Format
And
Missing
Password
then
Fix
It
dont
Update
when
SSL
Host
Config
Contains
A
Certificate
provided
Correct
Protocol
In
Connector
endpoint
Is
Configured
when
Socket
Arrives
file
Descriptor
Is
Obtained
get
Socket
Warapper
flush
Non
Blocking
populate
Remote
Host
populate
Remote
Addr
populate
Remote
Port
populate
Local
Name
populate
Local
Addr
populate
Local
Port
read
read
is
Ready
For
Read
set
App
Read
Buf
Handler
do
Close
do
Write
register
Read
Interest
register
Write
Interest
create
Sendfile
Data
process
Sendfile
do
Client
Auth
get
Ssl
Support
new
Operation
State
get
Ssl
Support
fire
Event
Started
customize
Connector
create
Customizer
set
Up
given
Customized
Connector
when
Tcpip
Is
Ready
then
Return
Accepted
given
Customized
Connector
when
Tcpip
Is
Restarted
then
Rebind
given
Customized
Connector
when
Tcpip
Is
Restarted
then
Wait
For
Tcp
Ip
And
Rebind
given
Customized
Connector
when
Socket
Cannot
Be
Closed
then
Throw
Exception
given
Customized
Connector
when
Accept
Fails
then
Throw
Exception
given
Non
Nio
Protocol
when
Customize
then
Not
Customized
given
Non
Abstract
Protocol
when
Customize
then
Not
Customized
given
Supported
Protocol
when
Non
Started
Event
then
Not
Customized
given
Restarted
Tcpip
Stack
when
Service
Shuting
Down
then
Stop
given
Io
Exception
when
Impl
Close
Selectable
Channel
then
Is
Propagated
impl
Close
Selectable
Channel
given
Runtime
Exception
when
Impl
Close
Selectable
Channel
then
Is
Propagated
impl
Close
Selectable
Channel
given
Io
Exception
when
Impl
Configure
Blocking
then
Is
Propagated
impl
Configure
Blocking
given
Runtime
Exception
when
Impl
Configure
Blocking
then
Is
Propagated
impl
Configure
Blocking
set
Server
Socket
bind
server
Socket
Accept
impl
Close
Selectable
Channel
impl
Configure
Blocking
bind
set
Option
get
Option
supported
Options
socket
accept
get
Local
Address
do
Filter
Internal
populate
Request
With
Certificate
handle
Error
do
Filter
Internal
close
flush
write
write
write
is
Ready
set
Write
Listener
should
Gzipped
Body
Be
Zero
should
Body
Be
Zero
add
Gzip
Header
close
flush
Buffer
flush
get
Output
Stream
get
Writer
set
Content
Length
set
Disable
Flush
Buffer
after
Properties
Set
customize
customize
Connector
process
get
Global
get
Open
Sockets
release
pause
recycle
update
update
tomcat
Acceptor
Fix
stopping
impl
Close
Selectable
Channel
impl
Configure
Blocking
bind
With
Wait
rebind
accept
accept
valid
Ops
bind
provider
is
Registered
key
For
register
impl
Close
Channel
is
Blocking
blocking
Lock
configure
Blocking
register
close
is
Open
fix
Default
Certificate
is
Keyring
format
Keyring
Url
customize
test
Init
test
Init
set
Up
test
Is
Using
Saf
Implementation
test
Init
evaluate
generate
test
Proxy
test
Default
Pass
Ticket
Impl
Evaluate
Passticket
test
Default
Pass
Ticket
Impl
Evaluate
Two
Pass
Tickets
test
Default
Pass
Ticket
Impl
Evaluate
Wrong
Passticket
test
Default
Pass
Ticket
Impl
Evaluate
Any
Passticket
test
Default
Pass
Ticket
Impl
Evaluate
Dummy
Passticket
test
Default
Pass
Ticket
Impl
Generate
Unknown
User
test
Default
Pass
Ticket
Impl
Generate
Dummy
User
test
Default
Pass
Ticket
Impl
Generate
Any
User
evaluate
generate
test
Error
Code
then
Return
Message
given
Environment
Variables
then
Return
True
given
Property
Variables
then
Return
True
given
Missing
Configuration
then
Return
False
should
Parse
Empty
List
From
Null
Map
should
Parse
Empty
List
From
Irrelevant
Map
should
Parse
Empty
List
From
Empty
Values
should
Parse
Bad
Routes
Index
To
Empty
Routes
should
Parse
Bad
Index
To
Empty
Registrations
set
Up
should
Parse
First
Additional
Registration
should
Parse
Additional
Registration
Without
Routes
should
Parse
Additional
Registration
With
Partially
Defined
Routes
should
Parse
Additional
Registration
Case
Insensitively
when
There
Is
No
Version
Return
Minus
One
when
There
Is
Major
Version
Return
It
load
Messages
test
Load
Messages
test
Load
Messages
when
Format
Is
Different
In
Yaml
File
test
Load
Messages
when
Yaml
File
Is
Not
Exist
test
Empty
test
Log
Level
test
Add
Message
Templates
test
Add
Message
Templates
when
Duplicated
Key
Messages
Are
Present
should
Create
Message
should
Return
Invalid
Message
If
Key
Invalid
should
Return
Invalid
Message
Text
Format
If
The
Format
Is
Illegal
should
Return
Invalid
Message
Text
Format
If
The
Param
Is
Missing
should
Create
Messages
If
Multiple
Parameters
Are
Passed
should
Not
Create
Messages
If
Empty
Parameters
Are
Passed
should
Not
Create
Messages
If
Empty
Parameter
List
Is
Passed
should
Throw
Exception
If
There
Are
Duplicated
Message
Numbers
init
test
Requested
Key
Param
when
It
Is
Null
test
Message
Template
Param
when
It
Is
Null
test
Message
Parameters
when
It
Is
Null
test
Check
Convert
Validation
when
There
Are
More
Param
Than
Requested
test
Check
Convert
Validation
when
There
Is
Wrong
Format
Than
Requested
test
Get
Converted
Text
test
Get
Converted
Text
when
Text
Contains
HTML
Entities
test
Map
To
Readable
Text
test
Map
To
View
test
Map
To
Api
Message
test
Map
To
Log
Message
create
Message
Template
test
From
Scheme
test
Is
Empty
test
Support
Sso
test
Not
Support
Sso
generate
test
Init
test
Equals
test
Hash
Code
test
To
String
test
Generate
then
Return
Message
then
Return
Message
And
Rc
then
Return
Message
And
Rc
when
Creating
Object
then
Throw
Exception
test
Set
Cookie
remove
Cookie
given
All
Attributes
Set
then
Return
Set
Cookie
With
Attributes
given
Null
Max
Age
then
Return
Set
Cookie
With
No
Max
Age
given
Not
Http
Only
then
Return
Set
Cookie
Without
Http
Only
given
Not
Secure
then
Return
Set
Cookie
Without
Secure
test
Trim
Slashes
get
Encoded
Url
Test
remove
First
And
Last
Slash
add
First
Slash
remove
Last
Slash
test
Get
Host
IP
Address
Unknown
Host
test
Get
Host
IP
Address
Ok
test
Get
IP
Address
From
Url
Ok
test
Is
Valid
Url
True
test
Is
Valid
Url
False
given
Map
when
Flattened
With
Root
Key
should
Return
Map
Keys
With
Root
Key
given
Map
With
Null
Value
when
Flattened
should
Return
Value
Empty
String
given
Map
With
Primitive
Values
when
Flattened
should
Return
Correct
Values
given
Map
With
Nested
Map
when
Flattened
should
Return
Flattened
given
Map
With
Nested
List
when
Flattened
should
Return
Exception
given
Map
With
Nested
Array
when
Flattened
should
Return
Exception
given
Map
With
Anything
Else
Than
Expected
when
Flattened
should
Return
Exception
test
Basics
specific
Constructor
Can
Be
Invoked
test
Override
test
Exception
Mapping
test
Exception
Mapping
Unkwnown
test
Missing
Method
method1
method2
method3
test
Syntentic
test
Implementation
With
Extends
test
Wrong
Mapping
test
Exception
Mapping
Source
Method
test
Cannot
Construct
Exception
when
Proxied
then
Call
Original
Method
when
Class
Is
Missing
then
Call
Mock
when
Method
Definitions
Are
Not
Matching
then
Use
Mock
get
Value
get
Value
get
Value
get
Msg
get
Msg
method1
method2
method3
method1
get
Implementation
Class
method1
get
Implementation
Class
method1
method2
method3
method1
method2
method3
method1
method2
method3
method1
get
Implementation
Class
do
Something
do
Something
set
Up
create
Entry
get
Key
get
Value
unwrap
test
Evict
Subset
given
Unknown
Cache
Name
when
Get
All
Records
then
Throws
Exception
given
No
Op
Cache
when
Get
All
Records
then
Empty
given
Unsupported
Cache
Manager
when
Get
All
Records
then
Throws
Exception
given
Valid
Cache
Manager
when
Get
All
Records
then
Read
All
Stored
Records
setup
register
Default
Config
register
Config
For
Service
register
Default
Config
For
Service
register
Config
For
Service
With
Custom
Origins
register
Empty
Default
Config
register
Empty
Config
For
Service
set
Allowed
Origins
set
Up
clean
Up
test
Locate
File
For
Null
test
Locate
File
As
Resource
test
Locate
File
As
Directory
test
Locate
File
Absolute
Path
test
Valid
Relative
Path
Exists
test
Valid
Relative
Path
Not
Exists
test
Invalid
Path
Exception
load
File
From
Relative
Path
test
Read
Configuration
File
Existing
read
Not
Existing
Configuration
test
create
Instance
Info
test
Get
Url
test
Require
Not
Null
test
Require
Not
Empty
test
Set
Api
Ml
Context
Map
Ok
test
Map
Merge
FULL
test
Map
Merge
PART
serviceid
keystore
truststore
get
Map2
get
Map1
test
Map
Merge
PART
serviceid
ciphers
test
Method1
test
Get
Method
Identifier
setup
given
Request
With
Cookie
Header
when
Get
All
Cookies
then
Retrieves
All
Cookies
given
Request
With
Cookie
Header
when
Get
Cookie
then
Retrieves
Cookies
given
Request
Without
Cookie
Header
when
Set
Cookie
then
Creates
Cookie
Header
And
Cookie
given
Request
With
Cookie
Header
when
Set
Cookie
then
Creates
Or
Overwrites
Cookie
given
Request
With
Cookie
Header
With
Single
Cookie
when
Remove
Cookie
then
Removes
Cookie
And
Header
given
Request
With
Cookie
Header
With
Multiple
Cookies
when
Remove
Cookie
then
Removes
Cookie
remove
First
And
Last
Occurrence
Test
remove
Last
Occurrence
Test
prepend
Substring
Test
test
Resolve
Expressions
setup
given
Request
Without
Headers
when
Get
Headers
then
Get
Empty
List
given
Request
With
Headers
when
Get
Headers
then
Get
List
With
Headers
given
Request
With
Headers
when
Get
Header
then
Get
Header
Or
Empty
given
Request
With
Headers
when
Set
Existing
Header
then
Header
Overwritten
given
Request
With
Headers
when
Set
New
Header
then
Header
Created
given
Request
With
Headers
when
Remove
Header
then
Header
Removed
given
Request
With
Cookie
Header
when
Get
All
Cookies
then
Retrieves
All
Cookies
given
Request
With
Cookie
Header
when
Get
Cookie
then
Retrieves
Cookies
given
Request
Without
Cookie
Header
when
Set
Cookie
then
Creates
Cookie
Header
And
Cookie
given
Request
With
Cookie
Header
when
Set
Cookie
then
Creates
Or
Overwrites
Cookie
given
Request
With
Cookie
Header
With
Single
Cookie
when
Remove
Cookie
then
Removes
Cookie
And
Header
given
Request
With
Cookie
Header
With
Multiple
Cookies
when
Remove
Cookie
then
Removes
Cookie
start
Tomcat
service
create
Https
Connector
get
Local
Port
main
set
Up
correct
Configuration
Should
Work
no
Trust
Store
Should
Fail
trust
Store
With
Different
Certificate
Authority
Should
Fail
trust
Store
With
Different
Certificate
Authority
Should
Not
Fail
When
Certificate
Validation
Is
Disabled
trust
Store
In
Invalid
Format
Should
Fail
wrong
Key
Alias
Should
Fail
correct
Configuration
With
Client
Authentication
Should
Work
wrong
Client
Certificate
Should
Not
Fail
When
Client
Auth
Is
Want
wrong
Client
Certificate
Should
Not
Fail
When
Certificate
Validation
Is
Disabled
start
Tomcat
And
Do
Https
Request
start
Tomcat
And
Do
Https
Request
set
Up
when
Listing
All
Services
then
Return
List
create
Full
Test
Instance
setup
test
Find
Service
By
Gateway
Url
test
Best
Matching
Service
Url
By
All
Service
Types
test
Best
Matching
Service
Url
By
Specific
Service
Types
test
Best
Matching
Api
Url
given
Service
Without
Context
Path
then
Return
Correct
Path
given
Properties
then
Return
Build
Info
Details
given
Missing
Properties
then
Return
Empty
Build
Info
Details
given
Two
Entries
then
Return
Two
Instances
given
Code
Snippets
then
Return
Api
Info
With
Code
Snippets
given
Bad
Field
then
Dont
Return
Instance
test
Parse
Routes
test
Parse
To
List
Route
test
Parse
To
List
Route
when
Metadatakey
Elements
Is
Different
From4
generate
Full
Metadata
generate
Metadata
With
Code
Snippets
generate
Metadata
With
No
Gateway
Url
generate
No
Metadata
generate
Metadata
With
Incorrect
Swagger
Url
generate
Metadata
With
Incorrect
Documentation
Url
when
Full
Info
test
Authentication
Parser
when
No
Info
test
Authentication
Parser
set
Up
should
Create
Secure
Ssl
Socket
Factory
should
Create
Ignoring
Ssl
Socket
Factory
should
Create
Secure
Ssl
Context
With
Empty
Keystore
When
No
Keystore
Is
Provided
should
Create
Secure
Http
Client
should
Create
Secure
Ssl
Context
should
Create
Ignoring
Ssl
Context
wrong
Key
Password
Configuration
Should
Fail
specific
Incorrect
Alias
Should
Fail
incorrect
Protocol
Should
Fail
should
Set
System
Ssl
Properties
should
Create
Default
Hostname
Verifier
should
Create
Noop
Hostname
Verifier
should
Create
Eureka
Jersey
Client
Builder
For
Https
should
Create
Eureka
Jersey
Client
Builder
For
Http
correct
Https
Settings
correct
Https
Key
Store
Settings
path
From
Repository
given
Multiple
Keep
Alive
Headers
then
Only
Timeout
Value
Is
Returned
given
Missing
Keep
Alive
Header
then
Return
Default
Timeout
set
Up
when
Request
Connection
then
Return
Connection
Request
given
No
Socket
Registry
when
Create
Connection
then
Throw
Error
set
Up
given
Valid
Setup
then
Return
Valid
Key
given
Wrong
Keystore
then
Return
Null
given
Incorrect
Password
then
Throw
Exception
given
Null
As
Key
Alias
then
Throw
Exception
test
Load
Public
Key
test
Load
Public
Key
With
Bad
Key
Store
test
Find
Private
Key
By
Public
test
Find
Private
Key
By
Public
With
Incorrect
Key
Password
test
Load
Key
Store
test
Generate
Key
Pair
load
Public
Key
From
File
load
Certificate
Chain
No
Keystore
load
Certificate
Chain
load
Certificate
Chain
Base64
then
Throw
Exception
given
Wrong
Format
then
Throw
Exception
is
Keyring
Returns
True
If
It
Is
Valid
format
Keyring
Url
Fix
The
Format
If
Possible
get
Message
evaluate
generate
get
Message
get
Error
Code
get
Message
get
Http
Status
get
Error
Code
evaluate
generate
is
Using
Saf
Implementation
evaluate
generate
matches
extract
Additional
Registrations
put
Route
Service
Url
put
Route
Gateway
Url
put
Additional
Registration
match
Discovery
Url
parse
Service
Url
parse
Gateway
Url
is
Route
Defined
add
Code
Snippet
get
Major
Version
deserialize
load
Messages
get
Instance
of
empty
log
log
log
get
Message
Template
add
Message
Templates
add
Message
Template
To
Storage
create
Message
create
Message
load
Messages
of
validate
Message
Text
Format
validate
Parameters
get
Converted
Text
map
To
Readable
Text
map
To
View
map
To
Api
Message
map
To
Log
Message
get
Message
Template
to
Int
to
Char
to
String
create
Message
create
Message
add
Message
Templates
validate
Message
Templates
validate
Message
Template
get
Invalid
Message
Template
get
Message
Type
get
Message
Number
get
Message
Content
get
Message
Action
get
Message
Reason
get
Message
Key
get
Message
Instance
Id
get
Message
Component
get
Message
Source
to
String
supports
Sso
is
Empty
map
generate
is
Expired
generate
get
equals
size
equals
hash
Code
to
String
close
delrec
locate
locate
locate
read
read
update
update
write
write
get
Actual
Filename
close
delrec
locate
locate
locate
read
read
update
update
write
write
get
Actual
Filename
remove
First
And
Last
Occurrence
prepend
Substring
prepend
Substring
prepend
Substring
remove
Last
Occurrence
resolve
Expressions
is
Cors
Enabled
For
Service
set
Cors
Configuration
set
Allowed
Origins
For
Service
register
Default
Cors
Configuration
get
Service
Id
From
Instance
Id
get
Url
trim
Slashes
get
Encoded
Url
remove
First
And
Last
Slash
add
First
Slash
remove
Last
Slash
get
Host
IP
Address
get
Ip
Address
From
Url
is
Valid
Url
locate
File
locate
Directory
locate
File
Or
Directory
get
Resource
Url
read
File
create
Proxy
create
Proxy
By
Constructor
create
Proxy
By
Constructor
make
Proxy
get
Implementation
Class
is
Using
Base
Implementation
add
Mapping
find
Method
fetch
All
Interfaces
fetch
All
Interfaces
get
Declared
Method
Mapping
map
Target
Methods
init
Mapping
invoke
get
Implementation
Class
is
Using
Base
Implementation
invoke
is
Initialized
apply
find
Method
get
Mapping
Function
get
Mapping
Function
is
Initialized
is
Matching
apply
to
String
evict
Subset
get
All
Records
require
Not
Null
require
Not
Empty
get
Thread
Context
Map
merge
Configurations
merge
Maps
Deep
get
Method
Identifier
of
get
Headers
get
All
Headers
get
Header
set
Header
remove
Header
get
All
Cookies
get
All
Cookies
From
Header
get
Cookie
set
Cookie
get
Cookie
Header
remove
Cookie
of
get
All
get
set
remove
get
All
Cookies
From
Header
get
Cookie
Header
get
Header
flatten
Map
execute
Action
merge
Key
comment
path
same
Site
max
Age
http
Only
secure
build
set
Cookie
remove
Cookie
get
Services
Info
get
Service
Info
get
Apiml
get
Service
get
Api
Infos
get
Authentication
get
Instance
With
Highest
Version
get
Instances
get
Base
Path
get
Health
Check
Url
get
Port
get
Protocol
get
Major
Version
get
Custom
Metadata
get
Version
get
Status
add
Routed
Service
find
Service
By
Gateway
Url
get
Best
Matching
Service
Url
get
Best
Matching
Api
Url
is
Service
Type
Match
is
Matching
Api
Route
to
String
get
Artifact
get
Version
get
Number
get
Time
get
Machine
get
Commit
Id
log
Build
Info
get
Build
Info
Details
get
Properties
parse
Api
Info
parse
Routes
parse
To
List
Route
filter
Metadata
map
Metadata
To
Routed
Service
process
Urls
generate
Metadata
validate
Url
parse
Authentication
get
Keep
Alive
Duration
get
Code
get
Config
request
Connection
create
Secure
Http
Client
create
Ssl
Socket
Factory
create
Ignoring
Ssl
Socket
Factory
create
Ignoring
Ssl
Context
load
Trust
Material
load
Key
Material
load
Keystore
Material
get
Private
Key
Strategy
load
Keyring
Material
create
Secure
Ssl
Context
validate
Ssl
Config
get
SSL
Connection
Socket
Factory
get
Ssl
Context
set
System
Property
set
System
Ssl
Properties
get
Hostname
Verifier
create
Eureka
Jersey
Client
Builder
is
Keyring
format
Keyring
Url
load
Key
load
Certificate
Chain
load
Certificate
Chain
Base64
load
Public
Key
find
Private
Key
By
Public
load
Key
Store
load
Key
Store
key
Ring
Url
generate
Key
Pair
read
Password
message
Service
Discovery
resolve
Service
Ip
Address
If
Not
Provided
In
Configuration
given
Yaml
Metadata
when
Ip
Address
Is
Preferred
then
Use
Ip
Address
test
On
Context
Refreshed
Event
Event
test
On
Context
Refreshed
Event
Event
message
Service
Discovery
default
Api
Mediation
Client
api
Mediation
Client
api
Mediation
Client
api
Mediation
Service
Config
on
Context
Refreshed
Event
Event
on
Context
Closed
Event
unregister
register
test
default
Api
Ml
Client
api
Ml
Client
api
Ml
Client
set
Ip
Address
If
Not
Presents
on
Startup
Event
on
Shut
Down
Event
setup
Streams
restore
Streams
provided
Correct
Key
then
Request
Passes
malformed
Url
Is
Displayed
ssl
Error
Is
Translated
normalize
Line
Ends
when
Execute
Command
then
Stores
Not
Initialize
Exception
Is
Thrown
when
Execute
Command
then
Stores
Not
Initialize
Exception
Is
Thrown
when
No
Path
Found
then
Stores
Not
Initialize
Exception
Is
Thrown
when
Wrong
Format
then
Stores
Not
Initialize
Exception
Is
Thrown
setup
Streams
restore
Streams
provided
Correct
Inputs
certificate
Is
Verified
setup
Streams
restore
Streams
provided
Correct
Inputs
then
Success
Message
Is
Displayed
provided
Not
Trusted
Key
then
Handshake
Exception
Is
Displayed
main
get
Stores
get
Ssl
Context
get
Ssl
Context
With
Keystore
init
SSL
Context
With
Keystore
choose
Client
Alias
get
Certificate
Chain
get
Client
Aliases
get
Server
Aliases
choose
Server
Alias
get
Private
Key
init
SSL
Context
Without
Keystore
is
Keyring
format
Keyring
Url
init
init
Truststore
init
Keystore
get
List
Of
Certificates
get
X509Certificate
get
Server
Certificate
Chain
read
Key
Store
get
Key
Store
get
Trust
Store
get
Conf
key
Ring
Url
run
new
Listener
execute
Call
verify
verify
get
Key
Store
get
Trust
Store
get
Trust
Passwd
get
Key
Passwd
get
Trust
Store
Type
get
Key
Store
Type
get
Key
Alias
get
Remote
Url
is
Help
Requested
is
Do
Local
Handshake
is
Client
Cert
Auth
verify
get
Key
Store
get
Trust
Store
get
Trust
Passwd
get
Key
Passwd
get
Trust
Store
Type
get
Key
Store
Type
get
Key
Alias
get
Remote
Url
is
Help
Requested
is
Do
Local
Handshake
is
Client
Cert
Auth
default
Value
verify
print
Details
test
Load
Configuration
Two
Files
OK
read
Configuration
With
Wrong
Format
test
Map
Merge
FULL
test
Map
Merge
PART
serviceid
keystore
truststore
test
Map
Merge
PART
serviceid
ciphers
test
Get
Api
Mediation
Service
Config
From
File
get
Api
Mediation
Service
Config
From
File
check
Context
Map
test
Set
Api
Ml
Context
Ok
test
Set
Api
Ml
Context
Twice
Ok
test
Load
Configuration
From
Context
OK
test
Load
Configuration
From
Single
File
OK
get
Mock
Servlet
Context
test
Read
Configuration
File
Internal
file
name
null
test
Load
Configuration
Ip
Address
Is
Null
OK
test
Load
Configuration
Ip
Address
Is
Null
bad
base
Url
test
Load
Configuration
Ip
Address
Is
Null
Unknown
Host
given
Yaml
Metadata
when
Parsed
By
Jackson
should
Flatten
Metadata
Correctly
given
Yaml
Metadata
when
Ip
Address
Is
Preferred
then
Use
Ip
Address
given
Configuration
With
Invalid
Protocol
when
Validate
then
Throw
Exception
setup
clean
Up
given
Service
Configuration
when
Configuration
Is
Valid
then
Validate
given
Configuration
With
Invalid
Ssl
when
Validate
then
Throw
Exception
given
Configuration
With
Http
Eureka
And
Invalid
Ssl
then
Validate
empty
Keyring
Passwords
Are
Supported
empty
Passwords
With
Keystores
Are
Validated
As
Errors
load
Valid
Ssl
Configuration
given
System
Properties
when
Load
From
File
then
No
Override
By
System
Prop
given
System
Properties
when
Load
From
Context
then
Not
Override
By
System
Prop
given
System
Properties
when
Load
From
File
That
Has
Wildcard
But
Props
Not
Set
For
Mandatory
then
Throw
Exception
given
System
Properties
when
Load
From
File
That
Has
Wildcard
then
Config
Overridden
By
System
Prop
given
Configuration
Empty
Catalog
when
Validate
then
Log
given
Configuration
Empty
Api
Info
when
Validate
then
Log
given
Configuration
With
Keyring
when
Other
Configuration
Is
Valid
then
Validate
given
Configuration
With
Bad
Url
Slashes
when
Validate
then
Log
Warnings
given
Configuration
With
No
Relative
Urls
when
Validate
then
Only
Log
Home
Page
Warning
given
Configuration
With
No
Home
Url
And
No
Ui
Route
when
Validate
then
Log
No
Warnings
get
Valid
Configuration
start
Eureka
Client
bad
Base
Url
Format
https
Base
Url
Format
bad
Protocol
For
Base
Url
test
Initialization
Service
Definition
Exception
test
Initialization
Runtime
Exception
test
Initialization
Invalid
Documentation
Url
create
Api
Mediation
Client
test
Given
Custom
Metadata
when
Register
then
Value
Is
Not
Changed
get
Z
Util
Zos
Value
get
Default
Custom
Metadata
Helper
is
Running
On
Zos
test
Given
Zos
when
Register
then
Default
Metadata
Are
Fetched
test
Given
Non
Zos
when
Register
then
Default
Metadata
Are
Fetched
discovery
Info
Test
health
Constructor
Test
health
Setter
Test
get
Config
should
Register
With
Eureka
get
Decoder
Name
get
Region
should
Use
Dns
For
Fetching
Service
Urls
get
Eureka
Server
Service
Urls
should
On
Demand
Update
Status
Change
get
Registry
Fetch
Interval
Seconds
get
Secure
Port
Enabled
get
Host
Name
set
Ip
Address
If
Not
Presents
client
config
validate
validate
Routes
validate
Ssl
Parameters
is
Keyring
validate
Ssl
validate
Urls
validate
Home
Page
Relative
Url
is
Poorly
Formed
Relative
Url
is
Invalid
is
Invalid
add
Parameter
To
Problems
List
merge
Configurations
load
Configuration
load
Configuration
load
Configuration
set
Service
Ip
Address
build
Configuration
build
Configuration
set
Api
Ml
Service
Context
load
Configuration
set
Api
Ml
System
Properties
initialize
Context
Map
create
Eureka
Instance
Config
create
Metadata
flatten
Metadata
environ
format
Stack
Trace
get
Code
Page
Current
Locale
get
Cpu
Time
Micros
get
Current
Job
Id
get
Current
Jobname
get
Current
Proc
Stepname
get
Current
Stepname
get
Current
Time
Micros
get
Current
Tso
Prefix
get
Current
User
get
Default
Platform
Encoding
get
Env
get
Environment
get
Java
Version
Info
get
Jzos
Dll
Version
get
Jzos
Jar
Version
get
Logging
Level
get
Pid
get
P
Pid
get
Tod
Clock
get
Tod
Clock
get
Tod
Clock
Extended
get
Tod
Clock
Extended
log
Diagnostic
new
Encoded
Print
Stream
new
Encoded
Print
Stream
new
Encoded
Print
Stream
peek
OS
Memory
peek
OS
Memory
peek
OS
Memory
redirect
Standard
Streams
redirect
Standard
Streams
set
Default
Platform
Encoding
set
Env
set
Logging
Level
smf
Record
substitute
System
Symbols
substitute
System
Symbols
touch
is
Running
On
Zos
get
Default
Custom
Metadata
update
update
config
get
client
environ
format
Stack
Trace
get
Code
Page
Current
Locale
get
Cpu
Time
Micros
get
Current
Job
Id
get
Current
Jobname
get
Current
Proc
Stepname
get
Current
Stepname
get
Current
Time
Micros
get
Current
Tso
Prefix
get
Current
User
get
Default
Platform
Encoding
get
Env
get
Environment
get
Java
Version
Info
get
Jzos
Dll
Version
get
Jzos
Jar
Version
get
Logging
Level
get
Pid
get
P
Pid
get
Tod
Clock
get
Tod
Clock
get
Tod
Clock
Extended
get
Tod
Clock
Extended
log
Diagnostic
new
Encoded
Print
Stream
new
Encoded
Print
Stream
new
Encoded
Print
Stream
peek
OS
Memory
peek
OS
Memory
peek
OS
Memory
redirect
Standard
Streams
redirect
Standard
Streams
set
Default
Platform
Encoding
set
Env
set
Logging
Level
smf
Record
substitute
System
Symbols
substitute
System
Symbols
touch
register
unregister
initialize
Eureka
Client
update
Store
Paths
initialize
Application
Info
Manager
get
Eureka
Client
register
unregister
get
Eureka
Client
is
Registered
get
Status
set
Status
get
Host
Name
get
Secure
get
Service
Name
get
Port
get
Service
Type
get
Service
Title
get
Enable
Api
Doc
get
Description
greeting
given
Integer
when
Get
Integer
then
Convert
given
Number
String
when
Get
Integer
then
Parse
given
Null
when
Get
Integer
then
Throw
Null
Pointer
Exception
given
Non
Numeric
Value
when
Get
Integer
then
Throw
Number
Format
Exception
init
Http
Clients
given
Default
Http
Client
when
Creating
A
Instance
then
Both
Http
Clients
Are
Created
Well
init
Mocks
given
No
Timeout
And
No
Requirements
For
Client
Cert
when
Get
Http
Client
then
Call
Without
Client
Cert
given
No
Timeout
And
False
As
Requirements
For
Client
Cert
when
Get
Http
Client
then
Call
Without
Client
Cert
given
No
Timeout
And
Requirements
For
Client
Cert
when
Get
Http
Client
then
Call
Without
Client
Cert
given
Timeout
And
No
Requirements
For
Client
Cert
when
Get
Http
Client
then
Call
Without
Client
Cert
given
Timeout
And
Requirements
For
Client
Cert
when
Get
Http
Client
then
Call
Without
Client
Cert
set
Up
should
Add
Registry
Authority
To
Allowed
User
should
Add
Registry
Authority
To
Allowed
User
Ignoring
Case
should
Not
Add
Registry
Authority
To
Unknown
User
set
Up
should
Add
Registry
Authority
To
Any
User
then
Is
Not
Null
then
Create
It
when
Keyring
Has
Wrong
Format
And
Missing
Passwords
then
Fix
It
when
Keystore
then
Do
Nothing
set
Up
unsupported
Class
dont
Update
set
Up
given
No
Password
then
Set
Them
given
Invalid
Path
then
Fix
Them
set
Up
set
Up
should
Create
Eureka
Client
For
Additional
Discovery
Url
should
Create
Two
Additional
Registrations
should
Create
Instance
Info
From
Eureka
Config
should
Trigger
Shutdown
Call
To
Wrapped
Clients
should
Handle
Nulls
On
Shutdown
Call
set
Up
should
Trigger
Indexing
For
Registered
Gateways
scheduled
Call
Should
Trigger
Reactive
Action
given
Correct
Certificate
when
Get
Certificate
then
Get
Certificate
given
No
SSL
when
Get
Certificate
then
Null
given
No
Certificate
when
Get
Certificate
then
Null
setup
setup
when
Filter
then
Add
Header
To
Request
setup
when
Filter
then
Header
Contains
New
Value
setup
then
No
Headers
In
Request
setup
then
No
Headers
In
Request
setup
then
Provide
Info
In
Fail
Header
setup
then
Continue
Filter
Chain
Without
Client
Cert
Header
setup
then
Continue
Filter
Chain
Without
Client
Cert
Header
method
uri
path
context
Path
header
headers
ssl
Info
remote
Address
build
request
request
response
principal
build
test
fetch
given
Longer
Collections
when
Iterate
Them
then
Cycle
Order
given
Empty
Collection
when
Transform
then
Return
Empty
Collection
given
Singleton
List
when
Transform
the
Order
Is
The
Same
given
List
With
Different
Length
when
Transform
the
Offset
Is
Stable
given
A
Collection
when
Iterate
Over
then
Throw
An
Exception
setup
test
Predicate
test
To
String
Format
setup
given
Certificate
In
Request
then
Populate
Headers
given
Certificate
With
Incorrect
Encoding
then
Provide
Info
In
Header
given
No
Certificate
In
Request
then
Continue
Filter
Chain
With
Untouched
Headers
given
Correct
DN
return
Common
Name
given
DN
Without
Common
Name
return
Null
method
uri
path
context
Path
header
headers
ssl
Info
remote
Address
build
request
request
response
principal
build
set
Up
then
Response
Is
Empty
set
Up
then
Response
Contains
One
Certificate
set
Up
then
Response
Contains
All
Certificates
should
Fetch
Two
Apiml
Infos
should
Handle
Error
And
Fetch
Second
Apiml
Info
registry
mock
Services
Reactive
Discovery
Client
description
get
Instances
get
Services
eureka
Client
eureka
Jersey
Client
setup
when
Requesting
Passticket
For
Allowed
APPLID
then
Translate
get
Token
Endpoint
get
Authentication
Scheme
get
Cookie
get
Service
Url
create
All
Zaas
Services
given
No
Instance
Of
Zosmf
when
Calling
A
Service
then
Return500
given
Instance
Of
Zosmf
when
Calling
A
Service
then
Return200
given
Zombie
And
Ok
Instance
Of
Zosmf
when
Calling
A
Service
prevent
Zombie
One
given
Only
Zombie
Zosmf
when
Calling
A
Service
return500
given
Zombie
And
Error
Zosmf
when
Calling
A
Service
return500
given
Zombie
Failing
And
Success
Zosmf
when
Calling
A
Service
return200
get
Service
Url
create
Services
given
Zaas
With
Invalid
Response
when
Calling
A
Service
then
Dont
Propagate
Credentials
get
Service
Url
create
Zaas
given
No
Credentials
when
Calling
A
Service
then
Dont
Propagate
Credentials
given
Invalid
Credentials
when
Calling
A
Service
then
Dont
Propagate
Credentials
create
Zaas
create
Service
get
Service
Url
given
Multiple
Headers
when
Calling
A
Service
then
They
Are
Resend
get
Applications
get
Instances
By
Vip
Address
get
Instances
By
Vip
Address
remove
update
get
Mock
Services
get
Application
get
Applications
get
Instances
get
Service
Instance
after
Test
after
Class
set
Up
route
To
Correct
Service
route
To
Service
With
Cors
Disabled
cant
Route
To
Server
set
Base
Path
reset
Counters
check
Assertion
Errors
On
Mock
Services
update
Routing
Rules
mock
Service
stop
Mocks
With
Test
Scope
stop
Mocks
With
Class
Scope
init
get
Status
get
Instance
Id
fire
Status
Changed
set
Assertion
Error
check
Assertion
Errors
set
Status
start
stop
zombie
get
Endpoint
get
Counter
reset
Counter
clean
Status
Changed
Listeners
close
get
Metadata
get
Instance
Info
get
Eureka
Service
Instance
add
Endpoint
build
start
process
get
Counter
reset
Counter
and
body
Json
is
Up
route
To
Service
With
Cors
Enabled
start
Mock
Service
when
Get
Returns
Unavailable
then
Retry
when
Request
Returns
Unauthorized
then
Dont
Retry
when
Post
Returns
Unavailable
then
Dont
Retry
get
Token
Endpoint
get
Authentication
Scheme
get
Token
Endpoint
get
Authentication
Scheme
given
Url
Path
when
Construct
Url
then
Fix
Slashes
given
Instance
when
Order
then
Returns
The
Default
Order
given
Instance
Config
when
Set
Condition
then
Construct
Regex
Condition
given
Instance
Config
when
Set
Filters
then
Construct
Regex
Filter
init
Service
Instance
given
Service
Instance
when
Eval
Hostname
then
Construct
Url
given
External
Url
when
Get
Hostname
then
Return
External
Url
given
No
External
Url
when
Get
Hostname
then
Return
Default
Url
given
Apiml
Id
when
Get
Eval
Service
Instance
then
Mock
Get
Service
Id
given
No
Apiml
Id
when
Get
Eval
Service
Instance
then
Return
Lower
Case
Copy
given
Instance
Data
when
Get
then
Construct
Draft
Of
Rule
given
Instance
when
Order
then
Returns
The
Default
Order
given
Instance
Config
when
Set
Condition
then
Construct
Regex
Condition
given
Instance
Config
when
Set
Filters
then
Construct
Header
Route
Step
Filter
setup
normalize
Text
when
Get
Certificates
then
PEM
Is
Produced
setup
when
Get
Certificates
then
Empty
String
Returned
setup
when
Get
Certificates
then
Null
Returned
setup
when
Construct
Service
then
Exception
Thrown
generate
Cert
set
Up
set
Up
should
Cache
List
Of
The
Services
should
Generate
Synthetic
Apiml
Id
Cache
Key
should
Filter
Cached
Services
By
Api
Id
should
Filter
Cached
Services
By
Service
Id
should
Filter
Out
Empty
Apiml
Entries
Service
Id
should
Filter
Out
Empty
Apiml
Entries
Api
Id
should
Return
Empty
Map
For
Not
Existing
Apiml
Id
given
Wrong
Path
then
Throw
Exception
given
Correct
Path
then
Load
SSL
Context
given
Wrong
Password
http
Config
Error
Is
Expected
init
create
Service
Instance
create
Scheme
Handler
create
Route
Definition
Producer
given
Discovery
Client
when
Get
Service
Instances
then
Return
All
Service
Instances
given
No
Authentication
when
Set
Auth
then
Do
Nothing
given
No
Authentication
Scheme
when
Set
Auth
then
Do
Nothing
given
Authentication
Scheme
Without
Filter
when
Set
Auth
then
Do
Nothing
given
Existing
Authentication
Scheme
when
Set
Auth
then
Call
Apply
get
Cors
Lambda
given
Apiml
Id
when
Set
Cors
then
Service
Id
Is
Replaced
With
Apiml
Id
given
No
Apiml
Id
when
Set
Cors
then
Service
Id
Is
Used
given
Gateway
when
Get
Routed
Service
then
Return
Default
Routing
given
Non
Gateway
Service
when
Get
Routed
Service
then
Return
Routing
From
Metadata
given
Second
One
Empty
when
Join
then
Return
First
Instance
given
Non
Empty
Lists
when
Join
then
Create
New
One
With
All
Values
given
Route
Locator
when
Get
Route
Definitions
then
Generate
All
create
Service
Instance
enable
Forwarding
given
Service
Allowing
Cert
Forwarding
when
Get
Post
Routing
Filters
then
Add
Client
Cert
Filter
Factory
given
Service
Not
Allowing
Cert
Forwarding
when
Get
Post
Routing
Filters
then
Return
Just
Common
given
Service
Without
Cert
Forwarding
Config
when
Get
Post
Routing
Filters
then
Return
Just
Common
disable
Forwarding
given
Any
Service
when
Get
Post
Routing
Filters
then
Return
Just
Common
given
Zosmf
Instance
when
Get
Authentication
Scheme
then
Return
Proper
Type
given
Route
Definition
when
Apply
then
Fulfill
Filter
Factor
Args
given
Http
Basic
Passticket
Instance
when
Get
Authentication
Scheme
then
Return
Proper
Type
given
Route
Definition
when
Apply
then
Fulfill
Filter
Factor
Args
given
Zowe
Instance
when
Get
Authentication
Scheme
then
Return
Proper
Type
given
Route
Definition
when
Apply
then
Fulfill
Filter
Factor
Args
given
X509
when
Get
Authentication
Scheme
then
Return
Proper
Type
given
X509
when
Apply
then
Fulfill
Filter
Factor
Args
should
Throw
NPE
When
Apiml
Id
Is
Null
should
Return
Empty
Services
When
Service
List
Is
Null
should
Return
Empty
Services
When
Service
List
Contains
Nulls
set
Up
should
Map
Service
Info
With
Filtered
Metadata
should
Map
Service
Info
With
Multiple
AP
Is
should
Map
List
Of
Services
init
Scopes
security
Web
Filter
Chain
user
Details
Service
create
Instance
Info
create
Cloud
Eureka
Client
post
Process
After
Initialization
update
Config
Parameters
factory
routing
Filter
Handler
post
Process
Before
Initialization
ssl
Context
get
Eureka
Jersey
Client
primary
Eureka
Client
additional
Registration
additional
Eureka
Clients
Holder
register
In
The
Apiml
Instance
default
Customizer
web
Client
web
Client
Client
Cert
cors
Configuration
Source
cors
Utils
message
Service
eureka
Metadata
Parser
basic
Info
Service
get
Integer
get
Http
Client
filters
shutdown
start
Scan
External
Gateway
Job
add
Local
Services
do
Scan
External
Gateway
apply
get
Encoded
Client
Certificate
get
Endpoint
Url
get
Response
Class
get
Response
For401
create
Request
process
Response
apply
get
Response
Class
get
Response
For401
get
Zaas
Instances
request
With
Ha
invoke
create
Request
process
Response
create
Request
create
Gateway
Filter
add
Request
Header
set
Request
Header
update
Headers
For
Error
read
Cookies
set
Client
Certificate
apply
update
Headers
For
Error
set
Header
get
Common
Name
get
Headers
set
Headers
get
Endpoint
Url
apply
test
get
Config
to
String
set
Header
apply
get
Iterator
has
Next
next
get
Endpoint
Url
apply
get
Response
Class
get
Response
For401
create
Request
process
Response
get
Services
build
Entry
get
Certificates
main
set
Condition
set
Filters
get
Order
construct
Url
set
Condition
set
Filters
get
Order
eval
Hostname
get
Hostname
get
Eval
Service
Instance
build
Route
Definition
get
Order
set
Condition
set
Filters
get
get
Service
Id
get
Service
Id
build
Web
Client
index
Gateway
Services
put
Apiml
Services
fetch
Services
build
Alternative
Apiml
Id
Key
extract
Apiml
Id
list
Registry
filter
Services
By
Api
Id
And
Service
Id
has
Same
Api
Id
has
Same
Service
Id
get
Certificates
In
PEM
Format
load
Cert
Chain
load
init
Ssl
Context
get
Service
Instance
build
Apiml
Service
Info
map
Services
extract
Metadata
extract
Api
Id
get
Authentication
Scheme
apply
get
Authentication
Scheme
apply
get
Authentication
Scheme
apply
get
Authentication
Scheme
apply
get
Authentication
Scheme
apply
get
Service
Instances
set
Auth
set
Cors
get
Routed
Service
join
get
Post
Routing
Filters
get
Auth
Filter
Per
Route
get
Route
Definitions
init
test
get
all
samples
main
open
API
list
setup
given
Home
Page
And
UI
Route
when
Transform
then
Use
New
Url
given
Home
Page
when
Route
Not
Found
then
Throw
Exception
given
Home
Page
And
WS
Route
when
Transform
then
Use
New
Url
given
Home
Page
And
API
Route
when
Transform
then
Use
New
Url
given
Invalid
Home
Page
then
Throw
Exception
given
Empty
Gateway
Client
then
Throw
Exception
given
Home
Page
when
Path
Is
Not
Valid
then
Throw
Exception
given
Empty
Path
In
Home
Page
when
Transform
then
Use
New
Url
given
Service
Url
when
Its
Root
then
Keep
Home
Page
Path
Same
given
Url
Containing
Path
And
Query
when
Transform
then
Keep
Query
Part
In
The
New
Url
given
Service
And
Api
Route
when
Get
Api
Base
Path
then
Return
Api
Path
given
Service
And
Api
Route
With
Version
when
Get
Api
Base
Path
then
Return
Api
Path
given
Invalid
Uri
Path
when
Get
Api
Base
Path
then
Throw
Error
given
No
Routes
when
Get
Api
Base
Path
then
Throw
Error
when
Keyring
Has
Wrong
Format
And
Missing
Passwords
then
Fix
It
when
Keystore
then
Do
Nothing
create
When
Indicators
Are
Null
Throws
Exception
get
Contributor
Returns
Contributor
get
Contributor
When
Missing
Returns
Null
iterator
Iterates
Named
Contributors
get
Name
health
set
Up
test
No
Health
Check
Registered
test
All
Up
test
Health
Check
Not
Returned
When
Stopped
test
Down
With
Blocking
Indicators
test
Down
With
Reactive
Indicators
test
Down
When
Blocking
Indicator
Up
And
Reactive
Down
test
Down
When
Blocking
Indicator
Down
And
Reactive
Up
test
Unknown
test
Eureka
Ignored
test
Composite
Components
Down
test
Composite
Components
Up
test
Composite
Components
One
Down
initialize
health
Indicator
do
Health
Check
health
Indicator
do
Health
Check
health
Indicator
do
Health
Check
reactive
Health
Indicator
do
Health
Check
reactive
Health
Indicator
do
Health
Check
discovery
Health
Indicator
health
eureka
Health
Indicator
health
discovery
Composite
Health
Contributor
composite
Health
Contributor
composite
Health
Contributor
composite
Health
Contributor
do
Health
Check
do
Health
Check
get
Contributor
iterator
has
Next
next
then
Return
Message
And
Cause
then
Return
Message
setup
test
Init
gateway
Client
instance
Lookup
Executor
gateway
Instance
Initializer
get
Standard
Instance
test
Get
Gateway
Config
Properties
when
It
Is
Not
Null
test
Get
Gateway
Config
Properties
when
It
Null
test
Is
Initialized
then
Return
Message
set
Up
test
Run
when
No
Application
Registered
In
Discovery
test
Run
when
No
Instances
Exist
In
Discovery
test
Run
when
Unexpected
Exception
Happened
test
Run
when
Instance
Exist
In
Discovery
get
Instance
create
Instance
with
Network
Status
Code
with
Instance
Info
with
Batch
Reply
with
Network
Error
with
Readtime
Out
with
Processing
Delay
with
Exception
next
Handled
Request
register
cancel
send
Heart
Beat
status
Update
status
Update
delete
Status
Override
get
Applications
get
Delta
get
Vip
get
Secure
Vip
get
Application
get
Instance
get
Instance
submit
Batch
Updates
shutdown
get
Request
Type
get
Data
set
Up
tear
Down
test
Registration
Batch
Replication
test
Cancel
Batch
Replication
given
Batch
Replication
then
Expect
Single
Batch
given
Replication
Failure
then
Schedule
Second
Registration
given
Instance
Info
From
Peer
then
Trigger
Local
Call
test
Asg
Status
Update
test
Status
Update
Batch
Replication
test
Delete
Status
Override
Batch
Replication
create
Peer
Eureka
Node
expect
Request
Type
expect
Single
Batch
Request
execute
handle
Success
handle
Failure
get
Processing
State
a
Replication
Task
with
Reply
Status
Code
with
Exception
with
Action
with
Network
Failures
build
set
Up
when
Status
Code
OK
then
Set
Success
when
Network
Problem
then
Set
Congestion
when
Network
Problem
Repeated
then
Set
Transient
when
SSL
Problem
then
Set
Permanent
when
Non
Network
Error
then
Set
Permanent
when
Network
Problem
Repeated
Multiple
Times
then
Set
Permanent
And
Recover
When
Network
Is
Ok
when
Network
Problem
Repeated
Multiple
Times
then
Reset
Counter
After
Successful
Connection
when
Status
Code
OK
then
Set
Success
when
Network
Problem
then
Set
Congestion
when
Read
Timeout
then
Set
Congestion
when
Network
Problem
Repeated
then
Set
Transient
when
SSL
Problem
then
Set
Permanent
when
Network
OK
And
Batch
Failed
then
Set
Failed
when
Network
Problem
Repeated
Multiple
Times
then
Set
Permanent
And
Recover
When
Network
Is
Ok
when
Network
Problem
Repeated
Multiple
Times
then
Reset
Counter
After
Successful
Connection
setup
should
Return
Specific
Apiml
Version
should
Return
Unknown
In
Apiml
Version
When
No
Version
should
Return
Specific
Zowe
Version
should
Return
Specific
Zowe
Version
When
Encoded
Json
should
Return
Unknown
Zowe
Version
When
No
Build
And
Version
should
Return
Null
In
Zowe
Version
When
Invalid
Json
should
Return
Null
In
Zowe
Version
When
File
Not
Found
then
Return
Message
then
Return
Message
And
Cause
add
Routed
Services
transform
URL
retrieve
Api
Base
Path
get
Short
End
Point
update
Store
Paths
init
get
Connection
Manager
run
public
Key
Certificates
Base64
set
Truststore
jetty
Client
Ssl
Context
Factory
rest
Template
With
Keystore
rest
Template
Without
Keystore
secure
Http
Client
secure
Http
Client
Without
Keystore
secure
Ssl
Context
secure
Hostname
Verifier
eureka
Jersey
Client
eureka
Jersey
Client
Builder
set
Application
Context
after
Properties
Set
populate
Health
Contributors
get
Status
get
Health
Status
get
Status
process
Contributor
process
Contributor
map
To
Instance
Status
get
Order
start
stop
is
Running
get
Error
Path
get
Contributor
iterator
as
Named
Contributor
get
Name
get
Contributor
as
Health
Indicator
get
Indicators
get
Gateway
Config
Properties
is
Initialized
process
init
find
Eureka
Instance
run
get
Task
Name
get
Action
execute
handle
Success
handle
Failure
get
Task
Name
get
Asg
Name
get
New
Status
get
Task
Name
get
App
Name
get
Id
get
Instance
Info
get
Overridden
Status
should
Replicate
Instance
Info
register
execute
cancel
execute
handle
Failure
heartbeat
execute
handle
Failure
status
Update
execute
status
Update
execute
delete
Status
Override
execute
get
Service
Url
shut
Down
sync
Instances
When
Timestamp
Differs
get
Batcher
Name
task
Id
task
Id
get
Lease
Renewal
Of
get
Count
Text
success
fail
has
Reached
Max
process
process
log
Network
Error
Sample
handle
Batch
Response
handle
Batch
Response
create
Replication
List
Of
is
Success
is
Network
Connect
Exception
maybe
Read
Time
Out
create
Replication
Instance
Of
get
Version
update
Version
Info
get
Apiml
Version
get
Zowe
Version
read
Manifest
Json
retrieve
Zowe
Version
retrieve
Zowe
Build
Number
servlet
Container
Customizer
message
Service
config
get
Auth
Configuration
Properties
get
Jwt
Security
Initializer
get
Rest
Template
get
Discovery
Client
get
Zosmf
Service
get
Authentication
Service
get
Discovery
Client
get
Eureka
Metadata
Parser
get
Authentication
Scheme
Factory
get
Authentication
Service
get
Auth
Source
Service
get
Service
Authentication
Service
then
Response
Is
Compressed
prepare
Services
for
Valid
Path
then
Response
Is
Compressed
for
Invalid
Path
then
Response
Is
Not
Compressed
given
Service
Doesnt
Accepts
Compression
then
Response
Is
Not
Compressed
eureka
Client
apiml
Ribbon
Retry
Factory
ribbon
Load
Balancing
Http
Client
ribbon
Load
Balancer
predicate
Factory
ribbon
Server
List
service
Route
Mapper
rest
Template
Without
Keystore
simple
Route
Locator
registry
mapper
discovery
Client
Route
Locator
zuul
Filter
filter
Type
filter
Order
should
Filter
run
given
Service
With
Overwriten
Timeout
And
Another
Without
when
Overwriting
Configuration
For
One
Service
then
The
Other
Services
Keep
Default
assert
Forwarded
Headers
assert
Header
With
Value
given
Default
Configuration
when
Preflight
Request
Arrives
then
No
Access
Control
Allow
Origin
Is
Set
given
Default
Configuration
when
Simple
Cors
Request
Arrives
then
No
Access
Control
Allow
Origin
Is
Set
given
Cors
Is
Delegated
To
Gateway
But
Service
Doesnt
Allow
Cors
when
Preflight
Request
Arrives
then
No
Access
Control
Allow
Origin
Is
Set
given
Cors
Is
Delegated
To
Gateway
But
Service
Doesnt
Allow
Cors
when
Simple
Cors
Request
Arrives
then
No
Access
Control
Allow
Origin
Is
Set
given
Cors
Is
Allowed
For
Specific
Service
when
Pre
Flight
Request
Arrives
then
Cors
Headers
Are
Set
given
Cors
Is
Allowed
For
Specific
Service
when
Simple
Request
Arrives
then
Cors
Headers
Are
Set
given
Cors
Is
Allowed
For
Specific
Service
when
Pre
Flight
Request
Arrives
then
Cors
Headers
Are
Set
given
Cors
Is
Allowed
For
Specific
Service
when
Simple
Request
Arrives
then
Cors
Headers
Are
Set
And
Only
The
Ones
By
Gateway
given
Cors
Is
Allowed
For
Specific
Service
when
The
Service
Is
Set
then
Cors
Headers
Are
Set
And
Only
The
Ones
By
Gateway
given
Cors
Is
Enabled
when
Request
With
Origin
Comes
then
Origin
Isnt
Passed
To
Southbound
prepare
Template
set
Up
prepare
Service
then
Valid
Token
Is
Provided
prepare
Service
given
Invalid
Jwt
Token
set
Up
then
Valid
Saf
Id
Token
Provided
then
No
Saf
Id
Token
Provided
assert
Header
With
Value
set
Up
no
Client
Certificate
Gives
Forbidden
client
Certificate
Without
Token
Gives
Unauthorized
initialize
Tls
setup
set
Application
when
Include
Added
Header
then
Header
Is
Added
when
Included
Header
Already
Added
By
Service
then
Header
Is
Overridden
set
Application
when
Get
Response
then
Header
Is
Not
Added
given
Default
Configuration
when
Request
Is
Created
then
The
Timeouts
Are
Taken
From
Default
Config
given
Overwrite
Of
Configuration
when
Request
Is
Created
then
The
Timeout
Is
Overriden
given
Service
With
Overwriten
Timeout
And
Another
Without
when
Overwriting
Configuration
For
One
Service
then
The
Other
Services
Keep
Default
assert
Configuration
Timeouts
set
Up
when
Client
Certificate
then
Cert
Details
In
Request
Headers
when
Internal
Apiml
Certificate
then
Cert
Details
In
Request
Headers
validate
Headers
assert
Headers
when
No
Certificate
then
No
Cert
Details
In
Request
Headers
assert
Headers
given
Zosmf
Cookie
And
Dummy
Auth
Provider
when
Zowe
Jwt
Request
then
Unauthorized
valid
Jwt
Token
choose
Server
with
Ribbon
Config
with
Load
Balancer
Strategy
with
Cors
Enabled
with
Saf
Idt
with
X509
with
Zosmf
with
Http
Basic
Pass
Ticket
with
Compression
with
Compression
Path
with
Ignored
Headers
with
Added
Headers
build
default
Instance
custom
Instance
locate
Routes
create
Refresh
Cache
Event
get
Applications
get
Instances
By
Vip
Address
get
Instances
By
Vip
Address
add
Application
clear
Applications
set
Current
Application
get
Routes
get
Applications
get
Instances
get
Instance
Info
set
Routed
Services
get
Standard
Instance
prepare
Applications
choose
Correct
Service
cant
Choose
Server
set
Base
Path
prepare
Applications
mock
Valid200Http
Response
mock
Valid200Http
Response
With
Added
Cors
mock
Valid200Http
Response
With
Headers
mock
Unavailable
Http
Response
With
Entity
is
Repeatable
is
Chunked
get
Content
Length
get
Content
Type
get
Content
Encoding
get
Content
write
To
is
Streaming
consume
Content
get
Path
set
Up
prepare
Service
then
Pass
Ticket
Error
Message
Is
Returned
prepare
Applications
prepare
Applications
All
then
Call
The
Same
Instance
route
To
Service
mock
Response
With
Status
given
Retry
On
All
Operations
Is
Disabled
when
Get
Returns
Unavailable
then
Retry
given
Retry
On
All
Operations
Is
Disabled
when
Request
Returns
Unauthorized
then
Dont
Retry
given
Retry
On
All
Operations
Is
Disabled
when
Post
Returns
Unavailable
then
Dont
Retry
given
Retry
On
All
Operations
Is
Enabled
when
Post
Returns
Unavailable
then
Retry
set
Up
assert
Result
set
Zosmf
Response
then
Ok
set
Zosmf
Response
then
Ok
assert
No
Transformation
when
No
Client
Auth
In
Extended
Key
Usage
then
No
Transformation
when
Server
Certificate
then
No
Transformation
setup
set
Application
when
Include
Ignored
Header
then
That
Header
Is
Ignored
when
Include
Unignored
Header
then
That
Header
Is
Included
set
Application
when
Include
Header
Ignored
By
Other
Service
then
That
Header
Is
Included
setup
when
Inserting
then
Correct
Size
when
Inserting
Same
Value
then
Correct
Size
when
Inserting
then
Can
Retrieve
when
Inserting
To
Same
Key
then
Correct
Size
when
Inserting
To
Multiple
Keys
then
Correct
Size
when
Adding
Null
Value
then
Correct
Size
when
Adding
Null
Value2
then
Correct
Size
setup
when
One
Item
In
then
To
String
when
Two
Items
In
then
To
String
cleanup
check
Valid
Json
when
Service
Id
Too
Long
then
Nonconformant
when
Service
Id
Too
Long
And
Symbols
then
Nonconformant
when
Service
Id
Non
Alpha
Numeric
then
Nonconformant
not
Invalid
Text
Format
check
Valid
Json
when
Service
Not
Oboarded
then
Error
legacy
When
Service
Not
Oboarded
then
Error
when
Empty
then
Correct
Response
when
Not
Empty
then
Correct
Response
when
Empty
then
Correct
Conformance
Response
when
Empty
then
Correct
Response
check
Valid
Json
when
Everything
Ok
then
Ok
Response
when
Bad
Metadata
then
Bad
Metadata
Response
swagger
From
Path
when
Correct
Swagger
then
No
Messages
when
Wrong
Versioning
V2
then
Nonconformant
when
Wrong
Versioning
V3
then
Nonconformant
when
Broken
Swagger
then
Doesnt
Parse
setup
when
Swagger
then
Correctly
Parses
when
Bad
Version
then
Correctly
Parses
when
Missing
Api
then
Correctly
Parses
when
Swagger2and
Different
Operations
then
Correctly
Parses
when
Swagger3and
Different
Operations
then
Correctly
Parses
when
Checking
Onboarded
Service
then
Correct
Results
when
Retrieving
Swagger
Url
then
Correctly
Retrieves
when
Get
Swagger
then
Ok
when
Retrieving
Null
Swagger
Url
then
Empty
Metadata
when
Retrieving
Empty
Swagger
Url
then
Empty
Metadata
when
Swagger
Url
Not
In
Metadata
then
Returns
Null
when
Doesnt
Support
SSO
then
False
setup
when
Endpoint
Not
Found
then
Return
Correct
Error
when
Endpoint
Returns
Documented400
then
Return
Empty
List
when
Endpoint
Returns
Documented200Response
then
Return
Empty
List
when
Endpoint
Returns
Undocumented500
then
Return
Correct
Error
given
Existing
List
Of
Client
then
Call
Shutdown
For
Each
given
Null
List
Of
Client
then
Skip
Shutdown
setup
given
List
Of
Additional
Registrations
then
Create
New
Discovery
Client
For
Each
should
Create
Instance
Info
From
Eureka
Config
test
Cache
Manager
Is
Real
Implementation
set
Up
should
Register
Health
Check
Handler
should
Add
Additional
Routes
To
Metadata
should
Not
Add
Additional
Routes
To
Metadata
should
Do
Put
Request
And
Return
True
should
Do
Get
Request
And
Return
False
test
Disabled
Cache
Manager
set
Up
should
Return
Gateway
Properties
setup
setup
when
Locate
Routes
then
Ignore
Service
when
Locate
Routes
then
Routes
Locate
when
Instance
Is
Null
then
Continue
when
Instance
Is
Empty
then
Continue
when
No
Slash
In
Path
then
Append
It
when
Prefix
then
Construct
Path
when
Service
Id
Is
Null
then
Use
Id
And
Locate
setup
given
Null
Error
Controller
given
Not
Zuul
Handler
Mapping
given
Enhanced
Bean
then
No
Error
given
Not
Enhanced
Bean
then
Error
invoke
Lookup
Handler
setup
users
Are
Updated
Only
About
Added
Services
setup
given
One
Service
With
Multiple
Routes
when
Locate
Routes
then
Routes
Located
With
One
Format
when
Route
Located
then
Notifier
Invoked
given
Zuul
Ignored
Service
when
Locate
Routes
then
Not
In
Routes
setup
given
No
Uri
Parts
given
Short
Uri
when
Query
Discovery
Service
when
Query
Routed
Services
when
Query
Routed
Service
verify
Error
given
Insecure
Service
then
Http
Protocol
Used
given
Service
Url
Format
given
Endpoint
given
Uri
Parameters
given
Content
then
Emit
Data
given
IO
Exception
When
Send
Content
then
Complete
With
Error
mock
Service
Instance
mock
Service
Instance
verify
Consumer
Used
endpoints
setup
given
Valid
Auth
when
Filter
given
No
Auth
when
Filter
given
Invalid
Auth
when
Filter
given
Auth
Exception
when
Filter
assert
Exception
mock
Auth
Source
set
Up
set
Up
when
Request
Zosmf
Token
then
Response
OK
when
Request
Zowe
Jwt
Token
then
Response
OK
when
Request
Passticket
And
Appl
Name
Provided
then
Pass
Ticket
In
Response
when
Request
Passticket
And
No
Appl
Name
Provided
then
Bad
Request
set
Up
when
Requesting
Passticket
then
Internal
Server
Error
when
Requesting
Zosmf
Tokens
then
Service
Unavailable
when
Requesting
Zowe
Tokens
then
Internal
Server
Error
set
Up
then
Respond
Unauthorized
given
File
Location
As
A
Null
when
Load
Is
Called
then
Throw
Api
Doc
Reader
Exception
given
Empty
File
Location
when
Load
Is
Called
then
Throw
Api
Doc
Reader
Exception
given
File
Location
when
File
Is
Not
Exist
then
Throw
Api
Doc
Reader
Exception
given
File
Location
With
Invalid
Json
Content
when
Load
Is
Called
then
Throw
Api
Doc
Reader
Exception
given
File
Location
With
Valid
Json
Content
when
Load
Is
Called
then
Open
Api
Should
Match
With
Json
Content
given
File
Location
Name
With
Spaces
when
File
Exists
then
Open
Api
Should
Match
With
Json
Content
set
Up
call
Api
Doc
Endpoint
get
Dummy
Open
Api
Object
set
Up
given
Running
Client
when
Close
then
Stop
Client
given
Stopped
Client
when
Close
then
Do
Nothing
when
Get
Client
then
Return
Instance
set
Up
given
Initilized
Client
then
Has
Non
Default
Idle
Config
setup
given
Existing
Route
when
The
Status
Of
Routes
Is
Requested
then
The
List
Is
Returned
set
Up
then
Close
Server
and
Timeout
then
Close
Normal
and
Close
Exception
then
Forward
Error
setup
prepare
Session
Mock
prepare
Routed
Service
given
Valid
Route
session
Is
Open
given
Invalid
URI
given
Invalid
Route
given
No
Instance
Of
The
Service
Is
In
The
Repository
given
Null
Service
then
Close
Web
Socket
prepare
Session
Mock
when
The
Connection
Is
Closed
then
The
Session
Is
Closed
And
Removed
From
Repository
when
The
Connection
Is
Closed
then
Client
Session
Is
Also
Closed
when
The
Message
Is
Received
then
The
Message
Is
Passed
To
The
Session
when
Exception
Is
Thrown
then
Remove
Routed
Session
when
Session
Is
Null
then
Close
And
Return
when
Closing
Session
Throw
Exception
then
Catch
It
when
Closing
Routed
Session
Throw
Exception
then
Catch
It
then
Return
Them
then
Return
Them
prepare
Session
Under
Test
given
Valid
Server
And
Client
Session
when
The
Details
Are
Requested
then
The
Details
Are
Returned
As
Strings
given
Broken
Server
Session
when
Uri
Is
Requested
Null
Is
Returned
given
Broken
Client
Session
when
Uri
Is
Requested
Null
Is
Returned
when
Failing
To
Create
Session
then
Throw
Exception
when
Failing
On
Handshake
then
Throw
Exception
when
Address
Not
Null
then
Send
Message
when
Address
Not
Null
then
Return
It
when
Address
Null
then
Return
Null
when
Closing
Session
then
Close
test
Generic
Error
test
Get
Error
Status
test
Get
Error
Message
test
Get
Gateway
Uri
init
when
Calling
With
Request
Attribute
then
Return
Proper
Error
Status
set
Up
get
Api
Message
given
Covered
Endpoint
Impropriety
Configure
Exception
when
Check
then
Return
Message
given
Covered
Unsupported
Resource
Class
Exception
when
Check
then
Return
Message
given
Non
Endpoint
Exception
when
Check
then
Return
Null
setup
assert
Correct
Message
test
Zuul
Timeout
Error
test
Zuul
Timeout
Error
Without
Cause
test
Zuul
Socket
Timeout
Error
setup
All
setup
provide
Exceptions
With
Relevant
Texts
given
Exception
Chain
when
Exception
Is
Raised
then
Request
Is
Properly
Aborted
assert
Correct
Response
setup
All
setup
provide
Exceptions
With
Relevant
Texts
given
Exception
Chain
when
Exception
Is
Raised
then
Adequately
Handle
assert
Correct
Response
setup
test
Zuul
Handshake
Exception
init
Mocks
setup
should
Return
Cause
Message
When
Token
Expire
Exception
should
Return
Cause
Message
When
Token
Not
Valid
Exception
should
Return
Cause
Message
When
Bad
Credentials
Exception
should
Return
Cause
Message
When
Saf
Idt
Auth
Exception
should
Return
Cause
Message
When
Saf
Idt
Exception
prepare
Check
Under
Test
given
Not
Found
Zuul
Exception
when
The
Request
Is
Processed
then404Is
Returned
given
Service
Not
Accessible
Exception
when
The
Request
Is
Processed
then404Is
Returned
setup
given
One
Header
To
Ignore
given
Multiple
Headers
To
Ignore
given
Multiple
Headers
To
Ignore
With
Whitespace
given
No
Service
Instance
given
Null
Headers
To
Ignore
given
Empty
Headers
To
Ignore
prepare
Filter
Under
Test
given
There
Is
No
Service
Id
when
The
User
Requests
The
Path
then404Is
Properly
Returned
given
There
Is
Valid
Service
Id
when
The
User
Requests
The
Path
then
This
Filter
Is
Ignored
given
Valid
Setup
when
The
Filter
Is
Created
then
The
Correct
Configuration
Parameters
Are
Provided
set
Up
set
Up
set
Up
then
Parsed
Auth
Source
In
Request
Attribute
set
Up
then
Exception
Handler
Is
Called
set
Up
then
Exception
Is
Handled
setup
setup
setup
when
Response
Is
Empty
then
Length
Is
Zero
when
Response
Contains
Data
then
Compress
when
Status
Is
No
Content
then
Content
Is
Not
Compressed
setup
when
Response
Contains
Data
then
Compress
setup
when
Route
Not
Within
Enabled
then
Content
Is
Not
Compressed
setup
dont
Wrap
The
Response
set
Up
the
Compression
Doesnt
Happen
when
No
Instances
Available
then
Do
Not
Wrap
Response
set
Up
when
Should
Filter
Is
False
then
Url
Not
Defined
In
Metadata
Is
Not
Modified
when
Should
Filter
Is
True
then
Url
Defined
In
Metadata
Is
Modified
should
Filter
Is
True
arguments
test
Context
Key
URL
Filtering
should
Filter
Is
False
arguments
test
Context
Key
URL
Filtering
when
Should
Filter
Is
True
arguments
test
Context
Key
URL
Filtering
when
Should
Filter
Is
False
arguments
test
Context
Key
URL
Filtering
should
Return
Filter
Type
should
Return
Filter
Order
normalize
Original
Path
Should
Return
Empty
String
set
Up
when
Header
Present
then
Nulls
Header
when
Header
Not
Present
then
Doesnt
Do
Anything
when
Other
Headers
Present
then
Doesnt
Change
Them
when
Headers
On
Request
then
Take
Them
Into
Account
set
Up
response
Is
Modified
response
Is
Modified
Old
Path
Format
should
Return
Filter
Type
should
Return
Filter
Order
proxy
Starts
With
Slash
proxy
Starts
With
Slash
Old
Path
Format
proxy
Ends
With
Slash
proxy
Ends
With
Slash
Old
Path
Format
proxy
Is
Null
proxy
Is
Empty
should
Filter
UI
should
Not
Filter
API
should
Not
Filter
API
Old
Path
Format
should
Not
Filter
When
It
Ends
With
Slash
should
Not
Filter
When
It
Ends
With
Slash
Old
Path
Format
service
Id
Is
Null
service
Id
Is
Empty
set
Request
Context
To
Old
Path
Format
init
Message
Service
setup
should
Reject
Encoded
Slash
Requests
When
Configured
To
Reject
should
Allow
Non
Encoded
Slash
Requests
And
Move
To
Next
Filter
When
Configured
To
Reject
should
Allow
Any
Request
And
Move
To
Next
Filter
When
Configured
To
Allow
should
Throw
Servlet
Exception
On
IO
Exception
When
Writing
Response
test
Config
provide
Auth
Sources
test
Run
increment
create
Validation
Command
given
Invalid
Auth
Source
when
Auth
Source
Required
then
Call
Throught
given
Valid
Auth
Source
when
Auth
Source
Required
then
Rejected
given
Valid
Auth
Source
when
Command
Failed
then
Internal
Error
increment
given
Expired
Jwt
then
Call
Throught
given
Invalid
Auth
Source
when
Authentication
Exception
then
Reject
init
Message
Service
setup
given
Single
Instance
When
Configured
False
Should
Filter
given
Single
Instance
When
Configured
True
Should
Not
Filter
given
Single
Instance
When
Not
Configured
Should
Not
Filter
should
Return
Filter
Type
should
Return
Filter
Order
given
Multiple
Instances
When
Mixed
Setup
Should
Be
Pessimistic
should
Reject
Requests
With
Encoded
Characters
should
Allow
Requests
Without
Encoded
Characters
should
Pass
Null
Request
set
Up
verify
Filter
Properties
set
Up
when
Should
Filter
Is
False
then
Dont
Add
To
Cache
set
Up
when
Not
In
Cache
Add
Instance
To
Cache
when
In
Cache
Do
Nothing
dont
Store
Instance
Info
when
Should
Filter
Is
False
then
Dont
Store
Instance
Info
does
Not
Do
Anything
When
There
Is
No
Param
does
Not
Do
Anything
When
There
Is
Another
Param
sets
Cookie
For
Correct
Parameter
sets
Location
To
Dashboard
For
Api
Catalog
verify
Filter
Properties
writes
Header
With
Instance
Id
set
Up
given
Context
To
Run
when
Test
If
Filter
Runs
should
Run
Error
Filter
given
Context
To
Not
Run
when
Test
If
Filter
Runs
should
Run
Error
Filter
given
Filter
when
Run
then
No
Errors
given
Filter
No
Error
Path
when
Run
then
Error
With
Dispatcher
given
Filter
when
Get
Order
Should
Be
One
set
Up
given
Status
Code302
when
Should
Filter
Called
then
Pass
From
Filter
same
Server
And
Url
Matched
same
Server
And
Url
Not
Matched
host
Registered
And
Url
Matched
different
Server
And
Host
Port
Not
In
DS
And
Location
Contains
Gateway
URL
service
Url
End
With
Slash
should
Url
Cached
mock
Location
Same
Server
mock
Location
DS
Server
mock
Location
Other
Server
verify
Location
Updated
Same
Server
verify
Location
Not
Updated
get
Gateway
Config
Properties
setup
given
One
Header
To
Add
given
Multiple
Headers
To
Add
given
Multiple
Headers
To
Add
With
Whitespace
then
Whitespace
Is
Trimmed
given
Header
With
No
Value
given
Header
With
Separator
In
Header
Value
given
Null
Service
Instances
given
No
Service
Instances
given
No
Response
Headers
Config
given
Empty
Response
Headers
Config
set
Up
get
Default
Service
Instance
test
Status
Is
Up
When
Catalog
And
Discovery
Are
Available
test
Status
Is
Down
When
Discovery
Is
Not
Available
given
Zosmf
Is
Used
Anf
Zosmf
Is
Unavailable
when
Health
Is
Requested
then
Status
Is
Down
given
Zosmf
Is
Used
And
Available
when
Health
Is
Requested
then
Status
Is
Up
given
Custom
Catalog
Provider
when
Health
Is
Requested
then
Status
Is
Up
date
Bean
bean
Class1
bean
Class2
bean
Class3
beans
Conditional
Construct
Works
get
Day
get
Tuesday
get
Day
get
Monday
mock
Specs
when
Same
Bean
Name
Then
Default
Config
Behavior
Plus
Specific
Takes
Precedence
when
Different
Bean
Names
Then
Default
Config
Behavior
Plus
Specific
Creates
Multiple
Beans
can
Autowire
Property
Resolver
bean
That
Can
Autowire
Configured
Context
Name
context
Has
All
Required
Elements
context
Can
Be
Rebuilt
get
Bean
Class
get
Bean
To
Wire
To
wiring
Works
In
Context
And
From
Parent
Context
call
answer
given
Non
Entry
Expiration
Value
when
Call
Service
then
Throw
Exception
given
Null
when
Call
Service
then
Return
Null
given
Non
Expired
when
Call
Service
then
Return
First
given
Expired
when
Call
Service
then
Return
Second
given
Retry
If
Expired
Aspect
when
Get
Order
then
Not
Lowest
Precedence
store
item
Is
Retrieved
after
Deletion
Item
Is
Lost
set
Up
storage
Happens
To
Local
And
Remote
Cache
storage
Happens
To
Remote
Even
For
Conflict
storage
Fails
To
Remote
Cache
And
Stores
Local
retrieval
From
Remote
Has
Priority
delete
Removes
All
Entries
Local
And
Remote
set
Up
create
Without
Problem
create
With
Exception
From
Rest
Template
Throws
Defined
update
Without
Problem
update
With
Exception
From
Rest
Template
Throws
Defined
read
With
Null
Response
Or
Null
Body
read
Without
Problem
read
With
Excepton
From
Rest
Template
Throws
Defined
delete
Without
Problem
delete
With
Exception
From
Rest
Template
Throws
Defined
setup
when
Client
Returns
Body
then
Parse
The
Response
when
Client
Returns
Empty
Body
then
Return
Null
when
Client
Returns
Not
Ok
then
Throw
Exception
when
Response
Body
Is
Null
then
Return
Null
when
Client
Throws
Exception
then
Translate
Exception
setup
when
Call
Are
Performed
then
Return
Success
Response
create
With
Exception
From
Rest
Template
Throws
Defined
set
Up
test
Service
when
Get
All
Services
then
Return
List
when
Filter
By
Api
Id
then
Return
List
when
Api
Id
Does
Not
Exists
then
Return404
when
Service
Is
Up
then
Return
OK
when
Service
Does
Not
Exist
then
Return
Not
Found
set
Up
when
Listing
All
Services
then
Return
List
when
Listing
Services
By
Api
Id
then
Return
List
when
Instance
Provides
Full
Info
then
Return
All
Details
when
Instance
Provides
Little
Info
then
Still
Return
Up
when
No
Instances
then
Return
Service
Down
when
Service
Never
Registered
then
Return
Service
Unknown
when
One
Instance
Is
Up
And
Others
Not
Return
Up
when
No
Instance
Is
Up
Return
Down
check
Apis
Versioning
create
Multiple
Apis
Instance
create
Basic
Test
Instance
create
Basic
Test
Instance
create
Basic
Test
Instance
create
Basic
Test
Instance
create
Full
Test
Instance
setup
tear
Down
lock
And
Clear
Request
Context
unlock
Request
Context
create
Zowe
Jwt
Token
create
Zosmf
Jwt
Token
create
Token
get
Certificate
correct
Base64
get
Certificate
get
Json
String
From
Resource
set
Up
given
No
Server
List
when
Choose
Server
then
Set
Nothing
given
Server
List
when
Choose
Server
then
Set
Chosen
Instance
Info
To
Request
Context
given
Unexpected
Server
Implementation
when
Choose
Server
then
Fail
Fast
tear
Down
override
Always
Chooses
Client
With
Cert
given
Bypass
Scheme
when
No
Authentication
then
Without
Certificate
given
No
Bypass
Scheme
when
Choose
then
With
Certificate
given
Bypass
Scheme
when
Generic
Authentication
then
Without
given
Bypass
Scheme
And
X509Authentication
when
X509Not
Authenticated
then
Without
given
Bypass
Scheme
And
X509Authentication
when
X509Authenticated
then
With
given
No
Bypass
Scheme
X509Authentication
when
X509Authenticated
then
Without
http
Client
Chooser
dummy
Autowire
Test
given
Proxy
In
Test
Env
when
Method
Called
then
Invoked
setup
chooses
Round
Robin
setup
use
All
Predicates
no
Server
Fits
The
Predicate
should
Fail
Fast
create
Server
set
Up
extracts
Random
Instance
Info
extract
Empty
From
Empty
List
set
Up
fail
Fast
get
Discovery
Enabled
Server
setup
does
Not
Filter
set
Up
filters
On
Instance
Id
always
Valid
set
Up
test
To
String
return
True
set
Up
return
True
set
Up
without
Cached
Value
return
True
set
Up
with
The
Same
Instance
Id
return
True
with
Instance
Id
Null
return
True
with
Different
Instance
Id
return
False
set
Up
with
Different
Instance
Id
return
True
discovery
Enabled
Server
when
Choose
then
Produces
Service
Instance
when
Choose
And
No
Instance
Available
then
Return
Null
set
Up
given
Request
Context
when
Request
Context
Has
Info
then
Retrieve
It
given
Request
Context
when
No
Info
then
Retrieve
Empty
given
Empty
Context
when
Info
Stored
then
Store
Info
given
Context
With
Instance
Info
when
Set
Null
then
Retrieve
Empty
set
Up
cors
Is
Enabled
Per
Service
allowed
Origins
Are
Provided
cors
Is
Enabled
Per
Service
allowed
Origins
Arent
Provided
assert
Default
Configuration
cors
Is
Disabled
Per
Service
set
Up
refresh
On
Event
Test
set
Metadata
Processor
given
Metadata
when
Process
then
Set
System
Properties
given
Empty
Metadata
when
Process
then
Do
Not
Set
System
Properties
given
Non
Numeric
Metadata
when
Process
then
Do
Not
Set
System
Properties
given
Mocked
Event
when
On
Event
then
Call
Process
assert
That
Values
Are
Set
prepare
Applications
get
Standard
Instance
create
Valid
Metadata
create
Non
Numeric
Metadata
create
Metadata
given
Eureka
Client
when
Retrieve
Registered
Apps
then
Return
Apps
set
Up
returns
No
Content
returns
Unauthorized
When
Resource
Access
Not
Present
invalid
Request
Body
Returns
Bad
Request
set
Up
test
Evict
All
test
Evict
set
Up
invalidate
Jwt
Token
distribute
Invalidate
get
Jwk
init
Public
Keys
test
Get
All
Public
Keys
use
Zowe
Jwt
return
Empty
When
Unknown
use
Zosmf
when
Online
And
Support
Jwt
return
Valid
Pem
Key
when
Not
Ready
return
Internal
Server
Error
when
Zosmf
Returns
Incorrect
Amount
Of
Keys
return
Internal
Server
Error
return
Valid
Pem
Key
validate
Access
Token
return401
set
Up
then
Invalidate
Again
then
Invalidate
then
Invalidate
For
Scope
then
Invalidate
Own
Tokens
then
Return
Error
Message
then
Remove
Rules
And
Tokens
validate
OIDC
Token
return401
setup
given
Listed
Client
Id
then
Return
Webfinger
Records
given
No
Client
Id
then
Return
Empty
List
given
Exception
Thrown
By
Webfinger
Provider
then
Return
Error
Message
when
Request
With
Userid
then
Return
Not
Found
setup
given
Build
Version
Null
when
Home
Page
Called
then
Build
Info
Should
Static
Text
given
Specific
Build
Version
when
Home
Page
Called
then
Build
Info
Should
Be
Given
Version
And
Number
given
Build
Info
when
Home
Page
Called
then
Home
Page
Should
Return
Home
Literal
given
Api
Catalog
With
Null
Instances
when
Home
Page
Called
then
Home
Page
Model
Should
Contain
given
Api
Catalogue
Is
Empty
when
Home
Page
Is
Called
then
There
Is
No
Message
Around
The
Catalog
given
Api
Catalog
Instance
With
Empty
Auth
Service
when
Home
Page
Called
then
Home
Page
Model
Should
Be
Reported
Down
given
Api
Catalog
With
Empty
Instances
With
Empty
Auth
Service
when
Home
Page
Called
then
Home
Page
Model
Should
Be
Reported
Down
given
Api
Catalog
With
Empty
Instances
when
Home
Page
Called
then
Home
Page
Model
Should
Contain
given
One
Api
Catalog
Instance
when
Home
Page
Called
then
Home
Page
Model
Should
Contain
given
Api
Catalog
Instances
when
Home
Page
Called
then
Home
Page
Model
Should
Contain
assert
Catalog
Is
Down
Message
Shown
assert
Catalog
Is
Up
Message
Shown
discovery
Return
Valid
Zosmf
Authorization
Instance
discovery
Return
Valid
Api
Catalog
given
Discovery
Service
With
Null
Instances
when
Home
Page
Called
then
Home
Page
Model
Should
Contain
given
Discovery
Service
With
Empty
Instances
when
Home
Page
Called
then
Home
Page
Model
Should
Contain
given
Discovery
Service
With
One
Instance
when
Home
Page
Called
then
Home
Page
Model
Should
Contain
given
Discovery
Service
With
More
Than
One
Instance
when
Home
Page
Called
then
Home
Page
Model
Should
Contain
given
Dummy
Provider
when
Home
Page
Called
then
Home
Page
Model
Should
Contain
given
ZOSMF
Provider
Isnt
Running
when
Home
Page
Called
then
Home
Page
Model
Should
Contain
Not
Running
given
ZOSMF
Provider
Running
when
Home
Page
Called
then
Home
Page
Model
Should
Contain
Running
given
Metrics
Service
Enabled
And
Running
then
Link
Enabled
given
Metrics
Service
Enabled
And
Not
Running
then
Link
Not
Enabled
given
Metrics
Service
Not
Enabled
then
No
Link
discovery
Return
Valid
Metrics
Service
assert
Metrics
Is
Down
Message
Shown
assert
Metrics
Is
Up
Message
Shown
assert
Metrics
Not
Shown
set
Up
given
Specific
Versions
when
Version
Endpoint
Called
then
Version
Info
Should
Be
Given
In
Successful
Response
get
Dummy
Version
Info
init
when
Calling
then
Return
No
Content
setup
given
Token
when
Logout
then
Token
Invalidated
given
No
Token
when
Logout
then
Handle
Failure
given
Invalid
Token
format
Exception
Is
Thrown
then
Its
Correctly
Handled
given
Invalid
Token
validity
Exception
Is
Thrown
then
Its
Correctly
Handled
given
Already
Invalidated
Token
when
Logout
then
Handle
Failure
given
Invalidated
Token
when
Token
Not
Valid
Failure
Throws
Error
then
Error
Thrown
given
Invalidated
Token
when
Generic
Authentication
Failure
then
Handle
Failure
given
Logout
Request
when
Generic
Failure
then
Handle
Failure
given
Logout
Request
when
Failure
Handling
Error
then
Log
Error
setup
should
Call
Auth
Provider
With
Certificate
should
Authenticate
With
Certificate
should
Not
Authenticate
set
Up
when
Get
Default
Origins
then
Allow
Https
setup
test
Get
Login
Auth
Provider
Name
test
Set
Login
Auth
Provider
test
Set
Login
Auth
Provider
without
Dev
Profile
test
Authenticate
test
Support
values
given
Client
Id
then
Return
Only
Related
Records
setup
should
Call
Authentication
Manager
Authenticate
should
Reject
Http
Methods
should
Reject
If
Token
Is
Not
Present
should
Reject
If
Not
Authenticated
By
Certficate
given
Invalid
Token
when
Query
Is
Called
then
Throw
Token
Not
Valid
Exception
setup
should
Set
Response
Parameters
should
Write
Model
To
Body
set
Up
unknown
Type
Of
Authentication
Doesnt
Do
Anything
token
Type
Of
Authentication
Issues
Token
set
Up
authenticate
With
Valid
Token
supports
Authentication
can
Be
Constructed
For
Specific
Endpoint
does
Not
Try
To
Call
Endpoint
When
Endpoint
Doesnt
Exist
authenticates
Request
When
Endpoint
Responds200
invalidates
Requestd
When
Endpoint
Responds401
invalidates
Requestd
When
Rest
Template
Throws
Unauthorized
throws
Service
Not
Accessible
When
Responds
Some
Other
RC
throws
Service
Not
Accesible
When
Endpoint
Does
Not
Exist
throws
Runtime
Exception
From
Call
get
Zosmf
Service
Spy
get
Zosmf
Service
With
Validation
Strategy
get
Basic
Request
Headers
add
CSRF
Header
then
Use
Auth
Endpoint
then
Should
Throw
Exception
then
Throw
Token
Exception
then
Throw
Token
Exception
then
Authenticate
With
Success
set
Up
then
Change
Password
With
Success
then
Change
Password
With
Client
Error
then
Change
Password
With
Unsupported
Zosmf
then
Change
Password
With
Server
Error
then
Change
Password
With
Zosmf
Internal
Error
then
Change
Password
With
Zosmf
Validation
Error
then
Provided
Username
Password
then
Provided
Login
Request
when
Unauthorized
then
Authentication
Endpoint
Exists
when
Not
Found
then
Authentication
Endpoint
Exists
when
Unauthorized
then
Jwt
Endpoint
Exists
when
Unknown
Client
Exception
then
Jwt
Endpoint
Exists
when
Server
Exception
then
Jwt
Endpoint
Exists
when
Random
Exception
then
Jwt
Endpoint
Exists
prepare
Zosmf
Endpoint
set
Up
given
Exception
then
Handle
Exceptions
given
One
Validation
Strategy
then
Return
Validation
Strategy
Result
given
First
Validation
Strategy
Authentications
then
Dont
Use
Second
Validation
Strategy
given
First
Strategy
Invalid
And
Second
Valid
then
Token
Is
Valid
does
Not
Rethrow
Exceptions
From
Validation
Strategies
supplies
Validation
Request
With
Verified
Endpoints
List
do
Validate
then
Return
Given
Data
then
Invalidate
With
Success
then
Invalidate
LTPA
then
Test
Invalidate
Unexpected
Http
Status
Code
then
Test
Invalidate
Runtime
Exception
then
Success
then
Return
Null
then
Throw
Exception
then
Return
Invalid
Format
set
Up
given
Zosmf
Is
Available
then
True
Is
Returned
set
Up
tear
Down
logged
Values
given
Get
URI
Fails
then
False
Is
Returned
given
Zosmf
Is
Unavailable
then
False
Is
Returned
given
SSL
Error
then
False
And
Exception
given
Connection
Issue
then
False
And
Exception
given
Unexpected
Status
Code
then
False
And
Exception
set
Up
given
Get
URI
Fails
then
False
Returned
setup
given
Zosmf
Auth
Source
then
Same
Token
Is
Returned
given
Zowe
Auth
Source
With
Ltpa
then
Same
Ltpa
Token
Is
Returned
given
Zowe
Auth
Source
Without
Ltpa
then
New
Jwt
Token
Is
Returned
given
Other
Auth
Source
And
Zosmf
Produces
Jwt
then
New
Jwt
Token
Is
Returned
given
Other
Auth
Source
And
Zosmf
Produces
Only
Ltpa
then
New
Ltpa
Token
Is
Returned
given
Other
Auth
Source
And
Zosma
Is
Not
Available
then
Exception
Is
Thrown
test
Handle
Jwt
Parser
Exception
For
Expired
Token
test
Handle
Jwt
Parser
Exception
For
Invalid
Token
test
Handle
Jwt
Parser
Runtime
Exception
setup
setup
then
Create
Personal
Access
Token
then
Create
Valid
Jwt
Token
then
Parse
Jwt
Token
As
Query
Response
then
Get
Token
With
Default
Expiration
then
Get
Short
Lived
Token
then
Throw
Token
Not
Valid
Exception
given
Null
Value
then
Throw
Token
Not
Valid
Exception
given
Expired
Token
then
Throws
Token
Expire
Exception
when
Parse
JWT
then
Throw
Token
Not
Valid
Exception
then
Throws
Token
Not
Valid
Exception
given
Jwt
In
Cookie
then
Read
Jwt
Token
From
Request
Cookie
given
Jwt
In
Authorization
Header
then
Read
Jwt
From
Request
Header
setup
given
Jwt
In
Cookie
And
Header
when
Get
Jwt
Token
From
Request
then
Prefer
Cookie
given
Other
Cookies
And
Jwt
In
Header
when
Get
Jwt
Token
From
Request
then
Take
From
Header
given
Token
Is
Available
In
Cookie
then
Get
From
Cookie
given
Token
Not
Present
In
Cookie
then
Get
From
Header
given
No
Token
In
Request
then
Return
Empty
Result
given
LTPA
Exists
then
Read
Ltpa
Token
From
Jwt
Token
given
Invalid
JWT
then
Throw
Token
Not
Valid
Exception
given
Expired
JWT
then
Throw
Token
Expire
Exception
given
Incorrect
LTPA
Token
then
Throw
Token
Not
Valid
Exception
create
Expired
Jwt
Token
create
Jwt
Token
With
Expiry
create
Instance
Info
given
No
Instances
Available
then
Return
False
given
Token
Was
Not
Invalidate
On
Another
Instance
then
Rethrow
Exception
given
Token
Was
Already
Invalidate
On
Another
Instance
then
Return
Invalidated
True
invalidate
Zosmf
Jwt
Token
invalidate
Zosmf
Ltpa
Token
then
Validate
Zosmf
Jwt
Token
then
Return
Correct
Origin
when
Token
Is
Expired
then
Throw
Exception
when
Token
Is
Not
Valid
then
Throw
Exception
stub
JWT
Security
For
Sign
And
Verify
stub
JWT
Security
For
Sign
then
Use
Cache
given
Create
Token
Authentication
then
Create
Correct
Object
when
No
Service
Available
then
Return
Failure
when
No
Instance
Available
then
Return
Failure
when
Instances
Available
then
Return
Success
set
Up
given
Zosmf
Is
Unavailable
when
Token
Is
Requested
then
Token
Created
By
Api
Ml
Is
Returned
given
Zosmf
Isnt
Present
Because
Of
Error
when
Token
Is
Requested
should
Return
Token
Created
By
Api
Ml
given
Zosmf
Is
Available
when
Token
Is
Requested
then
Token
Created
By
Zosmf
Is
Returned
given
Zosmf
Is
Available
But
Passticket
Generation
Fails
when
Token
Is
Requested
then
Exception
Is
Thrown
given
No
Zosmf
when
Creating
Zosmf
Token
then
Return
Empty
Result
given
Zosmf
Available
when
Creating
Zosmf
Token
then
Return
Empty
Result
set
Up
given
Valid
Response
given
Unauthorized
Response
given
Bad
Response
given
Internal
Error
Response
With
Empty
Body
given
Internal
Error
Response
given
No
Saf
Token
given
Unauthenticated
given
Other
Wrong
Response
given
Correct
Response
given
Internal
Error
Response
init
tear
Down
create
Instance
Info
create
Instance
Info
create
Instance
Info
create
Application
provide
Auth
Sources
provide
Auth
Sources2Pairs
provide
Auth
Sources
List
test
Get
Authentication
From
Instance
Info
setup
then
Return
Null
then
Return
Null
and
All
Instances
Has
Same
Authentication
then
Return
Authentication
and
Instances
Have
Empty
Authentication
then
Return
Null
and
Instances
Have
Null
Authentication
then
Return
Null
found
Authentication
Is
Null
then
Return
Null
found
Authentication
Is
Empty
then
Return
Null
test
Get
Authentication
Command
test
Get
Authentication
Command
when
No
Auth
Source
test
Get
Authentication
Command
By
Service
Id
test
Get
Authentication
Command
By
Service
Id
Cache
test
Evict
Cache
Service
test
No
Application
given
Service
Id
And
Auth
Source
when
Expiring
Command
then
Return
New
One
apply
is
Required
Valid
Source
set
Up
set
Up
given
Saf
Is
Used
then
Proper
Keys
Are
Initialized
given
Zosmf
Is
Used
Without
Jwt
then
Proper
Keys
Are
Initialized
given
Zosmf
Configured
With
Ltpa
then
Proper
Keys
Are
Initialized
set
Up
given
Zosmf
Is
Used
With
Valid
Jwt
then
Missing
Jwt
Is
Ignored
given
Saf
Is
Used
exception
Is
Thrown
given
Zosmf
Is
Used
Without
Jwt
exception
Is
Thrown
given
Zosmf
Configured
With
Ltpa
then
Exception
Is
Thrown
set
Up
given
Zosmf
Isnt
Registered
At
The
Startup
But
Registers
Later
then
Proper
Keys
Are
Initialized
given
Multiple
Eureka
Events
then
Check
Zosmf
When
Cache
Refreshed
Event
given
Cache
Refreshed
Events
then
Check
Zosmf
For
Each
set
Up
as
Set
when
One
Present
as
One
Key
when
Key
Not
Loaded
Empty
setup
setup
initialized
then
Jwks
Fullfilled
when
Request
Fails
then
Not
Initialized
when
Uri
Not
Provided
then
Not
Initialized
when
Invalid
Key
then
Not
Initialized
init
Jwks
when
Valid
Token
Expired
then
Return
Invalid
when
Validtoken
then
Return
Valid
when
Invalid
Token
then
Return
Invalid
when
No
Jwks
then
Return
Invalid
when
Token
Is
Null
then
Return
Invalid
when
Token
Is
Empty
then
Return
Invalid
when
Invalid
Client
Id
then
Return
Invalid
when
Invalid
Client
Secret
then
Return
Invalid
set
Up
should
Not
Modify
Jwks
Uri
setup
init
Tokens
invalidate
Token
invalidate
All
User
Tokens
invalidate
All
Service
Tokens
given
Same
Token
return
Invalidated
given
Salt
Not
Already
In
Cache
then
Generate
And
Store
New
given
Different
Token
return
Not
Invalidated
given
Token
With
User
Id
Matching
Rule
return
Invalidated
given
Token
With
Scope
Matching
Rule
return
Invalidated
given
User
And
Valid
Expiration
Test
then
Token
Is
Created
given
Scoped
Token
when
Scope
Is
Listed
then
Return
Valid
invalid
Scopes
given
Scoped
Token
when
Scope
Is
Not
Listed
then
Return
Invalid
given
Token
Without
Scopes
then
Return
Invalid
then
Evict
Non
Relevant
Tokens
And
Rules
create
Test
Token
should
Parse
Jwks
Format
With
Extra
Properties
should
Parse
Expected
Jwks
Format
test
Scheme
provide
Auth
Sources
create
Scheme
get
Scheme
is
Default
create
Command
get
Auth
Source
test
Init
OK
test
Init
No
Default
test
Init
Multiple
Defaults
test
Init
Multiple
Same
Scheme
test
Get
Schema
setup
when
Bypass
Authentication
then
By
Pass
Command
Create
when
Http
Pass
Ticket
Authentication
then
Http
Pass
Ticket
Command
Create
when
Authentication
Scheme
Is
Null
then
By
Pass
Ticket
Command
Create
when
Null
Authentication
then
By
Pass
Ticket
Command
Create
test
Unknown
Scheme
set
Up
tear
Down
test
Get
Auth
Source
set
Up
setup
given
Authenticated
Jwt
Token
given
Idt
Without
Expiration
given
Null
Auth
Source
given
No
Raw
Auth
Source
given
Saf
Idt
Exception
given
Pass
Ticket
Exception
given
Auth
Token
Not
Valid
Exception
given
Auth
Token
Expired
Exception
given
Saf
Id
Token
Not
Valid
Exception
given
Saf
Id
Token
Expired
given
No
User
Id
From
Auth
Source
given
No
Appl
Id
From
Authentication
get
Value
Of
Zuul
Header
setup
init
test
Get
Auth
Source
when
Public
Certificate
Is
Requested
only
Correct
Header
Is
Set
when
All
Headers
Are
Requested
all
Headers
Are
Set
certificate
Pass
On
Is
Set
After
Apply
when
Authentication
Headers
Missing
then
Send
All
Headers
when
Unknown
Authentication
Header
then
No
Header
Is
Set
when
Cert
With
Short
Expiration
then
Use
Cert
Expiration
when
Cert
With
Long
Expiration
then
Use
Default
Expiration
when
Cannot
Get
Expiration
From
Cert
then
Use
Default
Expiration
given
No
Client
Certificate
and
X509Scheme
Required
then
Throws
given
Exception
During
Parsing
then
No
Header
Is
Set
given
Auth
Source
Without
Content
then
Throws
given
Null
Parsing
Result
then
No
Header
Is
Set
verify
No
Headers
Set
init
when
Client
Cert
In
Request
In
Custom
Attribute
then
Auth
Source
Is
Present
when
Internal
Apiml
Cert
In
Request
In
Standard
Attribute
then
Auth
Source
Is
Present
init
setup
given
X509Source
return
Null
Ltpa
given
X509Source
then
Translate
Exception
init
when
No
Client
Cert
In
Request
then
Throws
when
Validate
then
False
when
Parse
then
Null
when
Get
LTPA
then
Null
when
Validate
then
False
when
Parse
then
Null
setup
when
Client
Cert
In
Request
then
Auth
Source
Is
Present
when
Validate
then
Correct
when
Parse
then
Correct
setup
when
Internal
Apiml
Cert
In
Request
In
Standard
Attribute
then
Throws
when
Incorrect
Auth
Source
Type
then
Is
Valid
False
when
Unknown
Auth
Source
then
Parsed
Is
Null
when
Authentication
Service
Exception
then
Throw
When
Parse
return
Null
When
Certificate
Encoding
Exception
Is
Thrown
setup
clean
Up
return
OIDC
Source
Mapper
return
Logger
given
Oidc
Token
In
Request
Context
then
Return
The
Token
given
Pat
Token
In
Request
Context
then
Return
Empty
given
Token
In
Auth
Source
then
Return
Valid
when
Parse
then
Correct
given
No
Mapping
when
Parse
then
Throw
Exception
given
Valid
Auth
Source
then
Return
LTPA
Token
given
Valid
Auth
Source
then
Return
JWT
given
JWT
Auth
Source
When
Validating
then
Return
False
given
JWT
Auth
Source
then
Return
Null
when
Token
Is
Null
then
Return
Token
Invalid
when
Token
Is
Empty
then
Return
Token
Invalid
when
Is
Invalid
then
Return
Token
Invalid
when
Parse
then
Return
Null
when
Token
Is
Expired
then
Throw
when
Token
Is
Not
Valid
then
Throw
mock
Valid
Auth
Source
setup
given
Zosmf
Token
In
Request
then
Auth
Source
Is
Present
given
Zowe
Token
In
Request
then
Auth
Source
Is
Present
given
Pat
Token
In
Request
then
Auth
Source
Is
Not
Present
given
No
Token
In
Request
then
Auth
Source
Is
Present
given
Invalid
Auth
Source
then
Auth
Source
Is
Invalid
then
Auth
Source
Is
Invalid
then
Parsed
Is
Null
then
Null
Ltpa
given
Null
Token
In
Auth
Source
then
Auth
Source
Is
Invalid
given
Null
Token
In
Auth
Source
then
Parsed
Is
Null
given
Null
Token
In
Auth
Source
then
Null
Ltpa
when
Parse
then
Null
then
Is
Invalid
when
Get
Ltpa
then
Null
then
Is
Valid
then
Parse
Correctly
then
Ltpa
Generated
when
Is
Valid
then
Throw
when
Parse
then
Throw
when
Get
Ltpa
then
Throw
when
Get
Token
then
Throw
when
Is
Valid
then
Throw
when
Parse
then
Throw
when
Get
Ltpa
then
Throw
when
Get
Token
then
Throw
get
Raw
Source
get
Type
set
Up
clean
Up
return
PAT
Source
Mapper
given
Pat
Token
In
Request
Context
then
Return
The
Token
given
Zowe
Token
In
Request
Context
then
Return
Empty
given
Token
In
Auth
Source
then
Return
Valid
given
Scope
From
Header
when
Is
Valid
then
Return
The
Token
when
Get
Auth
Source
From
Request
then
Return
Auth
Source
when
Exception
Is
Thrown
then
Return
Token
Invalid
when
No
Scope
then
Return
Token
Invalid
when
Token
Is
Expired
then
Throw
when
Token
Is
Not
Valid
then
Throw
given
PAT
Auth
Source
then
Return
Correct
User
Info
given
JWT
Auth
Source
then
Return
Null
given
Valid
Auth
Source
then
Return
LTPA
Token
given
Valid
Auth
Source
then
Return
JWT
init
then
Jwt
Auth
Source
Is
Present
then
Auth
Source
Is
Valid
then
Auth
Source
Is
Parsed
then
Ltpa
Token
Generated
init
then
X509Auth
Source
Is
Present
then
Auth
Source
Is
Valid
then
Auth
Source
Is
Parsed
init
then
Auth
Source
Is
Empty
then
Jwt
Auth
Source
Is
Present
then
Jwt
Auth
Source
Is
Present
then
Auth
Source
Is
Valid
then
Auth
Source
Is
Parsed
then
Ltpa
Token
Generated
init
then
Auth
Source
Is
Empty
then
Jwt
Auth
Source
Is
Present
then
Auth
Source
Is
Valid
then
Auth
Source
Is
Parsed
then
Ltpa
Token
Generated
init
then
Auth
Source
Is
Empty
then
No
Auth
Source
Is
Present
then
Auth
Source
Is
Invalid
then
Auth
Source
Is
Not
Parsed
get
Raw
Source
get
Type
then
Origin
Is
Zosmf
then
Origin
Is
Zowe
then
Origin
Is
X509
then
Origin
Is
X509
then
Throw
Exception
test
Empty
Command
test
Is
Required
Valid
Jwt
then
Return
Message
init
tear
Everything
Down
test
Get
Auth
Source
returns
Correct
Scheme
test
Is
Required
Valid
Jwt
given
No
Auth
Source
then
Throws
given
Auth
Source
Without
Content
then
Throws
given
Null
Parsing
Result
then
Throws
given
No
Userid
In
Parsing
Result
then
Throws
test
Create
Command
command
Is
Always
Expired
get
Exception
When
User
Id
Not
Valid
given
Jwt
In
Cookie
when
Apply
then
Jwt
Is
Removed
given
Custom
Auth
Header
when
Apply
then
Header
Is
Added
get
Pass
Ticket
Command
prepare
Context
For
Tests
return
Correct
Scheme
test
Get
Auth
Source
given
Auth
Source
when
Zosmf
Is
Not
Set
As
Auth
Provider
then
Throw
Exception
given
Auth
Source
Without
Content
then
Throws
given
Null
Parsing
Result
then
Throws
setup
given
Zowe
Jwt
Auth
Source
then
Add
Only
Ltpa
Cookie
given
Zowe
Jwt
Auth
Source
and
Existing
Cookie
then
Append
Cookie
With
Ltpa
given
Invalid
Zowe
Jwt
Auth
Source
then
Set
Error
Header
given
Expired
Zowe
Jwt
Auth
Source
then
Throw
Jwt
Token
Exception
then
Only
Jwt
Token
Is
Forwarded
In
Cookie
setup
given
Client
Certificate
then
Add
Zuul
Header
when
User
Not
Mapped
To
Certificate
then
Throws
given
Auth
Source
Without
Expiration
then
Use
Default
Expiration
given
Auth
With
Expiration
Set
To
Now
then
Command
Is
Expired
prepare
Parsed
Auth
Source
For
Time
given
Token
Expired
One
Sec
Ago
then
Command
Is
Expired
given
Token
That
Will
Expire
Soon
then
Command
Is
Not
Expired
when
Cannot
Get
Expiration
then
Use
Default
Expiration
setup
test
Get
Auth
Source
given
Null
Parsing
Result
then
Throws
when
Cannot
Get
Expiration
then
Use
Default
Expiration
when
Valid
JWT
Auth
Source
then
Update
Zuul
Header
With
JW
Token
when
Invalid
Jwt
then
Throws
when
Expired
Jwt
then
Throws
when
Valid
JWT
Auth
Source
then
Command
Is
Not
Expired
when
Expired
JWT
Auth
Source
then
Command
Is
Expired
setup
when
Valid
then
Update
Zuul
Header
With
JW
Token
when
Jwt
Cannot
Be
Created
From
X509
then
Throws
when
No
JWT
Returned
then
Throws
when
Valid
X509Auth
Source
then
Command
Is
Not
Expired
given
No
Client
Certificate
then
Command
Creation
Fails
when
Expired
X509Auth
Source
then
Command
Is
Expired
then
Add
Request
Header
Containing
Token
given
No
Jwt
Token
given
Invalid
Token
given
Valid
Token
authentication
empty
Request
Gives
Empty
empty
When
Token
Not
Returned
empty
When
Token
Cannot
Be
Parsed
principal
With
Valid
Token
set
Up
should
Return
Dummy
Pass
Ticket
should
Fail
When
No
Application
Name
should
Fail
When
Generation
Fails
get
Zosmf
Response
create
Instance
Info
create
Application
create
Zosmf
Service
mock
Zosmf
Authentication
Rest
Call
Response
set
Up
login
With
Existing
User
login
With
Bad
User
no
Zosmf
Instance
no
Zosmf
Service
Id
not
Valid
Zosmf
Response
no
Domain
In
Response
invalid
Cookie
In
Response
cookie
With
Semicolon
should
Throw
New
Exception
If
Rest
Client
Exception
should
Throw
New
Exception
If
Resource
Access
Exception
should
Return
True
When
Support
Method
Is
Called
With
Correct
Class
test
Supports
test
Authenticate
Jwt
test
Jwt
given
Zosmf
Jwt
when
It
Is
Ignoring
then
Create
Zowe
Jwt
set
Up
will
Choose
Jwt
When
Present
will
Choose
Ltpa
When
Only
Ltpa
will
Choose
Ltpa
When
Override
will
Choose
Jwt
When
Override
will
Throw
When
Override
And
Wrong
Token
Ltpa
will
Throw
When
Override
And
Wrong
Token
Jwt
will
Throw
Bad
Credentials
When
No
Token
Present
Expecting
Ltpa
will
Throw
Bad
Credentials
When
No
Token
Present
Expecting
Jwt
setup
should
Return
Dummy
Token
should
Throw
Exception
If
Token
Not
Valid
should
Throw
Exception
If
Credentials
Are
Null
setup
should
Encode
Password
And
Return
Found
Username
should
Throw
Exception
If
Username
Not
Found
set
Up
x509Authentication
Is
Supported
given
X509Auth
Is
Disabled
when
Requested
then
Null
Is
Returned
given
Certificate
Isnt
Mapped
To
User
when
Authentication
Is
Required
then
Null
Is
Returned
given
Zosmf
Is
Present
when
Valid
Certificate
And
Pass
Ticket
Generate
return
Zosmf
Jwt
Token
set
Up
given
Zosmf
As
Authentication
then
Return
True
given
Saf
Is
Used
As
Authentication
then
Return
False
given
Zosmf
Is
Known
By
Discovery
then
Return
True
given
Zosmf
Is
Unknown
By
Discovery
then
Return
False
given
Zosmf
Is
Available
And
Accessible
then
True
Is
Returned
given
Zosmf
Isnt
Registered
To
The
Gateway
Yet
given
Saf
Is
Used
given
Zosmf
Is
Registered
But
Unavailable
given
Zosmf
Configuration
then
Support
Jwt
Returns
Properly
given
Endpoints
Exist
And
Ltpa
Override
Set
then
Support
Jwt
Retunds
False
given
Endpoints
Dont
Exist
And
Jwt
Override
Set
then
Support
Jwt
Returns
True
provide
Zosmf
Configuration
set
Up
given
Zosmf
Auth
Configuration
Ltpa
then
Return
True
given
Zosmf
Auth
Configuration
Not
Ltpa
then
Return
False
prepare
Valid
Zosmf
In
Discovery
set
Up
returns
Null
For
Valid
Authentication
returns
Details
For
Invalid
Authentication
returns
Null
For
Change
Password
when
New
Password
Equals
Old
then
Returns
Not
Success
get
Platform
User
Class
get
Platform
Returned
Class
get
Platform
User
setup
exception
On
Invalid
Credentials
valid
Authentication
On
On
Valid
Credentials
supports
Username
Password
Authentication
Token
setup
given
Valid
Credentials
when
Authenticate
then
Return
Null
given
In
Valid
Credentials
when
Authenticate
then
Return
Platform
Returned
Success
False
given
Expired
Password
when
Authenticate
then
Return
Emvs
Expire
given
Valid
Credentials
And
New
Valid
Password
when
Change
Password
then
Return
Null
given
Invalid
Credentials
And
New
Valid
Password
when
Change
Password
then
Return
Platform
Returned
Success
False
given
Valid
Credentials
And
Invalid
New
Password
when
Change
Password
then
Return
Platform
Returned
Success
False
setup
setup
then
Zos
User
Is
Returned
setup
then
Null
Is
Returned
when
Another
Auth
Source
Used
then
Null
Is
Returned
when
Registry
Is
Not
Provided
then
Null
Is
Returned
when
No
Distributed
Id
Provided
then
Null
Is
Returned
setup
teardown
when
Json
Processing
Exception
then
Null
Is
Returned
set
Final
Static
Field
provided
Valid
Certificate
return
User
Id
provided
Invalid
Certificate
return
Null
when
Wrong
DN
exception
Is
Thrown
when
Wrong
Auth
Source
return
Null
then
Display
To
String
when
Expected
Values
then
Response
Is
Valid
when
Wrong
Mapper
Input
then
Response
Is
Invalid
when
Mapping
Not
Exist
then
Response
Is
Invalid
when
Unexpected
Response
then
Response
Is
Invalid
when
Not
Authorized
then
Response
Is
Invalid
setup
setup
then
MF
User
Is
Returned
setup
then
MF
User
Is
Empty
setup
then
Response
Is
Null
setup
then
Response
Is
Null
setup
then
Response
Is
Null
setup
then
Response
Is
Null
setup
then
Response
Is
Null
when
Mapper
Url
Invalid
then
Response
Is
Null
when
Mapper
User
Invalid
then
Response
Is
Null
setup
setup
then
Return
Mapped
User
Id
setup
then
Null
Returned
setup
then
Null
Returned
setup
then
Null
Returned
get
Messages
get
All
Endpoints
get
Problems
With
Endpoint
Urls
search
Metadata
contains
All
add
add
size
is
Empty
to
String
create
Bad
Request
API
Response
Body
is
Response
Code
For
Method
Documented
get
Messages
get
All
Endpoints
get
Valid
Responses
generate
Url
For
Endpoint
get
Method
convert
Spring
Http
To
Swagger
get
Messages
get
All
Endpoints
get
Valid
Responses
generate
Url
For
Endpoint
get
Method
convert
Spring
Http
To
Swagger
check
Conformance
validate
Swagger
Document
check
Validate
Legacy
generate
Bad
Request
Response
Entity
check
Service
Is
Onboarded
get
Metadata
check
Metadata
Can
Be
Retrieved
check
Instance
Can
Be
Retrieved
validate
Service
Id
Format
check
Onboarding
find
Swagger
Url
get
Swagger
test
Endpoints
By
Calling
check
Endpoints
With
SSO
check
Endpoints
No
SSO
check
Endpoint
get
Response
from
Response
Return
Found
Problems
get
Problems
With
Endpoint
Urls
get
Authentication
Cookie
supports
SSO
parse
Swagger
init
cache
Manager
get
Composite
Key
Generator
get
Composite
Key
Generator
Without
Last
cache
Utils
get
Gateway
Config
Properties
transform
Service
simple
Host
Routing
Filter2
eureka
Instance
Config
Bean
get
Property
get
Instance
Id
get
Enabled
Port
message
Service
additional
Registration
primary
Apiml
Eureka
Client
additional
Discovery
Client
Wrapper
register
In
The
Apiml
Instance
rewrite
Instance
Info
Routes
after
Properties
Set
cache
Manager
Factory
Bean
cache
Manager
get
Composite
Key
Generator
get
Composite
Key
Generator
Without
Last
cache
Utils
add
Resource
Handlers
configure
Path
Match
multipart
Resolver
is
Multipart
shutdown
servlet
Container
get
Store
Path
create
Ssl
Connector
post
Process
After
Initialization
accept
intercept
notify
And
Flush
flush
Buffer
add
Routed
Services
locate
Routes
create
Route
Keys
location
Filter
encoded
Characters
Filter
slash
Filter
service
Authentication
Filter
service
Not
Found
Filter
page
Redirection
Filter
convert
Auth
Token
In
Uri
To
Cookie
Filter
routed
Server
Filter
post
Store
Load
Balancer
Cache
Filter
locate
Routes
create
Service
Routes
build
Route
filter
Ignored
discovery
Client
Route
Locator
apiml
Client
Route
Locator
routed
Services
Notifier
get
Emitter
consumer
get
Sse
Stream
get
Uri
Parts
get
Service
Id
get
Major
Version
find
Service
Instance
get
Target
Url
write
Error
add
Routed
Services
get
Pass
Ticket
get
Zosmf
Token
get
Zowe
Jwt
do
Filter
Internal
get
Api
Doc
load
is
Valid
Open
Api3Content
get
Open
API
Json
Content
get
Documentation
As
File
In
Jar
get
Documentation
From
Path
handle
Message
after
Connection
Closed
handle
Transport
Error
get
All
get
Sub
Protocols
init
Bean
add
Routed
Services
get
Target
Url
get
Routed
Sessions
after
Connection
Established
route
To
Service
open
Conn
close
Web
Socket
get
Uri
Parts
open
Web
Socket
Connection
after
Connection
Closed
close
close
handle
Message
get
Routed
Session
session
get
Web
Socket
Http
Headers
get
Web
Socket
Client
Session
get
Web
Socket
Server
Session
create
Web
Socket
Client
Session
handle
Execution
Exception
web
Socket
Proxy
Exception
send
Message
To
Server
close
get
Server
Remote
Address
get
Server
Uri
get
Client
Uri
get
Client
Id
session
get
Client
Instance
close
Client
register
Web
Socket
Handlers
get
Session
get
Error
Status
get
Error
Message
get
Gateway
Uri
get
Error
Path
error
create
Response
For
Internal
Error
check
For
Specific
Errors
get
Error
Path
not
Found400Http
Response
check
Error
tls
Error
Response
check
Error
gateway
Timeout
Response
check
Error
get
Previous
Cause
check
Error
check
Error
get
Api
Message
View
Response
Entity
create
Response
create
Response
check
Error
check
Error
check
Error
get
Api
Message
View
Response
Entity
customize
filter
Order
should
Filter
run
get
Service
add
Routed
Services
is
Request
That
Can
Be
Processed
normalize
Original
Path
should
Filter
filter
Order
run
filter
Order
should
Filter
run
check
Request
For
Encoded
Characters
reject
Request
get
Message
String
path
Contains
filter
Order
should
Filter
run
do
Filter
filter
Order
should
Filter
run
null
Headers
Of
Interest
Into
Zuul
Request
Headers
include
Headers
From
Zuul
include
Headers
From
Request
filter
Type
filter
Order
should
Filter
run
send
Error
Message
is
Source
Valid
For
Command
do
Filter
Internal
requires
Compression
get
Instance
Info
For
Uri
request
Accepts
Compression
service
On
Route
Requests
Compression
filter
Order
should
Filter
run
do
Filter
Internal
filter
Order
should
Filter
run
remove
Eldest
Entry
should
Filter
filter
Order
run
update
Scheme
found
Url
In
Table
get
Matched
Url
From
DS
found
Matched
Url
In
Service
transform
Location
add
Routed
Services
filter
Order
should
Filter
run
filter
Order
run
set
Error
Path
filter
Type
filter
Order
should
Filter
run
convert
To
Pretty
Print
String
filter
Order
should
Filter
run
filter
Order
should
Filter
run
metadata
Exists
lb
Type
Is
Authentication
do
Health
Check
to
Status
predicate
Factory
set
Configurations
add
Initializer
set
Application
Context
create
Context
register
Configurations
From
Specifications
caching
Service
Client
load
Balancer
Cache
With
Remote
Cache
load
Balancer
Cache
Only
Local
Cache
store
store
To
Remote
Cache
create
To
Remote
Cache
update
To
Remote
Cache
is
Caused
By
Cache
Conflict
retrieve
delete
get
Key
get
Default
Headers
create
append
List
read
All
Maps
evict
Tokens
evict
Rules
read
update
delete
get
Order
process
evict
Cache
Service
evict
Cache
All
Service
refresh
evict
main
get
Services
Info
get
Services
Info
get
Service
Info
get
Base
Url
get
Service
Info
get
Apiml
get
Api
Infos
get
Service
get
Authentication
get
Gateway
Url
get
Status
get
Instance
With
Highest
Version
get
Service
Instances
From
Discovery
Client
get
Eureka
Metadata
Parser
services
Info
Service
get
Services
get
Service
on
Application
Event
run
notify
Startup
get
Instance
Info
set
Instance
Info
add
Debug
Info
get
Debug
Info
get
Initial
List
Of
Servers
get
Updated
List
Of
Servers
set
Zones
get
Id
set
Id
extract
Id
http
Client
Chooser
http
Client
Proxy
is
Request
To
Sign
choose
Client
create
Retry
Policy
can
Retry
can
Retry
Next
Server
is
Connection
Refused
create
Retry
Listeners
choose
to
String
get
Path
apply
apply
to
String
header
Predicate
authentication
Based
Predicate
get
Metadata
Prefix
get
Instance
Info
apply
to
String
apply
to
String
is
Too
Old
apiml
Ribbon
Retry
Factory
ribbon
Load
Balancing
Http
Client
ribbon
Load
Balancer
ribbon
Server
List
choose
Server
open
close
on
Error
open
close
on
Error
choose
register
Load
Balancer
refresh
on
Application
Event
refresh
is
Refresh
Event
get
Applications
check
Instance
Info
set
If
Exists
And
Is
Numeric
set
If
Exists
get
Registered
get
Applications
check
Instance
Info
process
refresh
get
Applications
check
Instance
Info
init
fetch
Registry
build
Apiml
Discovery
Client
create
Instance
Info
get
Version
home
initialize
Build
Infos
initialize
Discovery
Attributes
initialize
Authentication
Attributes
initialize
Catalog
Attributes
get
Catalog
Link
initialize
Metrics
Attributes
get
Metrics
Link
authorization
Service
Up
has
Saf
Access
error
Deserializing
Request
evict
All
evict
invalidate
Jwt
Token
revoke
Access
Token
revoke
All
User
Access
Tokens
revoke
Access
Tokens
For
User
revoke
Access
Tokens
For
Scope
evict
Non
Relevant
Tokens
And
Rules
validate
Access
Token
distribute
Invalidate
get
All
Public
Keys
get
Current
Public
Keys
get
Public
Key
Used
For
Signing
get
Current
Key
validate
OIDC
Token
get
Web
Finger
get
Public
Key
As
Pem
bad
Request
For
PAT
Invalidation
update
Auth
Provider
Config
logout
invalidate
Jwt
Token
password
Encoder
pass
Ticket
Service
login
Providers
get
X509MF
Auth
Source
Service
get
X509CN
Auth
Source
Service
successful
Access
Token
Handler
warn
For
Dummy
Provider
get
Configured
Login
Auth
Provider
get
Login
Auth
Provider
Name
set
Login
Auth
Provider
authenticate
supports
authentication
Functionality
Filter
Chain
configure
login
Filter
x509Authentication
Filter
logout
Handler
access
Token
Filter
Chain
configure
access
Token
Filter
x509Authentication
Filter
auth
Protected
Endpoints
Filter
Chain
configure
login
Filter
x509Authentication
Filter
auth
Zaas
Endpoints
Filter
Chain
query
Filter
Chain
configure
query
Filter
ticket
Filter
Chain
configure
ticket
Filter
refresh
Filter
Chain
configure
refresh
Filter
certificate
Endpoints
Filter
Chain
certificate
Or
Auth
Endpoints
Filter
Chain
configure
basic
Filter
cookie
Filter
bearer
Content
Filter
reversed
Categorize
Cert
Filter
web
Security
Customizer
filter
Chain
base
Configure
x509User
Details
Service
cors
Configuration
Source
add
Cors
Related
Ignored
Headers
get
Default
Allowed
Origins
cors
Utils
get
Web
Finger
Config
is
Enabled
get
Web
Finger
Config
is
Enabled
authenticate
supports
on
Authentication
Success
attempt
Authentication
successful
Authentication
unsuccessful
Authentication
on
Authentication
Success
set
Cookie
on
Authentication
Success
get
Ticket
Response
get
Zosmf
Service
Id
get
Authentication
Value
get
URI
handle
Exception
On
Call
read
Token
From
Cookie
authenticate
Validation
Strategy
authenticate
Validation
Strategy2
after
Properties
Set
authenticate
change
Password
is
Invalidated
get
Zosmf
Realm
exchange
Authentication
For
Zosmf
Token
is
Accessible
get
URI
issue
Authentication
Request
issue
Change
Password
Request
handle
Server
Error
On
Change
Password
Call
authentication
Endpoint
Exists
jwt
Endpoint
Exists
login
Endpoint
Exists
logout
Endpoint
Exists
jwt
Builder
Endpoint
Exists
validate
request
Is
Authenticated
get
Endpoint
Map
invalidate
get
Authentication
Response
get
Public
Keys
validate
endpoint
Exists
to
String
validate
get
Authenticated
User
get
Principal
From
Request
get
Jwt
Claims
remove
Jwt
Sign
handle
Jwt
Parser
Exception
generate
verify
rest
Saf
Provider
generate
verify
evict
Cache
Service
evict
Cache
All
Service
after
Properties
Set
get
Authentication
get
Authentication
get
Authentication
Command
get
Authentication
Command
get
Auth
Source
By
Authentication
evict
Cache
All
Service
evict
Cache
Service
after
Properties
Set
create
Jwt
Token
create
Long
Lived
Jwt
Token
create
JWT
parse
Jwt
With
Signature
invalidate
Jwt
Token
invalidate
Token
On
Another
Instance
is
Invalidated
validate
And
Parse
Local
Jwt
Token
validate
Jwt
Token
create
Token
Authentication
distribute
Invalidate
validate
Jwt
Token
parse
Jwt
Token
parse
Query
Response
get
Token
Origin
get
Ltpa
Token
With
Validation
get
Ltpa
Token
get
Jwt
Token
From
Request
get
PAT
From
Request
get
Access
Token
From
Header
get
Token
From
Cookie
extract
Jwt
Token
From
Authorization
Header
calculate
Expiration
after
Properties
Set
fetch
Jwks
Urls
process
Keys
base64To
Big
Integer
is
Valid
get
Key
Id
validate
oidc
Jwt
Clock
oidc
Jwk
Mapper
invalidate
Token
invalidate
All
Tokens
For
User
invalidate
All
Tokens
For
Service
is
Invalidated
check
Invalid
Token
check
Rule
evict
Non
Relevant
Tokens
And
Rules
get
Hash
initialize
Salt
get
Token
is
Valid
For
Scopes
get
Salt
store
Salt
generate
Salt
get
Secure
Password
get
Scheme
create
Command
get
Auth
Source
get
Appl
Id
generate
Saf
Identity
Token
get
Saf
Idt
Expiration
apply
is
Expired
is
Required
Valid
Source
apply
apply
is
Required
Valid
Source
is
Expired
get
Scheme
create
Command
get
Auth
Source
is
Default
get
Raw
Source
get
Type
get
Common
Name
get
Common
Name
get
Public
Key
get
Distinguished
Name
get
Logger
get
Mapper
get
Token
is
Valid
parse
get
Ltpa
Token
get
JWT
get
Auth
Source
From
Request
get
Raw
Source
get
Type
get
User
Id
get
Creation
get
Expiration
get
Origin
value
By
Token
Source
get
Logger
get
Mapper
get
Auth
Source
From
Request
get
Token
is
Valid
parse
get
Ltpa
Token
get
JWT
get
Params
get
Raw
Source
get
Type
get
Raw
Source
get
Type
get
Auth
Source
From
Request
is
Valid
is
Valid
parse
get
Ltpa
Token
get
Certificate
From
Request
get
One
parse
Client
Cert
get
JWT
get
Auth
Source
From
Request
is
Valid
parse
get
Ltpa
Token
get
JWT
get
Raw
Source
get
Type
get
Logger
get
Mapper
get
Token
is
Valid
parse
parse
OIDC
Token
get
Ltpa
Token
get
JWT
get
Auth
Source
From
Request
is
Valid
parse
get
Ltpa
Token
get
Service
get
Service
get
JWT
get
Logger
get
Mapper
get
Token
get
Auth
Source
From
Request
get
Scheme
create
Command
get
Auth
Source
apply
get
Schema
get
Authentication
Command
set
Cookie
remove
Cookie
set
Custom
Header
is
Expired
is
Required
Valid
Source
get
Expire
At
get
Scheme
create
Command
get
Auth
Source
apply
is
Expired
set
Header
get
Scheme
get
Auth
Source
create
Command
apply
get
Authentication
Command
get
Authentication
Command
get
Authentication
get
Authentication
get
Auth
Source
By
Authentication
get
Scheme
create
Command
get
Auth
Source
apply
is
Expired
is
Required
Valid
Source
is
Expired
apply
is
Required
Valid
Source
get
Scheme
create
Command
is
Default
create
Jwt
Token
Without
Credentials
create
Zosmf
Tokens
Without
Credentials
is
Zosmf
Available
generate
Pass
Ticket
update
Store
Paths
load
Appropriate
Jwt
Key
Or
Fail
actual
Jwt
Producer
actual
Jwt
Producer
load
Jwt
Secret
validate
Jwt
Secret
current
Config
validate
Initialization
Against
Zosmf
get
Signature
Algorithm
get
Jwt
Secret
get
Jwt
Public
Key
get
Public
Key
In
Set
get
Jwk
Public
Key
validate
Initialization
When
Zosmf
Is
Available
get
Zosmf
Listener
on
Event
register
is
Zosmf
Ready
get
Zosmf
Registered
Listener
authenticate
get
Zosmf
Jwt
Token
get
Apiml
Jwt
Token
supports
authenticate
to
Char
Array
load
User
By
Username
get
Value
get
Auth
Provider
Bean
Name
to
String
get
Login
Provider
is
Zosmf
Available
get
Zosmf
Service
Id
is
Zosmf
Available
And
Online
is
Zosfm
Used
zosmf
Supports
Jwt
is
Zosmf
Configuration
Set
To
Ltpa
authenticate
supports
get
Userid
get
Platform
User
Class
get
Platform
Returned
Class
get
Platform
User
authenticate
change
Password
authenticate
change
Password
get
Platform
User
Class
get
Platform
Returned
Class
get
Platform
User
authenticate
change
Password
authenticate
get
Platform
User
supports
after
Properties
Set
map
To
Mainframe
User
Id
get
Ldap
Name
call
External
Mapper
map
To
Mainframe
User
Id
map
To
Mainframe
User
Id
to
String
is
OIDC
Result
Valid
map
To
Mainframe
User
Id
prepare
Ssl
Authentication
available
environment
Configuration
set
Zosmf
Configuration
From
System
Properties
get
System
Property
Char
Array
set
Tls
Configuration
From
System
Properties
get
Config
Properties
integration
Tests
generate
Unique
Ports
generate
Candidates
ports
Not
Satisfied
ports
Are
Available
ports
Are
Distinct
get
Credentials
get
Credentials
test
Plan
Execution
Started
test
Plan
Execution
Finished
get
Json
get
Json
Response
get
Json
Response
existing
up
up
shutdown
shutdown
route
route
get
Gateway
Url
existing
up
up
shutdown
shutdown
existing
up
up
shutdown
shutdown
existing
up
up
shutdown
shutdown
is
Application
Registered
is
Application
Registered
get
Amount
Of
Registered
Instances
For
Service
get
Amount
Of
Registered
Instances
For
Service
shutdown
is
Up
login
refresh
route
authenticated
Route
get
Gateway
Uri
With
Path
create
create
delete
Value
Under
Service
Id
Without
Validation
delete
Value
Under
Service
Id
Without
Validation
is
Up
shutdown
get
Discoverable
Client
Uri
With
Path
is
Application
Registered
is
Up
get
Json
Eureka
Apps
get
Amount
Of
Registered
Instances
For
Service
shutdown
get
Discovery
Uri
With
Path
is
Up
shutdown
get
Api
Catalog
Uri
With
Path
get
Response
get
Response
get
Request
get
Uri
From
Gateway
get
Uri
From
Gateway
get
Uri
From
Gateway
get
Uri
From
Discovery
get
Cookie
For
Gateway
get
Cookie
add
Cookie
client
client
ignore
Ssl
Context
check
Client
Trusted
check
Server
Trusted
check
Client
Trusted
check
Server
Trusted
check
Client
Trusted
check
Server
Trusted
get
Accepted
Issuers
http
Client
https
Client
before
All
Tests
start
start
With
Script
execute
Command
stop
get
Instance
clear
add
exist
And
Clean
get
Header
prepare
Node
Js
Sample
App
prepare
Discovery
prepare
Gateway
prepare
Catalog
prepare
Caching
prepare
Cloud
Gateway
prepare
Mock
Services
prepare
Discoverable
Client
get
Instance
start
stop
runs
Off
Platform
wait
Until
Ready
get
Discovery
Url
get
Additional
Discovery
Url
get
Gateway
Urls
get
Instances
get
Instances
get
Url
start
start
is
Registered
create
Tomcat
get
Context
Path
get
Instance
Id
add
Servlet
add
Instance
Servlet
add
Http
Status
Code
Servlet
add
Get
Header
Servlet
add
Verify
Servlet
wait
For
Gateway
Registration
wait
For
Gateway
Unregistering
stop
zombie
close
get
Port
get
Tomcat
get
Url
register
post
Registration
unregister
add
Metadata
remove
Metadata
set
Authentication
add
Route
add
Default
Route
add
Default
Route
If
Missing
get
Gateway
Urls
get
Gateway
Header
Urls
get
Gateway
Health
Urls
get
Gateway
Verify
Urls
do
Get
stop
get
Status
send
Heart
Beat
run
do
Get
do
Get
do
Get
do
Post
do
Put
do
Delete
do
Options
do
Head
write
Response
do
Get
do
Post
do
Put
do
Delete
do
Options
do
Head
write
Response
get
Username
get
Gateway
Url
get
Gateway
Url
get
Gateway
Logout
Url
gateway
Token
gateway
Token
gateway
Token
gateway
Token
get
Zosmf
Jwt
Token
get
Zosmf
Token
generate
Zowe
Jwt
With
Ltpa
generate
Jwt
With
Random
Signature
load
Keystore
get
Key
get
Client
Certificate
get
Dummy
Client
Certificate
personal
Access
Token
personal
Access
Token
With
Client
Cert
valid
Okta
Access
Token
get
Okta
Session
expired
Okta
Access
Token
logout
On
Gateway
get
Configured
Ssl
Config
assert
If
Logged
assert
Logout
assert
Valid
Auth
Token
assert
Valid
Auth
Token
assert
That
Token
Is
Valid
assert
That
Token
Is
Valid
parse
Jwt
String
setup
All
setup
should
Find
Registered
Gateway
In
Central
Apiml
should
Find
Two
Apiml
Instances
In
The
Central
Registry
should
Find
Both
Apiml
Ids
should
Find
Two
Registered
Cloud
Gateways
In
The
Eureka
Apps
should
Reject
Unauthorized
Access
To
Central
Registry
should
Reject
Untrusted
X509Certificate
To
Access
Central
Registry
list
Central
Registry
list
Eureka
Apps
build
Registry
URI
setup
setup
Caching
Url
public
Urls
public
Endpoint
Is
Accessible
given
Untrusted
Cert
caching
Api
Endpoints
Are
Inaccessible
given
No
Certificate
And
Header
caching
Api
Endpoints
Are
Inaccessible
given
Certificate
But
No
Header
caching
Api
Endpoints
Are
Inaccessible
given
No
Certificate
And
No
Header
caching
Api
Endpoints
Are
Inaccessible
caching
Api
Endpoints
Accessible
clear
Ssl
when
Static
And
Dynamic
Routed
Then
Produces
Same
Response
set
Up
return
Gateway
Timeout
set
Up
test
Multiple
Authentication
Schemes
test
Reregistration
test
Service
Status
version
Urls
set
Up
return
Valid
Version
init
given
Gateway
Is
Registered
In
Additional
Discovery
then
Return
Info
From
Discovery
Service
set
Up
then
Authenticate
then
Return
Unauthorized
set
Up
retryable
Http
Methods
non
Retryable
Http
Methods
http
Methods
set
Up
clean
Up
verify
That
Gateway
Retries
To
The
Live
One
route
And
Verify
Retry
set
Up
clean
Up
verify
That
Gateway
Retries
Get
verify
That
Gateway
Not
Retries
Post
route
And
Verify
Retries
do
Request
setup
test
Routing
With
Base
Path
test
Routing
With
Header
test
Routing
With
Incorrect
Service
In
Base
Path
test
Routing
With
Incorrect
Service
In
Header
test
Wrong
Routing
With
Header
test
Wrong
Routing
With
Base
Path
relaxed
HTTPS
test
Post
Endpoint
test
Get
Endpoint
test
Get
Endpoint
Non
Conformant
get
Endpoint
URL
Get
get
Legacy
Endpoint
URL
Post
api
Route
Of
Discoverable
Client
ws
Route
Of
Discoverable
Client
ui
Route
Of
Discoverable
Client
init
Gateway
Properties
init
Discoverable
Client
Properties
get
Location
set
Location
set
Up
do
Login
With
Valid
Body
Login
Request
do
Login
With
Invalid
Credentials
In
Login
Request
do
Login
Without
Credentials
set
Up
when
Get
Container
Statuses
then
Response
With
At
Least
One
Up
when
Get
Container
By
Id
when
Get
Container
By
Invalid
Id
when
Specific
Catalog
Api
Doc
when
Default
Catalog
Api
Doc
when
Invalid
Api
Doc
Version
then
Return404
cleanup
Static
Definition
when
Call
Static
Api
Refresh
then
Response
Ok
when
Call
Static
Definition
Generate
then
Response201
when
Call
Static
Definition
Generate
With
Unauthorized
User
then
Response403
get
Static
Api
Response
get
Response
execute
requests
To
Test
requests
To
Test
With
Certificate
set
Up
clear
Ssl
given
Valid
Basic
Authentication
given
Valid
Bearer
Authentication
given
Valid
Basic
Authentication
And
Certificate
given
No
Authentication
given
Invalid
Basic
Authentication
given
Invalid
Bearer
Authentication
given
Invalid
Token
In
Cookie
given
Valid
Certificate
given
Valid
Certificate
And
Basic
Auth
given
Un
Trusted
Certificate
And
No
Basic
Auth
then
Return
Unauthorized
given
No
Certificate
And
No
Basic
Auth
then
Return
Unauthorized
given
Only
Valid
Certificate
when
Access
Not
Certificate
Authed
Route
then
Return
Unauthorized
init
set
Up
when
Get
Containers
when
Get
Api
Doc
Default
Endpoint
when
Get
Api
Docv2Endpoint
given
Basic
Authentication
Is
Provided
setup
then
Authenticate
then
Return
Unauthorized
set
Up
Certificate
given
Valid
Zosmf
Token
given
Valid
Zowe
Token
With
Ltpa
given
Valid
Access
Token
given
X509Certificate
given
Valid
O
Auth
Token
provide
Zaas
Endpoints
With
All
Tokens
provide
Zaas
Endpoints
provide
Zaas
Token
Endpoints
set
Up
Certificate
And
Token
given
No
Token
given
Invalid
Token
given
No
Certificate
then
Return
Unauthorized
given
Client
And
Header
Certificates
then
Return
Token
From
Client
Cert
set
Up
Certificate
given
Valid
Zosmf
Token
given
Valid
Zowe
Token
With
Ltpa
given
Valid
Access
Token
given
X509Certificate
given
Valid
O
Auth
Token
set
Up
Certificate
given
Valid
Zosmf
Token
given
Valid
Zowe
Token
With
Ltpa
given
Valid
Access
Token
given
X509Certificate
given
Valid
O
Auth
Token
given
No
Application
Name
given
Invalid
Application
Name
given
Long
Application
Name
given
No
Content
Type
given
Invalid
Content
Type
provide
Client
Certificates
setup
append
Response
Handler
handle
Text
Message
after
Connection
Closed
appending
Web
Socket
Session
propagate
The
Session
To
The
Alive
Instance
new
Session
Can
Be
Created
new
Session
Can
Be
Created
discoverable
Client
Instances
Are
Up
discoverable
Client
Instances
Are
Registered
discoverable
Client
Is
Accessible
Via
Gateway
set
Up
api
Catalog
Instances
Are
Up
api
Catalog
Instances
Are
Registered
route
To
Instance
Through
Alive
Gateway
service
Still
Registered
To
Other
Discovery
set
Up
load
Balancer
H
Atest
set
Up
gateway
Instances
Are
Up
gateway
Instances
Are
Registered
route
Via
Gateway
To
The
Other
Instance
set
Up
service
Still
Registered
To
Other
Discovery
route
To
Instance
Through
Alive
Gateway
eureka
Replicas
Are
Visible
valid
Tokens
invalid
Tokens
init
then
Validate
Returns200
when
User
Has
Mapping
then
Apiml
Token
Created
when
User
Has
No
Mapping
then
Zowe
Auth
Failure
when
User
Has
Mapping
then
Apiml
Token
Created
when
User
Has
No
Mapping
then
Zowe
Auth
Failure
when
User
Has
Mapping
then
Jwt
Token
Created
when
User
Has
No
Mapping
then
Zowe
Auth
Failure
when
User
Has
Mapping
then
Jwt
Token
Created
when
User
Has
No
Mapping
then
Zowe
Auth
Failure
when
User
Has
Mapping
then
Saf
Token
Created
when
User
Has
No
Mapping
then
Zowe
Auth
Failure
when
User
Has
Mapping
then
Saf
Token
Created
when
User
Has
No
Mapping
then
Zowe
Auth
Failure
when
User
Has
Mapping
then
Basic
Auth
Created
when
User
Has
No
Mapping
then
Zowe
Auth
Failure
when
User
Has
Mapping
then
Basic
Auth
Created
when
User
No
Has
Mapping
then
Zowe
Auth
Failure
then
Validate
Returns401
when
Token
In
Header
then
Zowe
Auth
Failure
when
Token
In
Cookie
then
Zowe
Auth
Failure
when
Token
In
Header
then
Zowe
Auth
Failure
when
Token
In
Cookie
then
Zowe
Auth
Failure
when
Token
In
Header
then
Zowe
Auth
Failure
when
Token
In
Cookie
then
Zowe
Auth
Failure
when
Token
In
Header
then
Zowe
Auth
Failure
when
Token
In
Cookie
then
Zowe
Auth
Failure
test
Empty
Distuinguished
Name
Error
test
User
Is
Not
Authorized
To
Query
Mapping
test
Other
Mapping
Error
test
Zss
Returns401
test
Zss
Returns404
test
Zss
Returns500
set
Zss
Response
get
Tokens
access
Tokens
set
Up
given
Valid
JWT
then
Translate
To
Passticket
given
No
JWT
then
Error
Header
Is
Created
given
Jwt
In
Bearer
Header
given
Jwt
In
Cookie
given
Basic
Auth
given
Jwt
In
Header
And
Cookie
given
Basic
And
Jwt
In
Cookie
when
Call
Pass
Ticket
Service
given
Correct
Token
given
Issued
For
Incorrect
Appl
Id
given
Custom
Header
verify
Pass
Ticket
Headers
access
Tokens
set
Up
given
Jwt
In
Cookie
init
given
Valid
Client
Cert
then
Forward
Details
In
Header
given
No
Cert
then
Forward
Error
Message
In
Header
given
Correct
Client
Certificate
In
Request
given
Apiml
Certificate
In
Request
given
Self
Signed
Untrusted
Certificate
and
Malicious
Header
In
Request
then
Empty
Body
Is
Returned
given
No
Certificate
then
Empty
Body
Is
Returned
valid
To
Be
Transformed
no
Auth
Transformation
setup
given
Valid
Request
then
Credentials
Are
Transformed
given
Valid
Request
then
Pat
Is
Transformed
given
Valid
Request
then
Client
Cert
Is
Transformed
given
Valid
Request
then
Oidc
Is
Transformed
given
Invalid
Pat
Request
then
Pat
Is
Not
Transformed
given
Invalid
Request
then
Client
Cert
Is
Not
Transformed
given
Invalid
Request
then
Oidc
Is
Not
Transformed
given
No
Credentials
then
No
Credentials
Are
Provided
given
Invalid
Credentials
then
No
Credentials
Are
Provided
init
given
Correct
Client
Certificate
In
Request
given
Invalid
Client
Certificate
In
Request
then
Add
Auth
Header
forward
JWT
To
Service
preserve
Cookies
forward
JWT
To
Service
translate
Into
JWT
And
Send
To
Service
login
Urls
Source
get
Username
get
Password
init
set
Up
given
Valid
Credentials
In
Body
given
Valid
Credentials
In
Header
given
Invalid
Credentials
In
Body
given
Invalid
Credentials
In
Header
given
Credentials
In
The
Wrong
Json
Format
given
Apimls
Cert
given
Valid
Credentials
In
Json
Body
test
Login
Fact
Combinations
Source
login
Endpoint
Acts
As
Expected
get
Path
switch
To
Tested
Provider
given
Valid
Token
given
Two
Valid
Tokens
setup
Clients
given
Valid
Certificate
then
Return
Existing
Datasets
given
Client
X509Cert
given
Valid
Client
Cert
And
Invalid
Basic
switch
To
Tested
Provider
given
Valid
Token
switch
To
Tested
Provider
given
Valid
Credentials
In
Body
given
Expired
Account
Credentials
In
Body
given
Expired
Account
Credentials
In
Header
init
when
Jwt
Token
Posted
Can
Be
Refreshed
And
Old
Cookie
Invalidated
query
Urls
Source
set
Up
given
Valid
Token
In
Header
given
Valid
Token
In
Cookie
given
Invalid
Token
In
Bearer
Header
given
Invalid
Token
In
Cookie
given
No
Token
given
Valid
Token
In
Wrong
Cookie
given
Valid
Token
logout
Urls
Source
set
Up
given
Valid
Credentials
setup
given
Valid
Token
invalidate
The
Token
given
Token
Invalidated
return
Unauthorized
given
Matching
Scopes
validate
The
Token
given
Invalid
Scopes
return
Unauthorized
setup
Ssl
given
Authorized
Request
then
Revoke
Token
For
User
given
Authenticated
Call
then
Revoke
User
Token
given
Authorized
Request
then
Revoke
Tokens
For
Scope
given
Authorized
Request
then
Evict
Rules
given
Not
Authorized
Call
then
Dont
Allow
To
Revoke
Tokens
For
User
set
Up
via
Bearer
Header
via
Cookie
via
Basic
Auth
Header
via
Bearer
Header
via
Apiml
Cookie
without
Any
Authentication
Method
with
Empty
Header
with
Empty
Cookie
get
Auth
Header
get
Token
get
Dummy
Key
assert
That
Exception
Contain
Valid
Code
set
Up
provide
Invalid
Username
Password
provide
Invalid
Password
provide
Invalid
Auth
Headers
provide
Invalid
Password
Auth
Headers
given
Valid
Credentials
given
Valid
Credentials
In
Header
given
Invalid
Credentials
given
Invalid
Password
given
Invalid
Header
given
Invalid
Password
In
Header
given
Valid
Token
then
Valid
Details
Are
Provided
given
Invalid
Token
given
Expired
Token
given
Empty
Token
given
Valid
Token
then
Valid
Pass
Ticket
Is
Returned
given
Invalid
Token
given
Empty
Token
given
Valid
Token
But
Invalid
Application
Id
given
Valid
Token
But
then
Success
given
Invalid
Token
But
then
Exception
Is
Thrown
setup
all
Clusters
Ara
Available
setup
given
Multiple
Concurrent
Calls
correct
Response
In
The
End
given
Multiple
Updates
correct
Result
Returned
given
Duplicate
Key
entry
Is
Updated
given
Untrusted
Client
Cert
return
Forbidden
given
Tokens
And
Rules
correct
Result
Returned
given
Valid
Key
Value
given
Empty
Body
given
Valid
Key
Parameter
given
Non
Existing
Key
Parameter
given
Valid
Key
And
Certificate
given
Valid
Key
Certificate
And
Service
Header
given
Valid
Service
Parameter
given
Valid
Key
And
Values
given
Valid
Key
given
Invalid
Key
load
Value
Under
Service
Id
load
Value
Under
Service
Id
delete
Value
Under
Service
Id
Without
Validation
delete
Value
Under
Service
Id
Without
Validation
set
Up
set
Up
Token
set
Up
Certificate
given
Valid
Token
In
Cookie
And
Certificate
given
Valid
Token
In
Header
And
Certificate
set
Up
Certificate
And
Token
given
No
Token
given
Invalid
Token
In
Cookie
given
Invalid
Token
In
Header
set
Up
Certificate
And
Token
given
No
Application
Name
given
Invalid
Application
Name
given
No
Certificate
given
Invalid
Http
Method
assert
Pass
Ticket
Is
Valid
init
endpoints
given
No
Authentication
returns200Without
Saf
Check
returns401With
Untrusted
Cert
set
Up
given
Valid
Token
given
Invalid
Credentials
service
Specific
Urls
set
Up
given
Valid
Token
With
Authorized
User
And
Valid
Service
Id
given
Valid
Token
With
Authorized
User
And
Valid
Service
Id
set
Up
given
No
Authentication
given
No
Authentication
verify
Keys
get
Valid
Token
configure
Rest
Assured
get
Valid
PAT
get
Part
get
Header
get
Payload
get
Signature
replace
Claim
get
Token
None
Algorithm
get
Public
Key
get
Token
With
Hs256Signature
get
Token
Changed
Realm
get
Token
Changed
User
get
Tokens
get
Token
when
Call
Query
Endpoint
when
Call
Pass
Ticket
Endpoint
before
Class
verify
Routing
Through
Gateway
routing
Through
Gateway
set
Up
test
Application
Info
Endpoints
Cookie
get
Discovery
Uri
With
Path
given
V1Api
Doc
Path
given
V2Api
Doc
Path
given
Url
For
Container
given
Apis
when
Get
Container
then
Apis
Returned
given
Valid
Service
And
Versions
given
Wrong
Version
given
Wrong
Service
get
Response
validate
Container
validate
Discoverable
Client
Api
V1
before
Class
verify
Registration
And
Unregistration
is
Registered
registered
State
As
Expected
register
unregister
before
Class
given
Enabler
Is
Onboarded
when
Requesting
Public
Endpoint
return
Status
setup
given
Valid
Sse
Paths
then
Return
Events
given
Invalid
Service
Id
given
Invalid
Version
given
No
Service
Id
before
Class
given
Put
Request
given
Post
Request
init
given
Request
Header
then
Route
To
Provided
Host
given
Base
Path
then
Route
To
Provided
Host
given
Request
Timeout
Is
Reached
then
Drop
Connection
given
Request
Header
then
Cert
Passed
To
Domain
Gateway
given
Base
Path
then
Cert
Passed
To
Domain
Gateway
then
Certificates
Chain
Provided
before
Class
given
Valid
Path
And
Headers
return
Ui
return
Redirect
setup
append
Response
Handler
handle
Text
Message
after
Connection
Closed
discoverable
Client
Gateway
Url
appending
Web
Socket
Session
appending
Web
Socket
Session
message
headers
when
Path
Is
Not
Correct
when
Service
Is
Not
Correct
when
Url
Format
Is
Not
Correct
return
Error
get
Correct
Response
before
Class
get
Greeting
From
REST
given
Gateway
With
Concurrent
Connections
when
Make
Three
Connections
then
Three
Concurrent
Connections
send
And
Verify
Requests
Successful
get
Future
For
Request
set
Up
unblock
Locked
IT
User
check
Zosmf
Is
Up
And
Jwt
Token
From
Login
Can
Be
Used
wait
Until
Ready
get
Document
As
Context
are
All
Services
Up
is
Service
Up
log
Debug
set
Up
check
Api
Mediation
Layer
Start
set
Up
given
No
Authorization
then
Return
Unauthorized
given
Empty
Authorization
then
Return
Unauthorized
given
No
Credentials
then
Return
Unauthorized
given
Invalid
Username
then
Return
Unauthorized
given
Invalid
Password
then
Return
Unauthorized
given
Valid
User
And
Password
then
Return
Jwt
And
Ltpa
given
Valid
User
And
Passticket
then
Return
Jwt
And
Ltpa
given
Valid
Ltpa
Cookie
then
Return
Jwt
And
Ltpa
given
Valid
Credentials
when
Delete
then
Return
No
Content
given
Valid
Ltpa
Cookie
when
Delete
then
Return
No
Content
get
Basic
Authorization
Header
get
Ltpa
Cookie
Header
set
Up
given
Nothing
Ltpa2Token
Isnt
Returned
given
Valid
Authentication
Credentials
Ltpa2Token
Is
Returned
given
Verify
Method
With
No
Authorization
return
Internal
Server
Error
given
Verify
Method
With
Empty
Authorization
return
Internal
Server
Error
given
Verify
Method
With
Invalid
User
return
Unauthorized
given
Verify
Method
With
Invalid
Cookie
return
Unauthorized
given
Verify
Method
With
Valid
User
return
Ok
Ltpa2Token
given
Verify
Method
With
Valid
Cookie
return
Ok
Ltpa2Token
given
Unimplemented
Method
not
Found
Is
Returned
given
Proper
Authorization
valid
Files
Are
Returned
given
Invalid
Authorization
unauthorized
Is
Returned
then
Not
Found
Is
Returned
set
Up
given
No
Authorization
then
Return
Internal
Server
Error
given
Empty
Authorization
then
Return
Internal
Server
Error
given
No
Credentials
then
Return
Internal
Server
Error
given
Invalid
Username
then
Return
Internal
Server
Error
given
Invalid
Password
then
Return
Internal
Server
Error
given
Valid
User
And
Password
then
Return
Jwt
And
Ltpa
given
Valid
User
And
Passticket
then
Return
Jwt
And
Ltpa
given
Valid
Credentials
when
Delete
then
Return
No
Content
given
Valid
Ltpa
Cookie
then
Return
Jwt
And
Ltpa
given
Valid
Ltpa
Cookie
when
Delete
then
Return
No
Content
given
Method
Not
Handled
then
Return
Original
Result
given
Service
Not
Handled
when
Apply
Apar
then
Return
Original
Result
get
Authorization
Header
get
Ltpa
Cookie
Header
set
Up
given
Verify
Method
With
No
Authorization
return
Unauthorized
given
Verify
Method
With
Empty
Authorization
return
Unauthorized
given
Verify
Method
With
Invalid
User
return
Unauthorized
given
Verify
Method
With
Invalid
Cookie
return
Unauthorized
given
Verify
Method
With
Valid
User
return
Ok
Ltpa2Token
given
Verify
Method
With
Valid
Cookie
return
Ok
Ltpa2Token
given
Unimplemented
Method
not
Found
Is
Returned
set
Up
given
No
Authorization
then
Return
Internal
Server
Error
given
Empty
Authorization
then
Return
Internal
Server
Error
given
No
Credentials
then
Return
Unauthorized
given
Invalid
Username
then
Return
Unauthorized
given
Invalid
Password
then
Return
Unauthorized
given
Valid
User
And
Password
then
Return
Jwt
And
Ltpa
given
Valid
User
And
Passticket
then
Return
Jwt
And
Ltpa
given
Valid
Ltpa
Cookie
then
Return
Jwt
And
Ltpa
given
Valid
Credentials
when
Delete
then
Return
No
Content
given
Valid
Ltpa
Cookie
when
Delete
then
Return
No
Content
given
Authentication
Method
Not
Handled
then
Return
Original
Result
given
Service
Not
Handled
then
Return
Original
Result
then
Ok
Is
Returned
get
Basic
Authorization
Header
get
Ltpa
Cookie
Header
set
Up
given
Parameters
Respond
With
Third
set
Up
given
No
Authorization
then
Return
Internal
Server
Error
given
Empty
Authorization
then
Return
Internal
Server
Error
given
No
Credentials
then
Return
Unauthorized
given
Invalid
Username
then
Return
Unauthorized
given
Invalid
Password
then
Return
Unauthorized
given
Valid
User
And
Password
then
Return
Jwt
And
Ltpa
given
Valid
User
And
Passticket
then
Return
Jwt
And
Ltpa
given
Valid
Ltpa
Cookie
then
Return
Jwt
And
Ltpa
given
Valid
Credentials
when
Delete
then
Return
No
Content
given
Valid
Ltpa
Cookie
when
Delete
then
Return
No
Content
given
Authentication
Method
Not
Handled
then
Return
Original
Result
given
Service
Not
Handled
then
Return
Original
Result
then
Ok
Is
Returned
given
Valid
Body
then
Change
Password
given
Empty
Body
then
Return
Internal
Error
given
Empty
Body
then
Return
Bad
Request
get
Basic
Authorization
Header
get
Ltpa
Cookie
Header
set
Up
then
Ok
Is
Returned
set
Up
given
Apars
List
when
Get
Apars
return
Apars
Matched
In
List
set
Up
given
Version
when
Get
Baseline
then
Return
Ph
Base
given
Bad
Version
when
Get
Baseline
then
Throw
Exception
given
Version
And
Applied
Apar
when
Get
Applied
Apars
then
Return
All
Apars
set
Up
given
Invalid
Version
Internal
Server
Error
Is
Returned
given
One
Apar
Version
return
Result
Of
Apply
given
Two
Apar
Versions
return
Last
Result
Of
Apply
given
No
Apar
Versions
return
Internal
Server
Error
given
Apars
That
Return
Last
Result
return
Internal
Server
Error
set
Up
when
Call
Info
Endpoint
With
Get
then
Return
Apar
Service
Process
Result
info
Test
inbox
Test
jwk
Test
authenticate
Test
authenticate
Delete
Test
set
Up
when
Call
Authenticate
Endpoint
With
Delete
then
Return
Apar
Service
Process
Result
when
Call
Authenticate
Endpoint
With
Post
then
Return
Apar
Service
Process
Result
when
Call
Zosmf
Notification
Endpoint
With
Get
then
Return
Apar
Service
Process
Result
set
Up
when
Call
Files
Endpoint
With
Get
then
Return
Apar
Service
Process
Result
set
Up
when
Call
Zosmf
Builder
Endpoint
With
Get
then
Return
Ok
set
Up
token
Is
Returned
set
Up
token
Is
Verified
set
Up
when
Call
Authenticate
Endpoint
Without
Payload
then
Return
Bad
Request
when
Call
Authenticate
Endpoint
With
Wrong
Payload
then
Return
Bad
Request
when
Call
Authenticate
Endpoint
With
Valid
Payload
then
Return
Ok
And
Token
when
Call
Authenticate
Endpoint
With
Invalid
Token
then
Return
Unauthorized
when
Call
Verify
Endpoint
Without
Payload
then
Return
Bad
Request
when
Call
Verify
Endpoint
With
Wrong
Payload
then
Return
Bad
Request
when
Call
Verify
Endpoint
With
Post
then
Return
Token
when
Call
Verify
Endpoint
With
Invalid
Token
then
Return
Unauthorized
process
log
Result
handle
Authentication
Create
handle
Authentication
Verify
handle
Authentication
Delete
handle
Jwt
Keys
is
Unauthorized
handle
Authentication
Create
handle
Authentication
Verify
handle
Authentication
Default
is
Unauthorized
handle
Authentication
Create
handle
Authentication
Verify
handle
Authentication
Delete
apply
handle
Authentication
Create
handle
Authentication
Verify
handle
Authentication
Default
handle
Information
handle
Authentication
Delete
handle
Files
datasets
valid
Info
apply
handle
Jwt
Keys
handle
Authentication
Create
handle
Authentication
Verify
handle
Authentication
Delete
handle
Authentication
Default
handle
Change
Password
handle
Information
handle
Files
no
Authentication
contains
Invalid
Or
No
User
get
Authorization
Header
get
Pieces
Of
Credentials
no
Ltpa
Cookie
valid
Ltpa
Cookie
is
Valid
Jwt
Cookie
get
Auth
Cookie
set
Ltpa
Token
valid
Jwt
Response
handle
Authentication
Create
handle
Authentication
Verify
handle
Authentication
Delete
handle
Jwt
Keys
apply
handle
Authentication
Create
handle
Authentication
Verify
handle
Authentication
Delete
handle
Jwt
Keys
is
Unauthorized
is
Internal
Error
is
Bad
Request
handle
Change
Password
get
Apars
baseline
For
Version
full
Set
Of
Applied
generate
Jwt
validate
Jwt
Token
invalidate
Jwt
Token
contains
Token
get
Key
Set
load
JWK
read
Pem
Private
Key
read
Pem
Public
Key
read
Another
Pem
Public
Key
get
Rsa
Public
Key
extract
Token
extract
Ltpa
Token
get
Token
From
The
Start
get
Token
From
The
Middle
get
Ltpa
Token
jwk
get
Api
Doc
info
logout
authenticate
change
Password
verify
read
Files
map
User
Identity
set
Custom
Response
set
Custom
Status
authenticate
verify
authenticate
verify
mock
Distributed
Identity
Mapping
set
Response
main
test
Health
test
Info
test
It
Works
main
get
Health
Status
get
Info
test
Context
Starts
set
Up
get
Discovery
Uri
With
Path
setup
given
Http
Session
when
Logout
Handled
then
Invalidate
Session
And
Set
Cookie
open
API
message
Service
Metrics
web
Security
Customizer
filter
Chain
configure
login
Filter
basic
Filter
cookie
Filter
logout
Success
Handler
on
Logout
Success
main
on
Application
Event
test
Constructor
test
Constructor
when
Call
Event
Endpoint
then
Get
Server
Sent
Events
handle
Message
Test
handle
Bye
Message
set
Up
when
Sending
Message
then
Send
It
when
Sending
Bye
Message
then
Send
And
Close
test
Set
Name
test
Hash
Code
test
Equals
get
Name
test
Pet
Save
test
Get
Pet
By
Id
test
Get
All
test
Update
Not
Existing
Pet
test
Update
Of
Existing
P
Et
test
Delete
Not
Existing
Pet
test
Delete
Existing
Pet
setup
register
Test
register
Test
duplicate
is
Registered
Test
not
Registered
unregister
Test
unregister
Test
not
Registered
discoverable
Client
Config
get
All
Pets
get
All
Pets
For
No
Pets
From
Service
get
All
Pets
For
Null
Pets
From
Service
call
File
Download
Endpoint
when
Request
then
Return
Info
redirect
To
Location
add
Pet
With
Valid
Object
when
Calling
Web
Socket
then
Return
Ok
when
Calling
Server
Sent
Events
then
Return
Ok
call
Greeting
Endpoint
call
Greeting
Endpoint
With
Delay
call
Plain
Greeting
call
Custom
Greeting
Endpoint
when
Calling
With
Param
then
Return
Ok
setup
should
Submit
With
Post
And
Return
String
should
Submit
With
Put
And
Return
String
get
Existing
Pet
get
Not
Existing
Pet
get
Pet
By
Invalid
Id
put
Existing
Pet
put
Not
Existing
Pet
put
Pet
With
Missing
Id
put
Pet
With
Extra
Field
put
Pet
With
Invalid
Id
put
Pet
With
Different
Id
In
Body
And
Path
put
Pet
With
Invalid
Id
In
Body
delete
Existing
Pet
registration
Test
successful
unregister
Test
successful
is
Registered
Test
not
Registered
is
Registered
Test
Service
not
Registered
when
Calling
With
Param
then
Return
Created
when
Calling
Without
Param
then
Return
Default
when
Calling
With
Param
then
Return
Created
when
Calling
Without
Param
then
Return
Default
set
Up
call
To
Pass
Ticket
Test
Endpoint
With
Correct
Ticket
call
To
Pass
Ticket
Test
Endpoint
Without
Ticket
Fails
call
To
Pass
Ticket
Test
Endpoint
Wit
Bad
Ticket
Fails
call
Greeting
Endpoint
call
Greeting
Endpoint
With
Delay
call
Plain
Greeting
call
Custom
Greeting
Endpoint
forward
Login
Test
successful
Login
forward
Login
Test
invalid
Credentials
given
Valid
Token
when
Performing
Logout
then
Success
Logout
given
No
Token
when
Performing
Logout
then
Fail
Logout
given
Correct
Headers
In
Request
then
Return
All
Values
get
Path
Id
get
Body
Id
get
Id
stream
Events
register
Web
Socket
Handlers
handle
Message
handle
Message
configure
Path
Match
pass
Ticket
Service
filter
Chain
user
Details
Service
web
Security
Customizer
open
API
api
V1
api
V2
graph
V1
fail
On
Unknown
Properties
message
Service
servlet
Container
get
Id
get
Name
set
Id
set
Name
equals
hash
Code
get
Date
get
Content
get
Is
Registered
main
on
Application
Event
save
get
By
Id
get
All
update
delete
By
Id
init
save
get
By
Id
get
All
update
delete
By
Id
register
unregister
is
Registered
get
Value
From
Header
passticket
Test
forward
Login
forward
Logout
handle
Pet
Not
Found
handle
Id
Mismatch
handle
Id
Type
Mismatch
handle
Method
Argument
Not
Valid
handle
Unrecognized
Property
json
Parse
Exception
handle
Invalid
Format
Exception
redirect
Page
download
Image
greeting
custom
Greeting
upload
File
With
Post
upload
File
With
Put
get
Request
Info
set
Certs
set
Headers
set
Cookie
set
Content
greeting
custom
Greeting
get
All
Pets
add
Pet
get
Pet
By
Id
update
Pet
By
Id
delete
Pet
By
Id
we
Service
Greet
greeting
return
Status
Code
For
GET
return
Status
Code
For
POST
forward
Registration
forward
Un
Registration
is
Registered
set
Up
builder
issue
Rauditx
handle
Exception
setup
then
Return200
given
Null
Expiration
then
Return200
given
Response
Not
Committed
then
Throw
IO
Exception
verify
Commons
when
Proper
Inputs
then
Rauditx
Is
Generated
when
Improper
Inputs
then
Rauditx
Is
Generated
execute
Login
Handler
should
Throw
When
Zosmf
Is
Not
Configured
should
Return
When
Zosmf
Is
Configured
when
Get
Default
Cookie
Same
Site
then
Return
Strict
given
Inputs
then
Map
To
Correct
Fields
given
Existing
Principal
then
Return
Authenticated
supports
test
Convert
when
Object
Contains
All
Fields
then
Successful
Conversion
test
Convert
when
Success
Is
False
then
Successful
Conversion
test
Init
when
Missing
Fields
then
No
Such
Field
Exception
test
Init
when
Null
then
Null
Pointer
Exception
to
Input
Stream
test
Load
Saf
File
when
Empty
File
then
No
Credentials
test
Full
Saf
File
when
Test
Combination
then
Evaluate
Right
test
Multiple
Levels
On
Same
Resource
And
User
when
Loaded
then
Use
Higher
One
test
Loading
when
External
File
Exist
then
Load
It
get
File
test
Loading
when
External
Doesnt
Exists
then
Load
From
Resources
test
Filter
Object
when
Set
Value
then
Is
Set
test
Return
Object
when
Set
Value
then
Is
Set
test
Get
This
when
Prepared
then
Return
Same
Instance
test
Get
Authentication
when
Prepared
then
Return
Instance
From
Constructor
set
Up
test
Has
Saf
Resource
Access
when
Error
Not
Happened
then
False
test
Has
Saf
Resource
Access
when
Error
Happened
then
False
given
Faulty
Response
when
Rest
Template
Method
Returns
Null
then
False
given
Unsupported
Resouce
Class
when
Verify
then
Endpoint
Impropriety
Configure
Exception
given
Exception
On
Rest
Call
when
Verifying
then
Endpoint
Impropriety
Configure
Exception
set
Up
get
Platform
Class
get
Platform
Returned
Class
test
Has
Saf
Resource
Access
when
Error
Happened
then
False
test
Has
Saf
Resource
Access
when
No
Response
then
True
check
Permission
check
Permission
get
Saf
Resource
Access
Config
given
No
Provider
And
Available
Enabled
Endpoint
when
Create
then
Return
Endpoint
Provider
given
No
Provider
And
Available
Disable
Endpoint
when
Create
then
Return
Null
given
No
Provider
And
Available
Disable
Endpoint
And
Native
when
Create
then
Return
Native
Provider
given
No
Provider
And
Available
Native
when
Create
then
Return
Native
Provider
given
No
Provider
And
Available
Dummy
when
Create
then
Return
Dummy
Provider
given
No
Provider
And
No
Available
Provider
when
Create
then
Return
Null
given
Endpoint
Provider
when
Create
then
Return
Endpoint
Provider
given
Native
Provider
when
Create
then
Return
Native
Provider
given
Dummy
Provider
when
Create
then
Return
Dummy
Provider
given
Endpoint
Provider
And
Disabled
Endpoint
when
Create
then
Return
Endpoint
Provider
given
Unknown
Provider
when
Create
then
Throw
Illegal
Argument
Exception
create
Endpoint
create
Native
create
Dummy
set
Up
test
Create
Security
Expression
Root
when
Init
then
Properly
Set
test
Has
Saf
Resource
Access
when
Have
Saf
Resource
Access
then
Return200
test
Has
Saf
Resource
Access
when
Dont
Have
Saf
Resource
Access
then
Return403
test
Security
Access
when
Wrong
Credentials
then
Return401
saf
Resource
Access
Verifying
object
Mapper
message
Service
resource
Access
Exception
Handler
auth
Exception
Handler
failed
Authentication
Handler
saf
Method
Security
Expression
Handler
filter
Chain
configure
extract
Content
configure
Global
get
Response
test1read
test1update
test2read
test2update
message
Sourced
From
Enum
enum
Value
Can
Be
Retrieved
then
Return
Message
set
Up
should
Rethrow
Exception
should
Throw
Servlet
Exception
On
IO
Exception
setup
test
Authentication
Failure
when
Exception
Is
Insufficient
Authentication
Exception
test
Authentication
Failure
when
Exception
Is
Bad
Credentials
Exception
test
Authentication
Failure
when
Exception
Is
Authentication
Credentials
Not
Found
Exception
test
Authentication
Failure
when
Exception
Is
Auth
Method
Not
Supported
Exception
test
Authentication
Failure
when
Exception
Is
Token
Not
Valid
Exception
test
Authentication
Failure
when
Exception
Is
Token
Not
Provided
Exception
test
Authentication
Failure
when
Exception
Is
Token
Format
Not
Valid
Exception
test
Authentication
Failure
when
Exception
Is
Authentication
Exception
test
Invalid
Certificate
Exception
test
Zos
Authentication
Exception
Exception
test
Token
Not
In
Response
Exception
test
Authentication
Failure
when
Occur
Unexpected
Exception
test
Auth
Service
Unavailable
message
Service
set
Up
authentication
With
Valid
Token
Inside
Cookie
should
Skip
Filter
should
Not
Authenticate
With
Bad
Credentials
should
Not
Authenticate
With
No
Gateway
should
Not
Filter
With
No
Cookie
should
Return
Empty
If
No
Cookies
should
Extract
Content
should
Return
Empty
If
Cookie
Value
Is
Empty
set
Up
then
Success
then
Authentication
Fails
then
Skip
Filter
then
Authentication
Fails
then
Not
Filter
then
Return
Empty
then
Extract
Content
set
Up
authentication
With
Basic
Auth
Header
should
Skip
Filter
should
Not
Authenticate
With
Bad
Credentials
should
Not
Authenticate
With
No
Gateway
should
Not
Filter
With
No
Credentials
extract
Content
From
Request
With
Valid
Basic
Auth
extract
Content
From
Request
With
Nonsense
Basic
Auth
extract
Content
From
Request
With
Nonsense
extract
Content
From
Request
With
Incomplete
Basic
Auth
extract
Content
From
Request
With
Empty
Realm
extract
Content
From
Request
Without
Auth
Header
test
Commence
message
Service
test
Commence
message
Service
test
On
Authentication
Failure
set
Up
set
Up
when
All
Certificates
Found
Then
They
Are
Trusted
when
Some
Certificate
Not
Found
Then
All
Untrusted
set
Up
then
Any
Certificate
Is
Not
Trusted
set
Up
when
Update
Public
Keys
then
Set
Updated
setup
setup
when
Get
Trusted
Certs
then
Certificates
Returned
when
Invalid
Url
then
No
Certificates
Returned
when
IO
Error
then
No
Certificates
Returned
setup
when
Get
Trusted
Certs
then
No
Certificates
Returned
setup
when
Get
Trusted
Certs
then
No
Certificates
Returned
when
No
Http
Entity
then
No
Certificates
Returned
setup
when
Get
Trusted
Certs
then
No
Certificates
Returned
when
No
Status
Line
then
No
Certificates
Returned
set
Up
create
Mock
get
Native
Saf
Resource
Access
Verifying
when
Call
Success
then
Set
Event
And
Distribute
when
Call
Failure
then
Set
Event
And
Distribute
when
Call
Authentication
then
Recalled
To
Rauditx
when
Call
Authorization
then
Recalled
To
Rauditx
when
Call
Always
Log
Successes
then
Recalled
To
Rauditx
when
Call
Never
Log
Successes
then
Recalled
To
Rauditx
when
Call
Always
Log
Failures
then
Recalled
To
Rauditx
when
Call
Never
Log
Failures
then
Recalled
To
Rauditx
when
Call
Check
Warning
Mode
then
Recalled
To
Rauditx
when
Call
Ignore
Success
With
No
Audit
Log
Record
then
Recalled
To
Rauditx
when
Call
Log
String
then
Recalled
To
Rauditx
when
Call
Message
Segment
then
Recalled
To
Rauditx
when
Call
User
Id
then
Recalled
To
Rauditx
when
Call
Event
then
Recalled
To
Rauditx
when
Call
Qualifier
then
Recalled
To
Rauditx
when
Call
Set
Type
then
Recalled
To
Rauditx
when
Builder
then
Return
Instance
when
Builder
then
Return
Builder
With
Default
Values
when
Issue
then
Handle
Exception
when
Verify
Privileges
then
Log
Error
when
Issue
then
Is
Properly
Issued
when
Verify
Privileges
then
Dont
Log
Any
Error
when
Get
Current
User
then
Return
Null
when
Verify
Privileges
then
Log
Error
when
Get
Native
Saf
Resource
Access
Verifying
then
Returns
Null
when
Create
Mock
then
Return
Instance
With
Callable
Methods
init
set
Up
set
Up
then
Request
Not
Changed
set
Up
then
Request
Not
Changed
set
Up
then
All
Client
Certificates
then
All
Apiml
Certificates
With
Reversed
Logic
set
Up
given
Trusted
Certs
then
Client
Cert
Header
Accepted
given
Not
Trusted
Certs
then
Client
Cert
Header
Ignored
set
Up
then
Client
Cert
Header
Ignored
set
Up
then
Certificate
In
Header
Ignored
set
Up
then
Other
Headers
Pass
Through
set
Up
set
Up
then
Categorized
Certs
then
Categorized
Certs
With
Reversed
Logic
set
Up
given
Trusted
Certs
then
Client
Cert
Header
Accepted
given
Not
Trusted
Certs
then
Client
Cert
Header
Ignored
set
Up
then
Client
Cert
Header
Ignored
set
Up
then
Store
Expiration
Time
And
Scopes
values
given
No
Scopes
In
Request
then
Throw
Exception
set
Up
when
Invalid
Value
then
Return400
when
Invalid
Key
then
Return400
setup
same
Objects
Are
Equals
object
Ist
Null
return
False
test
Is
Expired
test
Source
test
Create
Authenticated
get
Certificate
correct
Base64
get
Certificate
setup
attempt
Authentication
successful
Authentication
attempt
Authentication
set
Up
null
Authentication
Runs
Rest
Of
Filterchain
authentication
Exception
Stops
Filterchain
valid
Authentication
Is
Processed
then
Map
Constructor
setup
should
Call
Authentication
Manager
Authenticate
With
Auth
Header
assert
Authenticate
Called
should
Call
Authentication
Manager
Authenticate
With
Json
should
Call
Authentication
Manager
Authenticate
With
New
Password
In
Json
should
Fail
With
Json
Empty
Credentials
should
Return
Null
Without
Auth
should
Fail
With
Wrong
Http
Method
should
Fail
With
Incorrect
Credentials
Format
should
Fail
With
Incorrectly
Encoded
Base64
should
Fail
With
Gateway
Not
Available
should
Fail
With
Service
Not
Accessible
test
Fail
With
Resource
Access
Error
setup
when
Successful
Auth
then
Do
Filter
when
Unsuccessful
Auth
then
Fail
throws
Every
Time
setup
given
Authentication
then
Return204And
Cookie
given
Cookie
Secure
Not
Set
then
Return
Cookie
Without
Secure
execute
Login
Handler
return
Password
return
Empty
return
New
Password
return
Password
on
Authentication
Failure
on
Authentication
Success
authenticate
supports
create
Expression
Handler
construct
User
Details
load
User
Details
load
User
By
Username
validated
Zosmf
Service
Id
convert
get
File
has
Saf
Resource
Access
load
Definition
set
set
get
Saf
Access
load
Definition
get
Platform
Class
get
Platform
Returned
Class
get
Check
Permission
Method
Handle
init
evaluate
Platform
Returned
check
Permission
check
Permission
has
Saf
Resource
Access
value
Of
Errno
create
Http
Entity
has
Saf
Resource
Access
get
This
has
Saf
Resource
Access
has
Saf
Service
Resource
Access
value
Of
Errno
format
create
Security
Expression
Root
has
Saf
Resource
Access
create
Endpoint
create
Native
create
Dummy
create
saf
Resource
Access
Verifying
handle
Access
Denied
Exception
get
Message
get
Platform
Error
get
Error
Message
Key
get
Default
Message
get
Default
Action
from
Message
Key
handle
Exception
handle
Gateway
Not
Available
handle
Service
Not
Accessible
handle
Exception
write
Error
Response
write
Error
Response
value
Of
Errno
handle
Exception
handle
Zos
Authentication
Exception
handle
Authentication
Required
handle
Bad
Credentials
handle
Authentication
Credentials
Not
Found
handle
Auth
Method
Not
Supported
handle
Token
Not
Valid
handle
Token
Not
Provided
handle
Token
Expire
handle
Invalid
Certificate
handle
Token
Format
Exception
handle
Invalid
Token
Type
Exception
handle
Invalid
Access
Token
Body
Exception
handle
Authentication
Exception
handle
Service
Not
Accessible
Exception
extract
Content
map
Base64Credentials
should
Not
Filter
extract
Content
do
Filter
Internal
extract
Content
extract
Content
on
Authentication
Failure
commence
commence
get
Trusted
Certs
call
Certificates
Endpoint
is
Trusted
update
APIML
Public
Key
Certificates
set
Attributes
set
Event
Success
set
Event
Failure
set
Authorization
Event
set
Authentication
Event
set
Always
Log
Successes
set
Never
Log
Successes
set
Always
Log
Failures
set
Never
Log
Failures
set
Check
Warning
Mode
set
Racf
Class
set
Component
set
Event
set
Fmid
set
Ignore
Success
With
No
Audit
Log
Record
set
Link
Value
set
Link
Value
set
Log
String
set
Qualifier
set
Resource
set
Subtype
add
Message
Segment
add
Relocate
Section
add
Relocate
Section
issue
get
Current
User
log
No
Privileges
get
Native
Saf
Resource
Access
Verifying
verify
Privileges
set
Default
create
Mock
builder
success
failure
authentication
authorization
always
Log
Successes
never
Log
Successes
always
Log
Failures
never
Log
Failures
check
Warning
Mode
ignore
Success
With
No
Audit
Log
Record
log
String
message
Segment
user
Id
event
qualifier
subtype
issue
do
Filter
Internal
categorize
Certs
get
Client
Cert
From
Header
mutate
get
Header
get
Headers
do
Filter
Internal
select
Certs
base64Encode
Public
Key
set
Certificate
For
Client
Auth
set
Apiml
Certificate
get
Credentials
get
Principal
equals
hash
Code
is
Valid
invalidate
Token
is
Invalidated
get
Token
is
Valid
For
Scopes
invalidate
All
Tokens
For
User
invalidate
All
Tokens
For
Service
evict
Non
Relevant
Tokens
And
Rules
is
Expired
value
By
Issuer
get
Credentials
get
Principal
create
Authenticated
attempt
Authentication
successful
Authentication
attempt
Authentication
do
Auth
successful
Authentication
unsuccessful
Authentication
get
Credential
From
Authorization
Header
map
Base64Credentials
get
Credentials
From
Body
get
Password
get
New
Password
evict
Sensitive
Data
successful
Authentication
unsuccessful
Authentication
attempt
Authentication
unsuccessful
Authentication
do
Filter
attempt
Authentication
successful
Authentication
on
Authentication
Success
set
Cookie
check
Permission
returned
To
String
main
create
Event
test
Listen
set
Up
then
Change
Service
Prefix
tuples
then
Should
Register
then
Should
Register
With
Second
Method
then
First
Method
Throws
Illegal
Exception
then
First
Method
Throw
Runtime
Exception
then
Second
Method
Throws
Illegal
Exception
then
Second
Method
Throw
Runtime
Exception
exceptions
then
Throw
Illegal
Argument
Exception
then
Throw
Runtime
Exception
exceptions
then
Is
Successful
then
Throw
Illegal
Argument
Exception
then
Throw
Runtime
Exception
exceptions
get
Standard
Instance
set
Up
create
Instance
Info
create
Instance
Info
create
Message
setup
test
Missing
Gateway
setup
then
AP
Iis
Called
With
Given
Service
Id
then
AP
Iis
Called
Without
Service
Id
then
AP
Iis
Called
With
Given
Service
Id
then
AP
Iis
Called
Without
Service
Id
test
Distribute
Invalidated
Credentials
setup
when
Http
Exception
Then
Error
Logged
when
Http
Response
Forbidden
Then
Error
Logged
when
Http
Response
Processing
Then
Error
Logged
setup
when
Http
Exception
Then
Error
Logged
when
Http
Response
Forbidden
Then
Error
Logged
when
Http
Response
Processing
Then
Error
Logged
setup
when
Http
Exception
Then
Error
Logged
when
Http
Response
Forbidden
Then
Error
Logged
when
Http
Response
Processing
Then
Error
Logged
then
Requestsfinished
Ok
after
Properties
Set
add
To
Queue
service
Updated
Process
distribute
Invalidated
Credentials
Process
status
Is
Up
When
Gateway
Is
Available
status
Is
Partial
When
Gateway
Is
Not
Available
set
Up
get
Protocol
get
Discovery
Uri
With
Path
ui
Is
Secured
With
Configured
Basic
Auth
application
Info
Endpoints
When
Provided
Nothing
application
Health
Endpoints
When
Provided
Nothing
given
ATTLS
test
Application
Beans
Endpoints
Get
verify
Http
Headers
On
Ui
verify
Http
Headers
On
Api
get
Protocol
set
Up
eureka
Endpoints
when
Provided
Certificate
discovery
Endpoints
when
Provided
Certification
given
Application
Endpoints
when
Provided
Nothing
setup
when
Provided
Nothing
when
Provided
Basic
Authentication
when
Provided
Nothing
then
Return
Unauthorized
when
Get
Apps
then
Correct
Headers
In
Response
get
Service
Id
create
Event
registered
Instance
Listen
prepare
Service
Definition
Processor
process
Services
Data
process
Services
Data
process
Services
Data
With
Two
Routes
process
Services
Data
With
Empty
Homepage
service
With
Catalog
Metadata
service
With
Custom
Metadata
given
Unknown
Field
In
The
Static
Definition
when
The
Definition
Is
Loaded
then
Error
Is
Returned
file
Instead
Of
Directory
For
Definitions
given
Incorrect
Url
when
The
Definition
Is
Loaded
then
Error
Is
Returned
given
Invalid
Documentation
Url
when
The
Definition
Is
Loaded
then
Error
Is
Returned
given
List
Among
Custom
Metadata
when
Definition
Is
Loaded
then
Error
Is
Returned
given
Undefined
Instance
Base
Urls
when
Definition
Is
Loaded
then
Error
Is
Returned
given
No
Instance
In
Base
Urls
when
Definition
Is
Loaded
then
Error
Is
Returned
given
Instance
Without
Service
Id
when
Definition
Is
Loaded
then
Error
Is
Returned
assert
That
No
Instance
Is
Created
And
Correct
Message
Is
Produced
assert
Full
Message
Is
Correct
given
Instance
Definition
Without
Instance
Base
Urls
when
Static
Definition
Is
Processed
then
Error
Is
Returned
create
Instances
With
Multiple
Ymls
enable
Unsecure
Port
If
Http
should
Generate
Metadata
If
Api
Info
Is
Not
N
Ull
should
Give
Error
If
Tile
Id
Is
Invalid
find
Services
With
Two
Directories
find
Services
With
One
Directory
find
Services
With
Second
Empty
Directory
process
Services
Data
With
Authentication
Metadata
process
Services
Data
With
Invalid
Authentication
Scheme
additional
Service
Metadata
additional
Service
Metadata
Multi
set
Up
create
Result
test
Find
Services
In
Directory
No
Files
test
Find
Services
In
Directory
One
File
test
Get
Static
Instances
test
Get
Static
Instances
After
Register
test
Reload
Services
With
Unregistering
Service
test
Reload
Services
With
Adding
New
Service
test
Renew
Instances
list
Definitions
reload
Definitions
translate
Metadata
generate
Metadata
V1
set
Zosmf
Authentication
dependent
Methods
set
Up
updating
Static
Service
set
Location
get
Files
given
Eureka
Node
Url
then
Create
Node
values
given
Client
Event
then
Update
given
DNS
Shoud
Be
Used
then
Do
Not
Update
given
No
Events
then
Do
Not
Update
should
Allow
Call
For
Eureka
User
should
Forbid
Call
For
Not
Eureka
User
configure
Global
authenticate
supports
http
Web
Security
Customizer
http
Filter
Chain
configure
basic
Filter
https
Web
Security
Customizer
basic
Auth
Or
Token
Filter
Chain
client
Certificate
Filter
Chain
basic
Auth
Or
Token
Or
Cert
Filter
Chain
configure
basic
Filter
cookie
Filter
bearer
Content
Filter
x509User
Details
Service
base
Configure
message
Service
Discovery
get
Apiml
Instance
Registry
peer
Eureka
Nodes
is
Valid
get
Old
Prefix
get
New
Prefix
is
Valid
Tuple
after
Properties
Set
pre
Destroy
get
Server
Context
get
Registry
get
Gateway
Instances
add
To
Queue
service
Updated
service
Cancelled
Registration
distribute
Invalidated
Credentials
notify
service
Updated
Process
service
Cancel
Registration
Process
distribute
Invalidated
Credentials
Process
run
get
Service
Url
process
main
on
Application
Event
listen
listen
init
resolve
Instance
Lease
Duration
Rewritten
register
register
cancel
renew
status
Update
replace
Values
change
Service
Id
do
Health
Check
on
Application
Event
list
reload
get
Static
Instances
register
Services
start
Renewal
Timer
run
renew
Instances
reload
Services
register
Services
get
Registry
get
Server
Context
get
Files
find
Static
Services
Data
load
Definition
load
Definition
process
get
Tile
create
Instances
build
Instance
Info
set
Instance
Attributes
set
Port
set
Metadata
Routes
set
Metadata
Tile
set
Metadata
Api
Info
set
Metadata
Authentication
set
Custom
Metadata
create
Metadata
translate
Metadata
translate
V1to
V2
translate
Routes
translate
Route
Map
Key
translate
Parameter
update
Zosmf
Authentication
update
Metadata
update
set
Additional
Service
Metadata
create
Peer
Eureka
Node
on
Application
Event
should
Update
listen
