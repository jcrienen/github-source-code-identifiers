callback
callback
end
Trace
to
String
bash
To
Descriptor
execution
termination
pop
add
To
Call
Stack
transform
premain
visit
Invoke
emit
To
emit
To
emit
To
main
do
Class
emit
To
visit
Return
emit
To
visit
Invoke
emit
To
hack
Type
emit
To
emit
To
find
Existing
Entry
add
CP
Entry
main
transform
CP
Index
transform
Attribute
collect
Attributes
copy
Entry
do
Class
transform
premain
main
do
Class
emit
To
emit
To
emit
To
main
do
Class
do
Type
package
Part
main
do
Class
visit
Get
emit
To
emit
To
visit
Put
emit
To
emit
To
visit
Array
Store
emit
To
emit
To
main
do
Class
main
do
Class
emit
To
read
Data
read
Range
read
Position
get
Header
Info
get
Method
Info
get
Footer
Info
to
String
get
Flags
is
In
Range
matches
is
More
Precise
has
No
Position
get
Source
Info
to
String
get
This
Cause
get
This
Cause
is
Undefined
is
Within
to
Array
get
Start
Position
get
End
Position
to
String
read
Data
get
Source
Info
to
String
get
Flag
Names
is
Flag
Valid
is
Higher
Priority
set
Log
File
set
Min
Log
Level
no
Logging
full
Logging
error
warn
info
debug
error
warn
log
Time
info
append
Info
debug
error
warn
info
debug
allow
ignore
log
log
log
print
println
get
Stream
get
Data
get
Line
get
Column
is
Undefined
is
Before
to
Long
to
Unsigned
Int
to
String
read
Data
find
Unique
Stack
Def
optimize
build
Back
Edges
check
Consistent
Stack
Sizes
check
Stack
Sizes
At
instruction
Kills
Var
forward
Dups
emit
To
push
Back
Local
Stores
emit
To
emit
To
emit
To
emit
To
build
Stack
Def
Map
follow
Stack
Def
follow
Stack
Use
get
Instructions
On
Path
get
Reachable
Instructions
get
Reaching
Instructions
set
Manifest
Builder
add
Entry
set
Class
Name
get
Class
Name
get
Input
Name
open
is
Class
open
to
String
is
Class
get
Input
Name
get
Entry
open
Cached
Jar
open
to
String
get
Input
Name
set
Class
Hierarchy
Provider
set
Output
Jar
set
Pass
Unmodified
Classes
add
Input
Jar
add
Input
Jar
Entry
add
Input
Class
add
Input
Directory
add
Input
Element
parse
Standard
Args
get
Num
Input
Classes
begin
Traversal
make
Class
From
Stream
get
Class
Name
write
Class
To
internal
Next
Class
to
Entry
Name
get
Last
Class
Resource
Name
get
Output
File
internal
Output
Modified
Class
set
JAR
Comment
make
Output
Jar
set
Ignore
make
Buf
release
Buf
copy
Stream
add
Output
Jar
Entry
end
Output
Jar
Entry
write
Unmodified
Classes
close
put
Next
Entry
make
equals
hash
Code
get
Popped
Count
get
Types
get
Pushed
Type
get
Pushed
Word
Size
visit
to
String
is
PEI
first
Class
Types
get
Constant
Pool
Item
Type
get
Constant
Pool
Integer
get
Constant
Pool
Float
get
Constant
Pool
Long
get
Constant
Pool
Double
get
Constant
Pool
String
get
Constant
Pool
Method
Type
get
Constant
Pool
Class
Type
get
Constant
Pool
Member
Class
Type
get
Constant
Pool
Member
Name
get
Constant
Pool
Member
Type
get
Constant
Pool
Handle
Class
Type
get
Constant
Pool
Handle
Name
get
Constant
Pool
Handle
Type
get
Constant
Pool
Handle
Kind
get
Constant
Pool
Dynamic
Bootstrap
get
Constant
Pool
Dynamic
Name
get
Constant
Pool
Dynamic
Type
preallocate
make
get
Var
Index
get
Type
equals
hash
Code
get
Popped
Count
to
String
visit
is
PEI
get
Class
Type
set
Preset
Constants
set
Class
Hierarchy
allocate
Constant
Pool
Integer
allocate
Constant
Pool
Float
allocate
Constant
Pool
Long
allocate
Constant
Pool
Double
allocate
Constant
Pool
String
allocate
Constant
Pool
Class
Type
allocate
Constant
Pool
Method
Type
allocate
Constant
Pool
Method
Handle
allocate
Constant
Pool
Field
allocate
Constant
Pool
Method
allocate
Constant
Pool
Interface
Method
allocate
Constant
Pool
Invoke
Dynamic
create
Helper
Method
collect
Instruction
Info
visit
Targets
visit
Goto
visit
Local
Store
visit
Conditional
Branch
visit
Switch
write
Int
write
Short
write
Byte
in
Basic
Block
check
Stack
Word
Size
compute
Stack
Words
At
compute
Stack
Words
apply
apply
apply
insert
Branch
Offset
Int
apply
Patches
make
Code
Buf
release
Code
Buf
output
Instructions
visit
Pop
visit
Dup
visit
Swap
build
Raw
Handlers
build
Bytecode
Map
add
Back
Edge
add
Live
Var
make
Live
Locals
get
And
Check
Local
Type
allocate
Locals
make
Helper
Patch
find
Block
make
Helpers
make
Types
compile
get
Output
get
Auxiliary
Methods
get
Code
get
Instruction
Offsets
get
Method
Name
get
Method
Signature
get
Access
Flags
get
Raw
Handlers
is
Static
get
New
Bytecodes
To
Old
Bytecodes
get
Max
Stack
get
Max
Locals
skip
make
Simple
Instructions
get
Constant
Pool
decode
Short
decode
U
Short
decode
Int
make
Constant
Pool
Load
elem
Count
get
Primitive
Type
does
Subroutine
Return
find
Return
To
Var
find
Return
decode
Subroutine
assign
Reachables
To
Subroutine
assign
Subroutine
compute
Subroutine
Map
decode
Bytecode
Instruction
apply
Instruction
To
Stack
decode
At
set
Index
get
Index
make
Handlers
make
Handlers
compute
Subroutine
Length
append
Subroutine
Code
decode
get
Instructions
get
Handlers
get
Instructions
To
Bytecodes
contains
Subroutines
get
Class
Type
get
Field
Type
get
Field
Name
is
Static
indirectly
Read
Locals
indirectly
Written
Locals
get
Operator
get
Type
is
Unsigned
to
String
get
Operator
get
Type
get
Invocation
Code
get
Method
Signature
get
Method
Name
get
Class
Type
has
Implicit
This
has
Implicit
This
has
Implicit
This
preallocate
Arithmetic
Ops
preallocate
Logical
Ops
make
equals
get
Operator
hash
Code
get
Popped
Count
get
Pushed
Type
get
Pushed
Word
Size
get
Type
visit
to
String
is
PEI
throws
Exception
On
Overflow
is
Unsigned
get
Type
get
Default
Label
get
Cases
And
Labels
make
is
Fall
Through
get
Branch
Targets
redirect
Targets
equals
hash
Code
get
Popped
Count
to
String
visit
is
PEI
get
Var
Index
get
Type
get
Var
Index
get
Type
make
equals
get
Array
Bounds
Count
hash
Code
get
Popped
Count
get
Pushed
Type
get
Pushed
Word
Size
get
Type
to
String
visit
is
PEI
make
equals
hash
Code
get
Popped
Count
get
Type
get
Pushed
Type
get
Pushed
Word
Size
visit
to
String
is
PEI
first
Class
Type
get
Type
preallocate
make
is
Fall
Through
get
Branch
Targets
get
Label
redirect
Targets
equals
hash
Code
to
String
visit
is
PEI
make
equals
is
Enter
hash
Code
get
Popped
Count
visit
to
String
is
PEI
preallocate
make
equals
get
Operator
hash
Code
get
Popped
Count
get
Pushed
Type
get
Pushed
Word
Size
get
Type
visit
to
String
is
PEI
get
Lazy
Constant
Pool
get
Lazy
Constant
Pool
get
CP
Index
get
Class
Type
get
Field
Name
get
Field
Type
make
make
equals
get
Class
Type
get
Field
Name
get
Field
Type
is
Static
hash
Code
get
Popped
Count
get
Pushed
Type
get
Pushed
Word
Size
to
String
visit
is
PEI
is
Address
Of
preallocate
make
equals
is
Fall
Through
hash
Code
get
Popped
Count
get
Type
visit
to
String
is
PEI
visit
Constant
visit
Goto
visit
Local
Load
visit
Local
Store
visit
Array
Load
visit
Array
Store
visit
Pop
visit
Dup
visit
Swap
visit
Binary
Op
visit
Unary
Op
visit
Shift
visit
Conversion
visit
Comparison
visit
Conditional
Branch
visit
Switch
visit
Return
visit
Get
visit
Put
visit
Invoke
visit
New
visit
Array
Length
visit
Throw
visit
Monitor
visit
Check
Cast
visit
Instanceof
visit
Load
Indirect
visit
Store
Indirect
is
Fall
Through
get
Branch
Targets
redirect
Targets
get
Popped
Count
get
Pushed
Type
get
Pushed
Word
Size
visit
to
String
is
PEI
first
Class
Types
get
Types
preallocate
Floating
Compares
make
equals
get
Operator
get
Type
hash
Code
get
Popped
Count
get
Pushed
Type
get
Pushed
Word
Size
visit
to
String
is
PEI
make
get
Lazy
Constant
Pool
get
Lazy
Constant
Pool
get
CP
Index
get
Class
Type
get
Method
Name
get
Method
Signature
make
equals
get
Class
Type
get
Method
Name
get
Method
Signature
get
Invocation
Mode
get
Invocation
Mode
String
hash
Code
get
Popped
Count
get
Pushed
Type
get
Pushed
Word
Size
visit
to
String
is
PEI
get
Invocation
Code
make
make
equals
to
String
get
Branch
Targets
get
Target
redirect
Targets
get
Operator
get
Type
hash
Code
get
Popped
Count
visit
is
PEI
to
String
get
Target
get
Operator
get
Type
preallocate
make
equals
hash
Code
get
Popped
Count
get
Type
to
String
visit
is
PEI
is
Address
Of
recalculate
From
notify
Update
is
This
Assigned
recalculate
From
visit
Local
Load
visit
Local
Store
allocate
Locals
notify
Update
allocate
allocate
allocate
recalculate
From
visit
Array
Length
visit
Binary
Op
visit
Check
Cast
visit
Comparison
visit
Conditional
Branch
visit
Constant
visit
Conversion
visit
Dup
visit
Goto
visit
Instanceof
visit
Local
Load
visit
Local
Store
visit
New
visit
Pop
visit
Return
visit
Shift
visit
Swap
visit
Switch
visit
Throw
visit
Unary
Op
visit
Array
Load
visit
Array
Store
visit
Get
visit
Put
visit
Monitor
visit
Invoke
notify
Update
get
Array
Load
Count
get
Array
Store
Count
get
Get
Count
get
Put
Count
get
Monitor
Count
get
Invoke
Count
get
Comparison
Count
get
Array
Length
Count
get
Constant
Count
get
Shift
Count
get
Switches
Count
get
Swap
Count
get
Binary
Op
Count
get
Check
Cast
Count
get
Throw
Count
get
Conditional
Branch
Count
get
Conversion
Count
get
Dup
Count
get
Goto
Count
get
Return
Count
get
Instance
Of
Count
get
Local
Load
Count
get
Local
Store
Count
get
New
Count
get
Pop
Count
get
Unary
Op
Count
get
Counter
preallocate
make
make
equals
get
Size
get
Delta
hash
Code
get
Popped
Count
to
String
visit
is
PEI
disassemble
To
disassemble
To
get
Type
get
Lazy
Constant
Pool
get
Lazy
Constant
Pool
get
CP
Index
get
Class
Type
get
Field
Name
get
Field
Type
make
make
equals
get
Class
Type
get
Field
Type
get
Field
Name
is
Static
hash
Code
get
Popped
Count
to
String
visit
is
PEI
make
equals
hash
Code
get
Popped
Count
to
String
visit
is
PEI
get
Word
Size
get
Word
Size
get
Type
Length
get
Params
Word
Size
make
Type
make
Type
All
make
Class
make
Class
All
add
Alias
make
Type
get
Params
Count
get
Params
Types
get
Params
Types
In
Locals
get
Stack
Type
make
Array
is
Array
Type
is
Primitive
Type
get
Return
Type
error
compute
Signature
make
Get
make
Put
make
Name
find
Method
find
Method
make
Invoke
make
Invoke
get
Type
Index
make
Type
Indices
read
Fully
read
Fully
compute
Basic
Blocks
preallocate
make
get
Var
Index
get
Type
get
Pushed
Type
get
Pushed
Word
Size
visit
equals
hash
Code
to
String
is
PEI
is
Address
Of
get
Super
Class
get
Super
Interfaces
get
Sub
Classes
is
Interface
check
Superinterfaces
Contain
check
Supertypes
Contain
check
Subtypes
Contain
check
Subtype
Of
Hierarchy
is
Subtype
Of
insert
Super
Interfaces
insert
Super
Classes
insert
Super
Class
Interfaces
collect
Dominating
Super
Classes
collect
Dominating
Super
Interfaces
From
Class
collect
Dominating
Super
Interfaces
find
Common
Supertype
Hierarchy
find
Common
Supertype
set
Class
Hierarchy
add
Back
Edge
get
Back
Edges
patch
Type
is
Subtype
Of
is
Primitive
find
Common
Supertype
get
Basic
Block
Starts
get
Instructions
get
Reachable
Recursive
get
Reachable
From
get
Reachable
From
Update
get
Reachable
From
get
Reaching
Recursive
get
Reaching
Base
get
Reaching
To
Update
get
Reaching
To
get
Reaching
To
compute
Stack
Sizes
At
get
Offset
get
Reason
get
Path
set
Path
print
Path
get
Index
get
Locals
get
Stack
cut
Array
merge
Types
long
Type
merge
Stack
Types
merge
Local
Types
strip
Sharp
compute
Types
visit
Invoke
visit
Local
Load
visit
Local
Store
get
Stack
Sizes
compute
Max
Locals
init
Type
Info
compute
Types
set
State
should
Continue
get
Local
Types
get
Stack
Types
create
Analyzer
contains
Class
set
Class
Info
remove
Class
Info
iterate
Over
Classes
get
Super
Class
get
Super
Interfaces
get
Sub
Classes
is
Interface
set
State
should
Continue
check
Error
check
Stack
Subtype
check
Array
Stack
Subtype
visit
Constant
visit
Goto
visit
Local
Load
visit
Local
Store
visit
Array
Load
visit
Array
Store
visit
Pop
visit
Dup
visit
Binary
Op
visit
Unary
Op
visit
Shift
visit
Conversion
visit
Comparison
visit
Conditional
Branch
visit
Switch
visit
Return
visit
Get
visit
Put
visit
Invoke
visit
New
visit
Array
Length
visit
Throw
visit
Monitor
visit
Check
Cast
visit
Instanceof
verify
verify
Collect
All
compute
Types
get
Lazy
Constant
Pool
is
PEI
get
Invocation
Code
get
Popped
Count
get
Pushed
Type
get
Pushed
Word
Size
get
Bootstrap
get
Method
Signature
get
Method
Name
get
Class
Type
visit
to
String
get
CP
Index
get
Bootstrap
get
Method
Name
get
Method
Signature
get
Lazy
Constant
Pool
bootstrap
make
Method
Type
make
preallocate
make
equals
hash
Code
get
Popped
Count
to
String
get
Pushed
Type
get
Pushed
Word
Size
get
Type
visit
is
PEI
is
Address
Of
make
With
Default
Handlers
And
Inst
To
Bytecodes
set
Has
Changed
get
Signature
get
Name
get
Access
get
Class
Type
get
Is
Static
get
Is
Synchronized
get
Handlers
get
Instructions
get
Instructions
To
Bytecodes
notify
Update
get
Info
put
Info
update
get
Has
Changed
to
String
first
Class
Type
get
Type
get
Operator
get
Type
to
String
throws
Exception
On
Overflow
is
Unsigned
verify
State
get
State
Message
get
Handlers
get
Instructions
get
Instructions
To
Bytecodes
merge
Handlers
emit
Label
emit
emit
internal
Emit
Instruction
emit
emit
insert
emit
To
begin
Pass
end
Pass
allocate
Label
insert
At
Start
insert
Before
insert
After
replace
With
add
Instruction
Exception
Handler
add
Method
Exception
Handler
insert
After
Body
get
Data
make
Exception
Array
apply
Patches
visit
Instructions
set
Index
get
Index
insert
After
insert
Before
replace
With
add
Instruction
Exception
Handler
preallocate
make
equals
get
Operator
hash
Code
get
Popped
Count
get
Pushed
Type
get
Pushed
Word
Size
get
Type
visit
to
String
is
PEI
is
Unsigned
is
Fall
Through
get
Branch
Targets
redirect
Targets
get
Popped
Count
get
Opcode
get
Pushed
Type
get
Pushed
Word
Size
visit
to
String
clone
get
Class
Type
get
Field
Name
get
Field
Type
is
Static
to
String
get
Operator
get
Type
make
equals
hash
Code
get
Popped
Count
visit
to
String
is
PEI
get
Handler
get
Catch
Class
Loader
get
Catch
Class
equals
hash
Code
equals
make
equals
hash
Code
get
Popped
Count
get
Pushed
Type
get
Pushed
Word
Size
visit
to
String
is
PEI
preallocate
make
get
Popped
Count
get
From
Type
skip
get
To
Type
get
Pushed
Type
get
Pushed
Word
Size
equals
hash
Code
to
String
visit
is
PEI
throws
Exception
On
Overflow
hash
Code
equals
hash
Code
equals
get
Type
Name
get
Lazy
Constant
Pool
get
CP
Index
make
Internal
get
Value
get
Type
preallocate
make
Internal
get
Value
get
Type
get
Int
Value
get
Int
Value
get
Lazy
Constant
Pool
get
CP
Index
preallocate
make
Internal
get
Value
get
Type
get
Long
Value
get
Long
Value
get
Lazy
Constant
Pool
get
CP
Index
preallocate
make
Internal
get
Value
get
Type
get
Float
Value
get
Float
Value
get
Lazy
Constant
Pool
get
CP
Index
preallocate
make
Internal
get
Value
get
Type
get
Double
Value
get
Double
Value
get
Lazy
Constant
Pool
get
CP
Index
make
Internal
get
Value
get
Type
get
Value
get
Lazy
Constant
Pool
get
CP
Index
make
Internal
get
Value
get
Type
is
PEI
get
Value
get
Lazy
Constant
Pool
get
CP
Index
get
Value
get
Type
get
Value
get
Lazy
Constant
Pool
get
CP
Index
get
Value
get
Type
get
Value
get
Lazy
Constant
Pool
get
CP
Index
get
Value
get
Type
get
Value
get
Lazy
Constant
Pool
get
CP
Index
get
Value
get
Type
make
make
make
make
make
make
String
make
Class
make
equals
get
Pushed
Type
get
Pushed
Word
Size
hash
Code
visit
quote
to
String
is
PEI
get
From
Type
get
To
Type
throws
Exception
On
Overflow
make
equals
is
Rethrow
is
Fall
Through
hash
Code
get
Popped
Count
visit
to
String
is
PEI
add
Serial
Version
UID
write
write
write
compute
Serial
Version
UID
main
main
do
Class
emit
To
emit
To
main
do
Class
main
do
Class
main
doit
dump
Attributes
do
Class
main
dump
Attributes
do
Class
set
Print
Line
Number
Info
set
Print
Constant
Pool
main
make
Hex
make
Chars
get
Class
Name
dump
Flags
dump
Attributes
print
Annotations
get
CP
Item
String
quote
String
do
Class
get
Input
Name
enable
Fake
Line
Numbers
get
Reader
examine
Code
prepare
Method
delete
Method
create
Empty
Method
Data
visit
Methods
visit
Method
get
Method
Code
reset
Method
replace
Method
is
Changed
emit
Class
emit
Class
emit
Class
Into
make
New
Code
make
New
Lines
make
New
Locals
make
Method
Attributes
make
Class
From
Stream
get
Class
Name
write
Class
To
next
Class
output
Modified
Class
output
Modified
Class
convert
Class
To
Type
make
Constant
Pool
Reader
get
Constant
Pool
Item
Type
convert
To
Error
get
Constant
Pool
Integer
get
Constant
Pool
Float
get
Constant
Pool
Long
get
Constant
Pool
Double
get
Constant
Pool
Method
Type
get
Constant
Pool
String
get
Constant
Pool
Class
Type
get
Constant
Pool
Member
Class
Type
get
Constant
Pool
Member
Name
get
Constant
Pool
Member
Type
get
Constant
Pool
Handle
Class
Type
get
Constant
Pool
Handle
Name
get
Constant
Pool
Handle
Type
get
Constant
Pool
Handle
Kind
get
Constant
Pool
Dynamic
Bootstrap
get
Constant
Pool
Dynamic
Name
get
Constant
Pool
Dynamic
Type
add
Class
To
Hierarchy
compile
And
Add
Method
To
Class
Writer
allocate
Constant
Pool
Integer
allocate
Constant
Pool
Float
allocate
Constant
Pool
Long
allocate
Constant
Pool
Double
allocate
Constant
Pool
String
allocate
Constant
Pool
Class
Type
allocate
Constant
Pool
Method
Type
allocate
Constant
Pool
Method
Handle
allocate
Constant
Pool
Invoke
Dynamic
convert
Type
To
Class
make
allocate
Constant
Pool
Field
allocate
Constant
Pool
Method
allocate
Constant
Pool
Interface
Method
create
Helper
Method
serialize
remap
Stack
Frames
item
write
U
Byte
write
U
Short
write
Int
trim
hack
Unknown
types
is
Useless
Goto
stack
Map
Table
get
Size
copy
Into
get
Annotation
Count
get
Attribute
Size
get
Utf8Constant
Pool
Value
to
String
hash
Code
equals
to
String
to
String
get
All
Annotations
get
All
Parameter
Annotations
get
Attribute
And
Size
to
String
read
Element
Value
And
Size
is
Known
Annotation
get
Reader
For
Annotation
set
Major
Version
set
Minor
Version
get
Type
equals
hash
Code
get
Type
equals
hash
Code
get
Type
hash
Code
equals
get
Kind
equals
hash
Code
get
Type
equals
hash
Code
get
Type
set
Raw
CP
set
Force
Add
CP
Entries
add
CP
Entry
add
CP
Utf8
add
CP
Int
add
CP
Float
add
CP
Long
add
CP
Double
add
CP
String
add
CP
Method
Handle
add
CP
String
add
CP
Class
add
CP
Method
Type
add
CP
Field
Ref
add
CP
Method
Ref
add
CP
Interface
Method
Ref
add
CPNAT
add
CP
Invoke
Dynamic
set
Access
Flags
set
Name
Index
set
Super
Name
Index
set
Interface
Name
Indices
set
Name
set
Super
Name
set
Interface
Names
get
Size
copy
Into
get
Size
copy
Into
add
Raw
Method
add
Raw
Field
add
Method
add
Field
get
Size
copy
Into
add
Method
add
Field
add
Class
Attribute
reserve
Buf
emit
Element
emit
Constant
Pool
make
Bytes
set
U
Byte
set
Int
set
Long
set
Float
set
Double
set
U
Short
get
Class
Reader
get
Raw
Offset
get
Raw
Size
check
Size
check
Size
Equals
frames
item
read
Stack
Map
get
Signature
CP
Index
get
Signature
get
Value
CP
Index
get
Type
Annotation
Reader
At
Classfile
get
Type
Annotation
Reader
At
Method
Info
get
Type
Annotation
Reader
At
Field
Info
get
Type
Annotation
Reader
At
Code
get
All
Type
Annotations
get
Type
Attribute
And
Size
get
Type
Annotation
Target
And
Size
from
Value
get
Target
Info
accept
Visitor
visit
Type
Parameter
Target
visit
Super
Type
Target
visit
Type
Parameter
Bound
Target
visit
Empty
Target
visit
Formal
Parameter
Target
visit
Throws
Target
visit
Local
Var
Target
visit
Catch
Target
visit
Offset
Target
visit
Type
Argument
Target
get
Index
accept
Visitor
get
Super
Type
accept
Visitor
get
Parameter
Index
get
Bound
Index
accept
Visitor
get
Bound
Signature
accept
Visitor
get
Index
accept
Visitor
get
Throw
Type
accept
Visitor
get
Nr
Of
Ranges
get
Start
Pc
get
Length
get
Index
accept
Visitor
get
Raw
Handler
accept
Visitor
get
Catch
Type
get
Start
PC
get
End
PC
get
Catch
PC
get
Offset
accept
Visitor
get
Offset
get
Type
Argument
Index
accept
Visitor
from
Value
is
Known
Annotation
apply
get
Reader
For
Annotation
At
Classfile
get
Reader
For
Annotation
At
Method
Info
get
Reader
For
Annotation
At
Field
Info
get
Reader
For
Annotation
At
Code
advance
Iter
get
Raw
Table
make
Bytecode
To
Source
Map
get
Raw
Table
get
Classes
write
size
is
Object
size
size
is
Object
is
Object
is
Object
size
write
write
size
is
Object
to
String
size
is
Object
to
String
write
get
Frame
Type
get
Offset
get
Local
Types
get
Stack
Types
to
String
write
set
Raw
Table
get
Size
copy
Into
make
Raw
Table
check
Length
parse
skip
Attributes
parse
Fields
parse
Methods
get
Bytes
get
Magic
get
Minor
Version
get
Major
Version
get
Access
Flags
get
Name
Index
get
Class
From
Address
get
Name
get
Super
Name
Index
get
Super
Name
get
Interface
Count
verify
Interface
Index
get
Interface
Name
Index
get
Interface
Name
Indices
get
Interface
Name
get
Interface
Names
get
CP
get
Int
get
U
Short
get
Short
get
Byte
get
Unsigned
Byte
get
Field
Count
verify
Field
Index
get
Field
Access
Flags
get
Utf8From
Address
get
Field
Name
get
Field
Type
get
Field
Name
Index
get
Field
Type
Index
set
Size
init
verify
Valid
get
Class
Reader
get
Raw
Offset
get
Raw
Size
get
Data
Offset
get
Data
Size
get
Remaining
Attributes
Count
get
Name
Index
get
Name
is
Valid
advance
init
Field
Attribute
Iterator
get
Field
Raw
Offset
get
Field
Raw
Size
get
Method
Count
verify
Method
Index
get
Method
Raw
Offset
get
Method
Raw
Size
get
Method
Access
Flags
get
Method
Name
get
Method
Type
get
Method
Name
Index
get
Method
Type
Index
init
Method
Attribute
Iterator
init
Class
Attribute
Iterator
get
Source
File
CP
Index
get
Source
File
verify
get
Size
copy
Into
set
Long
set
Double
set
Int
set
Float
set
String
set
Value
CP
Index
get
Kind
get
Class
Name
get
Element
Name
get
Descriptor
hash
Code
equals
get
Bootstrap
Reader
get
Raw
Bytes
get
Raw
Offset
get
Raw
Size
get
Item
Count
check
Length
get
Item
Type
get
CP
Class
get
CP
Method
Type
get
CP
String
is
Ref
get
CP
Ref
Class
get
CP
Ref
Name
get
CP
Ref
Type
get
CPNAT
Name
get
CPNAT
Type
get
CP
Handle
Name
get
CP
Handle
Type
get
CP
Handle
Class
get
CP
Handle
Kind
get
CP
Int
get
CP
Float
get
CP
Long
get
CP
Double
get
CP
Dyn
Bootstrap
get
CP
Dyn
Name
get
CP
Dyn
Type
invalid
Utf8
get
CP
Utf8
parse
Constant
Pool
get
Byte
get
U
Short
get
Int
get
Long
get
Float
get
Double
get
Offset
get
Raw
Table
get
Inner
Classes
get
Outer
Class
get
Access
Flags
get
Size
copy
Into
set
Raw
Table
invoke
Type
method
Class
method
Name
method
Type
call
Argument
Count
call
Argument
call
Argument
Index
call
Argument
Kind
get
CP
get
Index
In
Class
File
is
Bootstrap
For
Java
Lambdas
read
Bootstrap
Entries
to
String
invoke
Type
method
Class
method
Name
method
Type
call
Argument
Count
call
Argument
Kind
call
Argument
Index
call
Argument
get
CP
get
Index
In
Class
File
count
get
Entry
verify
get
Code
Length
get
Size
copy
Into
set
Code
set
Raw
Handlers
set
Max
Locals
set
Max
Stack
set
Attributes
get
Size
copy
Into
set
Raw
Table
get
Raw
Table
make
Var
Vector
make
Var
Map
get
Size
copy
Into
set
Raw
Table
set
Debug
Info
set
Raw
Table
get
Size
copy
Into
make
Raw
Table
get
Max
Stack
get
Max
Locals
get
Bytecode
Length
get
Bytecode
get
Raw
Handlers
init
Attribute
Iterator
verify
get
Size
copy
Into
set
Source
File
CP
Index
compare
To
find
Parameter
Position
make
Bytecode
To
Position
Map
get
Data
fill
Bytecode
To
Position
Map
convert
make
Line
Number
To
Position
Map
Activity
Model
main
add
AP
Kto
Scope
set
Up
Test
Scope
get
Number
Of
App
Classes
test
APK
manually
Init
Scope
test
Multi
Dex
extract
Dex
Files
test
CG
Creation
From
Dex
Source
find
Edge
extract
File
get
Java
Jar
convert
Jar
To
Dex
android
Java
Lib
android
Libs
make
CHA
ref
assert
User
Code
Reachable
run
Test
assertion
generate
Data
get
Droid
Bench
Root
generate
Data
get
Android
Libs
get
Android
Java
Jar
get
Apk
File
get
Uncalled
get
Temporary
Directory
test
J
Lex
test
Java
Cup
run
Test
generate
Data
run
Test
generate
Data
run
Test
generate
Data
run
Test
generate
Data
run
Test
generate
Data
run
Test
generate
Data
run
Test
generate
Data
run
Test
generate
Data
run
Test
generate
Data
run
Test
generate
Data
run
Test
generate
Data
run
Test
generate
Data
run
Test
generate
Data
test
test
File
make
Java
Builder
edge
Diff
test
check
Source
Lines
check
Edge
Diff
test
J
Lex
test
Java
Cup
test
BCEL
get
Temporary
Directory
process
CG
application
Methods
dynamic
CG
make
Default
Interpreter
iterate
New
Sites
make
APK
Call
Graph
make
Dalvik
Scope
make
Dalvik
Call
Graph
provided
Android
Libs
test
J
Lex
test
Java
Cup
main
begin
Task
sub
Task
cancel
is
Canceled
done
worked
get
Cancel
Message
get
Callee
Target
get
Type
get
Relevant
Parameters
get
Context
Type
get
equals
hash
Code
to
String
make
Context
Free
set
Context
Free
get
Relevant
get
Declaring
Class
get
Flags
get
Components
Possible
is
System
Service
to
String
is
Starter
get
Info
get
Info
get
Known
Methods
find
Or
Create
Immutable
find
create
create
create
find
Or
Create
put
contains
find
Or
Create
set
Action
unbind
set
Explicit
set
Action
set
Action
set
Action
set
Explicit
is
Explicit
set
Immutable
clone
set
Action
Explicit
unbind
set
Action
get
Action
get
Type
get
Component
is
System
Service
is
Internal
is
External
is
Standard
Action
is
Internal
is
External
is
Standard
to
String
hash
Code
equal
Action
equals
resolve
compare
To
fetch
Target
Component
get
Caller
get
IR
get
IR
View
understands
iterate
New
Sites
iterate
Call
Sites
get
CFG
get
Number
Of
Statements
get
DU
record
Factory
Type
iterate
Fields
Written
iterate
Fields
Read
get
equals
hash
Code
to
String
get
Intent
add
Boot
Code
get
System
Context
get
Package
Context
get
Main
Thread
create
Main
Thred
create
System
Context
create
Package
Context
select
Entry
Point
register
get
Method
build
get
Parameter
Type
populate
select
Entry
Point
register
get
Method
build
get
Parameter
Type
populate
set
Parent
set
Child
get
Callee
Target
override
All
select
Entry
Point
register
get
Method
build
get
Parameter
Type
populate
attach
Activities
type
Of
Caller
Context
fetch
Caller
Context
fetch
I
Binder
assign
I
Binder
set
Intent
fetch
Results
add
Phi
get
Instance
clinit
contains
Method
get
Method
get
Declared
Methods
get
All
Methods
set
Macro
Model
add
Method
get
Class
Initializer
get
Field
put
Field
get
All
Fields
get
Declared
Static
Fields
get
All
Static
Fields
get
Declared
Instance
Fields
get
All
Instance
Fields
get
Modifiers
is
Public
is
Private
is
Interface
is
Abstract
is
Array
Class
get
Superclass
get
All
Implemented
Interfaces
get
Direct
Interfaces
is
Reference
Type
select
Entry
Point
register
get
Name
get
Method
build
get
Name
is
Static
get
Return
Type
get
Descriptor
build
get
Parameter
Type
register
get
Method
get
Declaring
Class
select
Entry
Point
populate
get
Method
As
get
Method
Encap
get
Class
Hierarchy
to
String
get
Behavior
get
Behavior
get
Exactness
get
Dafult
Behavior
collect
Parameters
ssa
For
first
Of
is
Reuse
to
Descriptor
to
Method
Reference
create
Instance
create
Instance
understands
create
Context
create
Context
Wrapper
create
Instance
set
Allocation
set
Allocation
set
Allocation
set
Phi
get
Free
get
Unallocated
get
Unmanaged
get
Current
get
Super
get
All
For
Phi
is
Seen
is
Seen
needs
Allocation
needs
Phi
invalidate
scope
Down
scope
Up
is
Reuse
is
Create
to
String
to
String
is
Cached
mk
mk
equals
hash
Code
to
String
set
Default
Behavior
get
Behavior
get
Exactness
get
Dafult
Behavior
set
Behavior
set
Behavior
type2atom
write
Object
read
Object
is
Cached
mk
mk
mk
Package
equals
hash
Code
to
String
get
Behavior
get
Exactness
get
Dafult
Behavior
type2atom
write
Object
read
Object
is
Excluded
create
Instance
create
Primitive
add
New
add
Call
Ctor
select
And
Call
Ctor
get
Types
get
Types
get
All
Super
lookup
Constructor
create
Instance
is
Excluded
create
Instance
create
Instance
create
Primitive
add
New
add
Call
Ctor
select
And
Call
Ctor
get
Types
get
Types
lookup
Constructor
create
Instance
select
Entry
Point
get
Descriptor
get
Name
get
Method
register
to
String
select
Entry
Point
register
get
Name
get
Method
enter
START
OF
LOOP
enter
AFTER
LOOP
leave
AT
LAST
enter
AT
FIRST
leave
AT
LAST
return
Types
Between
had
Section
Switch
enter
AT
FIRST
enter
BEFORE
LOOP
enter
START
OF
LOOP
enter
MIDDLE
OF
LOOP
enter
MULTIPLE
TIMES
IN
LOOP
enter
END
OF
LOOP
enter
AFTER
LOOP
enter
AT
LAST
leave
AT
LAST
enter
finish
enter
AT
FIRST
enter
BEFORE
LOOP
enter
START
OF
LOOP
enter
MIDDLE
OF
LOOP
enter
MULTIPLE
TIMES
IN
LOOP
enter
END
OF
LOOP
enter
AFTER
LOOP
enter
AT
LAST
leave
AT
LAST
enter
MULTIPLE
TIMES
IN
LOOP
enter
END
OF
LOOP
get
Component
is
Activity
belongs
To
is
Member
Of
get
Order
Value
get
Section
compare
get
Section
get
Order
Value
compare
To
get
Order
Value
between
between
between
between
between
between
after
after
after
directly
Before
directly
After
get
Section
compare
To
to
String
equals
hash
Code
get
Class
Hierarchy
make
Parameter
Types
read
XML
get
Sub
Tags
get
Sub
Tags
get
Sub
Tags
get
Sub
Tags
get
Sub
Tags
get
Sub
Tags
get
Sub
Tags
get
Sub
Tags
get
Sub
Tags
get
Sub
Tags
get
Handler
get
Allowed
Sub
Tags
get
Relevant
Attributes
is
Relevant
is
Relevant
from
String
get
Name
is
Relevant
In
get
Name
set
Self
enter
pop
Attributes
leave
leave
enter
leave
leave
start
Element
end
Element
get
Type
hash
Code
equals
get
Type
hash
Code
equals
get
Type
hash
Code
equals
get
Type
hash
Code
equals
get
Type
hash
Code
equals
intent
intent
intent
EP
Contain
Any
reset
get
Components
do
Flat
Components
set
Do
Flat
Components
get
Instantiation
Behavior
set
Instantiation
Behavior
get
Progress
Monitor
set
Progress
Monitor
get
Do
Boot
Sequence
set
Do
Boot
Sequence
make
Model
Behavior
get
Model
Behavior
set
Model
Behavior
set
Package
get
Package
guess
Package
register
Intent
register
Intent
Force
set
Override
set
Overrides
set
Override
Force
get
Intent
exists
Intent
For
add
Call
Seen
get
Seen
set
Allow
Intent
Rerouting
is
Allow
Intent
Rerouting
all
all
But
check
Overrides
In
Place
check
Stubs
Version
check
Intent
Specs
check
All
Components
Reuse
check
No
Object
In
Entry
Points
default
Flags
get
Entry
Points
heuristic
Scan
make
Entry
Point
For
Heuristic
heuristic
Any
Android
is
API
Component
is
API
Component
is
Excluded
select
Position
For
Heuristic
get
Order
Value
compare
To
get
Section
compare
populate
Possible
Entry
Points
debug
Dump
Entry
Points
populate
populate
populate
populate
populate
populate
populate
is
Android
Component
get
Pretty
Name
get
Name
to
Reference
explicit
explicit
explicit
from
from
set
Up
Android
Analysis
Scope
set
Up
Android
Analysis
Scope
add
Class
Path
To
Scope
get
Dex
Method
get
Total
Edges
hash
Code
equals
get
Instructions
compute
I2B
Mapping
compute
Edges
make
Basic
Blocks
get
Block
For
Instruction
is
Catch
Block
compute
Outgoing
Edges
add
Exceptional
Edges
get
Implicit
Exception
Types
get
Exception
Handlers
add
Normal
Edge
To
add
Exceptional
Edge
To
get
Last
Instruction
Index
get
First
Instruction
Index
to
String
is
Exit
Block
is
Entry
Block
get
Method
hash
Code
equals
get
Number
iterator
to
String
get
Max
Stack
Height
get
Max
Locals
get
Exception
Handlers
get
Program
Counter
get
Msg
create
understands
record
Factory
Type
iterate
New
Sites
iterate
Fields
Written
iterate
Fields
Read
iterate
Call
Sites
get
Number
Of
Statements
get
IR
get
IR
View
get
DU
get
CFG
get
Class
Def
Item
as
Module
get
Class
Name
get
Input
Stream
get
Name
is
Class
File
is
Module
File
is
Source
File
get
Container
hash
Code
equals
get
Annotations
get
Annotation
get
Value
get
Signature
get
Type
Ref
get
Type
Name
make
CFG
make
IR
eliminate
Dead
Phis
instruction
Position
get
Local
Map
get
Indirection
Data
context
Is
Irrelevant
get
Field
Type
Reference
get
Reference
get
Name
is
Final
is
Private
is
Protected
is
Public
is
Static
get
Declaring
Class
is
Volatile
get
Class
Hierarchy
get
Annotations
get
Class
Def
Item
is
Public
is
Private
is
Interface
is
Abstract
is
Synthetic
get
Modifiers
equals
hash
Code
get
Annotations
get
Annotations
get
Annotations
get
Types
get
Annotations
get
Annotations
get
Parameter
Annotations
compute
Declared
Methods
get
Class
Initializer
get
Container
init
remove
Class
Files
get
Dex
Files
load
All
Dex
Classes
get
Class
Hierarcy
get
Msg
create
get
Msg
create
get
Total
Insts
to
Encoded
Method
get
Declared
Exceptions
get
Local
Variable
Name
get
Max
Locals
get
Return
Reg
get
Exception
Reg
get
Max
Stack
Height
get
Descriptor
get
Number
Of
Parameters
get
Number
Of
Parameter
Registers
get
Parameter
Type
get
Reference
get
Return
Type
get
Selector
get
Signature
has
Exception
Handler
has
Local
Variable
Table
is
Abstract
is
Clinit
is
Final
is
Init
is
Native
is
Bridge
is
Private
is
Protected
is
Public
is
Synchronized
is
Wala
Synthetic
is
Synthetic
is
Static
is
Volatile
is
Annotation
is
Enum
is
Module
get
Declaring
Class
get
Class
Hierarchy
get
Name
get
Line
Number
to
String
equals
hash
Code
get
Bytecode
Index
get
Handlers
get
Instructions
odex
Method
deodex
parse
Bytecode
visit
find
Out
Array
Element
Type
handle
INVOKE
VIRTUAL
get
Dex
Instructions
instructions
get
Address
From
Index
get
Instruction
Index
get
Instruction
From
Index
indirectly
Read
Locals
indirectly
Written
Locals
get
Indirection
Data
get
Call
Sites
get
Fields
Read
get
Fields
Written
get
Arrays
Written
get
New
Sites
get
Source
Position
get
Parameter
Source
Position
get
Annotations
get
Annotations
get
Parameter
Annotations
add
add
All
contains
contains
All
equals
hash
Code
index
Of
is
Empty
iterator
clear
remove
remove
All
retain
All
size
to
Array
to
Array
get
Index
From
Pc
get
Pc
From
Index
get
From
Id
get
From
Pc
make
make
tf
get
Dex
File
get
File
get
Entries
is
Int
Zero
Constant
make
Stmt
RHS
initialize
make
make
Variable
visit
Phi
evaluate
contains
Non
Primitive
And
Zero
to
String
hash
Code
equals
make
Android
Binary
Analysis
Scope
visit
get
Branch
Targets
visit
visit
set
Array
Data
Table
get
Table
get
Element
Count
get
Type
get
Operator
get
Operator
visit
get
Operator
get
Branch
Targets
visit
to
String
visit
get
Operator
is
Float
is
Unsigned
visit
get
Operator
is
Float
is
Unsigned
is
Sub
to
String
is
Primitive
visit
visit
visit
visit
visit
get
Type
get
Type
visit
to
String
visit
is
Conversion
is
Move
get
Operator
get
Offsets
get
Values
get
Default
Offset
get
Labels
And
Offsets
visit
set
Switch
Pad
compute
Cases
And
Labels
get
Offsets
get
Default
Label
get
Cases
And
Labels
get
Branch
Targets
visit
visit
visit
get
Offsets
get
Values
get
Labels
And
Offsets
get
Default
Offset
get
Invocation
Code
to
String
get
Invocation
Code
to
String
get
Invocation
Code
to
String
get
Invocation
Code
to
String
get
Invocation
Code
to
String
visit
get
Invocation
Code
visit
Array
Length
visit
Array
Get
visit
Array
Put
visit
Array
Fill
visit
Binary
Operation
visit
Binary
Literal
visit
Branch
visit
Check
Cast
visit
Constant
visit
Get
Field
visit
Goto
visit
Instanceof
visit
Invoke
visit
Monitor
visit
New
visit
New
Array
visit
New
Array
Filled
visit
Put
Field
visit
Return
visit
Switch
visit
Throw
visit
Unary
Operation
is
Fall
Through
is
PEI
get
Parent
Method
get
Opcode
get
Branch
Targets
visit
visit
visit
get
Type
get
Offsets
get
Values
get
Default
Offset
get
Labels
And
Offsets
visit
init
has
Node
Transfer
Functions
has
Edge
Transfer
Functions
get
Node
Transfer
Function
evaluate
to
String
hash
Code
equals
get
Edge
Transfer
Function
evaluate
to
String
hash
Code
equals
get
Meet
Operator
make
Node
Variable
make
Edge
Variable
initialize
Work
List
initialize
Variables
make
Stmt
RHS
solve
initialize
Variables
get
Entry
State
get
In
is
Unary
No
Op
evaluate
hash
Code
equals
to
String
meet
Local
meet
meet
For
Catch
Block
meet
Locals
compute
Meet
N
Locals
compute
Meet
Stack
Height
duplicate
get
Basic
Block
set
TOP
allocate
Locals
set
Local
get
Local
replace
Value
has
Value
to
String
copy
State
state
Equals
get
Stack
Height
get
Locals
allocate
New
Locals
Array
needs
Node
Flow
needs
Edge
Flow
flow
flow
init
needs
Node
Flow
needs
Edge
Flow
flow
flow
get
Current
Instruction
Index
get
Current
Program
Counter
get
Current
Block
get
Current
Successor
get
Instructions
visit
Array
Length
visit
Array
Get
visit
Array
Put
visit
Binary
Operation
visit
Branch
visit
Constant
visit
Get
Field
visit
Instanceof
visit
Invoke
visit
Monitor
visit
New
visit
Put
Field
visit
Switch
visit
Throw
visit
Unary
Operation
make
meet
Local
all
The
Same
initialize
Variables
needs
Edge
Flow
emit
Instruction
get
Current
Instruction
reuse
Or
Create
Def
reuse
Or
Create
Exception
visit
Array
Length
visit
Array
Get
visit
Array
Put
visit
Array
Fill
visit
Binary
Operation
visit
Binary
Literal
set
Local
visit
Check
Cast
visit
Branch
visit
Constant
visit
Get
Field
visit
Goto
visit
Instanceof
visit
Invoke
visit
Monitor
visit
New
visit
New
Array
visit
New
Array
Filled
visit
Put
Field
visit
Return
visit
Switch
find
Rethrow
Exception
visit
Throw
visit
Unary
Operation
reuse
Or
Create
Pi
maybe
Insert
Pi
maybe
Insert
Pi
get
Def
visit
Invoke
visit
Branch
get
Instructions
build
get
Local
Map
get
Indirection
Data
start
Range
finish
Local
Map
get
Local
Names
find
Locals
For
Value
Number
allocate
New
Locals
Array
extract
Indices
test
Single
Edge
instance
evaluate
to
String
hash
Code
equals
copy
State
add
All
add
All
same
Value
to
String
add
contains
get
Value
remove
size
contains
Any
add
All
In
Intersection
add
All
In
Intersection
remove
All
remove
Statement
add
Statement
get
Statements
get
Variables
contains
Statement
contains
Variable
get
Statements
That
Use
get
Statements
That
Def
get
Number
Of
Statements
That
Use
get
Number
Of
Statements
That
Def
reorder
get
LHS
get
RHS
evaluate
has
Variable
get
Order
Number
set
Order
Number
copy
State
instance
evaluate
to
String
hash
Code
equals
copy
State
add
All
add
All
same
Value
to
String
set
get
get
Value
clear
equals
population
Count
evaluate
get
LHS
get
Right
Hand
Side
get
Operands
has
Variable
to
String
equals
hash
Code
get
RHS
get
Operator
hash
Code
equals
to
String
get
Order
Number
get
Operator
evaluate
hash
Code
equals
to
String
equals
next
Hash
hash
Code
get
Order
Number
set
Order
Number
copy
State
same
Value
to
String
get
Value
or
set
equals
evaluate
make
Equation
is
Identity
evaluate
get
Fixed
Point
System
solve
get
Fixed
Point
System
evaluate
evaluate
evaluate
get
LHS
has
Variable
make
Hash
Code
make
RHS
hash
Code
equals
get
Operator
get
RHS
compare
Elements
take
Statement
insert
Statement
evaluate
get
LHS
has
Variable
equals
hash
Code
get
RHS
get
Operator
to
String
make
Stmt
RHS
init
For
First
Solve
empty
Work
List
solve
perform
Verbose
Action
line
Break
remove
Statement
to
String
get
Statements
add
To
Work
List
add
All
Statements
To
Work
List
changed
Variable
new
Statement
incorporate
New
Statement
new
Statement
make
RHS
new
Statement
new
Statement
new
Statement
initialize
Variables
initialize
Work
List
update
Work
List
order
Statements
Internal
order
Statements
reorder
is
Changed
is
Side
Effect
is
Fixed
get
Min
Size
For
Top
Sort
set
Min
Equations
For
Top
Sort
get
Max
Eval
Between
Topo
get
Topological
Growth
Factor
set
Max
Eval
Between
Topo
set
Topological
Growth
Factor
get
Number
Of
Evaluations
inc
Number
Of
Evaluations
periodic
Maintenance
get
Verbose
Interval
get
Periodic
Maintain
Interval
equals
hash
Code
to
String
remove
Statement
get
Statements
add
Statement
add
Statement
add
Statement
add
Statement
add
Variable
get
Step
reorder
check
Graph
get
Statements
That
Use
get
Statements
That
Def
get
Variable
get
Number
Of
Statements
That
Use
get
Number
Of
Statements
That
Def
get
Variables
get
Number
Of
Nodes
get
Pred
Nodes
get
Pred
Node
Count
contains
Statement
contains
Variable
has
Next
next
remove
reverse
compare
instance
size
is
Empty
contains
Key
contains
Value
get
put
transfer
Backing
Store
remove
put
All
clear
key
Set
values
entry
Set
put
assert
Overrides
Hash
Code
put
All
make
has
Next
next
remove
add
contains
count
filter
has
Next
next
get
set
ensure
Capacity
perform
Verbose
Action
compute
Occupancy
iterator
get
Max
Index
instance
has
Next
next
check
equals
hc
hash
Code
iterator
has
Next
next
remove
to
String
make
has
Next
next
remove
make
get
set
ensure
Capacity
perform
Verbose
Action
iterator
has
Next
next
remove
get
Max
Index
size
iterate
Indices
safe
Iterate
Indices
clear
remove
get
Mapped
Object
get
Mapped
Index
has
Mapped
Index
iterator
stream
add
get
Maximum
Index
get
Size
find
Or
Create
Set
find
Or
Create
Mutable
Int
Set
find
Or
Create
Collection
find
Or
Create
List
find
Or
Create
Map
find
Or
Create
Value
find
Or
Create
Weak
Hash
Map
inverse
Map
invert
One
To
One
Map
group
Keys
By
Value
get
Delegate
has
Next
next
remove
add
empty
add
add
All
contains
intersects
forall
size
get
remove
remove
clear
iterator
remove
has
Next
next
make
make
push
peek
pop
is
Empty
size
get
next
has
Next
remove
to
String
map
map
singleton
test
make
compare
Elements
size
is
Empty
insert
take
heap
Parent
heap
Left
Child
heap
Right
Child
ensure
Capacity
remove
Element
bubble
Up
to
String
next
has
Next
remove
to
String
test
get
put
remove
key
Set
contains
Key
size
to
String
put
All
remove
All
clear
is
Empty
has
Next
next
remove
get
get
First
Index
On
Page
get
Page
Number
set
to
Local
Index
find
Or
Create
Page
perform
Verbose
Action
iterator
has
Next
next
remove
get
Max
Index
size
is
Empty
contains
push
push
pop
peek
get
Delegate
to
Set
to
List
to
String
size
clear
is
Empty
to
Array
add
contains
remove
add
All
contains
All
remove
All
retain
All
iterator
to
Array
equals
hash
Code
get
set
perform
Verbose
Action
get
Max
Index
has
Next
next
hash
Code
add
add
All
get
index
Of
last
Index
Of
list
Iterator
list
Iterator
remove
set
sub
List
get
Delegate
make
iterator
get
Pushed
Nodes
push
push
ever
Contained
queued
Set
advance
next
has
Next
remove
to
String
create
Set
empty
Set
get
put
remove
remove
All
key
Set
contains
Key
size
to
String
put
All
clear
is
Empty
advance
Outer
make
Inner
remove
has
Next
next
str
filter
By
Type
for
Some
find
for
All
do
For
All
map
map
To
Set
realloc
object
Fields
To
String
check
Permission
remove
Package
Name
intersecting
top
Level
Type
String
add
If
Not
Null
get
Used
Memory
gc
is
Within
Size
Limit
get
Max
Size
empty
Stack
equals
hash
Code
push
make
Internal
Array
make
Stack
peek
pop
is
Empty
size
get
to
String
contains
top
Matches
reverse
pop
All
push
All
iterator
replace
Top
make
make
make
make
make
make
instance
has
Next
next
remove
visit
has
Next
next
remove
put
put
All
create
Set
empty
Set
get
make
create
Set
make
test
size
get
Key
get
Value
is
Empty
contains
Key
contains
Value
get
grow
By
One
put
remove
put
All
clear
key
Set
get
Item
In
Slot
values
get
Item
In
Slot
entry
Set
get
Item
In
Slot
iterator
size
has
Next
next
get
Item
In
Slot
select
Star
Where
Equals
select
Where
Equals
select
Star
Where
view
Where
Equals
view
Where
Equals
to
String
get
Element
get
Column
Heading
compute
Column
Widths
get
Number
Of
Columns
get
Number
Of
Rows
row2Map
add
Row
remove
Row
pad
With
Spaces
read
From
Direct
Text
File
read
From
Text
File
read
From
Stream
read
From
Stream
read
Next
Non
Comment
Line
is
Commented
populate
Row
populate
Column
Headings
clone
compile
contains
add
to
String
contains
add
is
Power
Of2
log2
binary
Log
Up
binary
Log
Up
pack
fact
fact
fact
fact
begin
Task
is
Canceled
done
worked
sub
Task
cancel
get
Cancel
Message
slice
prune
iterator
stream
get
Number
Of
Nodes
add
Node
remove
Node
contains
Node
get
Pred
Nodes
get
Pred
Node
Count
get
Succ
Nodes
get
Succ
Node
Count
add
Edge
remove
Edge
remove
All
Incident
Edges
remove
Incoming
Edges
remove
Outgoing
Edges
has
Edge
node
String
get
Node
Manager
get
Edge
Manager
project
add
Node
contains
Node
get
Number
Of
Nodes
iterator
stream
remove
Node
get
Connected
set
Pred
Nodes
set
Succ
Nodes
get
Pred
Node
Count
get
Pred
Nodes
get
Succ
Node
Count
get
Succ
Nodes
has
Edge
add
Edge
remove
All
Incident
Edges
remove
Edge
remove
Incoming
Edges
remove
Outgoing
Edges
node
String
get
Edge
Manager
get
Node
Manager
get
Number
get
Node
get
Max
Number
iterate
Nodes
generic
To
String
make
prepend
hash
Code
equals
size
to
String
get
Info
get
Info
make
is
Dominated
By
get
Idom
dominators
remove
has
Next
next
dominator
Tree
get
Node
Manager
get
Edge
Manager
get
Pred
Nodes
get
Pred
Node
Count
get
Succ
Nodes
get
Succ
Node
Count
add
Edge
remove
Edge
remove
All
Incident
Edges
remove
Incoming
Edges
remove
Outgoing
Edges
has
Edge
analyze
step1
visit
Edge
step2
EVAL
compress
LINK
step3
get
Info
iterate
Bucket
add
To
Bucket
get
Dominator
set
Dominator
get
Parent
set
Parent
get
Ancestor
set
Ancestor
get
Label
set
Label
get
Size
set
Size
get
Child
set
Child
get
Semi
set
Semi
to
String
get
Dominance
Frontier
is
Dominated
By
dominators
dominator
Tree
analyze
get
Graph
Node
Id
set
Graph
Node
Id
get
Succ
Numbers
get
Pred
Numbers
add
Succ
add
Pred
remove
All
Incident
Edges
remove
Incoming
Edges
remove
Outgoing
Edges
get
Reachable
Set
solve
get
Node
Transfer
Function
has
Node
Transfer
Functions
get
Edge
Transfer
Function
has
Edge
Transfer
Functions
get
Meet
Operator
make
get
Root
Value
get
Child
Value
get
Child
set
Child
get
Max
Child
Index
check
check
Edge
Counts
check
Edges
check
Node
Count
set
Diff
Exception
print
Collection
remove
Node
And
Edges
init
get
Connected
init
visit
Children
has
Next
next
get
Connected
remove
get
Pending
Children
set
Pending
Children
find
make
Path
get
Connected
init
visit
Children
has
Next
next
get
Connected
remove
get
Current
Hops
get
Reachable
Nodes
get
Connected
get
Reachable
Nodes
get
Reachable
Nodes
sort
By
Depth
First
Order
compare
iterate
Discover
Time
iterate
Discover
Time
iterate
Discover
Time
iterate
Finish
Time
iterate
Finish
Time
has
Next
next
remove
is
Full
Coloring
get
Colors
get
Num
Colors
make
Map
to
String
default
Comparator
color
color
color
get
Path
get
Paths
edge
Cost
path
Callback
all
Pairs
Shortest
Paths
shortest
Path
Lengths
all
Pairs
Shortest
Path
path
Callback
doit
to
String
get
Path
all
Pairs
Shortest
Paths
path
Callback
doit
to
String
get
Paths
get
Pending
Children
set
Pending
Children
make
Topological
Iter
get
Pending
Children
set
Pending
Children
get
Connected
get
Pending
Children
set
Pending
Children
get
Pending
Children
set
Pending
Children
init
empty
has
Next
get
Pending
Children
set
Pending
Children
push
peek
pop
next
get
Connected
remove
init
init
has
Next
get
Pending
Children
set
Pending
Children
next
get
Connected
remove
visit
Edge
empty
push
peek
pop
init
find
current
Path
has
Next
get
Pending
Children
set
Pending
Children
advance
get
Connected
empty
push
peek
pop
get
Succ
Node
Numbers
get
Pred
Node
Numbers
type
type
type
to
GXL
count
Edges
get
Successor
add
Edge
is
Acyclic
compute
Back
Edges
dfs
dfs
Non
Recursive
has
Incoming
Back
Edges
compute
Acyclic
Paths
stream
iterator
get
Number
Of
Nodes
add
Node
remove
Node
contains
Node
get
Pred
Nodes
get
Pred
Node
Count
get
Succ
Nodes
get
Succ
Node
Count
add
Edge
remove
Edge
has
Edge
remove
All
Incident
Edges
remove
Incoming
Edges
remove
Outgoing
Edges
get
Succ
Node
Numbers
get
Pred
Node
Numbers
get
Number
get
Node
get
Max
Number
iterator
advance
has
Next
next
remove
stream
get
Number
Of
Nodes
add
Node
ensure
Capacity
remove
Node
to
String
contains
Node
iterate
Nodes
add
Edge
add
Edge
add
Node
contains
Node
get
Number
Of
Nodes
get
Pred
Node
Count
get
Pred
Nodes
get
Succ
Node
Count
get
Succ
Nodes
has
Edge
iterator
stream
remove
All
Incident
Edges
remove
Edge
remove
Incoming
Edges
remove
Node
remove
Node
And
Edges
remove
Outgoing
Edges
get
Successor
has
Next
next
remove
get
Pred
Nodes
get
Pred
Node
Count
get
Succ
Nodes
get
Succ
Node
Count
add
Edge
remove
Edge
remove
All
Incident
Edges
remove
Incoming
Edges
remove
Outgoing
Edges
has
Edge
add
Edge
add
Node
contains
Node
get
Number
Of
Nodes
to
String
get
Pred
Node
Count
get
Pred
Nodes
get
Succ
Node
Count
get
Succ
Nodes
has
Edge
iterator
stream
remove
All
Incident
Edges
remove
Edge
remove
Incoming
Edges
remove
Node
remove
Node
And
Edges
remove
Outgoing
Edges
nodes
has
Next
next
remove
get
Pred
Nodes
get
Pred
Node
Count
get
Succ
Nodes
get
Succ
Node
Count
add
Edge
remove
Edge
remove
All
Incident
Edges
remove
Incoming
Edges
remove
Outgoing
Edges
has
Edge
get
Succ
Node
Numbers
get
Pred
Node
Numbers
iterator
stream
get
Number
Of
Nodes
add
Node
remove
Node
contains
Node
get
Number
get
Node
get
Max
Number
iterate
Nodes
get
Pred
Nodes
get
Pred
Node
Count
get
Pred
Node
Numbers
get
Succ
Nodes
get
Succ
Node
Count
get
Succ
Node
Numbers
add
Edge
remove
Edge
remove
All
Incident
Edges
remove
Incoming
Edges
remove
Outgoing
Edges
has
Edge
remove
Node
And
Edges
get
Graph
Node
Id
set
Graph
Node
Id
invert
invert
get
Node
Manager
get
Edge
Manager
get
Node
Manager
get
Edge
Manager
duplicate
copy
Into
make
get
Node
Manager
get
Edge
Manager
get
Node
Manager
get
Edge
Manager
get
Pred
Nodes
get
Pred
Node
Count
get
Succ
Nodes
get
Succ
Node
Count
add
Edge
remove
Edge
has
Edge
remove
All
Incident
Edges
remove
Incoming
Edges
remove
Outgoing
Edges
get
Number
get
Node
get
Max
Number
iterator
stream
get
Number
Of
Nodes
add
Node
remove
Node
to
String
contains
Node
iterate
Nodes
has
Next
next
remove
get
Pred
Nodes
get
Pred
Node
Numbers
get
Pred
Node
Count
get
Succ
Nodes
get
Succ
Node
Count
add
Edge
remove
Edge
remove
All
Incident
Edges
remove
Incoming
Edges
remove
Outgoing
Edges
has
Edge
get
Succ
Node
Numbers
make
Node
make
Node
get
Node
Manager
get
Edge
Manager
get
Node
Manager
get
Edge
Manager
get
Succ
Numbers
get
Pred
Numbers
add
Succ
add
Pred
delete
Succ
delete
Pred
remove
All
Incident
Edges
remove
Incoming
Edges
remove
Outgoing
Edges
get
Pred
Nodes
get
Pred
Node
Count
get
Succ
Nodes
get
Succ
Nodes
get
Succ
Node
Numbers
get
Pred
Node
Numbers
get
Succ
Node
Count
get
Succ
Node
Count
add
Edge
has
Edge
remove
All
Incident
Edges
remove
Incoming
Edges
remove
Edge
remove
Outgoing
Edges
has
Any
Successor
to
String
get
Pred
Nodes
get
Pred
Node
Count
get
Succ
Nodes
get
Succ
Node
Count
add
Edge
remove
Edge
remove
All
Incident
Edges
remove
Incoming
Edges
remove
Outgoing
Edges
has
Edge
has
Next
next
remove
get
Node
Manager
get
Edge
Manager
iterator
stream
get
Number
Of
Nodes
add
Node
remove
Node
contains
Node
get
Edge
Manager
has
Next
next
remove
get
Pred
Node
Count
get
Pred
Nodes
get
Succ
Node
Count
get
Succ
Nodes
has
Edge
get
Pred
Node
Numbers
get
Filtered
Node
Numbers
get
Succ
Node
Numbers
add
Edge
remove
All
Incident
Edges
remove
Edge
remove
Incoming
Edges
remove
Outgoing
Edges
get
Node
Manager
infer
Roots
get
Edge
Manager
add
Edge
get
Pred
Labels
get
Pred
Node
Count
get
Pred
Nodes
get
Succ
Labels
get
Succ
Node
Count
get
Succ
Nodes
has
Edge
remove
Edge
get
Edge
Labels
duplicate
copy
Into
get
Edge
Manager
get
Node
Manager
get
Edge
Manager
add
Edge
get
Pred
Labels
get
Pred
Node
Count
get
Pred
Nodes
get
Succ
Labels
get
Succ
Node
Count
get
Succ
Nodes
get
Pred
Node
Numbers
get
Succ
Node
Numbers
has
Edge
remove
Edge
get
Edge
Labels
get
Default
Label
edge
String
get
Manager
For
Label
add
Edge
get
Pred
Node
Count
get
Pred
Nodes
get
Succ
Node
Count
get
Succ
Nodes
has
Edge
remove
All
Incident
Edges
remove
Edge
remove
Incoming
Edges
remove
Outgoing
Edges
get
Pred
Labels
get
Succ
Labels
get
Edge
Labels
add
Edge
get
Pred
Node
Count
get
Pred
Nodes
get
Succ
Node
Count
get
Succ
Nodes
has
Edge
remove
Edge
get
Default
Label
get
Pred
Node
Numbers
get
Succ
Node
Numbers
get
Pred
Node
Numbers
get
Succ
Node
Numbers
get
Default
Label
get
Pred
Nodes
get
Pred
Nodes
get
Pred
Labels
get
Pred
Node
Count
get
Succ
Nodes
get
Succ
Labels
get
Succ
Node
Count
add
Edge
remove
Edge
has
Edge
get
Edge
Labels
get
Pred
Node
Numbers
get
Succ
Node
Numbers
get
Pred
Nodes
get
Pred
Node
Count
get
Succ
Nodes
get
Succ
Node
Count
add
Edge
remove
Edge
remove
All
Incident
Edges
remove
Incoming
Edges
remove
Outgoing
Edges
has
Edge
get
Node
Manager
get
Edge
Manager
stream
iterator
get
Number
Of
Nodes
get
Pred
Node
Count
get
Pred
Nodes
get
Succ
Node
Count
get
Succ
Nodes
add
Node
add
Edge
remove
Edge
has
Edge
remove
All
Incident
Edges
remove
Incoming
Edges
remove
Outgoing
Edges
remove
Node
And
Edges
remove
Node
node
String
edge
String
to
String
contains
Node
get
Node
Manager
get
Edge
Manager
get
Max
Number
get
Node
get
Number
iterate
Nodes
get
Pred
Node
Numbers
get
Succ
Node
Numbers
make
begin
Task
sub
Task
cancel
is
Canceled
done
worked
get
Cancel
Message
begin
Task
done
worked
throw
Exception
If
Canceled
sub
Task
is
Canceled
cancel
url
To
File
url
To
File
stream
To
File
string
To
File
parse
parse
For
Key
get
Rt
Jar
main
input
Stream2Byte
Array
main
list
Files
list
Files
copy
delete
Contents
delete
Recursively
create
File
read
Bytes
write
File
recurse
Files
set
Output
Type
get
Output
Type
output
Type
Cmd
Line
Param
dotify
dotify
spawn
Dot
write
Dot
File
dot
Output
output
Nodes
output
Node
compute
Dot
Nodes
get
Rank
Dir
decorate
Node
get
Label
get
Port
get
Font
Size
set
Font
Size
get
Label
get
PDF
File
set
PDF
File
get
Gv
Exe
set
Gv
Exe
to
String
run
get
Exception
get
Process
set
Process
start
stop
report
get
End
Memory
get
Start
Memory
get
Footprint
get
Name
to
String
start
stop
get
Elapsed
Millis
get
Count
to
String
on
Mac
OSX
on
Linux
on
Windows
on
IKVM
get
JDK
Modules
get
Path
For
JDK
Module
get
Java
Runtime
Version
perform
Verbose
Action
production
Assertion
production
Assertion
UNREACHABLE
UNREACHABLE
UNREACHABLE
start
mark
mark
add
get
Related
get
Related
Count
any
Related
remove
remove
All
contains
max
Key
Value
assert
Disjoint
fix
After
Sparse
Insert
clear
contains
contains
Any
intersection
union
is
Empty
size
int
Iterator
has
Next
next
foreach
foreach
Excluding
max
same
Value
is
Subset
copy
Set
in
Dense
Range
add
All
add
remove
intersect
With
add
All
In
Intersection
to
String
remove
All
diff
clone
State
act
contains
get
Index
size
is
Empty
element
At
same
Value
Internal
same
Value
is
Subset
Internal
diff
diff
Internal
to
String
parse
Int
Array
singleton
pair
intersection
union
int
Iterator
has
Next
next
max
foreach
foreach
Excluding
add
is
Subset
is
Subset
Internal
contains
Any
contains
Any
to
Int
Array
set
clear
get
length
and
and
Not
or
xor
same
Bits
is
Subset
intersection
Empty
subscript
clear
All
hash
Code
population
Count
is
Zero
clone
to
String
contains
max
next
Set
Bit
copy
Bits
make
make
make
make
Mutable
Copy
diff
default
Slow
Diff
diff
remove
All
binary
Search
get
Default
Int
Set
Factory
set
Default
Int
Set
Factory
add
to
Array
copy
Set
add
All
add
remove
clear
intersect
With
add
All
In
Intersection
get
set
ensure
Capacity
perform
Verbose
Action
get
Max
Index
act
copy
Set
same
Representation
add
All
add
All
In
Intersection
maybe
Change
Representation
add
remove
intersect
With
contains
intersection
union
is
Empty
size
int
Iterator
foreach
foreach
Excluding
max
make
Copy
clear
same
Value
is
Subset
get
Backing
Store
to
String
contains
Any
remove
All
contains
All
make
parse
make
Copy
make
word
Diff
expand
ensure
Capacity
to
String
grow
Capacity
get
Offset
get
Size
set
clear
get
next
Set
Bit
not
max
length
set
All
equals
intersection
Empty
same
Bits
is
Subset
copy
Bits
and
or
xor
and
Not
not
and
or
and
Not
init
get
Initial
Size
get
Growth
Factor
get
Growth
Factor
get
get
Store
Length
set
add
handle
Morph
ensure
Capacity
get
Max
Index
print
get
Growth
Factor
get
Initial
Size
has
Next
next
contains
contains
Any
intersection
is
Empty
size
max
same
Value
is
Subset
long
Iterator
foreach
foreach
Excluding
get
X
get
Y
equals
hash
Code
to
String
make
get
to
Local
Index
get
First
Index
On
Page
get
Page
Number
set
find
Or
Create
Page
perform
Verbose
Action
get
Max
Index
get
Initial
Size
get
Growth
Factor
get
set
ensure
Capacity
perform
Verbose
Action
compute
Occupancy
get
Max
Index
is
Byte
is
Short
make
parse
make
Copy
make
get
set
get
Max
Index
expand
set
clear
get
not
and
and
or
ensure
Capacity
or
With
Delta
or
xor
xor
intersection
Empty
length
same
Bits
is
Subset
and
Not
equals
set
All
not
and
Not
has
Next
next
make
create
Mutable
Sparse
Long
Set
remove
add
copy
Set
intersect
With
intersect
With
add
All
add
All
add
All
assert
Equiv
clear
contains
is
Empty
size
max
add
remove
contains
Any
intersection
union
same
Value
is
Subset
copy
Set
add
All
intersect
With
add
All
In
Intersection
int
Iterator
foreach
foreach
Excluding
to
String
make
parse
make
Copy
make
copy
Value
check
Integrity
check
Overflow
contains
intersection
union
intersection
is
Empty
size
int
Iterator
foreach
foreach
Excluding
foreach
Excluding
Internal
foreach
Excluding
General
max
same
Value
same
Value
same
Value
same
Value
is
Subset
is
Subset
copy
Set
add
All
add
All
Internal
add
All
Internal
add
All
add
remove
intersect
With
intersect
With
Internal
same
Shared
Part
to
String
make
Sparse
Copy
make
Dense
Copy
has
Shared
Part
contains
Any
add
All
In
Intersection
add
All
In
Intersection
General
add
All
In
Intersection
Internal
add
All
In
Intersection
Internal
clear
make
parse
make
Copy
make
set
Primary
Factory
set
Secondary
Factory
make
parse
make
Copy
make
get
set
ensure
Capacity
perform
Verbose
Action
act
get
Mapped
Object
get
Mapped
Index
has
Mapped
Index
get
Maximum
Index
get
Size
add
stream
find
Or
Create
Shared
Subset
report
Stats
count
Entries
add
using
Delegate
iterator
advance
X
get
First
Index
has
Next
next
remove
get
Delegate
any
Related
get
Related
get
Related
Count
remove
remove
All
perform
Verbose
Action
count
Pairs
contains
max
Key
Value
to
String
make
parse
make
Copy
make
empty
contains
Any
size
iterator
has
Next
next
remove
intersect
equals
unify
to
String
make
Sparse
Copy
get
Backing
Set
contains
is
Empty
to
Collection
to
Ordinal
Set
get
Mapping
subscript
set
All
set
clear
All
clear
get
not
not
and
and
or
or
xor
intersection
Empty
copy
Bits
hash
Code
population
Count
length
equals
is
Zero
clone
to
String
make
parse
make
Copy
make
get
Expansion
Factor
get
Initial
Non
Empty
Size
make
parse
make
Copy
make
make
make
Mutable
Copy
diff
default
Slow
Diff
diff
remove
All
binary
Search
get
Default
Long
Set
Factory
set
Default
Long
Set
Factory
add
contains
contains
Any
intersection
union
is
Empty
size
has
Next
next
int
Iterator
foreach
foreach
Excluding
max
same
Value
is
Subset
contains
contains
Any
intersection
union
is
Empty
size
int
Iterator
foreach
foreach
Excluding
max
same
Value
is
Subset
make
get
Mapped
Object
get
Mapped
Index
has
Mapped
Index
add
to
String
iterator
stream
make
Singleton
delete
Mapped
Object
get
Objects
replace
put
get
Maximum
Index
get
Size
make
parse
make
Copy
make
clear
remove
get
Initial
Non
Empty
Size
get
Expansion
Factor
add
copy
Set
act
intersect
With
intersect
With
add
All
add
All
add
All
remove
All
remove
All
remove
All
add
All
In
Intersection
diff
make
make
Empty
create
Mutable
Sparse
Int
Set
create
Bit
Set
add
All
add
All
add
clear
contains
to
String
copy
Bits
same
Bits
iterator
has
Next
next
remove
size
length
clear
All
set
All
intersect
difference
is
Empty
get
Maximum
Index
get
Size
make
make
add
get
Mapped
Index
get
Mapped
Object
has
Mapped
Index
iterator
stream
clear
copy
Set
add
All
add
All
Oblivious
add
remove
intersect
With
intersection
union
is
Empty
size
int
Iterator
has
Next
next
foreach
make
Sparse
Copy
foreach
Excluding
slow
Foreach
Excluding
fast
Foreach
Excluding
act
On
Word
contains
max
to
String
next
Set
Bit
same
Value
same
Value
Internal
is
Subset
is
Subset
Internal
get
Bit
Vector
to
Sparse
Int
Set
remove
All
contains
Any
add
All
In
Intersection
contains
All
copy
Set
add
All
add
remove
intersect
With
union
grow
find
find
Internal
size
clone
State
act
contains
get
Index
size
is
Empty
element
At
same
Value
Internal
same
Value
is
Subset
Internal
diff
to
String
parse
Long
Array
singleton
pair
intersection
long
Iterator
has
Next
next
foreach
foreach
Excluding
max
add
is
Subset
contains
Any
contains
Any
lower8
lower16
upper16
upper24
lower32
upper32
fits
population
Count
make
make
get
Java
Exe
set
Java
Exe
set
Program
Args
get
Program
Args
get
Main
Class
get
Xtra
Class
Path
to
String
default
Java
Exe
start
get
Last
Process
make
Lib
Path
join
make
Classpath
quote
String
If
Needed
is
Enable
Assertions
set
Enable
Assertions
add
Vm
Arg
get
Vm
Args
get
Cmd
set
Cmd
to
String
launch
get
Working
Dir
set
Working
Dir
get
Env
set
Env
to
String
spawn
Process
spawn
Process
build
Env
drain
Std
Out
drain
blocking
Drain
capture
Std
Out
drain
blocking
Drain
drain
Std
Err
drain
blocking
Drain
capture
Std
Err
drain
blocking
Drain
drain
blocking
Drain
run
get
Capture
set
Capture
drain
And
Print
blocking
Drain
And
Print
drain
And
Catch
blocking
Drain
And
Catch
is
Capture
Output
is
Capture
Err
get
Std
Out
get
Stderr
set
Std
Out
set
Std
Err
get
Input
set
Input
main
generate
Root
Classes
From
Workspace
find
Class
Names
extract
Bin
Directories
perform
compute
Size
Of
size
Of
size
Of
Slot
traverse
traverse
drain
Work
Lists
traverse
Array
traverse
Scalar
is
In
Bad
Package
traverse
Field
Of
Scalar
get
All
Instance
Fields
get
All
Reference
Instance
Fields
is
Static
analyze
Leaks
analyze
Leaks
trace
Heap
register
Object
to
String
compare
get
Total
Size
get
Total
Instances
find
Or
Create
Demographics
register
Reached
From
get
Total
Size
to
String
compare
instance
evaluate
to
String
hash
Code
equals
is
Identity
get
Node
Transfer
Function
has
Node
Transfer
Functions
get
Edge
Transfer
Function
has
Edge
Transfer
Functions
get
Meet
Operator
make
Node
Variable
make
Edge
Variable
initialize
Variables
initialize
Work
List
get
Out
get
In
get
Edge
get
Edge
map
It
union
size
find
is
In
is
Out
get
Key
build
Equations
short
Circuit
Identities
fix
Short
Circuits
short
Circuit
Unary
Meets
get
Problem
evaluate
to
String
hash
Code
equals
make
Node
Variable
make
Edge
Variable
make
Stmt
RHS
get
Flow
Graph
get
Transfer
Function
Provider
evaluate
to
String
hash
Code
equals
evaluate
to
String
hash
Code
equals
instance
evaluate
hash
Code
equals
to
String
make
Node
Variable
make
Edge
Variable
make
Stmt
RHS
instance
to
String
hash
Code
equals
evaluate
instance
to
String
hash
Code
equals
evaluate
evaluate
to
String
hash
Code
equals
get
Lattice
Values
instance
evaluate
to
String
hash
Code
equals
is
Identity
instance
evaluate
to
String
hash
Code
equals
evaluate
to
String
hash
Code
equals
get
Flow
Graph
get
Transfer
Function
Provider
instance
evaluate
equals
hash
Code
to
String
evaluate
to
String
hash
Code
equals
is
Unary
No
Op
test
Try
Catch
Own
Exception
test
Try
Catch
Implicit
Exception
test
Try
Catch
Super
test
Try
Catch
Multiple
Exceptions
invoke
All
invoke
All
Pass
Through
invoke
Single
Pass
Through
invoke
Single
Throw
Own
Exception
invoke
Single
Implicit
Exception
invoke
Single
Recursive
invoke
Single
Recursive2
invoke
Single
Recursive2Helper
main
main
main
test
May
Alias1
test
May
Alias2
test
May
Alias3
main
do
Nothing
set
do
Set
get
B
foo
identity
bar
main
do
Nothing
set
Min
main
max
min
main
doubble
floatt
set
test
Concat
main
main
do
Nothing
main
do
Nothing
foo
dostuff
main
main
test
foo
empty
Array
m1
foo
bar
foo2
foo3
foo4
foo
foo
bar
infer
Int
time
use
Cast
main
m
main
set
X
to
String
make
main
main
do
Nothing
some
Bool
main
foo
bar
get
Int
do
Nothing
main
main
baz
foo
bar
main
foo
bar
do
Nothing
main
main
process
get
Val
do
Nothing
callee
do
Nothing
main
main
send
Message
id
do
Nothing
main
foo
get
F
set
F
copy
Globals
do
Nothing
main
do
Nothing
main
do
Nothing
main
do
Nothing
main
main
get
I
set
I
do
Nothing
main
test
do
Nothing
main
foo
find
do
Nothing
main
do
Nothing
main
throw
Exception
main
do
Nothing
get
I
set
I
do
Nothing
main
do
Nothing
main
foo
do
Nothing
main
main
baz
foo
bar
main
do
Nothing
main
foo
main
do
Nothing
main
main
some
Bool
do
Nothing
main
main
do
Nothing
main
Ret
T
Get
T
main
size
is
Empty
contains
iterator
to
Array
add
remove
contains
All
add
All
remove
All
retain
All
clear
to
Array
main
main
main
do
Nothing
foo
bar
baz
foo
bar
baz
foo
bar
main
main
main
main
main
main
main
main
main
main
main
main
say
Hello
main
main
main
to
String
main
main
m
n
o
s
t
u
main
main
main
main
main
to
String
main
op
op
op
id
main
op
op
op
id
main
do
Nothing
main
test
Multi
test
New
Multi
Array
silly
Method
finalize
main
member
Local
Get
constant
Creation
get
loop
equals
copy
swap
With
Min
partial
Invert
non
Final
Constant
constants
Workaround
aliasing
after
Loop
quick
Sort
member
Get
get
Length
interprocedural
Get
constants
due
To
Constant
Propagation
indirect
Comparison
modulo
variable
Subtraction
non
Monotounous
multi
Dimensional
phi
Overwrite
off
By
One
unknown
Length
ambiguity
inner
Loop
compared
Wrong
non
Tracked
Operation
Is
Safe
unbound
Negative
Loop
main
triple
bar
bar
foo
copy
main
main
foo
add
get
iterator
next
main
foo
choose
bar
id
main
main
main
id
main
add
get
iterator
next
foo
get
F
set
F
get
Global
main
add
iterator
make
A
main
main
main
main
main
main
main
main
main
next
main
foo
main
make
A
main
main
main
main
main
foo
id
main
main
main
main
main
make
Var
Used
test
This
Var
put
key
Iter
next
values
Iter
next
get
key
Or
Value
Iter
elements
do
Something
do
Something
call
Do
Something
main
main
test
Method
main
target
target
target
target
target
target
m
main
sort
id0
id1
sort
Forward
id2
sort
id3
sort
id4
sort
Backward
main
target
target
target
target
target
target
fun1
fun1Ref
fun2
main
main
whatever
main
foo
foo
foo
foo
main
test
Cast
To
String
foo
get
Row
Mapper
test1
unary1
unary2
binary
unary1
unary2
binary
unary1
unary2
binary
choice
main
local
Cast
sync1
sync2
sync3
dummy
main
call
If
Exception
call
If
No
Exception
call
Dynamic
If
Exception
call
Dynamic
If
No
Exception
call
If2Exception
call
If2No
Exception
call
Dynamic
If2Exception
call
Dynamic
If2No
Exception
call
Get
Exception
call
Dynamic
Get
Exception
test
Param
test
Param2
test
If
test
If2
test
If
Continued
test
If3
test
While
test
While2
test
Get
main
test
Param
test
Param2
test
If
test
If2
test
If
Continued
test
If3
test
While
test
While2
test
Get
main
main
silly
main
silly
silly
print
Null
call
Something
to
String
Impl
to
String
main
main
call
Something
Static
to
String
call
Something
print
Object
get
Name
to
String
test1
test2
main
test
Interproc
m
reachable1
reachable2
uncaught
Exception
main
run
make
CHA
assert
Equal
Collections
test
Class
Annotations1
test
Class
Annotations2
test
Class
Annotations
test
Class
Annotations3
test
Class
Annotations4
test
Param
Annotations1
check
Parameter
Annots
get
Temporary
Directory
create
Temporary
Files
instrument
run
edges
Test
callee
check
Edges
check
Edges
check
Nodes
check
Nodes
check
use
Short
Profile
set
Up
tear
Down
make
Analysis
Cache
make
Analysis
Cache
just
This
Test
get
Classpath
Entry
main
wipe
Soft
Caches
main
get
Call
Graph
Builder
collect
Jars
get
System
Jars
get
Module
Files
gather
Thread
Escaping
Classes
main
main
main
before
Class
after
Class
test
Intraproc1
test
Intraproc2
test
Context
Insensitive
test
Context
Sensitive
get
Arguments
test
Valid
File
test
URL
With
Invalid
URI
Chars
test
URL
With
Space
main
test
Case1
main
test
Case1
make
Slicer
Exclusions
find
Or
Create
Analysis
Scope
find
Or
Create
CHA
after
Class
find
Call
To
Do
Nothing
test
Slice1
test
Slice2
test
Slice3
test
Slice4
test
Slice5
test
Slice7
test
Slice8
test
Slice9
test
Test
CD1
test
Test
CD2
test
Test
CD3
test
Test
CD4
test
Test
CD5
test
Test
CD5No
Interproc
test
Test
CD6
test
Test
Id
test
Test
Arrays
test
Test
Fields
test
Thin1
test
Test
Global
test
Test
Multi
Target
test
Test
Recursion
test
Prim
Getter
Setter
test
Prim
Getter
Setter2
test
Test
Throw
Catch
test
Test
Message
Format
test
Test
Inet
Addr
test
Just
Throw
test
List
test
List
Iterator
test
Integer
Value
Of
init
test
check
Removing
Normal
Ok
special
Case
Throw
Filtered
check
No
New
Edges
init
test
Intra
check
Caught
Exceptions
check
Thrown
Exceptions
test
Interprocedural
test
Class
Annotations5
test
Class
Annotations5Foo
test
Class
Annotations5field
make
For
Annotations6
test
Class
Annotations6field1
test
Class
Annotations
test
Method
Annotations
test
Field
Annotations
test
Bug38484
test
Bug38540
test
Multi
New
Array1
main
before
Class
after
Class
test
Alias
Names
test
Local
Names
Without
Pi
Nodes
test
Local
Names
With
Pi
Nodes
main
do
Method
test
Resolve
Proxy
Class
test
IR
Cache
Idempotence
test
Sync1
test
Sync2
test
Sync3
test
CFG
main
do
Method
check
None
Null
check
Not
All
Null
test
IR1
test
IR2
test
IR3
test
IR4
test
Synthetic
Edge
To
Exit
test
String
Concat
test
Private
Interface
Methods
test
Private
Interface
Methods
test
Missing
Super
main
before
Class
after
Class
test1
test2
test3
test
Deleted
Code
main
before
Class
after
Class
test1
test2
test
Exclusions
main
before
Class
after
Class
test
Cell
test
Obj
Init
test
Constructor
Lookup
test
Library
Version
test
Missing
Method
Ref
test
Hello
test
From
Jar
test
Dup
Field
Names
test
Jar
Input
Stream
test
Base
Scope
set
Offline
Instrumenter
test
Double
emit
To
test
Float
emit
To
write
set
Validation
Instrumenter
get
Constant
Instruction
Value
get
First
Constant
Instruction
Index
get
Method
Data
static
CG
test
Graph
test
Callbacks
test
Exclusions
test
Lambdas
main
before
Class
after
Class
test1
test2
test3
test4
test
Clone
test
N
List
main
run
Bitset
Test
test
Bimodal
Sparse
test
Shared
Bimodal
test
Shared
Sparse
test
Shared
Bit
Vector
test
Semi
Sparse
Shared
main
find
Or
Create
Analysis
Scope
find
Or
Create
CHA
after
Class
test
Reflect1
test
Reflect2
test
Reflect3
test
Reflect4
test
Reflect5
test
Reflect6
test
Reflect7
get
Succ
Nodes
test
Reflect8
test
Reflect9
test
Reflect10
test
Reflect11
test
Reflect12
test
Reflect13
test
Reflect14
test
Reflect15
test
Reflect16
test
Reflect17
test
Reflect18
test
Reflect19
test
Reflect20
test
Reflect21
test
Reflect22
test
Reflect23
test
Reflect24
test
Get
Method
Context
test
For
Name
Thrown
Exceptions
test
Multi
Subtypes
get
Temporary
Directory
test
Ocaml
Hello
Hash
test
O
Caml
Jar
test
Lib
Models
main
test
Java
cup
test
Bcel
Verifier
test
J
Lex
test
Corner
Cases
test
Hello
test
Static
Init
test
Java8Smoke
test
System
Properties
test
Recursion
test
Hello
All
Entrypoints
test
IO
make
Primordial
Public
Entrypoints
test
Primordial
test
Zero
One
Container
Copy
Of
test
Zero
One
Container
Static
Methods
make
Primordial
Main
Entrypoints
do
Call
Graphs
do
Call
Graphs
check
ICFG
check
Call
Graph
squash
Call
Graph
to
String
iterator
stream
contains
Node
get
Number
Of
Nodes
get
Pred
Nodes
get
Pred
Node
Count
get
Succ
Nodes
get
Succ
Node
Count
add
Node
remove
Node
add
Edge
remove
Edge
remove
All
Incident
Edges
remove
Node
And
Edges
remove
Incoming
Edges
remove
Outgoing
Edges
has
Edge
test
Class
Constants
test
Finalize
main
do
Graph
check
Call
Assertions
test
No
Pi
Nodes
test
Pi
Nodes
static
Interface
Method
As
Entrypoint
test
Bug144
test
Bug137
test
Sorting
Example
check
Compare
To
Calls
test
Method
Refs
test
Params
And
Capture
test
Lamba
Metafactory
Call
cpa
Test1
cpa
Test2
do
CPA
Test
test
Java
cup
test
CHA
test
CHA
main
get
Temporary
Directory
test
Kawa
Chess
test
Kawa
Test
get
Nodes
test
Kawa
begin
Task
note
Elapsed
Time
sub
Task
cancel
is
Canceled
done
worked
get
Cancel
Message
test
Default
Methods
zero
one
test
Solver
Node
Edge
test
Solver
Node
Only
expected
String
Node
Only
expected
String
Node
Edge
build
Graph
solve
Node
Only
get
Node
Transfer
Function
has
Node
Transfer
Functions
get
Edge
Transfer
Function
has
Edge
Transfer
Functions
get
Meet
Operator
solve
Node
Edge
get
Node
Transfer
Function
has
Node
Transfer
Functions
get
Edge
Transfer
Function
has
Edge
Transfer
Functions
get
Meet
Operator
result2String
do
Mutable
Int
Set
test
Mutable
Shared
Bit
Vector
Int
Set
test
Mutable
Sparse
Int
Set
test
Bimodal
Mutable
Sparse
Int
Set
test
Bit
Vector
Int
Set
test
Semi
Sparse
Mutable
Int
Set
do
Mutable
Long
Set
test
Mutable
Sparse
Long
Set
test
Small
Map
test
Bimodal
Map
test
BFS
Path
Finder
test
Bounded
BFS
make
BFS
Test
Graph
test
Dominators
A
test
Binary
Integer
Relation
test
Union
Find
count
Equivalence
Classes
test
Bit
Vector
test
Offset
Bit
Vector0
10
test
Offset
Bit
Vector10
10
test
Offset
Bit
Vector50
10
test
Offset
Bit
Vector50
50
test
Offset
Bit
Vector100
10
test
Single
Bit
Vector
test
Bit
Vectors
test
Offset
Bit
Vectors150
10
test
Offset
Bit
Vectors100
200
10
test
Offset
Bit
Vectors100
25
10
test
Offset
Bit
Vectors35
25
20
10
test
Bit
Vectors
make
Big
Test
Offset
Vector
test
Specific
Bugs
In
Offset
Bit
Vectors
test
Specific
Bugs
In
Semi
Sparse
Mutable
Int
Sets
create
Graph
make
Finder
check
Paths
test
Paths1
test
Paths2
test
Paths3
test
Paths4
test1
make
Base
Graph
augment
A
augment
B
augment
C
test
Augment
assert
Coloring
to
String
build
Graph
test
One
test
Two
get
Graph
Node
Id
set
Graph
Node
Id
get
Succ
Numbers
get
Pred
Numbers
add
Succ
add
Pred
remove
All
Incident
Edges
remove
Incoming
Edges
remove
Outgoing
Edges
to
String
make
Graph
Test
Path
Lengths
Test
Shortest
Path
Test
Shortest
Paths
expected
Paths
main
test
Multi
Dim
find
Do
Nothing
Node
test
Type
Based
Array
Alias
find
Node
may
Aliased
test
Zero
Length
Array
test
Obj
Sensitive1
test
Obj
Sensitive2
do
Points
To
Size
Test
init
Call
Graph
find
Do
Nothing
Call
init
get
Ir
compute
Cfg
And
Pruned
CFG
get
I
Class
detectable
not
Detectable
not
In
Bound
check
Removed
Edges
check
Exceptional
Successors
check
Normal
Successors
free
init
get
Ir
get
I
Class
detectable
not
Detectable
not
In
Bound
assert
All
Same
Necessity
free
test
Array
Set
test
Clone
test
Foo
Id
test
Hashtable
Enum
test
Within
Method
Call
test
Linked
List
Iter
test
Global
test
Hash
Set
test
Hash
Map
Get
test
Method
Recursion
test
Array
Set
Iter
test
Array
List
test
Linked
List
get
State
Machine
Factory
make
Demand
Pointer
Analysis
test
On
The
Fly
Simple
test
Array
Set
test
Array
Set
Iter
test
Hash
Set
test
Method
Recursion
test
Foo
Id
test
Locals
test
Arrays
test
Fields
test
Fields
Harder
test
Getter
Setter
test
Exception
test
Multi
Dim
test
Global
test
Flows
To
Locals
test
Flows
To
Id
test
Flows
To
Fields
test
Flows
To
Fields
Harder
test
Flows
To
Array
Set
Iter
test
Nasty
Ptrs
test
Global
test
Fields
test
Fields
Harder
test
Arrays
test
Getter
Setter
test
Array
Set
test
Array
Set
Iter
test
Multi
Dim
make
Demand
Pointer
Analysis
test
Flows
To
Fields
test
Flows
To
Fields
Harder
test
Array
Set
test
Clone
test
Foo
Id
test
Hashtable
Enum
test
On
The
Fly
CS
test
Within
Method
Call
test
Linked
List
Iter
test
Global
test
Hash
Set
test
Hash
Map
Get
test
Method
Recursion
test
Array
Set
Iter
test
Array
List
test
Linked
List
test
Flows
To
Array
Set
Iter
get
State
Machine
Factory
make
Demand
Pointer
Analysis
find
Main
Method
find
Static
Method
find
Instance
Method
get
Param
do
Flows
To
Size
Test
get
Flows
To
Set
To
Test
get
Flows
To
Instance
Key
do
Points
To
Size
Test
get
Points
To
Set
To
Test
make
Demand
Pointer
Analysis
find
Or
Create
CHA
find
Or
Create
Analysis
Scope
cleanup
get
State
Machine
Factory
test
Id
test
Missing
Class
Metadata
Ref
get
State
Machine
Factory
test
On
The
Fly
Simple
make
Demand
Pointer
Analysis
main
after
Class
test
before
Class
after
Class
main
test
If
Exception
test
Dynamic
If
Exception
test
If
No
Exception
test
Dynamic
If
No
Exception
test
If2Exception
test
Dynamic
If2Exception
test
If2No
Exception
test
Dynamic
If2No
Exception
test
Get
Exception
test
Dynamic
Get
Exception
before
Class
after
Class
main
test
Param
test
Dynamic
Param
test
Param2
test
Dynamic
Param2
test
If
test
Dynamic
If
test
If2
test
Dynamic
If2
test
If
Continued
test
Dynamic
If
Continued
test
If3
test
Dynamic
If3
test
While
test
While
Dynamic
test
While2
test
Dynamic
While2
test
Get
test
Dynamic
Get
return
Node
return
Val
return
Node
Exploded
dump
All
IR
main
run
Analysis
For
Test
Case
same
Contents
print
Result
make
Demand
Pointer
Analysis
main
run
Unit
Test
Case
run
Application
do
Tests
check
Pointers
In
Method
known
Bug
make
Demand
Pointer
Analysis
main
run
go
Backward
run
sanity
Check
get
Return
Statement
For
Call
prune
SDG
make
Node
Decorator
validate
Command
Line
main
validate
Command
Line
run
main
run
run
validate
Command
Line
is
Directory
find
Jar
Files
compose
String
main
run
run
build
Pruned
Call
Graph
prune
For
App
Loader
validate
Command
Line
test
main
run
get
Data
Dependence
Options
get
Control
Dependence
Options
run
prune
SDG
make
Node
Decorator
validate
Command
Line
main
run
run
validate
Command
Line
main
make
Public
Entrypoints
main
run
prune
Graph
prune
For
App
Loader
validate
Command
Line
type
Hierarchy2Graph
number
Put
Statics
get
Edge
Transfer
Function
get
Meet
Operator
get
Node
Transfer
Function
has
Edge
Transfer
Functions
has
Node
Transfer
Functions
analyze
number
Put
Statics
get
Meet
Operator
get
Node
Transfer
Function
has
Edge
Transfer
Functions
has
Node
Transfer
Functions
get
Edge
Transfer
Function
is
Call
To
Return
Edge
analyze
get
Node
And
Instr
For
Number
get
Initialized
has
Priority
Over
get
Unbalanced
Return
Flow
Function
get
Call
Flow
Function
get
Call
None
To
Return
Flow
Function
get
Call
To
Return
Flow
Function
get
Normal
Flow
Function
get
Targets
to
String
get
Targets
to
String
get
Targets
to
String
get
Targets
to
String
get
Return
Flow
Function
get
Fake
Entry
get
Fake
Entry
collect
Initial
Seeds
get
Function
Map
get
Domain
get
Merge
Function
get
Supergraph
initial
Seeds
analyze
get
Supergraph
get
Domain
has
Priority
Over
get
Unbalanced
Return
Flow
Function
get
Call
Flow
Function
get
Call
None
To
Return
Flow
Function
get
Call
To
Return
Flow
Function
get
Normal
Flow
Function
get
Targets
to
String
get
Return
Flow
Function
get
Fake
Entry
get
Fake
Entry
collect
Initial
Seeds
get
Function
Map
get
Domain
get
Merge
Function
get
Supergraph
initial
Seeds
analyze
get
Supergraph
get
Domain
load
Properties
get
Wala
Core
Tests
Home
Directory
is
Live
find
Blocks
find
Block
find
Block
may
Escape
may
Escape
may
Escape
may
Escape
find
Alloc
may
Escape
may
Be
Live
may
Be
Live
may
Be
Live
may
Be
Live
may
Be
Live
may
Be
Live
In
Some
Caller
may
Be
Live
Intraprocedural
compute
Live
Nodes
may
Be
Live
read
XML
get
Summaries
get
Allocatable
Classes
get
Ignored
Packages
start
Element
start
Class
end
Element
check
Return
Value
process
Call
Site
process
Allocation
process
Athrow
process
Get
Field
process
Put
Field
process
Put
Static
process
Aastore
process
Aaload
process
Return
get
Value
Number
For
Null
process
Constant
process
Poison
start
Method
class
Loader
Name2Ref
class
Name2Ref
make
CFG
make
IR
context
Is
Irrelevant
create
is
Public
is
Private
get
Modifiers
get
Superclass
get
Direct
Interfaces
get
All
Implemented
Interfaces
get
Method
get
Field
get
Class
Initializer
get
Declared
Methods
get
All
Instance
Fields
get
All
Static
Fields
get
All
Fields
get
All
Methods
get
Declared
Instance
Fields
make
Fields
get
Declaring
Class
get
Name
get
Annotations
get
Class
Hierarchy
get
Field
Type
Reference
get
Reference
is
Final
is
Private
is
Protected
is
Public
is
Static
is
Volatile
trampoline
get
Lambda
Callee
Class
get
Lambda
Callee
Name
get
Lambda
Callee
Signature
get
Lambda
Declared
Signature
get
Lambda
Callee
Kind
make
Trampoline
get
Dispatch
For
Method
Handle
Kind
get
Declared
Static
Fields
is
Reference
Type
get
Capture
Field
Name
copy
For
SSA
hash
Code
is
Fall
Through
to
String
visit
get
Statement
At
reserve
Program
Counters
allow
Reserved
is
Reserved
is
Free
is
Used
overwrite
Statement
get
Method
Summary
add
Statement
set
Local
Name
set
Local
Names
get
Local
Names
add
Constant
add
Poison
get
Constants
get
Method
get
Next
Program
Counter
get
Number
Of
Parameters
get
Parameter
Type
get
Poison
get
Poison
Level
get
Return
Type
get
Statements
has
Poison
is
Factory
is
Native
is
Static
set
Factory
set
Poison
Level
set
Static
to
String
get
Name
get
Class
Loader
get
Superclass
get
All
Implemented
Interfaces
get
Method
get
Field
get
Source
File
Name
get
Class
Initializer
get
Declared
Methods
get
Declared
Instance
Fields
get
Declared
Static
Fields
is
Synthetic
Implentor
to
String
get
Real
Type
equals
hash
Code
get
Modifiers
is
Reference
Type
get
Direct
Interfaces
get
All
Instance
Fields
get
All
Static
Fields
get
All
Methods
get
All
Fields
is
Public
is
Private
get
Source
get
Annotations
set
Value
Names
get
Value
Names
get
Value
get
Number
Of
Statements
add
Statement
add
Constant
get
Method
is
Native
add
Poison
has
Poison
get
Poison
set
Poison
Level
get
Poison
Level
get
Statements
get
Constants
get
Number
Of
Parameters
is
Static
set
Static
get
Return
Type
to
String
get
Parameter
Type
set
Factory
is
Factory
get
Local
Names
get
Local
Map
get
Local
Variable
Name
has
Local
Variable
Table
make
IR
get
Allocated
Target
get
Bypass
find
Or
Create
Synthetic
Method
find
Summary
get
Bypass
extract
Package
get
Class
Hierarchy
resolve
Target
is
Allocatable
rep
OK
make
Symbol
Table
update
For
Instruction
instruction
Position
get
Local
Map
get
Indirection
Data
is
Native
is
Abstract
get
Poison
get
Poison
Level
has
Poison
get
Statements
make
IR
get
Number
Of
Parameters
is
Static
get
Parameter
Type
get
Local
Variable
Name
get
Callee
Target
get
Lambda
Factory
Summary
get
Callee
Target
find
Or
Create
Synthetic
Method
find
Or
Create
Synthetic
Method
generate
Standard
No
Op
generate
No
Op
get
Statements
can
Ignore
find
Summary
get
Class
Hierarchy
to
String
lookup
Class
register
Class
get
Reference
iterate
All
Classes
get
Number
Of
Classes
get
Name
get
Language
get
Number
Of
Methods
get
Source
File
Name
get
Parent
init
remove
All
get
Source
get
Instruction
Factory
get
Source
get
Source
File
Name
get
Value
Number
equals
get
Kind
hash
Code
to
String
get
Kind
get
Kind
equals
hash
Code
to
String
get
Pi
get
Kind
get
Instruction
to
String
get
Value
Number
hash
Code
equals
get
Kind
equals
hash
Code
to
String
get
Instruction
get
Kind
equals
hash
Code
to
String
get
Phi
is
Ignore
Base
Ptrs
is
Ignore
Heap
is
Ignore
Exceptions
is
Terminate
At
Cast
get
Name
get
Name
is
Ignore
Exceptions
is
Ignore
Interproc
compute
Backward
Slice
compute
Forward
Slice
compute
Backward
Slice
compute
Forward
Slice
compute
Backward
Slice
compute
Slice
slice
slice
make
Slice
Problem
compute
Backward
Slice
get
Domain
get
Function
Map
get
Merge
Function
get
Supergraph
initial
Seeds
get
Fake
Entry
compute
Reaching
Defs
eager
Populate
init
Pointer
Key
Mod
find
Or
Create
Int
Set
to
String
clear
contains
Key
contains
Value
entry
Set
equals
get
hash
Code
is
Empty
key
Set
put
put
All
remove
size
values
compute
Result
make
Result
all
Callees
Mod
get
Mod
map
Instructions
To
Statements
create
Statement
Domain
init
Heap
Return
Caller
get
Edge
Transfer
Function
get
Meet
Operator
get
Node
Transfer
Function
has
Edge
Transfer
Functions
has
Node
Transfer
Functions
gen
heap
Entry
Statements
kill
get
Kind
to
String
get
Instruction
Index
get
Instruction
hash
Code
equals
to
String
get
Value
Number
get
Instruction
get
Kind
populate
create
Scalar
Edges
get
Caller
Param
Statements
get
Call
Statements
get
Caller
Return
Statements
create
Control
Dependence
Edges
create
Scalar
Data
Dependence
Edges
add
contains
complement
add
contains
create
Heap
Data
Dependence
Edges
has
Base
Pointer
get
Base
Pointer
compute
Return
Statements
get
PE
Is
ssa
Instruction2Statement
ssa
Instruction2Statement
compute
Instruction
Indices
statement2SSA
Instruction
create
Nodes
create
Return
Statements
create
Callee
Params
create
Special
Statements
create
Normal
Statements
add
Param
Passing
Statements
union
Heap
Locations
to
String
get
Param
Callee
Statements
get
Return
Statements
get
Call
Graph
Node
equals
hash
Code
get
Pred
Node
Count
get
Pred
Nodes
compute
Incoming
Heap
Dependencies
compute
Outgoing
Heap
Dependencies
get
Succ
Node
Count
get
Succ
Nodes
has
Edge
remove
Node
And
Edges
add
Node
contains
Node
get
Number
Of
Nodes
iterator
stream
remove
Node
add
Edge
remove
All
Incident
Edges
remove
Edge
remove
Incoming
Edges
remove
Outgoing
Edges
get
Max
Number
get
Node
get
Number
iterate
Nodes
get
Pred
Node
Numbers
get
Succ
Node
Numbers
get
Pred
Node
Numbers
get
Succ
Node
Numbers
get
Default
Label
get
Pred
Nodes
get
Pred
Labels
get
Pred
Node
Count
get
Succ
Nodes
get
Succ
Labels
get
Succ
Node
Count
add
Edge
remove
Edge
has
Edge
get
Edge
Labels
get
Procedure
Graph
get
Entry
classify
Edge
get
Call
Sites
get
Called
Nodes
get
Entries
For
Procedure
get
Exits
For
Procedure
get
Local
Block
get
Local
Block
Number
get
Normal
Successors
get
Number
Of
Blocks
get
Proc
Of
get
Return
Sites
is
Call
is
Entry
is
Exit
is
Return
remove
Node
And
Edges
add
Node
contains
Node
get
Number
Of
Nodes
iterator
stream
remove
Node
add
Edge
get
Pred
Node
Count
get
Pred
Nodes
get
Succ
Node
Count
get
Succ
Nodes
has
Edge
remove
All
Incident
Edges
remove
Edge
remove
Incoming
Edges
remove
Outgoing
Edges
get
Max
Number
get
Node
get
Number
iterate
Nodes
get
Pred
Node
Numbers
get
Succ
Node
Numbers
to
String
eager
Construction
add
PDG
Statement
Nodes
compute
All
PD
Gs
iterate
Lazy
Nodes
contains
Node
get
Max
Number
get
Node
get
Number
iterate
Nodes
iterator
iterate
Lazy
Nodes
get
Node
Lazy
get
Number
Of
Nodes
add
Edge
get
Pred
Node
Count
get
Pred
Nodes
get
Succ
Node
Count
get
Succ
Nodes
is
Uninformative
For
Reflection
has
Edge
get
Edge
Labels
remove
All
Incident
Edges
remove
Edge
remove
Incoming
Edges
remove
Outgoing
Edges
get
Pred
Node
Numbers
get
Succ
Node
Numbers
get
Edge
Manager
get
Node
Manager
get
PDG
get
C
Options
get
D
Options
get
Call
Graph
get
Class
Hierarchy
get
Pointer
Analysis
get
Edge
Labels
compute
Backward
Thin
Slice
compute
Backward
Thin
Slice
scan
For
Mod
scan
For
Ref
scan
For
Mod
scan
For
Mod
scan
For
Ref
add
Edge
add
Node
contains
Node
equals
get
C
Options
get
Max
Number
get
Node
get
Number
get
Number
Of
Nodes
get
PDG
get
Pred
Node
Count
get
Pred
Node
Numbers
get
Pred
Nodes
get
Succ
Node
Count
get
Succ
Node
Numbers
get
Succ
Nodes
has
Edge
hash
Code
iterate
Lazy
Nodes
iterator
stream
iterate
Nodes
remove
All
Incident
Edges
remove
Edge
remove
Incoming
Edges
remove
Node
remove
Node
And
Edges
remove
Outgoing
Edges
to
String
get
Class
Hierarchy
get
Call
Flow
Function
get
Call
None
To
Return
Flow
Function
get
Call
To
Return
Flow
Function
get
Normal
Flow
Function
get
Return
Flow
Function
get
Return
Flow
Function
get
Unbalanced
Return
Flow
Function
get
Kind
get
Call
Index
get
Call
to
String
hash
Code
equals
get
Kind
hash
Code
equals
to
String
get
Kind
get
Call
Index
get
Call
to
String
hash
Code
equals
get
Kind
hash
Code
equals
to
String
get
Location
get
Kind
equals
get
Kind
hash
Code
to
String
get
Value
Number
get
Instruction
get
Kind
get
Kind
get
Value
Number
to
String
hash
Code
equals
get
C
Options
get
PDG
iterate
Lazy
Nodes
filter
verbose
Action
excludes
get
Type
find
Call
To
find
First
Allocation
dump
Slice
dump
Slice
dump
Slice
To
File
count
Allocations
from
Application
Loader
count
Throws
count
Aloads
count
Normals
count
Application
Normals
count
Conditionals
count
Invokes
count
Putfields
count
Returns
count
Getfields
count
Putstatics
count
Getstatics
get
Targets
to
String
create
Reachability
Functions
get
Call
None
To
Return
Flow
Function
get
Call
To
Return
Flow
Function
get
Normal
Flow
Function
get
Return
Flow
Function
get
Return
Flow
Function
get
Call
Flow
Function
get
Kind
get
Node
hash
Code
equals
to
String
get
Fake
Root
Node
get
Fake
World
Clinit
Node
get
Entrypoint
Nodes
get
Node
get
Nodes
get
Class
Hierarchy
get
Possible
Targets
get
Number
Of
Targets
get
Possible
Sites
invalidate
get
IR
Factory
get
IR
get
Def
Use
get
IR
clear
create
Java
Analysis
Scope
init
For
Java
init
Core
For
Java
init
Synthetic
get
Language
is
Application
Loader
get
Primordial
Loader
get
Extension
Loader
get
Application
Loader
get
Synthetic
Loader
get
Languages
get
Base
Languages
add
Source
File
To
Scope
add
Class
File
To
Scope
add
JDK
Module
To
Scope
add
Input
Stream
For
Jar
To
Scope
add
To
Scope
add
To
Scope
add
To
Scope
add
To
Scope
Head
get
Loader
class
Loader
Name2Ref
get
Loader
Impl
set
Loader
Impl
get
Loaders
get
Number
Of
Loaders
get
Exclusions
set
Exclusions
to
String
get
Exclusion
String
find
Method
get
Modules
get
Array
Class
Loader
get
Rt
Jar
get
Java
Library
Version
is
Java18Libraries
is
Java17Libraries
is
Java16Libraries
is
Java15Libraries
is
Java14Libraries
to
Shallow
Analysis
Scope
make
Site
make
Argument
equals
add
Call
get
Method
get
Parameter
Types
get
Number
Of
Parameters
to
String
hash
Code
understands
iterate
Call
Sites
iterate
New
Sites
get
IR
get
DU
iterate
New
Sites
iterate
Call
Sites
equals
hash
Code
add
Target
init
get
Class
Hierarchy
get
Possible
Targets
get
Possible
Targets
get
Number
Of
Targets
get
Possible
Sites
iterate
Call
Sites
add
Target
make
Fake
Root
Node
make
Fake
World
Clinit
Node
find
Or
Create
Node
closure
is
Relevant
Method
make
New
Node
get
Succ
Nodes
make
Inner
test
get
Succ
Node
Count
add
Edge
remove
Edge
remove
All
Incident
Edges
remove
Incoming
Edges
remove
Outgoing
Edges
has
Edge
get
Succ
Node
Numbers
get
Edge
Manager
understands
iterate
Call
Sites
iterate
New
Sites
transitive
Closure
collect
Node
Results
invalidate
get
SSA
Cache
get
SSA
Options
get
IR
Factory
get
IR
get
IR
get
Def
Use
clear
get
hash
Code
equals
to
String
is
A
get
Allocated
Target
get
Callee
Target
get
Relevant
Parameters
get
Callee
Target
get
N
Nodes
get
N
Edges
get
N
Methods
get
Bytecode
Bytes
hash
Code
equals
to
String
get
CG
Stats
get
Stats
count
Bytecode
Bytes
collect
Methods
get
Name
get
Num
Flow
To
Cast
Iterations
is
Ignore
Method
Invoke
is
Ignore
String
Constants
is
Application
Classes
Only
get
Analysis
Scope
set
Analysis
Scope
get
Entrypoints
set
Entrypoints
get
Max
Number
Of
Nodes
set
Max
Number
Of
Nodes
get
Method
Target
Selector
get
Class
Target
Selector
set
Selector
set
Selector
get
Min
Equations
For
Top
Sort
set
Min
Equations
For
Top
Sort
get
Max
Eval
Between
Topo
get
Topological
Growth
Factor
set
Max
Eval
Between
Topo
set
Topological
Growth
Factor
get
SSA
Options
set
SSA
Options
get
Use
Constant
Specific
Keys
set
Use
Constant
Specific
Keys
get
Use
Stacks
For
Lexical
Scoping
set
Use
Stacks
For
Lexical
Scoping
get
Use
Lexical
Scoping
For
Globals
set
Use
Lexical
Scoping
For
Globals
set
Trace
String
Constants
get
Trace
String
Constants
get
Reflection
Options
set
Reflection
Options
get
Handle
Static
Init
set
Handle
Static
Init
get
Handle
Zero
Length
Array
set
Handle
Zero
Length
Array
to
String
get
Site
get
Method
get
Concrete
Type
hash
Code
equals
get
Creation
Sites
equals
hash
Code
to
String
get
Field
add
Filtered
add
Inverse
Filtered
is
Root
Filter
to
String
get
Concrete
Type
hash
Code
equals
add
Filtered
add
Inverse
Filtered
is
Root
Filter
to
String
get
Concrete
Types
hash
Code
equals
bits
add
Filtered
add
Inverse
Filtered
is
Root
Filter
to
String
get
Instance
hash
Code
equals
add
Filtered
add
Inverse
Filtered
is
Root
Filter
to
String
get
Method
hash
Code
equals
act
add
Filtered
add
Inverse
Filtered
is
Root
Filter
get
Type
Filter
find
Or
Create
Relation
make
Relation
add
Node
add
Equation
add
Variable
get
Node
Manager
get
Edge
Manager
get
Equation
Count
get
Var
Count
add
Statement
add
Statement
use
Implicit
Representation
remove
Variable
add
Implicit
Statement
remove
Implicit
Statement
get
Statements
has
Next
next
remove
has
Next
next
remove
advance
Outer
has
Next
next
remove
remove
Statement
reorder
remove
Node
And
Edges
iterator
get
Number
Of
Nodes
add
Node
remove
Node
contains
Node
get
Pred
Nodes
has
Next
next
remove
get
Pred
Node
Count
get
Succ
Nodes
has
Next
next
advance
remove
get
Succ
Node
Count
add
Edge
remove
All
Incident
Edges
get
Node
Manager
get
Edge
Manager
get
Statements
That
Use
get
Statements
That
Def
get
Number
Of
Statements
That
Use
get
Number
Of
Statements
That
Def
get
Variables
perform
Verbose
Action
contains
Statement
contains
Implicit
Statement
contains
Variable
add
Statement
get
Assignment
Graph
is
Interesting
get
Filter
Assignment
Graph
is
Interesting
get
Flow
Graph
Including
Implicit
Constraints
is
Interesting
remove
Node
And
Edges
iterator
get
Number
Of
Nodes
add
Node
remove
Node
contains
Node
get
Pred
Nodes
has
Next
next
advance
remove
get
Pred
Node
Count
get
Succ
Nodes
has
Next
next
advance
remove
get
Succ
Node
Count
add
Edge
remove
All
Incident
Edges
get
Node
Manager
get
Edge
Manager
space
Report
count
Implicit
Edges
get
Node
equals
hash
Code
equals
hash
Code
to
String
get
Node
get
Value
Number
is
Parameter
get
Instance
Key
For
Allocation
get
Instance
Key
For
Multi
New
Array
get
Instance
Key
For
Constant
get
Instance
Key
For
PEI
get
Instance
Key
For
Metadata
Object
get
Class
Hierarchy
equals
hash
Code
to
String
get
Concrete
Type
get
Node
get
Heap
Graph
get
Call
Graph
get
Instance
Keys
get
Instance
Key
Mapping
is
Container
get
Type
Filter
make
Instance
Keys
make
make
make
Container
Context
Selector
get
IR
get
IR
View
get
Number
Of
Statements
understands
record
Factory
Type
get
CFG
get
DU
get
Length
to
String
hash
Code
equals
get
Call
Site
Refs
get
Methods
equals
hash
Code
to
String
get
get
equals
hash
Code
to
String
get
IR
get
IR
View
get
Number
Of
Statements
record
Factory
Type
get
CFG
get
DU
get
equals
hash
Code
to
String
equals
hash
Code
get
to
String
to
String
to
String
equals
to
String
hash
Code
get
get
Base
Context
get
Call
String
is
A
get
Length
get
Call
String
get
Callee
Target
get
Relevant
Parameters
get
equals
hash
Code
to
String
get
Call
Site
get
Allocation
Sites
get
Length
equals
hash
Code
to
String
get
equals
hash
Code
to
String
get
Caller
get
CFA
Interpreter
get
IR
get
IR
View
get
Number
Of
Statements
iterate
New
Sites
iterate
Call
Sites
record
Factory
Type
get
CFG
get
DU
get
Pointer
Key
For
Local
get
Filtered
Pointer
Key
For
Local
get
Pointer
Key
For
Return
Value
get
Pointer
Key
For
Exceptional
Return
Value
get
Pointer
Key
For
Static
Field
get
Pointer
Key
For
Instance
Field
get
Pointer
Key
For
Array
Contents
to
String
get
Callee
Target
assembly
Receiver
Alloc
String
get
Callee
Target
For
Static
Call
append
Base
Context
get
Relevant
Parameters
get
Callee
Target
get
Relevant
Parameters
get
Callee
Target
is
Well
Known
Static
Factory
is
Array
Copying
Method
is
Array
Copy
Method
is
Array
To
String
Method
find
Recursive
Matching
Context
find
Node
Recursive
Matching
Context
find
Recursive
Matching
Context
may
Understand
is
Container
get
Class
Hierarchy
get
Relevant
Parameters
smush
Many
allocation
Policy
smush
Strings
smush
Throwables
smush
Prim
Holders
disambiguate
Constants
get
Instance
Key
For
Allocation
exceeds
Smush
Limit
count
Allocs
By
Type
get
Instance
Key
For
Multi
New
Array
get
Instance
Key
For
Constant
is
Reflective
Type
get
Instance
Key
For
PEI
get
Instance
Key
For
Metadata
Object
is
Interesting
is
Stringish
is
Throwable
is
Stack
Trace
Element
all
Fields
Are
Primitive
get
Class
Hierarchy
get
Class
Based
Instance
Keys
iterate
New
Sites
iterate
Fields
Read
iterate
Fields
Written
iterate
Call
Sites
record
Factory
Type
understands
get
IR
get
IR
View
get
DU
get
Number
Of
Statements
get
CFG
to
String
equals
hash
Code
equals
hash
Code
to
String
get
Site
get
Creation
Sites
update
For
Reflection
compute
Factory
Return
Statements
modify
Factory
Interpreter
get
Callee
Target
get
Relevant
Parameters
solve
get
System
create
Empty
Call
Graph
is
Java
Lang
Object
make
Call
Graph
make
Call
Graph
make
System
make
Solver
get
Msg
create
custom
Init
add
Constraints
From
Node
add
Constraints
From
New
Nodes
get
Pointer
Key
For
Local
get
Filtered
Pointer
Key
For
Local
get
Filtered
Pointer
Key
For
Local
get
Filtered
Pointer
Key
For
Local
get
Pointer
Key
For
Return
Value
get
Pointer
Key
For
Exceptional
Return
Value
get
Pointer
Key
For
Static
Field
get
Pointer
Key
For
Instance
Field
get
Pointer
Key
For
Array
Contents
assign
Instance
To
Catch
add
Assignments
For
Catch
Pointer
Key
get
Msg
create
make
get
Type
Filter
equals
hash
Code
to
String
get
Base
catches
represents
Null
Type
evaluate
is
Complex
to
String
equals
hash
Code
get
Class
Hierarchy
get
Options
get
Java
Lang
Object
get
Call
Graph
set
Context
Interpreter
get
Pointer
Analysis
get
Propagation
System
get
Pointer
Key
Factory
set
Pointer
Key
Factory
get
Context
Interpreter
get
Target
For
Call
get
Context
Selector
set
Context
Selector
get
Instance
Keys
set
Instance
Keys
get
Instance
Key
For
Allocation
get
Instance
Key
For
Multi
New
Array
get
Instance
Key
For
Constant
get
Instance
Key
For
Metadata
Object
have
Already
Visited
mark
Already
Visited
mark
Discovered
mark
Changed
was
Changed
to
String
evaluate
hash
Code
equals
is
Load
Operator
is
Complex
to
String
evaluate
hash
Code
is
Complex
equals
is
Load
Operator
to
String
evaluate
filter
Instances
hash
Code
equals
get
Field
is
Load
Operator
is
Complex
to
String
is
Complex
evaluate
filter
Instances
hash
Code
equals
get
Put
Assignment
Operator
get
Field
is
Load
Operator
to
String
evaluate
hash
Code
equals
is
Complex
to
String
evaluate
hash
Code
equals
is
Complex
get
Mutable
Instance
Keys
For
Class
get
Instance
Keys
For
Class
filter
For
Class
to
String
is
Complex
evaluate
get
Solver
add
Constraints
From
Changed
Node
unconditionally
Add
Constraints
From
Node
get
Analysis
Cache
get
IR
get
IR
View
get
DU
get
Number
Of
Statements
get
CFG
internal
Equals
internal
Hash
Code
get
Node
equals
hash
Code
solve
equals
hash
Code
to
String
get
Type
get
Concrete
Type
get
Instance
Keys
For
PEI
get
Creation
Sites
make
Inner
get
Instance
Key
For
Allocation
get
Instance
Key
For
Multi
New
Array
get
Instance
Key
For
Constant
get
Instance
Key
For
PEI
get
Instance
Key
For
Metadata
Object
to
String
make
Heap
Model
get
Points
To
Set
is
Filtered
visit
New
visit
Invoke
visit
Check
Cast
visit
Get
Caught
Exception
visit
Get
visit
Phi
visit
Pi
visit
Array
Load
make
Implicit
Points
To
Visitor
compute
Implicit
Points
To
Set
compute
Implicit
Points
To
Set
At
Pi
compute
Implicit
Points
To
Set
At
Phi
compute
Implicit
Points
To
Set
At
A
Load
compute
Implicit
Points
To
Set
At
Get
compute
Implicit
Points
To
Set
At
Get
compute
Implicit
Points
To
Set
At
Catch
compute
Implicit
Points
To
Set
At
Check
Cast
compute
Implicit
Points
To
Set
At
Call
to
Ordinal
Set
compute
Implicit
Exceptions
For
Call
get
Heap
Model
iterate
Pointer
Keys
get
Instance
Key
For
Allocation
get
Instance
Key
For
Multi
New
Array
get
Instance
Key
For
Constant
get
Instance
Key
For
PEI
get
Instance
Key
For
Metadata
Object
get
Pointer
Key
For
Local
get
Filtered
Pointer
Key
For
Local
get
Pointer
Key
For
Return
Value
get
Pointer
Key
For
Exceptional
Return
Value
get
Pointer
Key
For
Static
Field
get
Pointer
Key
For
Instance
Field
get
Pointer
Key
For
Array
Contents
get
Class
Hierarchy
get
Pointer
Keys
get
Class
Hierarchy
make
Pointer
Analysis
register
Fixed
Set
update
Side
Effects
find
Or
Create
Sparse
Set
For
Class
clone
Instance
Keys
For
Class
get
Instance
Keys
For
Class
get
Instance
Key
get
Instance
Index
get
Instances
initialize
Variables
record
Implicit
Points
To
Set
find
Or
Create
Points
To
Set
find
Or
Create
Index
For
Instance
Key
new
Constraint
new
Constraint
new
Constraint
new
Field
Write
new
Field
Read
new
Constraint
register
Instance
Of
Class
register
Multi
Dim
Arrays
For
Array
Of
Object
Types
register
Array
Instance
With
All
Interfaces
Of
Element
make
Array
register
Array
Instance
With
All
Superclasses
Of
Element
register
Instance
With
All
Interfaces
register
Instance
With
All
Superclasses
new
Side
Effect
new
Side
Effect
new
Side
Effect
initialize
Work
List
extract
Pointer
Analysis
perform
Verbose
Action
print
RHS
Instances
get
Fixed
Point
System
iterate
Pointer
Keys
get
Number
Of
Pointer
Keys
get
Worklist
get
Statements
That
Use
get
Statements
That
Def
get
Assignment
Graph
get
Filter
Asssignment
Graph
get
Flow
Graph
Including
Implicit
Constraints
revert
To
Pre
Transitive
get
Transitive
Roots
is
Transitive
Root
periodic
Maintenance
get
Verbose
Interval
set
Verbose
Interval
get
Periodic
Maintain
Interval
set
Periodic
Maintain
Interval
unify
update
Side
Effects
For
Unification
update
Equations
For
Unification
replace
RHS
replace
LHS
is
Unified
is
Implicit
get
Number
make
Stmt
RHS
iterate
Pointer
Keys
get
Class
Hierarchy
equals
hash
Code
get
Instance
Key
For
Allocation
get
Instance
Key
For
Multi
New
Array
get
Instance
Key
For
Constant
get
Instance
Key
For
PEI
get
Instance
Key
For
Metadata
Object
evaluate
evaluate
get
Fixed
Set
equals
hash
Code
is
Load
Operator
replace
Fixed
Set
is
Complex
make
hash
Code
equals
get
Concrete
Type
to
String
get
Creation
Sites
get
Instance
Key
get
Callee
Target
get
to
String
hash
Code
equals
get
Relevant
Parameters
get
Pointer
Key
For
Local
get
Filtered
Pointer
Key
For
Local
get
Pointer
Key
For
Return
Value
get
Pointer
Key
For
Exceptional
Return
Value
get
Pointer
Key
For
Static
Field
get
Pointer
Key
For
Instance
Field
get
Pointer
Key
For
Array
Contents
get
Pointer
Key
equals
cry
If
Too
Big
add
add
All
check
Types
add
All
set
Pointer
Key
to
String
to
String
equals
hash
Code
get
Type
Filter
equals
hash
Code
to
String
get
Type
Filter
compare
Primitives
compare
Concrete
Types
compare
Instance
Keys
compare
Fields
compare
Local
Key
compare
Return
Value
Key
compare
Exception
Key
compare
Field
Key
compare
Static
Key
compare
Array
Key
compare
compare
Other
Keys
equals
hash
Code
to
String
to
String
iterate
Keys
get
Points
To
Set
get
Points
To
Set
record
Implicit
put
find
Or
Create
Index
record
Unified
record
Transitive
Root
is
Transitive
Root
is
Unified
is
Implicit
get
Number
Of
Pointer
Keys
revert
To
Pre
Transitive
get
Transitive
Roots
unify
unify
upgrade
Type
Filter
upgrade
To
Filter
get
Index
get
Representative
get
Callee
Target
get
Relevant
Parameters
get
CFA
Context
Interpreter
get
Instance
Key
For
PEI
add
Constraints
From
Node
unconditionally
Add
Constraints
From
Node
make
Visitor
add
Node
Instruction
Constraints
add
Node
Value
Constraints
add
Block
Instruction
Constraints
add
Phi
Constraints
add
Node
Passthru
Exception
Constraints
add
Exception
Def
Constraints
has
Unique
Catch
Block
get
Unique
Catch
Key
get
Incoming
PE
Is
rec
get
Param
Objects
get
Builder
get
Options
get
Analysis
Cache
get
Pointer
Key
For
Local
get
Filtered
Pointer
Key
For
Local
get
Pointer
Key
For
Return
Value
get
Pointer
Key
For
Exceptional
Return
Value
get
Pointer
Key
For
Static
Field
get
Pointer
Key
For
Instance
Field
get
Pointer
Key
For
Array
Contents
get
Instance
Key
For
Allocation
get
Instance
Key
For
Multi
New
Array
get
Instance
Key
For
Constant
get
Instance
Key
For
PEI
get
Instance
Key
For
Class
Object
get
Target
For
Call
contents
Are
Invariant
contents
Are
Invariant
get
Invariant
Contents
get
Invariant
Contents
get
Class
Hierarchy
has
No
Interesting
Uses
is
Root
Type
visit
Array
Load
do
Visit
Array
Load
do
Visit
Array
Store
visit
Array
Store
visit
Check
Cast
visit
Return
visit
Get
visit
Get
Internal
visit
Put
visit
Put
Internal
process
Put
Field
process
Put
Static
visit
Invoke
visit
Invoke
Internal
act
visit
New
visit
Throw
visit
Get
Caught
Exception
boolean
Constant
Test
null
Constant
Test
visit
Phi
visit
Pi
add
Pi
Assignment
get
Basic
Block
set
Basic
Block
compute
Invariant
Parameters
compute
Invariant
Parameters
visit
Load
Metadata
process
Finalize
Method
make
Parameter
Types
process
Class
Initializer
process
Resolved
Call
process
Calling
Constraints
cpa
get
Param
Objects
evaluate
handle
All
Receivers
no
Const
Params
to
String
hash
Code
equals
is
Complex
iterate
Cross
Product
get
Targets
For
Call
get
Relevant
Parameters
has
No
Interesting
Uses
make
Interesting
Visitor
visit
Array
Load
visit
Array
Store
visit
Check
Cast
visit
Get
visit
Get
Caught
Exception
visit
Invoke
visit
Phi
visit
Pi
visit
Put
visit
Return
visit
Throw
needs
Filter
For
Receiver
is
Root
Type
is
Root
Type
get
Target
Pointer
Key
get
Receiver
Class
contents
Are
Invariant
contents
Are
Invariant
get
Invariant
Contents
get
Invariant
Contents
is
Constant
Ref
get
Msg
create
get
Msg
create
iterate
Pointer
Keys
get
Caught
Exception
Types
get
Instance
Key
For
PEI
make
Solver
get
Concrete
Type
get
Creation
Sites
get
Instance
Key
For
Allocation
get
Instance
Key
For
Multi
New
Array
get
Instance
Key
For
Constant
get
Instance
Key
For
PEI
get
Instance
Key
For
Metadata
Object
iterate
New
Sites
iterate
Fields
Read
iterate
Fields
Written
record
Factory
Type
make
Instance
Keys
make
get
Points
To
Set
compute
Ordinal
Instance
Set
to
Ordinal
Instance
Key
Set
infer
Type
get
Heap
Model
get
Pointer
Keys
is
Filtered
get
Class
Hierarchy
get
RTA
Context
Interpreter
add
Constraints
From
Node
add
New
Constraints
add
Call
Constraints
add
Field
Constraints
process
Field
Access
process
Class
Initializer
visit
Invoke
make
Dispatch
Operator
get
Key
For
Site
process
Resolved
Call
visit
New
update
Sets
For
New
Class
custom
Init
get
Allocated
Types
make
Solver
make
Context
Selector
make
Context
Interpreter
unconditionally
Add
Constraints
From
Node
create
Empty
Call
Graph
make
System
get
Pointer
Analysis
get
Analysis
Cache
iterate
New
Sites
iterate
Fields
Read
iterate
Fields
Written
record
Factory
Type
understands
iterate
New
Sites
iterate
Call
Sites
iterate
Fields
Read
iterate
Fields
Written
record
Factory
Type
to
String
get
All
Target
Numbers
get
Possible
Targets
get
Possible
Target
Numbers
has
Target
get
Number
Of
Targets
delegate
make
Node
add
Edge
remove
All
Incident
Edges
remove
Incoming
Edges
remove
Outgoing
Edges
has
Edge
get
Pred
Node
Count
get
Pred
Node
Numbers
make
Edge
Manger
init
All
P
Keys
init
P
Keys
For
Node
compute
Pointer
Keys
compute
Pointer
Keys
iterate
Pointer
Keys
get
Class
Hierarchy
get
Instance
Key
For
Allocation
get
Instance
Key
For
Multi
New
Array
get
Instance
Key
For
Constant
get
String
Constant
For
Instance
Key
get
Instance
Key
For
PEI
get
Instance
Key
For
Metadata
Object
get
Pointer
Key
For
Local
get
Filtered
Pointer
Key
For
Local
get
Pointer
Key
For
Return
Value
get
Pointer
Key
For
Exceptional
Return
Value
get
Pointer
Key
For
Static
Field
get
Pointer
Key
For
Instance
Field
get
Pointer
Key
For
Array
Contents
get
I
Key
Factory
get
Node
get
Site
get
Selector
update
Sets
For
New
Class
register
Implemented
Methods
get
Key
For
Site
get
Key
For
Selector
evaluate
to
String
hash
Code
equals
make
Dispatch
Operator
get
Node
Interpreter
iterate
New
Sites
iterate
Call
Sites
iterate
Fields
Read
iterate
Fields
Written
understands
record
Factory
Type
hash
Code
equals
to
String
get
Type
Filter
get
Type
Filter
equals
hash
Code
my
Element
Type
equals
hash
Code
to
String
get
Dim
equals
hash
Code
to
String
get
Field
equals
hash
Code
to
String
get
Creation
Sites
get
Callee
Target
dispatch
Index
get
Relevant
Parameters
get
Instance
Key
make
Equation
evaluate
to
String
hash
Code
equals
is
Complex
get
to
String
hash
Code
equals
get
Receiver
make
Map
to
String
get
hash
Code
equals
get
Operator
equals
solve
get
Builder
get
Reflection
Handler
get
System
equals
hash
Code
to
String
get
Concrete
Type
get
Value
get
Creation
Sites
get
Points
To
Set
get
Heap
Model
get
Heap
Graph
get
Instance
Key
Mapping
get
Pointer
Keys
get
Instance
Keys
is
Filtered
get
Class
Hierarchy
find
Main
Method
find
Method
find
Method
create
Call
Graph
Builder
Cancel
Exception
create
Call
Graph
Builder
Cancel
Exception
get
Partial
Call
Graph
get
Partial
Pointer
Analysis
get
is
A
get
Statements
make
IR
add
Local
add
Invocation
add
Return
add
Allocation
add1D
Array
Allocation
add
Allocation
Without
Ctor
add
Allocation
get
Value
Number
For
Int
Constant
get
Value
Number
For
Byte
Constant
get
Value
Number
For
Char
Constant
get
Msg
create
add
Phi
add
Get
Instance
add
Get
Static
add
Checkcast
add
Set
Instance
add
Set
Static
add
Set
Array
Field
add
Get
Array
Field
get
Interpreter
iterate
New
Sites
get
Invoke
Statements
iterate
Call
Sites
has
Next
next
remove
understands
record
Factory
Type
iterate
Fields
Read
iterate
Fields
Written
init
make
Fake
Root
Node
make
Fake
World
Clinit
Node
find
Or
Create
Node
register
Node
find
Or
Create
Mr2Nodes
get
Node
get
Fake
Root
Node
get
Fake
World
Clinit
Node
register
Entrypoint
get
Entrypoint
Nodes
get
Method
equals
hash
Code
to
String
get
Context
get
Class
Hierarchy
to
String
node
To
String
remove
Node
And
Edges
get
Node
hash
Code
equals
to
String
get
Nodes
get
Interpreter
get
Number
Of
Nodes
iterator
contains
Node
set
Interpreter
get
Node
Manager
summarize
By
Package
get
Allocated
Target
get
Pred
Node
Numbers
get
Pred
Nodes
get
Pred
Node
Count
get
Callee
Target
might
Return
Synthetic
Method
make
Node
make
Fake
Root
Node
make
Fake
World
Clinit
Node
find
Or
Create
Node
get
Possible
Targets
get
Possible
Target
Numbers
get
Possible
Sites
get
Number
Of
Targets
add
Target
add
Target
remove
Target
equals
hash
Code
get
All
Target
Numbers
clear
All
Targets
get
IR
get
DU
get
Call
Graph
iterate
Call
Sites
iterate
New
Sites
get
CFG
get
Class
Hierarchy
get
Succ
Node
Numbers
get
Succ
Nodes
get
Succ
Node
Count
add
Edge
remove
Edge
add
Edge
remove
All
Incident
Edges
remove
Incoming
Edges
remove
Outgoing
Edges
has
Edge
get
Edge
Manager
make
Edge
Manger
get
Number
Of
Targets
get
Possible
Sites
get
Possible
Targets
get
Possible
Target
Numbers
get
Analysis
Cache
get
Callee
Target
get
Relevant
Parameters
to
String
get
Callee
Target
get
Relevant
Parameters
to
String
get
to
String
hash
Code
equals
make
make
get
Fake
Root
Node
get
Fake
World
Clinit
Node
get
Entrypoint
Nodes
get
Node
get
Nodes
get
Class
Hierarchy
iterate
Nodes
get
Max
Number
get
Node
get
Number
get
Succ
Node
Numbers
get
Pred
Node
Numbers
get
Number
Of
Targets
get
Possible
Sites
get
Possible
Targets
get
Callee
Target
get
Relevant
Parameters
fake
Root
Class
get
Class
Loader
add
Method
add
Static
Field
get
Class
Hierarchy
get
Field
Type
Reference
get
Declaring
Class
get
Name
is
Static
is
Volatile
get
Reference
is
Final
is
Private
is
Protected
is
Public
get
Annotations
get
Modifiers
get
Superclass
get
All
Implemented
Interfaces
get
All
Ancestor
Interfaces
get
Method
get
Field
get
Class
Initializer
get
Declared
Methods
get
Declared
Instance
Fields
get
Declared
Static
Fields
is
Reference
Type
get
Direct
Interfaces
get
All
Instance
Fields
get
All
Static
Fields
get
All
Methods
get
All
Fields
is
Public
is
Private
get
Source
iterator
get
Callee
Target
get
Relevant
Parameters
set
Native
Spec
get
Native
Spec
add
Default
Selectors
add
Bypass
Logic
add
Bypass
Logic
add
Bypass
Logic
add
Bypass
Logic
make
Main
Entrypoints
make
Main
Entrypoints
make
Main
Entrypoints
make
Main
Entrypoints
make
Main
Entrypoints
make
Main
Entrypoints
make
Main
Entrypoints
make
Main
Entrypoints
remove
has
Next
next
setify
check
Graph
Subset
make
RTA
Builder
make
RTA
Builder
make
Zero
CFA
Builder
make
Zero
CFA
Builder
make
Zero
CFA
Builder
make
Zero
CFA
Builder
make
Zero
One
CFA
Builder
make
Zero
One
CFA
Builder
make
Vanilla
Zero
One
CFA
Builder
make
Vanilla
Zero
One
CFA
Builder
make
Vanilla
Zero
One
CFA
Builder
make
Vanilla
Zero
One
CFA
Builder
make
Zero
One
CFA
Builder
make
Zero
One
CFA
Builder
make
Zero
Container
CFA
Builder
make
Zero
Container
CFA
Builder
make
Zero
One
Container
CFA
Builder
make
Zero
One
Container
CFA
Builder
make
Zero
One
Container
CFA
Builder
make
Zero
One
Container
CFA
Builder
make
NCFA
Builder
make
NCFA
Builder
make
N
Obj
Builder
make
N
Obj
Builder
make
Vanilla
N
Obj
Builder
make
Vanilla
N
Obj
Builder
make
Vanilla
NCFA
Builder
make
Vanilla
NCFA
Builder
make
Vanilla
Zero
One
Container
CFA
Builder
make
Vanilla
Zero
One
Container
CFA
Builder
add
Default
Bypass
Logic
add
Default
Bypass
Logic
is
Fake
Root
Method
is
From
Fake
Root
make
Parameter
Types
make
Parameter
Types
get
Parameter
Types
set
Parameter
Types
get
Number
Of
Parameters
get
Cha
hash
Code
equals
make
Parameter
Types
choose
An
Implementor
choose
A
Concrete
Sub
Class
get
Parameter
Types
get
Number
Of
Parameters
make
Parameter
Types
make
Parameter
Types
get
Method
get
Context
add
Target
get
IR
get
DU
iterate
New
Sites
iterate
Call
Sites
make
Call
Graph
get
Pointer
Analysis
get
Analysis
Cache
get
Class
Hierarchy
get
Value
make
hash
Code
equals
get
Concrete
Class
From
Context
to
String
check
remove
Node
And
Edges
iterator
stream
get
Number
Of
Nodes
add
Node
remove
Node
contains
Node
removed
Edge
get
Pred
Nodes
get
Pred
Node
Count
get
Succ
Nodes
get
Succ
Node
Count
add
Edge
remove
Edge
remove
All
Incident
Edges
remove
Incoming
Edges
remove
Outgoing
Edges
has
Edge
get
Number
get
Node
get
Max
Number
iterate
Nodes
get
Succ
Node
Numbers
get
Pred
Node
Numbers
get
Fake
Root
Node
get
Fake
World
Clinit
Node
get
Entrypoint
Nodes
get
Node
get
Nodes
get
Class
Hierarchy
get
Possible
Targets
get
Number
Of
Targets
get
Possible
Sites
check
find
Application
Nodes
find
Application
Nodes
find
Nodes
dfs
add
Depth
check
to
Analysis
Scope
to
String
get
Mods
get
Refs
compute
get
Mod
get
Ref
get
Transitive
Mod
get
Transitive
Ref
run
rec
Add
equals
hash
Code
to
String
get
Class
Hierarchy
get
Filtered
Pointer
Key
For
Local
get
Instance
Key
For
Allocation
get
Instance
Key
For
Metadata
Object
get
Instance
Key
For
Constant
get
Instance
Key
For
Multi
New
Array
get
Instance
Key
For
PEI
get
Pointer
Key
For
Array
Contents
get
Pointer
Key
For
Exceptional
Return
Value
get
Pointer
Key
For
Instance
Field
get
Pointer
Key
For
Local
get
Pointer
Key
For
Return
Value
get
Pointer
Key
For
Static
Field
iterate
Pointer
Keys
get
Pointer
Key
For
Array
Length
make
Domain
get
Meet
Operator
get
Node
Transfer
Function
get
Gen
has
Edge
Transfer
Functions
has
Node
Transfer
Functions
get
Edge
Transfer
Function
make
compute
Mod
compute
Ref
compute
Mod
compute
Ref
scan
For
Mod
scan
For
Ref
make
Heap
Model
scan
Node
For
Mod
scan
Node
For
Ref
visit
Array
Length
visit
Array
Load
visit
Get
visit
New
visit
Array
Store
visit
Put
make
Mod
Visitor
make
Mod
Visitor
get
Mod
get
Mod
make
Ref
Visitor
get
Ref
get
Pointer
Key
For
Array
Length
get
Root
Of
Inheritance
Tree
get
Overriden
compute
Superclasses
add
All
Classes
add
Class
get
Msg
get
Phantom
Superclass
record
Implements
get
Possible
Targets
find
Or
Create
Target
Set
get
Possible
Targets
compute
Targets
Not
Interface
resolve
Method
resolve
Field
resolve
Field
resolve
Method
find
Method
compute
Overriders
find
Node
find
Or
Create
Node
to
String
recursive
Stringify
number
Tree
visit
For
Numbering
is
Interface
get
Java
Class
add
Child
get
Children
to
String
hash
Code
equals
get
Factory
get
Least
Common
Superclass
get
Superclasses
get
Least
Common
Superclass
lookup
Class
lookup
Class
Recursive
slow
Is
Subclass
is
Subclass
Of
implements
Interface
compute
Sub
Classes
get
Java
Lang
Error
Types
get
Java
Lang
Runtime
Exception
Types
compute
Sub
Classes
Internal
is
Interface
get
Implementors
iterator
get
Number
Of
Classes
get
Loaders
get
Loader
get
Scope
get
Number
Of
Immediate
Subclasses
get
Immediate
Subclasses
get
Immediate
Array
Subclasses
get
Innermost
Type
Of
Array
Class
get
Root
Class
is
Root
Class
get
Number
get
Msg
create
is
Assignable
From
get
Unresolved
Classes
get
Super
Class
Handling
make
make
With
Phantom
make
With
Root
make
make
make
make
With
Phantom
make
With
Root
make
make
make
make
get
Factory
get
Scope
get
Loaders
get
Loader
add
Class
get
Number
Of
Classes
is
Root
Class
get
Root
Class
get
Number
get
Unresolved
Classes
get
Possible
Targets
get
Possible
Targets
resolve
Method
resolve
Field
resolve
Field
resolve
Method
lookup
Class
is
Interface
get
Least
Common
Superclass
get
Least
Common
Superclass
is
Subclass
Of
implements
Interface
compute
Sub
Classes
get
Java
Lang
Error
Types
get
Java
Lang
Runtime
Exception
Types
get
Implementors
get
Number
Of
Immediate
Subclasses
get
Immediate
Subclasses
is
Assignable
From
get
Class
Hierarchy
get
Msg
create
make
make
make
make
make
make
make
print
Stats
make
get
Exceptional
Successors
get
Normal
Successors
get
Exceptional
Predecessors
get
Normal
Predecessors
get
Succ
Nodes
get
Succ
Node
Count
get
Succ
Node
Numbers
get
Pred
Nodes
get
Pred
Node
Count
get
Pred
Node
Numbers
has
Edge
add
Edge
remove
Edge
remove
All
Incident
Edges
remove
Incoming
Edges
remove
Outgoing
Edges
get
Number
get
Node
get
Max
Number
filter
Nodes
iterate
Nodes
iterator
stream
get
Number
Of
Nodes
add
Node
remove
Node
contains
Node
get
Node
Manager
get
Edge
Manager
get
Node
Manager
get
Edge
Manager
get
Exceptional
Successors
get
Normal
Successors
get
Exceptional
Predecessors
get
Normal
Predecessors
entry
exit
get
Block
For
Instruction
get
Instructions
get
Program
Counter
get
Method
get
Catch
Blocks
get
Phi
Indices
get
Exception
is
Subclass
Filtered
is
Filtered
retained
Exceptions
compute
Retained
Exceptions
are
All
Exceptions
Ignored
fill
Ignore
free
is
Filtered
get
Retained
Exceptions
compute
Filter
get
Filter
add
add
All
get
Filter
compute
Filter
get
Filter
get
Filter
compute
Filter
has
Exceptional
Edge
has
Normal
Edge
we
Know
All
Exceptions
always
Throws
Exception
filtered
Exceptions
add
All
always
Throws
Exception
filtered
Exceptions
add
add
All
always
Throws
Exception
filtered
Exceptions
always
Throws
Exception
filtered
Exceptions
always
Throws
Exception
filtered
Exceptions
always
Throws
Exception
filtered
Exceptions
make
get
CFG
node
String
call
Graph
Updated
get
CFG
add
Intraprocedural
Nodes
And
Edges
For
CG
Node
If
Needed
add
Edges
To
Non
Entry
Block
get
Last
Instruction
For
Block
add
Edges
From
Exit
To
Return
add
Edges
From
Call
To
Entry
add
Interprocedural
Edges
For
Entry
And
Exit
Blocks
add
Entry
And
Exit
Edges
To
Caller
add
Node
For
Each
Basic
Block
add
Node
For
Basic
Block
If
Needed
get
CFG
get
CG
Node
remove
Node
And
Edges
iterator
stream
get
Number
Of
Nodes
construct
Full
Graph
add
Edges
To
Callees
add
Callee
Edges
For
Return
add
Callee
Edges
For
Call
add
Caller
Edges
add
Node
remove
Node
get
Pred
Nodes
init
For
Pred
init
For
Succ
get
Pred
Node
Count
get
Succ
Nodes
get
Succ
Node
Count
add
Edge
remove
Edge
remove
All
Incident
Edges
to
String
contains
Node
has
Call
has
Call
get
Call
Targets
get
Call
Targets
get
Call
Site
For
Call
Block
remove
Incoming
Edges
remove
Outgoing
Edges
has
Edge
get
Number
get
Node
get
Max
Number
iterate
Nodes
get
Succ
Node
Numbers
get
Pred
Node
Numbers
get
Entry
get
Exit
get
Return
Sites
get
Call
Sites
is
Return
get
Call
Graph
has
Normal
Edge
has
Exceptional
Edge
get
CFG
has
Normal
Edge
has
Exceptional
Edge
make
get
First
Instruction
Index
get
Last
Instruction
Index
iterator
get
Method
get
Number
is
Catch
Block
is
Entry
Block
is
Exit
Block
hash
Code
equals
get
Delegate
get
Node
to
String
get
Caught
Exception
Types
get
Last
Instruction
iterate
Phis
iterate
Pis
parse
For
Class
Bound
parse
For
Interface
Bounds
parse
For
Id
make
get
Class
Bound
get
Identifier
formal
Type
Parameter
Ends
parse
For
Formal
Type
Parameters
get
Interface
Bounds
get
Type
Parameters
get
Type
Parameters
is
Class
Type
Signature
is
Type
Variable
make
is
Array
Type
Signature
get
Contents
is
Base
Type
is
Class
Type
Signature
is
Type
Variable
get
Type
is
Array
Type
Signature
is
Base
Type
is
Wildcard
to
String
is
Wildcard
make
make
Type
Argument
parse
For
Type
Arguments
get
Field
Type
Signature
to
String
make
is
Type
Variable
is
Class
Type
Signature
is
Array
Type
Signature
is
Base
Type
parse
For
Type
Signatures
make
is
Class
Type
Signature
is
Type
Variable
is
Array
Type
Signature
get
Identifier
is
Base
Type
get
Type
Variable
Position
make
get
Arguments
get
Return
Type
get
Formal
Type
Parameters
end
Of
Formal
Type
Parameters
get
Arguments
get
Method
Type
Signature
make
Class
Type
Sig
is
Type
Variable
is
Class
Type
Signature
is
Array
Type
Signature
get
Raw
Name
get
Type
Arguments
end
Of
Type
Arguments
is
Base
Type
lookup
Class
to
String
hash
Code
equals
raw
String
make
get
Formal
Type
Parameters
get
Superclass
Signature
end
Of
Class
Type
Sig
get
Superinterface
Signatures
end
Of
Formal
Type
Parameters
get
Class
Signature
find
Or
Create
find
Or
Create
find
Or
Create
find
Or
Create
find
Or
Create
Class
find
Or
Create
equals
hash
Code
to
String
to
Unicode
String
string2Type
Name
find
Or
Create
Class
Name
parse
For
Array
Element
Name
get
Derived
Type
For
Element
Type
get
Array
Type
For
Element
Type
get
Pointer
Type
For
Element
Type
get
Reference
Type
For
Element
Type
get
Derived
Mask
is
Class
Type
is
Array
Type
is
Primitive
Type
get
Innermost
Element
Type
equals
hash
Code
to
String
to
String
Prefix
to
Unicode
String
get
Package
get
Class
Name
make
Primitive
make
Primitive
is
Primitive
Type
find
Or
Create
find
Or
Create
find
find
find
Or
Create
Array
Of
find
Or
Create
Reference
To
find
Or
Create
Pointer
To
get
Class
Loader
get
Name
get
Array
Element
Type
get
Array
Type
For
Element
Type
get
Derived
Mask
get
Innermost
Element
Type
is
Class
Type
is
Array
Type
is
Primitive
Type
is
Reference
Type
hash
Code
equals
to
String
find
Or
Create
Class
hash
Code
equals
get
Dimensionality
make
Unnamed
And
Named
make
With
Unnamed
make
make
With
Named
get
Annotations
From
Reader
get
Parameter
Annotations
From
Reader
convert
To
Annotations
to
String
hash
Code
equals
get
Unnamed
Arguments
get
Named
Arguments
get
Type
has
Annotation
has
Annotation
has
Annotation
to
String
hash
Code
equals
get
Type
Annotations
From
Reader
make
make
get
Index
to
String
hash
Code
equals
get
Super
Type
to
String
hash
Code
equals
to
String
get
Parameter
Index
get
Bound
Index
hash
Code
equals
to
String
hash
Code
equals
get
Index
to
String
hash
Code
equals
get
Throw
Type
to
String
hash
Code
equals
to
String
get
Index
get
Name
hash
Code
equals
get
Catch
Type
get
Catch
I
Index
to
String
hash
Code
equals
get
I
Index
to
String
hash
Code
equals
get
Offset
get
Type
Argument
Index
to
String
hash
Code
equals
from
String
may
Appear
In
target
Converter
At
Code
visit
Type
Parameter
Target
visit
Super
Type
Target
visit
Type
Parameter
Bound
Target
visit
Empty
Target
visit
Formal
Parameter
Target
visit
Throws
Target
visit
Local
Var
Target
visit
Catch
Target
visit
Offset
Target
visit
Type
Argument
Target
target
Converter
At
Method
Info
visit
Type
Parameter
Target
visit
Super
Type
Target
visit
Type
Parameter
Bound
Target
visit
Empty
Target
visit
Formal
Parameter
Target
visit
Throws
Target
visit
Local
Var
Target
visit
Catch
Target
visit
Offset
Target
visit
Type
Argument
Target
target
Converter
At
Class
File
visit
Type
Parameter
Target
visit
Super
Type
Target
visit
Type
Parameter
Bound
Target
visit
Empty
Target
visit
Formal
Parameter
Target
visit
Throws
Target
visit
Local
Var
Target
visit
Catch
Target
visit
Offset
Target
visit
Type
Argument
Target
target
Converter
At
Field
Info
visit
Type
Parameter
Target
visit
Super
Type
Target
visit
Type
Parameter
Bound
Target
visit
Empty
Target
visit
Formal
Parameter
Target
visit
Throws
Target
visit
Local
Var
Target
visit
Catch
Target
visit
Offset
Target
visit
Type
Argument
Target
get
Annotation
get
Type
Path
get
Type
Annotation
Target
get
Target
Type
get
Signature
find
Or
Create
find
Or
Create
get
Field
Type
to
String
hash
Code
equals
get
Name
get
Signature
hash
Code
equals
get
Declaring
Class
get
Name
get
Language
get
Parent
equals
hash
Code
to
String
find
Or
Create
find
Or
Create
find
Or
Create
find
Or
Create
UTF8
find
Or
Create
UTF8
equals
hash
Code
to
String
to
Unicode
String
get
Return
Type
get
Parameters
get
Number
Of
Parameters
hash
Code
compute
Hash
Code
equals
to
String
to
Unicode
String
append
Semicolon
If
Needed
make
make
equals
hash
Code
to
String
get
Descriptor
get
Name
find
Or
Create
find
Or
Create
find
Or
Create
find
Or
Create
find
Or
Create
find
Or
Create
get
Descriptor
to
String
get
Return
Type
get
Parameter
Type
is
Init
get
Signature
get
Selector
get
Number
Of
Parameters
hash
Code
equals
create
Entrypoints
get
Call
Graph
Builder
build
Call
Graph
set
Module
Files
build
Analysis
Scope
build
Class
Hierarchy
make
Class
Loader
Factory
get
Class
Hierarchy
set
Class
Hierarchy
get
Call
Graph
add
Application
Modules
To
Scope
set
J2SE
Libraries
set
J2SE
Libraries
set
Closed
World
is
Closed
World
get
Scope
get
Pointer
Analysis
get
Heap
Graph
get
SDG
get
Exclusions
File
set
Exclusions
File
get
Default
Options
make
Default
Cache
make
Default
Entrypoints
set
Entrypoint
Builder
default
Call
Graph
Builder
build
Default
Call
Graph
get
Cache
get
Options
perform
Analysis
get
Number
Of
Categories
get
Category
Names
report
start
stop
get
Timer
report
start
stop
get
Timer
set
Module
Files
set
J2SE
Libraries
set
J2SE
Libraries
set
Closed
World
get
Default
Options
current
Thread
arraycopy
get
get
Object
make
Analysis
Options
make
J2SE
Analysis
Scope
make
J2SE
Analysis
Scope
build
RTA
build
Zero
CFA
build
Vanilla
Zero
One
CFA
build
Zero
One
CFA
build
Zero
Container
CFA
build
Zero
One
Container
CFA
build
NCFA
set
Scope
Reader
read
Java
Scope
read
read
process
Scope
Def
Line
handle
In
Subclass
make
Primordial
Scope
make
Base
Primordial
Scope
make
Java
Binary
Analysis
Scope
add
Class
Path
To
Scope
make
put
Narrowing
put
Widening
get
Assignable
From
is
Assignable
From
get
Msg
moderate
severe
make
Type
Reference
get
read
Bytes
get
File
Name
clear
get
Module
Entry
register
Class
Hierarchy
get
Class
Hierarchy
register
Cache
get
Analysis
Cache
clear
Soft
Caches
make
get
make
is
Test
Entry
Point
make
One
is
J
Unit
Test
Case
is
J
Unit
Method
get
Set
Up
Tear
Down
Methods
is
Dex
File
is
Dex
File
is
Apk
File
is
Class
File
is
Source
File
is
Jar
File
is
War
File
strip
Suffix
is
Ressource
From
Jar
get
Jar
File
Module
get
Jar
File
Module
get
Resource
get
Resource
get
File
get
File
get
File
From
Class
Loader
get
Input
Stream
From
Class
Loader
get
Jar
File
From
Class
Loader
file
Path
From
URL
begin
Task
start
Nanny
reset
last
Item
Timed
Out
last
Item
Too
Much
Memory
done
kill
Nanny
is
Canceled
set
Canceled
sub
Task
cancel
worked
get
Millis
Per
Work
Item
run
get
Cancel
Message
length
get
substring
concat
to
String
make
from
UTF8
to
UTF8
utf
Length
check
from
UTF8
pad
With
Spaces
deployment2Canonical
Type
String
deployment2Canonical
Descriptor
Type
String
parse
For
Return
Type
Name
parse
For
Return
Type
Name
parse
For
Return
Type
Name
parse
For
Parameter
Names
parse
For
Parameter
Names
parse
For
Parameter
Names
is
Type
Code
Char
parse
For
Package
parse
For
Package
parse
For
Class
parse
For
Class
parse
For
Array
Dimensionality
parse
For
Innermost
Array
Element
Descriptor
parse
For
Innermost
Array
Element
Descriptor
class
Is
Primitive
make
Method
Reference
make
Method
Reference
jvm
To
Readable
Type
jvm
To
Binary
Name
slash
To
Dot
dollar
To
Dot
dot
To
Dollar
to
Basename
find
Or
Create
Unicode
Atom
find
Or
Create
Ascii
Atom
find
Or
Create
Utf8Atom
find
Or
Create
find
Or
Create
find
Or
Create
find
Or
Create
to
String
to
Unicode
String
left
right
starts
With
array
Descriptor
From
Element
Descriptor
is
Reserved
Member
Name
is
Class
Descriptor
is
Array
Descriptor
is
Method
Descriptor
length
parse
For
Array
Element
Descriptor
parse
For
Array
Dimensionality
parse
For
Innermost
Array
Element
Descriptor
equals
to
String
hash
Code
hash
Code
equals
get
Val
Array
get
Val
contains
r
Index
concat
concat
concat
is
Array
Descriptor
read
Resolve
make
add
clear
as
String
iterator
compare
To
equals
hash
Code
to
String
severity
String
get
Level
get
Msg
set
Level
method
declaring
Class
length
index
reset
reset
has
More
Bytecodes
peek
Next
Opcode
next
Instruction
get
Opcode
is
Wide
skip
Instruction
skip
Instruction
get
Byte
Value
get
Short
Value
get
Local
Number
get
Wide
Local
Number
get
Increment
get
Wide
Increment
get
Branch
Offset
get
Wide
Branch
Offset
align
Switch
get
Default
Switch
Offset
get
Low
Switch
Value
get
High
Switch
Value
skip
Table
Switch
Offsets
get
Table
Switch
Offset
compute
Table
Switch
Offset
get
Switch
Length
skip
Lookup
Switch
Pairs
get
Lookup
Switch
Offset
get
Lookup
Switch
Value
compute
Lookup
Switch
Offset
align
Invoke
Interface
get
Array
Element
Type
get
Array
Dimension
get
Wide
Opcode
get
Constant
Index
get
Wide
Constant
Index
skip
Special
Instruction
read
Signed
Byte
read
Unsigned
Byte
get
Unsigned
Byte
read
Signed
Short
read
Unsigned
Short
read
Signed
Int
get
Signed
Int
create
Instance
equals
hash
Code
to
String
get
Number
In
Descriptor
get
Disposition
equals
hash
Code
to
String
get
Parameter
get
Parameter
No
get
Parameter
No
all
get
This
get
This
As
get
This
No
has
Implicit
This
make
Return
make
Return
first
In
Selector
get
Parameter
Type
first
Of
first
Of
all
Extend
all
Extend
first
Extends
first
Extends
get
First
After
for
Invoke
Static
for
Invoke
Static
for
Invoke
Virtual
for
Invoke
Virtual
connect
Through
is
Assignable
is
Subclass
Of
for
Method
is
Assignable
for
Invoke
Static
for
Invoke
Virtual
has
Return
connect
Through
get
Return
Type
get
Number
Of
Parameters
dump
to
String
debug
info
warn
trace
error
hash
Code
equals
get
Instruction
Invoke
Instruction
Invoke
Instruction
Return
Instruction
Get
Instruction
Get
Instruction
Put
Instruction
Put
Instruction
New
Instruction
New
Instruction
Phi
Instruction
is
Superclass
Of
is
Assignable
From
Return
Instruction
Goto
Instruction
Conditional
Branch
Instruction
Array
Load
Instruction
Array
Store
Instruction
info
equals
hash
Code
to
String
equals
hash
Code
to
String
equals
hash
Code
to
String
get
Number
get
Type
is
Assigned
set
Assigned
get
Valid
In
get
Variable
Name
to
String
equals
hash
Code
to
String
set
Allocation
set
Phi
get
Free
get
Unallocated
get
Unmanaged
get
Unmanaged
get
Current
get
Super
get
All
For
Phi
is
Seen
is
Seen
needs
Allocation
needs
Phi
invalidate
scope
Down
scope
Up
to
String
get
Exception
make
Local
Names
debug
info
size
is
Empty
contains
Key
contains
Value
get
put
remove
put
All
clear
key
Set
values
entry
Set
value
Changed
build
Tree
tree
Expanded
tree
Collapsed
expand
Node
expand
Node
value
Changed
value
Changed
set
IR
parse
Ir
Line
add
Selected
Pc
Listner
set
Pc
set
IR
And
Pc
remove
Selection
get
Component
set
IR
And
Pc
set
IR
set
Source
set
Source
load
Source
remove
Selection
remove
Source
init
tree
Expanded
tree
Collapsed
value
Changed
init
Data
Structures
get
Root
Nodes
expand
Node
Rec
get
Children
For
get
Pointer
Keys
Under
Instance
Key
map
Using
Mutable
Mapping
non
Null
List
get
Tree
Cell
Renderer
Component
get
Tree
Cell
Renderer
create
Image
Icon
value
Changed
build
Tree
tree
Expanded
tree
Collapsed
expand
Node
expand
Node
create
Pa
Panel
set
Native
Look
And
Feel
window
Closing
ghostview
IR
ghostview
IR
make
IR
Decorator
get
Label
get
Node
Label
launch
PDF
View
main
handle
In
Subclass
to
String
rec
to
String
get
Name
is
Class
File
is
Source
File
get
Input
Stream
is
Module
File
as
Module
get
Class
Name
get
Container
get
Entries
get
Bytecode
Index
get
Instruction
Index
get
Handlers
get
Instructions
get
Call
Sites
get
Fields
Read
get
Fields
Written
get
Arrays
Written
get
New
Sites
get
Indirection
Data
get
Parameter
Annotations
get
Annotations
is
Class
File
get
Class
Name
is
Source
File
get
Field
Type
Reference
get
Reference
is
Final
is
Private
is
Protected
is
Public
is
Static
is
Volatile
get
Nested
Contents
to
String
hash
Code
equals
get
Entries
get
Class
Loader
is
Interface
is
Abstract
is
Public
is
Private
is
Synthetic
get
Modifiers
get
Superclass
get
Direct
Interfaces
get
All
Implemented
Interfaces
get
Method
get
Field
get
Field
get
Reference
get
Source
File
Name
get
Source
get
Class
Initializer
is
Array
Class
get
Declared
Methods
get
All
Instance
Fields
get
All
Static
Fields
get
All
Fields
get
All
Methods
get
Declared
Instance
Fields
get
Declared
Static
Fields
get
Name
is
Reference
Type
get
Annotations
to
String
is
Class
File
get
Class
Name
is
Source
File
get
Input
Reader
get
URL
make
File
include
File
get
Entries
Recursive
get
Entries
get
Path
to
String
hash
Code
equals
lookup
Class
get
Root
Class
Loader
get
Number
Of
Classes
get
Loader
get
Program
Counter
equals
hash
Code
to
String
is
Class
File
is
Source
File
get
Input
Reader
get
Class
Loader
get
Name
is
Of
Primitives
is
Interface
is
Abstract
get
Modifiers
get
Qualified
Name
For
Reflection
get
Superclass
get
Method
get
Field
get
Field
get
Declared
Methods
get
Number
Of
Declared
Methods
get
Reference
get
Source
File
Name
get
Class
Initializer
is
Array
Class
to
String
get
Element
Class
hash
Code
get
Declared
Instance
Fields
get
Declared
Static
Fields
get
All
Implemented
Interfaces
get
All
Ancestor
Interfaces
is
Reference
Type
get
Dimensionality
get
Array
Type
Dimensionality
get
Innermost
Element
Class
get
Direct
Interfaces
equals
get
All
Instance
Fields
get
All
Static
Fields
get
All
Methods
get
All
Fields
get
Class
Hierarchy
is
Public
is
Private
is
Synthetic
get
Source
get
Annotations
is
Synchronized
is
Clinit
is
Init
is
Native
is
Wala
Synthetic
is
Synthetic
is
Abstract
is
Private
is
Protected
is
Public
is
Final
is
Bridge
get
Reference
has
Exception
Handler
get
Parameter
Type
get
Return
Type
get
Number
Of
Parameters
get
Declared
Exceptions
get
Line
Number
get
First
Line
get
Last
Line
get
First
Col
get
Last
Col
get
First
Offset
get
Last
Offset
get
Source
Position
get
Parameter
Source
Position
get
Local
Variable
Name
get
Signature
get
Selector
get
Descriptor
has
Local
Variable
Table
get
Number
Of
Default
Parameters
is
Annotation
is
Enum
is
Module
is
Clinit
is
Init
is
Static
is
Native
is
Abstract
is
Private
is
Protected
is
Public
is
Final
is
Bridge
is
Synchronized
is
Annotation
is
Enum
is
Module
is
Wala
Synthetic
is
Synthetic
get
Reference
make
Control
Flow
Graph
get
Bytecode
Stream
get
Max
Locals
get
Max
Stack
Height
get
Declaring
Class
to
String
hash
Code
equals
has
Exception
Handler
has
Poison
get
Poison
get
Poison
Level
get
Statements
make
IR
get
Parameter
Type
get
Number
Of
Parameters
get
Declared
Exceptions
get
Name
get
Descriptor
get
Source
Position
get
Parameter
Source
Position
get
Line
Number
is
Factory
Method
get
Signature
get
Selector
get
Local
Variable
Name
has
Local
Variable
Table
get
Statements
get
Return
Type
get
Class
Hierarchy
get
Annotations
get
Nested
Contents
get
Input
Stream
populate
Cache
get
Msg
get
Entry
Size
get
Entries
advance
has
Next
next
remove
get
Name
get
Container
is
Class
File
get
Input
Stream
is
Module
File
as
Module
to
String
get
Class
Name
is
Source
File
hash
Code
equals
get
Outer
Type
hash
Code
equals
get
Invocation
Code
get
Invocation
Code
get
Invocation
Code
get
Invocation
Code
make
get
Declared
Target
get
Invocation
Code
to
String
get
Invocation
String
get
Invocation
String
is
Interface
is
Virtual
is
Special
is
Static
is
Fixed
is
Dispatch
get
Declaring
Class
get
Name
is
Static
get
Annotations
compute
Fields
compute
Modifiers
compute
Super
Name
compute
Interface
Names
compute
Declared
Methods
compute
Type
Reference
equals
get
Reader
clear
Soft
Caches
get
Runtime
Invisible
Annotations
get
Runtime
Visible
Annotations
get
Annotations
get
Annotations
get
Annotations
Reader
get
Type
Annotations
get
Type
Annotations
Reader
get
Reader
get
Reader
get
Inner
Classes
Reader
get
Source
File
Reader
get
Field
Annotations
Reader
get
Runtime
Invisible
Annotations
get
Runtime
Visible
Annotations
get
Field
Annotations
get
Field
Type
Annotations
Reader
get
Runtime
Invisible
Type
Annotations
get
Runtime
Visible
Type
Annotations
get
Field
Type
Annotations
get
Signature
Reader
get
Class
Signature
get
Module
Entry
is
Inner
Class
is
Static
Inner
Class
get
Outer
Class
get
Container
get
Modifiers
is
Public
is
Private
is
Interface
is
Abstract
is
Synthetic
get
Class
Initializer
get
Name
is
Class
File
get
Input
Stream
get
Size
to
String
is
Module
File
as
Module
get
Jar
File
get
Container
hash
Code
get
Class
Name
is
Source
File
equals
get
URL
get
Name
get
Input
Stream
is
Module
File
as
Module
get
Class
Name
get
Entries
get
Container
to
String
get
Call
Sites
get
Fields
Read
get
Fields
Written
get
Arrays
Written
get
New
Sites
has
Object
Array
Load
has
Object
Array
Store
get
Caught
Exceptions
iterate
Cast
Types
iterate
Shrike
BT
Cast
Types
get
Shrike
BT
Caught
Exceptions
has
Shrike
BT
Object
Array
Store
has
Shrike
BT
Object
Array
Load
get
Caught
Exceptions
visit
Get
Caught
Exception
iterate
Cast
Types
get
Call
Sites
visit
Invoke
get
New
Sites
visit
New
get
Fields
Read
visit
Get
get
Fields
Written
visit
Put
get
Arrays
Written
visit
Array
Store
has
Object
Array
Load
visit
Array
Load
has
Object
Array
Store
visit
Array
Store
get
Generic
Signature
get
Declaring
Class
equals
hash
Code
to
String
get
Reference
get
Name
get
Field
Type
Reference
is
Static
is
Final
is
Private
is
Protected
is
Public
is
Volatile
get
Class
Hierarchy
get
Annotations
get
Type
Annotations
get
Name
get
Base
Language
register
Derived
Language
get
Derived
Languages
get
Root
Type
get
Throwable
Type
get
Constant
Type
is
Null
Type
is
Int
Type
is
Long
Type
is
Void
Type
is
Float
Type
is
Double
Type
is
String
Type
is
Metadata
Type
is
Char
Type
is
Boolean
Type
get
Metadata
Token
get
Array
Interfaces
lookup
Primitive
Type
instruction
Factory
infer
Invoke
Exceptions
get
String
Type
get
Pointer
Type
get
Primitive
methods
Have
Declared
Parameter
Types
get
Fake
Root
Method
make
Induced
CFG
model
Constant
make
Ref
Visitor
make
Mod
Visitor
get
Absolute
Path
to
String
create
Entry
get
Entries
has
Next
next
hash
Code
equals
get
Contents
get
Jar
File
get
Bytecodes
get
Method
Name
get
Method
Signature
get
Modifiers
make
Decoder
get
Max
Locals
get
Max
Stack
Height
has
Exception
Handler
get
Declared
Exception
Type
Names
get
First
Col
get
First
Line
get
First
Offset
get
Last
Col
get
Last
Line
get
Last
Offset
compare
To
to
String
process
Debug
Info
get
Local
Variable
Name
has
Local
Variable
Table
get
Class
Reader
get
Reader
get
Code
Reader
get
Exception
Reader
get
Signature
Reader
get
Annotations
Reader
get
Type
Annotations
Reader
At
Method
Info
get
Type
Annotations
Reader
At
Code
compute
Generics
Signature
get
Return
Type
get
Class
Hierarchy
get
Generics
Signature
get
Method
Type
Signature
get
Runtime
Invisible
Annotations
get
Runtime
Visible
Annotations
get
Annotations
get
Type
Annotations
At
Method
Info
get
Type
Annotations
At
Code
get
Annotations
get
Parameter
Annotations
indirectly
Read
Locals
indirectly
Written
Locals
get
Indirection
Data
hash
Code
equals
get
Class
Loader
is
Interface
is
Abstract
is
Synthetic
get
Reference
get
Source
File
Name
get
Source
is
Array
Class
get
Class
Hierarchy
get
Name
get
Field
get
Annotations
get
Nested
Contents
get
Base
Language
get
Derived
Languages
register
Derived
Language
hash
Code
equals
to
String
make
Induced
CFG
model
Constant
get
Input
Stream
populate
Cache
get
Msg
get
Entry
Size
get
Entries
advance
has
Next
next
remove
get
Name
is
Class
File
get
Input
Stream
is
Module
File
as
Module
to
String
get
Class
Name
is
Source
File
hash
Code
equals
get
Outer
Type
get
Container
to
String
hash
Code
equals
make
CFG
make
IR
eliminate
Dead
Phis
prune
Exceptions
For
Safe
Array
Creations
get
Exception
Types
is
Non
Negative
Constant
is
Defd
By
Array
Length
instruction
Position
get
Local
Map
get
Indirection
Data
context
Is
Irrelevant
get
Input
Reader
get
URL
get
Absolute
Path
get
Entries
hash
Code
equals
get
Name
get
Input
Stream
is
Module
File
get
File
as
Module
get
Container
get
BC
Info
get
Bytecode
Index
get
Instruction
Index
is
Sorted
get
Num
Shrike
Instructions
get
Call
Sites
get
New
Sites
get
Implicit
Exception
Types
compute
BC
Info
has
Monitor
Op
get
Fields
Written
get
Fields
Read
get
Arrays
Read
get
Arrays
Written
get
Cast
Types
get
Bytecodes
get
Bytecode
Stream
get
Method
Name
get
Method
Signature
compute
Method
Reference
get
Reference
is
Clinit
is
Init
get
Modifiers
is
Native
is
Abstract
is
Private
is
Protected
is
Public
is
Final
is
Bridge
is
Synchronized
is
Static
is
Synthetic
is
Annotation
is
Enum
is
Module
is
Wala
Synthetic
get
Declaring
Class
make
Decoder
process
Debug
Info
process
Bytecodes
With
Shrike
BT
copy
Visitor
Sets
To
Arrays
to
String
equals
hash
Code
get
Max
Locals
get
Max
Stack
Height
get
Name
get
Descriptor
set
Instruction
Index
get
Program
Counter
visit
Monitor
visit
New
visit
Get
visit
Put
visit
Invoke
visit
Array
Load
visit
Array
Store
visit
Check
Cast
get
Instructions
get
Handlers
get
Parameter
Type
get
Number
Of
Parameters
has
Exception
Handler
get
Declared
Exceptions
get
Declared
Exception
Type
Names
compute
Declared
Exceptions
get
Source
Position
get
Parameter
Source
Position
get
Line
Number
get
Caught
Exception
Types
get
Signature
get
Selector
get
Local
Variable
Name
has
Local
Variable
Table
clear
Caches
is
Public
is
Private
get
Modifiers
get
Superclass
get
Direct
Interfaces
get
All
Implemented
Interfaces
get
Method
get
Field
get
Class
Initializer
get
Declared
Methods
get
All
Instance
Fields
get
All
Static
Fields
get
All
Fields
get
All
Methods
get
Declared
Instance
Fields
get
Declared
Static
Fields
is
Reference
Type
get
Name
is
Class
File
is
Source
File
get
Input
Stream
is
Module
File
as
Module
get
Class
Name
get
Container
include
File
make
File
get
Msg
get
Msg
create
get
Container
get
Class
Loader
compute
Declared
Methods
get
Reference
get
Source
File
Name
get
Source
hash
Code
to
String
is
Array
Class
get
Class
Hierarchy
get
Name
is
Reference
Type
get
Field
get
Field
compute
Superclass
get
Superclass
get
Super
Name
get
All
Fields
get
All
Implemented
Interfaces
get
Declared
Instance
Fields
get
Declared
Static
Fields
get
Direct
Interfaces
get
All
Instance
Fields
get
All
Static
Fields
get
All
Methods
get
Declared
Methods
get
Method
compute
All
Interfaces
As
Collection
array2I
Class
Set
find
Declared
Field
add
Field
To
List
compute
Method
Map
If
Needed
get
Annotations
Array
Length
Instruction
get
Exception
Types
Array
Load
Instruction
get
Exception
Types
Array
Store
Instruction
get
Exception
Types
Binary
Op
Instruction
copy
For
SSA
get
Exception
Types
Check
Cast
Instruction
Check
Cast
Instruction
get
Exception
Types
Check
Cast
Instruction
Check
Cast
Instruction
Comparison
Instruction
Conditional
Branch
Instruction
Conversion
Instruction
copy
For
SSA
Get
Caught
Exception
Instruction
Get
Instruction
Get
Instruction
get
Exception
Types
Goto
Instruction
Instanceof
Instruction
Invoke
Instruction
get
Exception
Types
get
Exception
Types
Invoke
Instruction
Monitor
Instruction
get
Exception
Types
New
Instruction
get
Exception
Types
Phi
Instruction
Put
Instruction
get
Exception
Types
Put
Instruction
Return
Instruction
Return
Instruction
Switch
Instruction
Throw
Instruction
get
Exception
Types
Unary
Op
Instruction
Load
Metadata
Instruction
get
Exception
Types
New
Instruction
get
Exception
Types
Pi
Instruction
Address
Of
Instruction
Address
Of
Instruction
Address
Of
Instruction
Load
Indirect
Instruction
Store
Indirect
Instruction
get
Aa
Store
Exceptions
get
Arithmetic
Exception
get
Array
Access
Exceptions
get
Class
Cast
Exception
get
Class
Not
Found
Exception
get
New
Array
Exceptions
get
New
Safe
Array
Exceptions
get
New
Scalar
Exceptions
get
Null
Pointer
Exception
get
Exception
In
Initializer
Error
get
Name
get
Root
Type
get
Throwable
Type
get
Constant
Type
is
Null
Type
get
Array
Interfaces
lookup
Primitive
Type
infer
Invoke
Exceptions
get
Implicit
Exception
Types
instruction
Factory
is
Double
Type
is
Float
Type
is
Int
Type
is
Long
Type
is
Void
Type
is
Metadata
Type
is
String
Type
is
Boolean
Type
is
Char
Type
get
Metadata
Token
get
Pointer
Type
get
String
Type
get
Primitive
get
Invoke
Method
Reference
methods
Have
Declared
Parameter
Types
get
Fake
Root
Method
make
Ref
Visitor
make
Mod
Visitor
get
Constituents
get
Entries
is
Module
File
as
Module
get
Class
Name
get
Name
get
URL
is
Class
File
is
Source
File
get
Input
Stream
read
read
close
get
Original
Position
get
Input
Reader
get
Container
lookup
Class
get
Reference
iterate
All
Classes
get
Number
Of
Classes
get
Name
get
Language
get
Instruction
Factory
get
Number
Of
Methods
get
Source
File
Name
get
Source
get
Source
File
Name
get
Source
get
Parent
init
remove
All
get
Declared
Type
make
to
String
to
String
is
Class
File
get
Class
Name
is
Source
File
get
Source
Files
get
Class
Files
remove
Class
Files
get
All
Classes
get
clear
load
All
Classes
get
All
Class
And
Source
File
Contents
get
Entry
Bytes
get
Msg
create
get
Msg
create
load
All
Sources
init
get
Entry
Sizes
get
Jar
File
Contents
get
Reference
iterate
All
Classes
lookup
Class
get
Parent
get
Name
get
Language
to
String
get
Number
Of
Classes
get
Number
Of
Methods
get
Source
File
Name
get
Source
get
Source
File
Name
get
Source
remove
All
get
Instruction
Factory
include
File
make
File
to
String
get
Loader
make
New
Class
Loader
get
Msg
create
get
Exclusions
get
Implicit
Exception
Types
get
Invoke
Method
Reference
null
Pointer
Exception
Throw
State
get
Var
Num
visit
Array
Length
visit
Array
Load
visit
Array
Store
visit
Binary
Op
visit
Check
Cast
visit
Comparison
visit
Conditional
Branch
visit
Conversion
visit
Get
visit
Get
Caught
Exception
visit
Goto
visit
Instanceof
visit
Invoke
visit
Load
Metadata
visit
Monitor
visit
New
visit
Phi
visit
Pi
visit
Put
visit
Return
visit
Switch
visit
Throw
visit
Unary
Op
get
Reachable
Instances
get
Heap
Model
get
Pointer
Analysis
iterator
stream
get
Number
Of
Nodes
add
Node
remove
Node
get
Number
get
Node
get
Max
Number
contains
Node
iterate
Nodes
get
Pred
Nodes
get
Pred
Node
Numbers
get
Pred
Node
Count
get
Succ
Nodes
get
Succ
Node
Numbers
get
Succ
Node
Count
add
Edge
remove
Edge
remove
All
Incident
Edges
remove
Incoming
Edges
remove
Outgoing
Edges
has
Edge
get
Node
Manager
get
Edge
Manager
get
Pointer
Keys
compute
Succ
Node
Numbers
compute
Predecessors
compute
Predecessors
For
Non
Locals
compute
Predecessors
For
Locals
compare
get
Number
get
Node
get
Max
Number
iterator
stream
get
Number
Of
Nodes
get
Pred
Nodes
get
Pred
Node
Count
get
Succ
Nodes
get
Succ
Node
Count
add
Node
remove
Node
add
Edge
remove
Edge
has
Edge
remove
All
Incident
Edges
contains
Node
to
String
remove
Incoming
Edges
remove
Outgoing
Edges
get
Succ
Node
Numbers
get
Pred
Node
Numbers
iterate
Nodes
get
Reachable
Instances
remove
Node
And
Edges
get
Heap
Model
get
Pointer
Analysis
meet
to
String
get
Type
get
Type
Reference
equals
hash
Code
is
Array
Type
get
I
Class
copy
State
get
Type
set
Type
to
String
make
solve
solve
initialize
initialize
Variables
initialize
Work
List
evaluate
to
String
is
Nullary
hash
Code
equals
evaluate
to
String
hash
Code
equals
evaluate
to
String
hash
Code
equals
evaluate
to
String
hash
Code
equals
evaluate
to
String
hash
Code
equals
get
visit
Array
Load
visit
Array
Length
visit
Load
Metadata
visit
Get
visit
Invoke
visit
New
visit
Check
Cast
visit
Conversion
visit
Comparison
visit
Binary
Op
visit
Unary
Op
visit
Instanceof
visit
Get
Caught
Exception
visit
Phi
visit
Pi
meet
Declared
Exception
Types
get
Pointer
Type
Operator
visit
Address
Of
visit
Load
Indirect
visit
Store
Indirect
make
Variable
get
IR
get
Type
get
Constant
Type
get
Constant
Primitive
Type
is
Undefined
extract
All
Results
make
Stmt
RHS
meet
to
String
get
Type
get
Type
Reference
equals
hash
Code
is
Array
Type
is
Interface
iterate
Implementors
get
Class
Hierarchy
get
Primitive
meet
size
hash
Code
equals
get
Type
get
Type
Reference
to
String
meet
to
String
hash
Code
equals
get
Type
get
Type
Reference
meet
equals
hash
Code
get
Type
Reference
get
Type
init
make
Primitive
to
String
create
Reflection
Context
Interpreter
understands
record
Factory
Type
iterate
New
Sites
iterate
Fields
Written
iterate
Fields
Read
iterate
Call
Sites
get
Number
Of
Statements
get
IR
get
IR
View
get
DU
get
CFG
get
IR
get
IR
View
get
Number
Of
Statements
understands
iterate
New
Sites
iterate
Call
Sites
make
IR
get
Public
Default
Ctor
record
Factory
Type
iterate
Fields
Read
iterate
Fields
Written
get
CFG
get
DU
get
IR
get
IR
View
get
Number
Of
Statements
understands
iterate
New
Sites
iterate
Call
Sites
get
Declared
Normal
Methods
get
All
Normal
Public
Methods
get
Particular
Method
Statements
make
Get
Method
Statements
make
Get
Declared
Method
Statements
record
Factory
Type
iterate
Fields
Read
iterate
Fields
Written
get
CFG
get
DU
to
String
to
String
to
String
hash
Code
equals
get
hash
Code
equals
get
hash
Code
equals
to
String
get
Callee
Target
get
Relevant
Parameters
get
Callee
Target
make
IR
is
Invoke
Exact
is
Find
Static
is
Find
Static
is
Invoke
is
Type
is
Invoke
is
Type
is
Find
Static
iterate
New
Sites
iterate
Fields
iterate
Fields
Read
iterate
Fields
Written
record
Factory
Type
iterate
Call
Sites
get
IR
View
get
DU
get
Number
Of
Statements
get
CFG
understands
get
IR
understands
get
IR
analyze
Method
Handles
get
Callee
Target
is
Type
Constant
get
Relevant
Parameters
get
Callee
Target
get
Type
Constant
may
Understand
get
Relevant
Parameters
name
get
to
String
hash
Code
equals
get
Type
get
Name
get
Callee
Target
may
Understand
is
Constructor
Constant
get
Relevant
Parameters
get
IR
get
IR
View
get
Number
Of
Statements
understands
iterate
New
Sites
iterate
Call
Sites
make
Statements
make
IR
record
Factory
Type
iterate
Fields
Read
iterate
Fields
Written
get
CFG
get
DU
get
IR
get
IR
View
get
Number
Of
Statements
understands
iterate
New
Sites
iterate
Call
Sites
make
Statements
make
IR
record
Factory
Type
iterate
Fields
Read
iterate
Fields
Written
get
CFG
get
DU
create
Reflection
Context
Selector
get
Callee
Target
get
Relevant
Parameters
get
Local
For
Type
get
Exceptions
For
Type
get
Call
Site
For
Type
get
New
Site
For
Type
type
Ref2Type
Abstraction
get
Msg
create
get
Msg
create
get
Msg
create
add
Instruction
add
Statements
For
Concrete
Simple
Type
add
Ctor
Invoke
Instruction
get
IR
get
IR
View
get
Number
Of
Statements
understands
iterate
New
Sites
iterate
Call
Sites
make
Statements
make
IR
record
Factory
Type
iterate
Fields
Read
iterate
Fields
Written
get
Caught
Exceptions
has
Object
Array
Load
has
Object
Array
Store
iterate
Cast
Types
get
CFG
get
DU
get
Callee
Target
get
Relevant
Parameters
get
Callee
Target
get
Relevant
Parameters
get
get
Node
is
Class
Factory
get
Use
Of
String
Parameter
get
Callee
Target
get
Relevant
Parameters
get
IR
get
IR
View
make
IR
get
Number
Of
Statements
understands
iterate
New
Sites
iterate
Call
Sites
get
Declared
Normal
Methods
get
All
Normal
Public
Methods
get
Constructors
get
Public
Constructors
get
Method
Array
Statements
get
Particular
Method
Statements
make
Get
Ctor
Statements
make
Get
Ctors
Statements
make
Get
Method
Statements
make
Get
Methods
Statments
make
Get
Decl
Ctor
Statements
make
Get
Decl
Ctors
Statements
make
Get
Declared
Method
Statements
make
Get
Declared
Methods
Statements
record
Factory
Type
iterate
Fields
Read
iterate
Fields
Written
get
CFG
get
DU
get
IR
get
IR
View
get
Types
For
Context
get
Number
Of
Statements
understands
iterate
New
Sites
get
Invoke
Statements
iterate
Call
Sites
has
Next
next
remove
record
Type
record
Factory
Type
iterate
Fields
Read
iterate
Fields
Written
find
Or
Create
Specialized
Factory
Method
get
Caught
Exceptions
has
Object
Array
Load
has
Object
Array
Store
iterate
Cast
Types
get
CFG
get
DU
init
Value
Number
For
Constant
One
add
Statements
For
Type
Abstraction
intercept
Type
add
Statements
For
Concrete
Type
add
Original
Statements
add
Statements
For
Set
Of
Types
get
Allocation
Statements
get
Invoke
Statements
equals
hash
Code
to
String
get
Statements
get
Declaring
Class
get
Number
Of
Parameters
get
Parameter
Type
make
IR
get
Callee
Target
get
Type
Constant
make
Constant
Key
may
Understand
get
Relevant
Parameters
get
to
String
hash
Code
equals
get
Type
get
IR
get
IR
View
get
Number
Of
Statements
understands
iterate
New
Sites
iterate
Call
Sites
make
IR
record
Factory
Type
iterate
Fields
Read
iterate
Fields
Written
get
CFG
get
DU
has
Node
Transfer
Functions
has
Edge
Transfer
Functions
get
Meet
Operator
get
Node
Transfer
Function
get
Edge
Transfer
Function
get
Values
create
Values
compute
Bit
Vector
compute
Exceptions
compute
Exceptions
make
Node
Variable
make
Edge
Variable
new
BV
has
Normal
Edge
has
Exceptional
Edge
get
Analysis
get
Exceptions
new
Dummy
compute
get
Possibly
Caught
Exceptions
collect
Filtered
Exceptions
collect
Thrown
Exceptions
visit
Throw
add
Thrown
get
Throwing
Instruction
collect
Caught
Exceptions
get
Caught
Exceptions
has
Uncaught
Exceptions
get
Exceptions
solve
solve
catches
Exception
has
Uncaught
Exceptions
get
Exceptions
visit
Invoke
get
CG
Node
Exceptions
get
Filter
init
has
Node
Transfer
Functions
has
Edge
Transfer
Functions
get
Node
Transfer
Function
evaluate
to
String
hash
Code
equals
get
Edge
Transfer
Function
evaluate
to
String
hash
Code
equals
get
Meet
Operator
make
Node
Variable
make
Edge
Variable
initialize
Work
List
initialize
Variables
make
Stmt
RHS
solve
initialize
Variables
get
Entry
State
get
In
is
Unary
No
Op
evaluate
hash
Code
equals
to
String
meet
Stack
meet
Stack
At
Catch
Block
meet
Local
meet
meet
For
Catch
Block
meet
Stacks
At
Catch
Block
meet
Stacks
meet
Locals
compute
Meet
N
Locals
compute
Meet
Stack
Height
duplicate
get
Basic
Block
set
TOP
is
TOP
push
pop
peek
swap
allocate
Stack
allocate
Locals
clear
Stack
set
Local
get
Local
replace
Value
has
Value
to
String
array2String
Buffer
copy
State
state
Equals
get
Stack
Height
get
Locals
needs
Node
Flow
needs
Edge
Flow
flow
flow
init
needs
Node
Flow
needs
Edge
Flow
flow
flow
get
Current
Instruction
Index
get
Current
Program
Counter
get
Current
Block
get
Current
Successor
get
Instructions
visit
Array
Length
visit
Array
Load
visit
Array
Store
visit
Binary
Op
visit
Comparison
visit
Conditional
Branch
visit
Constant
visit
Conversion
visit
Dup
visit
Get
pop
N
visit
Instanceof
visit
Invoke
visit
Monitor
visit
Local
Load
visit
Local
Store
visit
New
visit
Pop
visit
Put
visit
Shift
visit
Swap
visit
Switch
visit
Throw
visit
Unary
Op
union
add
Unnecessary
Check
build
Inequality
Graphs
compute
Lower
Bound
compute
Upper
Bounds
get
Bounds
Check
Necessary
add
Construction
Length
visit
New
add
Pi
Structure
add
Possible
Constant
bundle
Dead
Ends
collapse
Non
Phi
Edges
discover
Predecessors
visit
Array
Length
visit
Binary
Op
visit
Phi
visit
Pi
explore
Ir
find
Array
Access
visit
Array
Load
visit
Array
Store
get
Array
Reference
Instructions
get
Lower
Bound
Graph
get
Upper
Bound
Graph
is
Branch
Taken
start
DFS
get
Edges
get
Nodes
reset
to
String
update
Node
Edges
compute
compute
Shortest
Paths
greater
Then
less
Then
max
Of
Sources
select
Edges
To
Iterate
update
All
Edges
update
Destinations
With
Min
write
Changes
compare
compare
add
equals
get
Number
get
Type
hash
Code
to
String
new
Value
equals
hash
Code
new
Value
to
String
get
Destination
get
Source
get
Weight
set
Weight
set
Weight
get
In
Edges
get
New
Weight
get
Out
Edges
get
Value
get
Weight
set
In
Edges
set
New
Weight
set
Out
Edges
set
Value
set
Weight
to
String
post
Process
Constants
add
Addition
Edge
add
Array
add
Constant
add
Edge
add
Node
add
Phi
add
Pi
create
Source
Var
generate
New
Var
get
Array
Access
get
Array
Length
get
Array
Node
get
Phis
mark
As
Array
Access
mark
As
Array
Length
mark
As
Dead
End
get
Variable
Weight
reset
get
Lhs
get
Op
get
Rhs
negate
Operator
swap
Operator
create
get
Assigned
Var
get
Constant
Value
get
Op
get
Other
Var
v
visit
to
String
bar
is
Barred
make
bar
visit
is
Barred
to
String
v
bar
visit
is
Barred
hash
Code
equals
no
Filter
make
visit
bar
to
String
is
Barred
get
Filter
v
bar
visit
is
Barred
to
String
get
Filter
make
visit
to
String
bar
is
Barred
make
get
Field
hash
Code
equals
visit
to
String
bar
is
Barred
add
Subgraph
For
Node
add
Nodes
For
Parameters
get
Heap
Model
get
Pred
Node
Numbers
get
Succ
Node
Numbers
get
Pred
Node
Count
get
Pred
Nodes
get
Succ
Node
Count
get
Succ
Nodes
add
Array
Match
Edges
add
Param
Edges
add
Return
Edges
add
Match
Edges
add
Match
Helper
add
Match
Edge
add
Nodes
That
Write
To
Static
Field
has
Edge
unconditionally
Add
Constraints
From
Node
add
Node
Passthru
Exception
Constraints
add
Exception
Def
Constraints
add
Node
Instruction
Constraints
add
Block
Instruction
Constraints
add
Phi
Constraints
make
Visitor
debug
Print
IR
visit
Array
Load
visit
Array
Store
visit
Check
Cast
visit
Return
visit
Get
visit
Get
Internal
visit
Put
visit
Put
Internal
visit
Invoke
visit
New
visit
Throw
visit
Get
Caught
Exception
visit
Pi
get
Basic
Block
set
Basic
Block
visit
Load
Metadata
add
Subgraph
For
Node
has
Subgraph
For
Node
get
Param
Succs
get
Param
Preds
get
Return
Succs
get
Return
Preds
add
Nodes
For
Parameters
unconditionally
Add
Constraints
From
Node
add
Node
Instruction
Constraints
add
Block
Instruction
Constraints
add
Phi
Constraints
make
Visitor
debug
Print
IR
get
Potential
Callers
get
Possible
Targets
set
Basic
Block
make
visit
to
String
bar
is
Barred
add
Nodes
For
Parameters
make
Visitor
visit
Array
Load
visit
Array
Store
visit
Check
Cast
visit
Return
visit
Get
visit
Get
Internal
visit
Put
visit
Put
Internal
visit
Invoke
visit
New
visit
Throw
visit
Get
Caught
Exception
visit
Pi
handle
Non
Heap
Instruction
visit
Array
Length
visit
Binary
Op
visit
Comparison
visit
Conversion
visit
Instanceof
visit
Unary
Op
get
Basic
Block
set
Basic
Block
visit
Load
Metadata
v
visit
bar
is
Barred
to
String
make
get
Field
hash
Code
equals
visit
to
String
bar
is
Barred
visit
bar
visit
Assign
Global
visit
Assign
visit
Get
Field
visit
Match
visit
New
visit
Put
Field
visit
Param
visit
Return
visit
Assign
Global
Bar
visit
Assign
Bar
visit
Get
Field
Bar
visit
Match
Bar
visit
New
Bar
visit
Put
Field
Bar
visit
Return
Bar
visit
Param
Bar
is
Barred
make
bar
visit
is
Barred
to
String
get
Call
Site
Ref
get
Key
hash
Code
equals
visit
Param
visit
Return
visit
Assign
visit
Assign
Global
visit
Get
Field
visit
Match
visit
New
visit
Put
Field
visit
Assign
Global
Bar
visit
Assign
Bar
visit
Get
Field
Bar
visit
Match
Bar
visit
New
Bar
visit
Put
Field
Bar
visit
Return
Bar
visit
Param
Bar
visit
Succs
visit
Preds
add
Subgraph
For
Node
has
Subgraph
For
Node
is
Param
get
Instrs
Passing
Param
get
Instr
Returning
To
get
Writes
To
Static
Field
get
Reads
Of
Static
Field
get
Writes
To
Instance
Field
get
Reads
Of
Instance
Field
get
Potential
Callers
get
Possible
Targets
v
visit
to
String
bar
is
Barred
add
Nodes
For
Parameters
make
Visitor
visit
Array
Load
visit
Array
Store
visit
Check
Cast
visit
Return
visit
Get
visit
Get
Internal
visit
Put
visit
Put
Internal
visit
Invoke
visit
New
visit
Throw
visit
Get
Caught
Exception
add
Exception
Def
Constraints
visit
Pi
get
Basic
Block
set
Basic
Block
visit
Load
Metadata
get
Info
For
New
Multi
Dim
v
bar
visit
is
Barred
make
get
Field
bar
visit
hash
Code
equals
is
Barred
no
Filter
make
bar
visit
is
Barred
hash
Code
equals
get
Filter
bar
is
Barred
visit
visit
Succs
visit
Preds
add
Nodes
For
Invocations
is
Param
get
Instrs
Passing
Param
get
Instr
Returning
To
get
Writes
To
Static
Field
get
Reads
Of
Static
Field
get
Writes
To
Instance
Field
convert
Pointer
Key
To
Heap
Model
get
Reads
Of
Instance
Field
get
Array
Writes
get
Array
Reads
add
Node
Passthru
Exception
Constraints
add
Exception
Def
Constraints
add
Node
Constant
Constraints
hash
Code
equals
make
get
Field
bar
visit
is
Barred
to
String
get
Call
Site
hash
Code
equals
get
Array
Reads
get
Array
Writes
get
Field
Reads
get
Field
Writes
get
Static
Field
Reads
get
Static
Field
Writes
convert
Stmts
To
Memory
Access
get
Heap
Model
get
Field
Reads
get
Field
Writes
get
Array
Reads
get
Array
Writes
get
Static
Field
Reads
get
Static
Field
Writes
get
Heap
Model
set
Next
Parameter
has
Next
next
remove
v
get
Field
Type
Reference
is
Final
is
Private
is
Protected
is
Public
is
Static
get
Declaring
Class
get
Name
to
String
is
Volatile
get
Class
Hierarchy
get
Reference
get
Annotations
populate
populate
set
Instruction
Index
visit
New
visit
Array
Load
visit
Array
Store
visit
Get
visit
Put
set
Instruction
Index
visit
New
visit
Array
Load
visit
Array
Store
visit
Get
visit
Put
get
Field
Reads
get
Field
Writes
get
Array
Reads
get
Array
Writes
to
String
get
Static
Field
Reads
get
Static
Field
Writes
get
Heap
Model
rep
Ok
get
Instruction
Index
to
String
get
Node
hash
Code
equals
map
CG
Node
map
Inst
Key
map
Pointer
Key
get
Traversal
Budget
set
Traversal
Budget
get
Heap
Model
increment
Num
Nodes
Traversed
set
Num
Nodes
Traversed
get
Num
Nodes
Traversed
get
Base
Call
Graph
get
Class
Hierarchy
should
Refine
next
Pass
should
Refine
next
Pass
should
Refine
next
Pass
next
Pass
should
Refine
should
Refine
next
Pass
should
Refine
next
Pass
should
Refine
record
Decision
not
Super
Of
Any
Encountered
remove
Inner
next
Pass
get
History
should
Refine
next
Pass
make
should
Refine
next
Pass
get
Num
Passes
get
Budget
For
Pass
get
Field
Refine
Policy
get
Call
Graph
Refine
Policy
next
Pass
make
make
get
Budget
For
Pass
get
Call
Graph
Refine
Policy
get
Field
Refine
Policy
get
Num
Passes
next
Pass
next
Pass
should
Refine
super
Of
Any
Encountered
remove
Inner
should
Refine
next
Pass
next
Pass
make
make
make
to
String
transition
get
Start
State
get
Start
State
transition
get
Heap
Model
get
Base
Call
Graph
get
Class
Hierarchy
get
Points
To
get
Start
State
visit
Param
Bar
visit
Param
visit
Return
visit
Return
Bar
transition
make
get
Instance
Key
get
Class
Hierarchy
get
Filtered
Pointer
Key
For
Local
get
Instance
Key
For
Allocation
get
Instance
Key
For
Metadata
Object
get
Instance
Key
For
Constant
get
Instance
Key
For
Multi
New
Array
get
Instance
Key
For
PEI
get
Pointer
Key
For
Array
Contents
get
Pointer
Key
For
Exceptional
Return
Value
get
Pointer
Key
For
Instance
Field
get
Pointer
Key
For
Local
get
Filter
get
Receiver
Class
get
Pointer
Key
For
Return
Value
get
Pointer
Key
For
Static
Field
iterate
Pointer
Keys
get
Instance
Field
Key
get
Points
To
get
State
get
Wrapped
to
String
hash
Code
equals
get
Pointer
Key
empty
Call
Stack
make
Stack
make
Internal
Array
pop
push
get
Refinement
Policy
sanity
Check
CG
start
New
Query
get
Points
To
get
Points
To
With
States
remove
States
make
With
Default
Flow
Graph
outer
Refinement
Loop
points
To
Passes
Pred
passes
Pred
get
Points
To
get
Points
To
With
States
get
Flows
To
get
Flows
To
get
Flows
To
Internal
handle
hash
Code
equals
to
String
hash
Code
equals
make
Ordinal
Set
get
Computed
P2Set
add
All
To
P2Set
update
Vals
For
Filter
compute
worklist
Loop
handle
Copy
handle
Copy
handle
All
Copies
matching
P
To
Queried
matching
Tracked
Queried
handle
Back
Copy
handle
All
Back
Copies
add
To
P
To
Worklist
add
To
Init
Worklist
add
To
Tracked
P
To
Worklist
prop
Targets
reprop
Call
Arg
handle
Init
Worklist
visit
New
visit
Get
Field
visit
Assign
Global
visit
Assign
handle
handle
Forw
Interproc
propagate
To
Callee
apply
track
Instance
Field
add
Preds
Of
I
Key
And
State
To
Tracked
Points
To
query
Call
Targets
handle
Points
To
Worklist
visit
Put
Field
visit
Get
Field
visit
Assign
Global
visit
Assign
visit
Put
Field
handle
handle
Back
Interproc
propagate
To
Caller
apply
callee
Sub
Graph
Missing
And
Should
Not
Be
Added
handle
Tracked
Points
To
Worklist
visit
Put
Field
visit
Assign
Global
visit
Put
Field
visit
Get
Field
visit
Assign
handle
add
Encountered
Load
make
Pass
Over
Field
Stmts
get
Inst
Field
Key
find
Or
Create
find
handle
Tracked
Pred
get
Call
Instrs
has
Null
IR
do
Transition
get
State
Machine
Factory
set
State
Machine
Factory
get
Refinement
Policy
Factory
set
Refinement
Policy
Factory
do
Top
Level
Traversal
propagate
graph
Contains
Node
get
OTF
Targets
handle
Top
Level
Forw
Interproc
propagate
To
Callee
apply
get
P
To
Set
From
Computer
compute
Flows
To
get
Flowed
To
States
visit
New
visit
Get
Field
get
Base
And
Stored
get
Writes
visit
Assign
Global
visit
Assign
pred
Holds
For
Pk
convert
To
Heap
Model
refine
Field
Accesses
no
On
The
Fly
Needed
compute
get
Computed
Flows
To
Set
handle
Tracked
Pred
get
Start
State
visit
Assign
visit
Assign
Bar
visit
Assign
Global
visit
Assign
Global
Bar
visit
Get
Field
visit
Get
Field
Bar
visit
Match
visit
Match
Bar
visit
New
visit
New
Bar
visit
Param
handle
Method
Exit
visit
Param
Bar
handle
Method
Entry
visit
Put
Field
visit
Put
Field
Bar
visit
Return
visit
Return
Bar
transition
make
is
Recursive
make
Recursive
make
New
is
Recursive
make
Recursive
make
New
get
J2SE
Jar
Files
get
JDK
Library
Files
get
J2EE
Jar
Files
get
Jars
In
Directory
load
Properties
convert
To
Absolute
load
Properties
From
File
get
Wala
Home
Dir
get
Exception
Handlers
get
Catch
Blocks
get
Block
For
Instruction
get
Instructions
get
Program
Counter
get
Method
get
First
Instruction
Index
get
Last
Instruction
Index
is
Catch
Block
is
Exit
Block
is
Entry
Block
get
Method
get
Number
init
equals
hash
Code
entry
exit
get
Pred
Node
Count
get
Number
Of
Normal
In
get
Number
Of
Exceptional
In
has
Any
Normal
Out
get
Number
Of
Normal
Out
get
Number
Of
Exceptional
Out
get
Number
Of
Normal
Out
get
Number
Of
Exceptional
Out
get
Pred
Nodes
get
Succ
Node
Count
slow
Count
Succ
Nodes
get
Succ
Nodes
iterate
Exceptional
Successors
iterate
Exceptional
Predecessors
iterate
Normal
Predecessors
iterate
Normal
Successors
iterate
Normal
Successors
Without
Exit
add
Node
get
Max
Number
get
Node
get
Number
get
Number
Of
Nodes
iterator
stream
add
Edge
remove
Edge
has
Edge
has
Exceptional
Edge
has
Normal
Edge
add
Normal
Edge
add
Exceptional
Edge
remove
Node
And
Edges
remove
Node
contains
Node
to
String
set
Catch
Block
is
Catch
Block
get
Catch
Blocks
get
Method
remove
All
Incident
Edges
get
Exceptional
Successors
get
Normal
Successors
iterate
Nodes
remove
Incoming
Edges
remove
Outgoing
Edges
get
Exceptional
To
Exit
get
Normal
To
Exit
get
Exceptional
Predecessors
get
Normal
Predecessors
get
Pred
Node
Numbers
get
Succ
Node
Numbers
make
get
Method
hash
Code
equals
get
Instructions
compute
I2B
Mapping
compute
Edges
make
Basic
Blocks
get
Block
For
Instruction
is
Catch
Block
compute
Outgoing
Edges
add
Exceptional
Edges
get
Exception
Handlers
add
Normal
Edge
To
add
Exceptional
Edge
To
get
Last
Instruction
Index
get
First
Instruction
Index
to
String
is
Exit
Block
is
Entry
Block
get
Method
hash
Code
equals
get
Number
iterator
to
String
get
Exception
Handlers
get
Program
Counter
get
Msg
create
hash
Code
equals
get
Instructions
compute
Edges
clear
Pis
make
Empty
Blocks
make
Branch
Visitor
make
PEI
Visitor
make
Basic
Blocks
clear
Phis
set
Index
visit
Goto
visit
Conditional
Branch
visit
Switch
visit
Phi
visit
Return
visit
Throw
break
Basic
Block
set
Index
break
Basic
Block
visit
Array
Length
visit
Array
Load
visit
Array
Store
visit
Check
Cast
visit
Get
visit
Invoke
visit
Monitor
visit
New
visit
Put
visit
Throw
get
Block
For
Instruction
get
Phis
add
Phi
get
Pis
add
Pi
equals
add
Exceptional
Edges
add
Normal
Edge
To
add
Exceptional
Edge
To
compute
Outgoing
Edges
update
Pi
Instrs
get
First
Instruction
Index
get
Last
Instruction
Index
is
Catch
Block
hash
Code
to
String
is
Exit
Block
is
Entry
Block
get
Method
ends
In
PEI
ends
In
Return
get
Number
iterator
to
String
get
Program
Counter
get
Index
From
I
Index
get
All
Phi
Instructions
entry
exit
get
Exceptional
Successors
get
Normal
Successors
get
Exceptional
Predecessors
get
Normal
Predecessors
get
Last
Instruction
ends
With
Conditional
Branch
ends
With
Switch
get
Fall
Thru
Block
get
Not
Taken
Successor
get
Taken
Successor
resolve
Switch
is
Switch
Default
get
Switch
Label
resolve
Branch
which
Pred
sanitize
compute
Exceptions
get
Result
contains
Result
create
Intraprocedural
Exploded
CFG
Analysis
create
Intraprocedural
Exploded
CFG
Analysis
create
Intraprocedural
Exploded
CFG
Analysis
create
Intraprocedural
Exploded
CFG
Analysis
create
Intraprocedural
SSACFG
Analyis
create
Intraprocedural
SSACFG
Analyis
create
Intraprocedural
SSACFG
Analyis
compute
Interproc
Analysis
compute
Interproc
Analysis
compute
Interproc
Analysis
compute
get
CFG
has
Exceptions
get
State
throws
Exception
throws
Exception
is
Fake
Root
get
Parameter
Numbers
extract
Invoke
Blocks
compute
run
find
And
Inject
Invokes
analysis
Second
Pass
analysis
First
Pass
get
Result
compute
Filtered
Callgraph
filter
compute
get
State
get
Values
get
Injected
Parameters
get
CFG
can
Be
Analyzed
set
Has
Exceptions
has
Exceptions
to
String
get
Result
contains
Result
to
String
copy
From
entry
exit
get
Catch
Blocks
get
Block
For
Instruction
get
Instructions
get
Program
Counter
get
Method
get
Exceptional
Successors
get
Normal
Successors
get
Exceptional
Predecessors
get
Normal
Predecessors
meet
Operator
phi
Value
Meet
Function
nullify
Function
denullify
Function
identity
Function
phis
Function
is
Never
Null
is
Always
Null
copy
State
meet
meet
nullify
denullify
equals
get
State
to
String
equals
evaluate
hash
Code
to
String
evaluate
equals
hash
Code
to
String
evaluate
equals
hash
Code
to
String
evaluate
equals
hash
Code
to
String
evaluate
equals
hash
Code
to
String
create
Default
set
State
get
States
get
State
copy
State
to
String
equals
hash
Code
to
String
evaluate
compute
get
CFG
has
Exceptions
get
State
get
Relevant
Instruction
get
Edge
Transfer
Function
get
Meet
Operator
get
Node
Transfer
Function
has
Edge
Transfer
Functions
has
Node
Transfer
Functions
visit
Array
Length
visit
Array
Load
visit
Array
Store
visit
Binary
Op
visit
Check
Cast
visit
Comparison
visit
Conditional
Branch
visit
Conversion
visit
Get
visit
Get
Caught
Exception
visit
Goto
visit
Instanceof
visit
Invoke
visit
Load
Metadata
visit
Monitor
visit
New
visit
Phi
visit
Pi
visit
Put
visit
Return
visit
Switch
visit
Throw
visit
Unary
Op
has
Exceptional
Edge
has
Normal
Edge
make
Edge
Variable
make
Node
Variable
make
Stmt
RHS
search
Nodes
With
Path
To
Catch
All
run
create
Deleted
Graph
get
Pruned
CFG
get
Number
Of
Deleted
Edges
get
State
work
get
Negative
CFG
is
Only
Null
Pointer
Exc
no
Exceptions
remove
Impossible
Successors
remove
Impossible
Successors
visit
Array
Length
visit
Array
Load
visit
Array
Store
visit
Binary
Op
visit
Check
Cast
visit
Comparison
visit
Conditional
Branch
visit
Conversion
visit
Get
visit
Get
Caught
Exception
visit
Goto
visit
Instanceof
visit
Invoke
visit
Load
Metadata
visit
Monitor
visit
New
visit
Phi
visit
Pi
visit
Put
visit
Return
visit
Switch
visit
Throw
visit
Unary
Op
get
Flow
Graph
get
Transfer
Function
Provider
compute
get
CFG
has
Exceptions
get
State
throws
Exception
throws
Exception
build
Control
Dependence
make
Edge
Label
construct
Graph
Edges
get
Pred
Nodes
get
Pred
Node
Numbers
get
Pred
Node
Count
get
Succ
Nodes
get
Succ
Node
Numbers
get
Succ
Node
Count
has
Edge
add
Edge
remove
Edge
remove
All
Incident
Edges
remove
Incoming
Edges
remove
Outgoing
Edges
to
String
get
Control
Flow
Graph
get
Edge
Labels
get
Node
Manager
get
Edge
Manager
control
Equivalent
get
Targets
make
Worklist
make
solve
initialize
add
Seed
forward
Tabulate
SLR
Ps
tend
To
Soft
Caches
perform
Verbose
Action
process
Normal
process
Exit
propagate
To
Return
Sites
propagate
To
Return
Site
With
Binary
Flow
Function
prop
To
Return
Site
get
Inverse
Path
Edges
process
Call
process
Particular
Callee
record
Call
compute
Binary
Flow
compute
Flow
compute
Inverse
Flow
pop
From
Work
List
peek
From
Work
List
propagate
get
Local
Path
Edges
merge
add
To
Work
List
find
Or
Create
Local
Path
Edges
make
Local
Path
Edges
find
Or
Create
Local
Summary
Edges
find
Or
Create
Call
Flow
Edges
get
Result
get
Result
to
String
get
Problem
get
Supergraph
Nodes
Reached
get
Summary
Targets
get
Seeds
get
Supergraph
compare
Elements
get
Summary
Sources
get
Problem
get
Seeds
get
Progress
Monitor
get
Cur
Path
Edge
get
Cur
Summary
Edge
new
Normal
Exploded
Edge
new
Call
Exploded
Edge
new
Summary
Edge
created
Bounded
Partially
Balanced
Solver
propagate
get
Num
Steps
reset
Bound
get
Targets
get
Sources
identity
to
String
get
Procedure
Graph
is
Call
get
Called
Nodes
get
Normal
Successors
get
Return
Sites
get
Call
Sites
is
Exit
get
Proc
Of
get
Entries
For
Procedure
get
Exits
For
Procedure
get
Number
Of
Blocks
get
Local
Block
Number
get
Local
Block
is
Return
is
Entry
classify
Edge
has
Priority
Over
get
Result
add
Call
Edge
get
Call
Flow
Sources
get
Call
Flow
Source
Nodes
get
Domain
get
Targets
get
Sources
create
singleton
get
Normal
Flow
Function
get
Return
Flow
Function
get
Call
To
Return
Flow
Function
get
Call
None
To
Return
Flow
Function
get
Call
Flow
Function
add
Path
Edge
add
Identity
Path
Edge
add
Zero
Path
Edge
get
Inverse
contains
get
Reachable
get
Reachable
Slow
get
Reachable
Fast
get
Reachable
get
Reached
Node
Numbers
merge
get
Supergraph
get
Domain
get
Function
Map
initial
Seeds
get
Merge
Function
get
Targets
get
Sources
make
to
String
insert
Summary
Edge
contains
get
Summary
Edges
get
Inverted
Summary
Edges
For
Target
get
Index
For
Entry
Exit
Pair
create
Partially
Balanced
Tabulation
Solver
propagate
add
Seed
was
Used
As
Unbalanced
Seed
new
Unbalanced
Exploded
Return
Edge
get
Sources
make
get
Procedure
Graph
get
Class
Hierarchy
classify
Edge
get
Call
Sites
get
Called
Nodes
get
Entries
For
Procedure
get
Exits
For
Procedure
get
Local
Block
get
Local
Block
Number
get
Main
Entry
get
Normal
Successors
get
Number
Of
Blocks
get
Proc
Of
get
Return
Sites
is
Call
is
Entry
is
Exit
is
Return
remove
Node
And
Edges
add
Node
contains
Node
get
Number
Of
Nodes
iterator
stream
remove
Node
add
Edge
get
Pred
Node
Count
get
Pred
Nodes
get
Succ
Node
Count
get
Succ
Nodes
has
Edge
remove
All
Incident
Edges
remove
Edge
remove
Incoming
Edges
remove
Outgoing
Edges
get
Max
Number
get
Node
get
Number
iterate
Nodes
get
Pred
Node
Numbers
get
Succ
Node
Numbers
get
CFG
get
ICFG
to
String
get
Targets
get
Unbalanced
Return
Flow
Function
create
Bounded
Tabulation
Solver
propagate
get
Num
Steps
reset
Bound
get
Result
get
Problem
get
Supergraph
Nodes
Reached
get
Summary
Targets
get
Seeds
take
insert
size
get
Function
Map
get
Fake
Entry
get
Targets
get
Sources
make
to
String
make
get
Procedure
Graph
is
Call
test
get
Called
Nodes
get
Normal
Successors
get
Return
Sites
is
Exit
get
Proc
Of
remove
Node
And
Edges
iterator
stream
get
Number
Of
Nodes
add
Node
remove
Node
contains
Node
get
Pred
Nodes
get
Pred
Node
Count
get
Succ
Nodes
has
Edge
get
Succ
Node
Count
add
Edge
remove
Edge
remove
All
Incident
Edges
get
Entries
For
Procedure
get
Exits
For
Procedure
is
Return
get
Call
Sites
is
Entry
classify
Edge
to
String
remove
Incoming
Edges
remove
Outgoing
Edges
get
Number
Of
Blocks
get
Local
Block
Number
get
Local
Block
get
Number
get
Node
get
Max
Number
iterate
Nodes
get
Succ
Node
Numbers
get
Pred
Node
Numbers
get
Normal
Flow
Function
get
Call
Flow
Function
get
Return
Flow
Function
get
Call
To
Return
Flow
Function
get
Call
None
To
Return
Flow
Function
singleton
get
Targets
has
Priority
Over
create
Path
Edge
to
String
hash
Code
equals
get
D1
get
D2
get
Entry
get
Target
get
make
Variable
init
create
Equations
make
Equation
For
Instruction
create
Variables
get
Variable
to
String
get
Declared
Field
Type
get
Declared
Field
get
Ref
is
Static
is
PEI
copy
For
SSA
to
String
visit
get
Number
Of
Uses
get
Use
get
Target
get
Default
get
Cases
And
Labels
iterate
Labels
has
Next
next
hash
Code
is
Fall
Through
copy
For
SSA
to
String
visit
hash
Code
is
PEI
has
Def
get
Def
get
Def
get
Number
Of
Defs
is
Fall
Through
get
Token
get
Type
copy
For
SSA
to
String
array2String
visit
has
Def
get
Def
get
Def
get
Number
Of
Defs
get
Concrete
Type
get
New
Site
hash
Code
get
Number
Of
Uses
get
Use
is
PEI
is
Fall
Through
to
String
visit
has
Def
get
Def
get
Def
get
Number
Of
Uses
get
Number
Of
Defs
get
To
Type
get
From
Type
get
Use
hash
Code
is
Fall
Through
copy
For
SSA
to
String
visit
get
Successor
get
Pi
Block
get
Cause
get
Val
copy
For
SSA
to
String
visit
has
Def
get
Def
get
Def
get
Number
Of
Defs
get
Number
Of
Uses
get
Use
hash
Code
is
Fall
Through
get
Operator
copy
For
SSA
to
String
visit
has
Def
get
Def
get
Def
get
Number
Of
Defs
get
Number
Of
Uses
get
Use
get
Declared
Result
Type
get
Declared
Result
Types
get
Result
get
Val
hash
Code
is
PEI
is
Fall
Through
to
String
get
Type
copy
For
SSA
hash
Code
is
Fall
Through
to
String
visit
get
Number
Of
Defs
get
Def
get
Def
get
Number
Of
Uses
get
Use
wipe
reset
find
cache
invalidate
has
Def
get
Def
get
Def
get
Number
Of
Defs
get
Number
Of
Uses
get
Use
hash
Code
is
Fall
Through
make
CFG
make
IR
context
Is
Irrelevant
has
Def
get
Def
get
Def
get
Number
Of
Defs
get
Number
Of
Uses
get
Use
hash
Code
to
String
get
Use
get
Object
Ref
get
Member
Ref
hash
Code
is
Fall
Through
copy
For
SSA
assert
Params
Kosher
visit
get
Number
Of
Uses
get
Number
Of
Positional
Parameters
get
Number
Of
Return
Values
get
Return
Value
get
Use
hash
Code
get
Symbol
Table
get
Control
Flow
Graph
get
Basic
Blocks
For
Call
get
Instructions
get
PEI
get
Method
get
Exit
Block
iterate
New
Sites
iterate
Call
Sites
get
Blocks
get
Local
Names
copy
For
SSA
to
String
visit
get
Opcode
Address
Of
Instruction
Address
Of
Instruction
Address
Of
Instruction
Array
Length
Instruction
Array
Load
Instruction
Array
Store
Instruction
Binary
Op
Instruction
Check
Cast
Instruction
Check
Cast
Instruction
Check
Cast
Instruction
Check
Cast
Instruction
Comparison
Instruction
Conditional
Branch
Instruction
Conversion
Instruction
Get
Caught
Exception
Instruction
Get
Instruction
Get
Instruction
Goto
Instruction
Instanceof
Instruction
Invoke
Instruction
Invoke
Instruction
Load
Indirect
Instruction
Load
Metadata
Instruction
Monitor
Instruction
New
Instruction
New
Instruction
Phi
Instruction
Pi
Instruction
Put
Instruction
Put
Instruction
Return
Instruction
Return
Instruction
Store
Indirect
Instruction
Switch
Instruction
Throw
Instruction
Unary
Op
Instruction
wipe
find
cache
invalidate
get
Value
to
String
is
String
Constant
is
False
Constant
is
True
Constant
is
Zero
Constant
is
Null
Constant
is
One
Constant
equals
hash
Code
copy
For
SSA
to
String
to
String
get
Value
String
visit
visit
Goto
visit
Array
Load
visit
Array
Store
visit
Binary
Op
visit
Unary
Op
visit
Conversion
visit
Comparison
visit
Conditional
Branch
visit
Switch
visit
Return
visit
Get
visit
Put
visit
Invoke
visit
New
visit
Array
Length
visit
Throw
visit
Monitor
visit
Check
Cast
visit
Instanceof
visit
Phi
visit
Pi
visit
Get
Caught
Exception
visit
Load
Metadata
visit
Goto
visit
Array
Load
visit
Array
Store
visit
Binary
Op
visit
Unary
Op
visit
Conversion
visit
Comparison
visit
Conditional
Branch
visit
Switch
visit
Return
visit
Get
visit
Put
visit
Invoke
visit
New
visit
Array
Length
visit
Throw
visit
Monitor
visit
Check
Cast
visit
Instanceof
visit
Phi
visit
Pi
visit
Get
Caught
Exception
visit
Load
Metadata
has
Def
get
Def
get
Def
get
Number
Of
Defs
get
Number
Of
Uses
get
Use
hash
Code
is
PEI
get
Exception
Types
is
Fall
Through
equals
i
Index
set
Instruction
Index
make
meet
Stack
meet
Local
all
The
Same
meet
Stack
At
Catch
Block
initialize
Variables
needs
Edge
Flow
emit
Instruction
get
Current
Instruction
reuse
Or
Create
Def
reuse
Or
Create
Exception
visit
Array
Length
visit
Array
Load
visit
Array
Store
visit
Binary
Op
visit
Check
Cast
visit
Comparison
visit
Conditional
Branch
visit
Constant
visit
Conversion
visit
Get
visit
Goto
visit
Instanceof
visit
Invoke
visit
Local
Load
visit
Local
Store
visit
Monitor
visit
New
visit
Put
visit
Return
visit
Shift
visit
Switch
find
Rethrow
Exception
visit
Throw
visit
Unary
Op
do
Indirect
Reads
visit
Load
Indirect
do
Indirect
Writes
visit
Store
Indirect
reuse
Or
Create
Pi
maybe
Insert
Pi
maybe
Insert
Pi
get
Def
visit
Invoke
visit
Conditional
Branch
get
Instructions
build
get
Local
Map
get
Indirection
Data
start
Range
finish
Local
Map
get
Local
Names
allocate
New
Locals
Array
set
Local
find
Locals
For
Value
Number
extract
Indices
copy
For
SSA
to
String
visit
get
Number
Of
Uses
get
Use
get
Val
hash
Code
is
Fall
Through
get
Local
Map
get
Indirection
Data
setup
Location
Map
instruction
Position
to
String
add
Names
get
Instructions
get
Symbol
Table
get
Control
Flow
Graph
get
Blocks
iterate
Phis
get
Block
Iterator
iterate
Pis
get
Block
Iterator
get
Block
Iterator
has
Next
next
remove
advance
Block
get
Parameter
Value
Numbers
get
Parameter
get
Parameter
Type
get
Number
Of
Parameters
get
Method
iterate
Catch
Instructions
has
Catch
has
Next
next
remove
advance
Block
visit
Normal
Instructions
visit
All
Instructions
iterate
Normal
Instructions
advance
Index
has
Next
remove
next
iterate
All
Instructions
get
Exit
Block
get
Calls
get
Call
Instruction
Indices
get
New
get
New
Instruction
Index
get
PEI
iterate
New
Sites
iterate
Call
Sites
advance
has
Next
next
remove
get
Basic
Blocks
For
Call
get
Basic
Block
For
Instruction
map
Instructions2Blocks
is
Empty
IR
get
Local
Names
get
Local
Names
get
Basic
Block
For
Catch
get
Options
create
Null
Test
Pi
Policy
get
Pi
get
Pi
get
Pis
visit
Address
Of
visit
Load
Indirect
visit
Store
Indirect
get
Pointee
Type
copy
For
SSA
hash
Code
is
Fall
Through
to
String
visit
create
Compound
Pi
Policy
get
Pi
get
Pi
hash
Code
equals
get
Pis
get
Names
get
Def
set
Def
get
Use
set
Use
get
Target
copy
For
SSA
get
Operator
to
String
visit
get
Number
Of
Uses
get
Use
get
Type
is
Object
Comparison
is
Integer
Comparison
hash
Code
is
Fall
Through
copy
For
SSA
get
Bootstrap
to
String
copy
For
SSA
to
String
visit
has
Def
get
Def
get
Def
get
Number
Of
Defs
get
Number
Of
Uses
get
Use
hash
Code
is
Fall
Through
is
Catch
Block
is
Exit
Block
is
Entry
Block
iterate
Phis
iterate
Pis
get
Last
Instruction
get
Caught
Exception
Types
copy
For
SSA
visit
hash
Code
equals
to
String
get
Def
get
Use
set
Def
set
Use
get
Names
to
String
to
String
get
Phi
Instruction
is
String
Constant
is
Null
Constant
get
Pi
get
Pi
get
Pis
copy
For
SSA
to
String
visit
get
Number
Of
Uses
get
Use
hash
Code
is
PEI
is
Fall
Through
get
Ref
is
Monitor
Enter
copy
For
SSA
to
String
visit
get
Def
has
Def
get
Def
get
Number
Of
Defs
get
Array
Ref
get
Number
Of
Uses
get
Use
hash
Code
is
PEI
is
Fall
Through
copy
For
SSA
to
String
visit
has
Def
get
Def
get
Def
get
Checked
Type
get
Number
Of
Defs
get
Number
Of
Uses
get
Use
hash
Code
is
Fall
Through
get
Ref
is
String
Constant
is
Null
Constant
find
Or
Create
IR
find
Or
Create
DU
find
Or
Create
DU
wipe
invalidate
IR
invalidate
DU
invalidate
get
Max
Value
Number
init
All
Instructions
get
Def
get
Use
get
Number
Of
Defs
get
Number
Of
Uses
get
Def
get
Uses
has
Next
next
remove
get
Number
Of
Uses
is
Unused
get
Default
Value
get
All
Built
In
Pi
Nodes
set
Default
Values
get
Default
Values
default
Options
get
Pi
Node
Policy
set
Pi
Node
Policy
hash
Code
equals
get
Loaded
Type
copy
For
SSA
to
String
visit
add
Pis
From
Induced
CFG
add
Phis
From
Induced
CFG
hash
Code
equals
record
Exception
Types
create
Basic
Blocks
get
Block
For
Instruction
get
Instructions
hash
Code
equals
get
Number
get
First
Instruction
Index
is
Catch
Block
get
Last
Instruction
Index
iterate
Phis
get
Phi
For
Stack
Slot
get
Phi
For
Local
add
Phi
For
Stack
Slot
add
Phi
For
Local
remove
Phis
get
Pi
For
Ref
And
Path
add
Pi
For
Ref
And
Path
iterate
Pis
iterate
Normal
Instructions
has
Next
next
remove
get
All
Instructions
compress
Phis
count
Non
Null
iterator
has
Phi
get
Graph
Node
Id
set
Graph
Node
Id
to
String
get
Graph
equals
get
Method
hash
Code
is
Exit
Block
is
Entry
Block
get
Last
Instruction
get
Caught
Exception
Types
get
Catch
Instruction
set
Catch
Instruction
get
Caught
Exception
Types
has
Next
next
remove
to
String
add
Caught
Exception
Type
get
All
Instructions
to
String
get
Catch
Blocks
is
Catch
Block
entry
exit
get
Number
get
Node
get
Max
Number
iterator
stream
get
Number
Of
Nodes
get
Pred
Nodes
has
Next
next
remove
get
Pred
Node
Count
get
Succ
Nodes
has
Next
next
remove
get
Succ
Node
Count
add
Node
add
Edge
remove
Edge
remove
All
Incident
Edges
remove
Node
And
Edges
remove
Node
get
Program
Counter
contains
Node
get
Method
get
Exceptional
Successors
get
Exceptional
Predecessors
get
Underlying
Block
has
Exceptional
Edge
has
Normal
Edge
get
Normal
Successors
get
Normal
Predecessors
iterate
Nodes
remove
Incoming
Edges
remove
Outgoing
Edges
has
Edge
get
Succ
Node
Numbers
get
Pred
Node
Numbers
get
Msg
create
get
Basic
Block
perform
do
Transformation
initialize
Variables
initialize
Work
List
is
Dead
make
Stmt
RHS
create
Nodes
make
entry
exit
get
Block
For
Instruction
get
Catch
Blocks
get
Exceptional
Predecessors
get
Exceptional
Successors
get
Instructions
get
Method
get
Normal
Predecessors
get
Normal
Successors
get
Program
Counter
remove
Node
And
Edges
add
Node
contains
Node
get
Number
Of
Nodes
iterator
stream
remove
Node
add
Edge
get
Pred
Node
Count
get
Pred
Nodes
get
Succ
Node
Count
get
Succ
Nodes
has
Edge
remove
All
Incident
Edges
remove
Edge
remove
Incoming
Edges
remove
Outgoing
Edges
get
Max
Number
get
Node
get
Number
iterate
Nodes
get
Pred
Node
Numbers
get
Succ
Node
Numbers
get
Exploded
CFG
get
Caught
Exception
Types
get
First
Instruction
Index
get
Last
Instruction
Index
get
Method
get
Number
is
Catch
Block
get
Catch
Instruction
is
Entry
Block
is
Exit
Block
get
Graph
Node
Id
set
Graph
Node
Id
iterator
hash
Code
equals
get
Instruction
get
Last
Instruction
iterate
Phis
iterate
Pis
to
String
get
Original
Number
to
String
get
IR
get
Instruction
get
Catch
Instruction
get
Original
Number
copy
For
SSA
to
String
visit
has
Def
get
Def
get
Def
get
Number
Of
Defs
hash
Code
copy
For
SSA
to
String
visit
get
Number
Of
Uses
get
Use
returns
Primitive
Type
get
Result
returns
Void
hash
Code
is
Fall
Through
create
Instance
Of
Pi
Policy
get
Pi
equals
hash
Code
get
Pi
get
Pis
copy
For
SSA
to
String
visit
get
Exception
has
Def
get
Def
get
Def
get
Number
Of
Defs
get
Basic
Block
Number
hash
Code
is
Fall
Through
copy
For
SSA
to
String
visit
get
Number
Of
Uses
get
Number
Of
Defs
get
Value
get
Use
hash
Code
new
Symbol
find
Or
Create
Constant
find
Or
Create
Constant
set
Constant
Value
set
Default
Value
get
Default
Value
get
Null
Constant
get
Constant
get
Constant
get
Constant
get
Constant
get
Constant
get
Other
Constant
get
Constant
get
Parameter
expand
For
New
Value
Number
get
New
Value
Number
ensure
Symbol
get
Value
String
is
Constant
is
Zero
is
One
is
True
is
Zero
Or
False
is
One
Or
True
is
False
is
Boolean
Or
Zero
One
Constant
is
Boolean
Constant
is
Integer
Constant
is
Long
Constant
is
Float
Constant
is
Double
Constant
is
Number
Constant
is
String
Constant
is
Null
Constant
new
Phi
get
Phi
Value
get
Max
Value
Number
get
Parameter
Value
Numbers
get
Number
Of
Parameters
get
String
Value
get
Float
Value
get
Double
Value
get
Int
Value
get
Long
Value
get
Constant
Value
get
Value
is
Parameter
copy
get
Pi
get
Pi
get
Pis
get
Target
copy
For
SSA
to
String
visit
hash
Code
is
Fall
Through
get
Number
Of
Uses
get
Use
get
Array
Ref
get
Index
get
Element
Type
type
Is
Primitive
is
PEI
is
Fall
Through
make
IR
context
Is
Irrelevant
to
String
visit
get
Operator
is
PEI
is
Fall
Through
may
Be
Integer
Op
copy
For
SSA
to
String
visit
has
Def
get
Def
get
Def
get
Number
Of
Uses
get
Number
Of
Defs
get
Use
set
Values
get
Value
String
hash
Code
is
Fall
Through
get
Call
Site
is
Static
is
Dispatch
is
Special
get
Receiver
get
Program
Counter
get
Number
Of
Defs
get
Def
get
Exception
has
Def
get
Def
get
Number
Of
Positional
Parameters
get
Number
Of
Return
Values
get
Return
Value
get
Declared
Result
Type
get
Declared
Target
get
Invocation
Code
is
PEI
is
Fall
Through
to
String
to
String
get
Number
Of
Uses
get
Use
hash
Code
is
PEI
is
Fall
Through
get
Exception
evaluate
equals
hash
Code
to
String
remove
Node
And
Edges
add
Node
contains
Node
get
Number
Of
Nodes
iterator
stream
remove
Node
add
Edge
get
Pred
Node
Count
get
Pred
Nodes
get
Succ
Node
Count
get
Succ
Nodes
has
Edge
remove
All
Incident
Edges
remove
Edge
remove
Incoming
Edges
remove
Outgoing
Edges
get
Callee
Target
get
Relevant
Parameters
instance
ID
propagate
search
From
Block
get
Edge
Transfer
Function
get
Meet
Operator
equals
evaluate
hash
Code
to
String
get
Node
Transfer
Function
has
Edge
Transfer
Functions
has
Node
Transfer
Functions
copy
State
intersect
get
Prefix
update
All
include
update
to
String
propagate
to
String
instance
ID
propagate
to
String
instance
ID
propagate
instance
ID
propagate
to
String
instance
ID
find
CG
Node
find
Instructions
get
Deps
propagate
to
String
instance
ID
get
Node
is
Default
Constructor
is
Non
Null
Constant
handle
String
handle
String
Builder
handle
String
Builder
To
String
handle
Uri
Wit
Append
Path
handle
Uri
Wit
Append
Path
handle
Uri
Parse
remove
Node
And
Edges
add
Node
contains
Node
get
Number
Of
Nodes
iterator
stream
remove
Node
add
Edge
get
Pred
Node
Count
get
Pred
Nodes
get
Succ
Node
Count
get
Succ
Nodes
has
Edge
remove
All
Incident
Edges
remove
Edge
remove
Incoming
Edges
remove
Outgoing
Edges
is
Application
Code
is
Application
Code
is
Application
Code
is
Of
Type
has
Signature
has
Signature
has
Signature
has
Signature
equals
hash
Code
to
String
get
Instance
Key
hash
Code
equals
to
String
get
Ref
hash
Code
equals
equals
hash
Code
to
String
get
Possible
Elements
index
add
get
Mapped
Index
has
Priority
Over
get
Mapped
Object
get
Maximum
Index
get
Size
has
Mapped
Index
iterator
stream
code
Elements
to
String
hash
Code
equals
value
Elements
equals
hash
Code
get
IK
get
Ref
equals
hash
Code
to
String
find
Sources
get
Flow
hash
Code
equals
to
String
add
Domain
Elements
add
Domain
Element
process
Input
Source
process
Static
Field
Source
process
Function
Calls
analyze
analyze
get
Targets
get
Targets
get
Targets
get
Targets
get
Targets
in
Flow
out
Flow
return
Flow
handle
Instruction
handle
Return
Flow
Instruction
handle
Invoke
Instruction
handle
Inflow
Instruction
handle
Outflow
Instruction
handle
Outflow
Invoke
Instruction
handle
Outflow
Array
Store
Instruction
handle
Outflow
Put
Instruction
handle
Inflow
Array
Load
Instruction
handle
Inflow
Get
Instruction
method
Excluded
get
Static
I
Field
add
Targets
get
Targets
get
Call
Flow
Function
get
Call
None
To
Return
Flow
Function
get
Call
To
Return
Flow
Function
get
Normal
Flow
Function
get
Targets
get
Return
Flow
Function
get
Targets
get
Use
get
Def
to
String
get
Normal
Flow
Function
get
Call
Flow
Function
get
Return
Flow
Function
get
Call
To
Return
Flow
Function
get
Call
None
To
Return
Flow
Function
get
Targets
get
Targets
get
Targets
load
load
get
Call
Flow
Function
make
Call
Flow
Function
get
Call
None
To
Return
Flow
Function
get
Call
To
Return
Flow
Function
get
Normal
Flow
Function
make
Normal
Flow
Function
make
Static
Field
Taints
get
Return
Flow
Function
get
Out
Code
Elts
get
In
Code
Elts
get
Field
Access
Code
Elts
get
Static
Field
Access
Code
Elts
get
Array
Ref
Code
Elts
union
compose
get
Arg
Num
hash
Code
equals
to
String
desc
String
visit
to
String
desc
String
get
Field
visit
hash
Code
equals
hash
Code
equals
to
String
get
IK
visit
to
String
desc
String
visit
get
Block
is
Source
to
String
desc
String
hash
Code
equals
compare
Blocks
visit
visit
Field
Flow
visit
IK
Flow
visit
Parameter
Flow
visit
Return
Flow
visit
Static
Field
Flow
to
String
desc
String
get
Field
hash
Code
equals
visit
analyze
analyze
analyze
analyze
get
Domain
get
Function
Map
get
Merge
Function
get
Supergraph
initial
Seeds
add
Edge
process
Arg
Sinks
process
Entry
Args
process
Entry
Rets
analyze
analyze
process
Sink
Spec
calculate
Sink
Points
calculate
Sink
Points
calculate
Sink
Points
visit
Invoke
calculate
Sink
Points
calculate
Sink
Points
find
Sources
get
Flow
find
Sources
get
Flow
specify
visit
Goto
visit
Array
Load
visit
Array
Store
visit
Binary
Op
visit
Unary
Op
visit
Conversion
visit
Comparison
visit
Conditional
Branch
visit
Switch
visit
Return
visit
Get
visit
Put
visit
Invoke
visit
New
visit
Array
Length
visit
Throw
visit
Monitor
visit
Check
Cast
visit
Instanceof
visit
Phi
visit
Pi
visit
Get
Caught
Exception
visit
Load
Metadata
pdf
CG
pdf
Partial
CG
pdf
One
Level
CG
system
To
Apk
CG
stdout
CG
include
Library
separate
Entries
ifds
Explorer
add
Main
Entrypoints
use
Thread
Run
Main
string
Prefix
Analysis
test
CG
Builder
class
Hierarchy
Warnings
cg
Builder
Warnings
use
Default
Policy
get
Classpath
get
Filename
get
Android
Library
get
Reflection
Options
get
Summaries
URI
begin
Task
is
Canceled
done
worked
sub
Task
cancel
get
Cancel
Message
code
Elements
For
Instance
Key
get
Options
get
Class
Hierarchy
get
Scope
get
Entrypoints
node
For
Method
output
Type
Cmd
Line
Param
dotify
dotify
spawn
Dot
write
Dot
File
dot
Output
output
Nodes
output
Node
compute
Dot
Nodes
get
Rank
Dir
decorate
Node
get
Label
get
Port
get
Font
Size
set
Font
Size
clean
Up
String
from
Loader
from
Loader
from
Loader
listener
Entry
Points
default
Entry
Points
activity
Model
Entry
add
Test
Entry
unpack
Apk
read
XML
File
get
Tag
Value
populate
Intent
List
populate
Entry
Points
Intent
To
Method
choose
Intent
List
get
Entries
process
URI
Arg
process
Classpath
process
Filename
process
Reflection
Options
has
Option
get
Option
pdf
CG
pdf
Partial
CG
pdf
One
Level
CG
system
To
Apk
CG
stdout
CG
include
Library
separate
Entries
ifds
Explorer
add
Main
Entrypoints
use
Thread
Run
Main
string
Prefix
Analysis
test
CG
Builder
use
Default
Policy
get
Classpath
get
Filename
get
Android
Library
get
Reflection
Options
get
Summaries
URI
class
Hierarchy
Warnings
cg
Builder
Warnings
make
Vanilla
Zero
One
CFA
Builder
make
Zero
CFA
Builder
add
Bypass
Logic
load
Method
Summaries
concrete
Classes
For
Interface
get
Options
get
Scope
get
Class
Hierarchy
set
Params
get
I
Method
get
Params
create
Loop
And
Switch
start
Method
build
Type
Map
add
Dependencies
process
Type
Map
process
Call
Back
Params
make
Argument
add
Local
process
Allocation
add
Invocation
get
Value
Number
For
Int
Constant
get
Summary
get
Flow
Type
to
String
get
Entrypoint
Specs
get
Source
Specs
get
Sink
Specs
get
Source
Specs
get
Sink
Specs
get
Entrypoint
Specs
get
Entrypoint
Specs
get
Source
Specs
collect
Fields
get
Sink
Specs
get
Flow
Type
to
String
lookup
Methods
get
Possible
Targets
to
String
get
Descriptor
get
Class
Name
get
Member
Name
pattern
For
Reference
combine
get
Source
Specs
get
Sink
Specs
get
Entrypoint
Specs
concat
get
Flow
Type
to
String
get
Field
get
Method
get
New
Arg
Nums
get
Name
Pattern
get
Arg
Nums
to
String
add
Domain
Elements
add
Domain
Elements
get
Flow
Type
to
String
get
Flow
Type
to
String
add
Domain
Elements
get
Flow
Type
to
String
lookup
Fields
add
Domain
Elements
to
String
add
Domain
Elements
to
String
get
New
Arg
Nums
get
Name
Pattern
get
Arg
Nums
to
String
get
Flow
Type
get
Entrypoint
Specs
get
Source
Specs
get
Sink
Specs
add
Possible
Listeners
get
Call
Backs
visit
Goto
visit
Array
Load
visit
Array
Store
visit
Binary
Op
visit
Unary
Op
visit
Conversion
visit
Comparison
visit
Conditional
Branch
visit
Switch
visit
Return
visit
Get
visit
Put
visit
Invoke
visit
New
visit
Array
Length
visit
Throw
visit
Monitor
visit
Check
Cast
visit
Instanceof
visit
Phi
visit
Pi
visit
Get
Caught
Exception
visit
Load
Metadata
new
Local
Def
get
Local
Name
get
Inst
Summary
type
Ref
To
Str
serialize
add
find
Or
Create
Class
Elt
find
Or
Create
Clr
Elt
find
Or
Create
Pkg
Elt
summarize
Instructions
get
Method
Descriptor
pdf
CG
pdf
Partial
CG
pdf
One
Level
CG
system
To
Apk
CG
stdout
CG
include
Library
separate
Entries
ifds
Explorer
add
Main
Entrypoints
use
Thread
Run
Main
string
Prefix
Analysis
test
CG
Builder
use
Default
Policy
get
Classpath
get
Filename
get
Android
Library
get
Reflection
Options
get
Summaries
URI
class
Hierarchy
Warnings
cg
Builder
Warnings
dump
String
open
close
import
Zipped
Project
create
Open
Project
destroy
Project
import
Project
From
Filesystem
import
Zipfile
import
Project
get
Test
Data
File
get
Zip
File
get
Workspace
get
Workspace
Path
report
Exception
main
run
type
Hierarchy2Graph
prune
For
App
Loader
prune
Graph
validate
Command
Line
main
run
build
Points
To
main
run
main
test
Just
Open
make
Test
Graph
And
Roots
start
stop
get
Default
create
Project
Path
get
Call
Graph
Builder
make
Analysis
Scope
build
Analysis
Scope
get
Eclipse
Project
Path
get
Class
Hierarchy
make
Default
Cache
get
Source
Loader
get
Default
Options
get
Application
Window
set
Application
Window
is
Block
Input
set
Block
Input
to
String
get
Label
stringify
run
get
Procedure
For
Selection
get
Viewer
get
Supergraph
get
Dot
Exe
get
Dot
File
get
Gv
Exe
get
Ps
File
get
Graph
Input
set
Graph
Input
get
Roots
Input
set
Roots
Input
get
Node
Decorator
Input
set
Node
Decorator
Input
get
Pop
Up
Actions
to
String
run
just
Open
For
Test
get
Selection
create
Contents
dispose
input
Changed
get
Children
get
Parent
has
Children
get
Elements
get
Text
set
Dot
Exe
set
Gv
Exe
view
IFDS
view
IFDS
view
IFDS
view
IFDS
get
Dot
Exe
get
Gv
Exe
run
get
IR
For
Selection
get
Node
For
Selection
get
Viewer
get
Cg
get
Dot
Exe
get
Dot
File
get
Gv
Exe
get
Ps
File
get
Jar
File
Module
get
Jar
File
Module
get
From
Plugin
get
File
URL
From
Plugin
fixup
File
URL
Spaces
get
Resource
get
File
get
File
From
Plugin
get
Wala
Core
Plugin
Home
create
Progress
Monitor
Delegate
begin
Task
is
Canceled
done
worked
sub
Task
cancel
get
Cancel
Message
make
Project
resolve
resolve
Classpath
Entry
resolve
Project
Classpath
Entries
ref
ref
create
resolve
Library
Path
Entry
resolve
Source
Path
Entry
resolve
Project
Path
Entry
resolve
Plugin
Class
Path
resolve
Bundle
Description
Class
Path
already
Processed
is
Plugin
Project
is
Primordial
Jar
File
resolve
Classpath
Entries
make
Absolute
to
Analysis
Scope
to
Analysis
Scope
to
Analysis
Scope
to
Analysis
Scope
get
Modules
to
String
find
Model
find
Model
parse
Command
Line
get
Project
From
Workspace
get
Compilation
Unit
get
Parser
set
Project
process
AS
Ts
parse
Modules
read
Java
Scope
From
Plugin
read
Java
Scope
From
Plugin
make
Primordial
Scope
From
Plugin
make
Primordial
Scope
From
Plugin
make
Java
Binary
Analysis
Scope
From
Plugin
make
Java
Binary
Analysis
Scope
From
Plugin
start
stop
get
Default
interpret
Pattern
interpret
Excludes
make
File
include
File
to
String
create
Eclipse
Source
File
Module
get
I
File
to
String
test
Open
Project
test
Project
Scope
make
Project
Path
test
Parsing
test
Engine
make
Analysis
Engine
start
stop
get
Default
start
stop
get
Default
get
Prologue
File
get
Java
Script
Code
From
Project
build
JSDT
Call
Graph
get
Compilation
Unit
get
Parser
set
Project
process
AS
Ts
visit
visit
visit
accept
AST
get
Java
Script
Project
From
Workspace
ref
make
create
make
Project
resolve
resolve
Classpath
Entry
resolve
Project
Classpath
Entries
make
resolve
Source
Path
Entry
make
Class
Loader
Factory
make
Analysis
Scope
create
Project
Path
get
Field
Based
Call
Graph
get
Default
Options
get
Exclusions
File
make
Default
Entrypoints
make
Class
Loader
Factory
make
Analysis
Scope
create
Project
Path
get
Source
Loader
make
Default
Cache
get
Call
Graph
Builder
get
Field
Based
Call
Graph
get
Field
Based
Call
Graph
get
Script
Name
get
Field
Based
Call
Graph
flow
Graph
Factory
filter
Function
flow
Graph
Factory
start
stop
set
Active
Part
compute
Scope
compute
Scope
run
compute
Java
Projects
merge
Project
Paths
build
Scope
run
selection
Changed
get
Current
Selection
get
File
Path
get
Package
Name
get
Fully
Qualified
Class
Name
get
Class
Name
get
Jdt
Handle
String
create
Java
Element
From
Jdt
Handle
get
Classes
get
Project
get
Project
Name
get
Human
Readable
Type
get
Java
Project
get
Java
Project
get
Workspace
Java
Projects
find
Java
Class
In
Projects
find
Java
Class
In
Resources
find
Java
Method
In
Projects
get
Type
Parameter
Names
parse
For
Name
parse
For
Parameter
Types
to
Array
find
Java
Method
In
Workspace
Broken
For
Inner
Classes
accept
Search
Match
find
Methods
accept
Search
Match
get
Structured
Selection
For
Project
Names
get
Named
Project
get
AST
get
Original
Node
get
Original
Node
ref
make
make
Project
resolve
resolve
Classpath
Entry
resolve
Project
Classpath
Entries
get
First
Col
get
First
Line
get
Reader
get
Last
Col
get
Last
Line
get
URL
compare
To
get
First
Offset
get
Last
Offset
to
String
get
Eclipse
File
equals
hash
Code
get
AST
Node
start
stop
get
Default
set
Dump
make
Class
Loader
Factory
make
Analysis
Scope
get
Source
Loader
make
Default
Cache
create
Project
Path
get
Call
Graph
Builder
accept
AST
compute
Class
Path
load
All
Sources
make
IR
Translator
make
C
Ast
Translator
make
Position
make
New
Class
Loader
make
Source
Loader
get
Translator
main
run
Test
Case
make
Demand
Pointer
Analysis
get
Exclusions
build
Call
Graph
choose
Refine
Policy
Factory
make
State
Machine
Factory
find
Failing
Casts
start
stop
get
Default
get
Analysis
Engine
make
Analysis
Engine
make
Default
Entrypoints
start
stop
get
Default
check
get
IR
check
make
make
make
make
check
check
check
check
check
single
Test
Src
single
Test
Src
single
Pkg
Test
Src
get
Test
Name
simple
Test
Entry
Point
simple
Pkg
Test
Entry
Point
get
Analysis
Engine
run
Test
dump
IR
descriptor
To
Method
Ref
find
Or
Create
Type
Reference
find
Loader
populate
Scope
set
Test
Src
Path
get
Test
Src
Path
single
Java
Input
For
Test
single
Input
For
Test
single
Java
Pkg
Input
For
Test
single
Java
Input
For
Test
test
J
Lex
single
Java
Pkg
Input
For
Test
test
Dominance
Frontier
Case
test
Monitor2
test
Peek
Error
Case
test
Simple1
test
Two
Classes
test
Interface
Test1
test
Inheritance1
test
Array1
check
is
Array
Instruction
test
Array
Literal1
test
Array
Literal2
test
Inherited
Field
test
Qualified
Static
test
Static
Nesting
test
Cast
From
Null
test
Inner
Class
test
Null
Array
Init
test
Inner
Class
A
test
Inner
Class
Super
test
Local
Class
test
Anonymous
Class
test
While
Test1
test
Switch1
test
Exception1
test
Exception2
test
Finally1
test
Scoping1
test
Scoping2
test
Non
Primary
Top
Level
test
Miniatur
List
test
Monitor
test
Static
Initializers
test
Thread1
test
Casts
test
Breaks
get
Slice
Root
Reference
test
Miniatur
Slice
Bug
test
Thin
Slice
test
Do
While
In
Case
test
Var
Decl
In
Switch
test
Exclusions
test
Lexical
Access
Of
Method
Variables
From
Anonymous
Class
hash
Code
parent
equals
to
String
translate
key
key
contains
Node
flow
Out
To
contains
is
Synchronized
On
Var
copy
Nodes
compute
Backward
Slice
compute
Slice
gather
Statements
gather
Assertions
gather
Monitors
gather
Writes
gather
Reads
compute
Assertion
Slice
make
init
Core
For
Java
Source
get
Source
Loader
add
To
Scope
get
Parents
is
Possibly
Lexical
Class
needs
Scope
Mapping
Key
get
Constructor
Callers
use
Object
Catalog
field
Key
For
Unknown
Writes
hash
Code
equals
make
Type
Inference
visit
Enclosing
Object
Reference
visit
Java
Invoke
make
Interesting
Visitor
handle
Enclosing
Object
evaluate
hash
Code
equals
to
String
visit
Enclosing
Object
Reference
visit
New
visit
Java
Invoke
make
Visitor
same
Method
get
Global
Object
make
Instance
Keys
make
Container
Context
Selector
visit
Java
Invoke
visit
Enclosing
Object
Reference
make
Ref
Visitor
visit
Java
Invoke
visit
Enclosing
Object
Reference
make
Mod
Visitor
is
Interface
get
Name
get
Long
Name
get
Supertypes
get
Short
Name
lookup
Type
add
Source
Module
add
Compiled
Module
add
System
Module
add
Application
Modules
To
Scope
build
Analysis
Scope
make
Source
Analysis
Scope
get
Class
Loader
Factory
build
Class
Hierarchy
make
Default
Entrypoints
make
Default
Cache
get
Options
get
Default
Options
get
Call
Graph
Builder
make
make
make
translate
get
Signature
load
All
Sources
translate
source
File
Entity
loader
use
Default
Init
Values
has
Implicit
Globals
default
Catch
Type
make
Type
treat
Globals
As
Lexically
Scoped
do
Throw
do
Array
Read
do
Array
Write
do
Field
Read
do
Field
Write
do
Materialize
Function
do
New
Object
process
Exceptions
do
Call
do
Global
Write
define
Field
declare
Function
define
Function
do
Primitive
compose
Entity
Name
get
Enclosing
Type
get
Enclosing
Type
Internal
define
Type
leave
This
visit
Cast
leave
Cast
visit
Instance
Of
leave
Instance
Of
do
Visit
get
Type
get
Supertypes
get
Name
is
Interface
get
Qualifiers
top
Type
exception
Type
get
Parameter
Positions
visit
Binary
Op
visit
Enclosing
Object
Reference
visit
Java
Invoke
make
Variable
get
String
Class
initialize
get
Constant
Primitive
Type
evaluate
hash
Code
equals
get
Annotations
get
Class
Hierarchy
get
Superclass
get
Direct
Interfaces
add
Method
add
Method
add
Field
get
Enclosing
Class
to
String
get
Annotations
get
Max
Locals
get
Max
Stack
Height
get
Parameter
Type
compute
Parameter
Types
get
Declared
Exceptions
compute
Exception
Types
to
String
get
Local
Variable
Name
has
Local
Variable
Table
get
Parents
get
Class
Hierarchy
get
Class
Hierarchy
get
Local
Variable
Name
has
Local
Variable
Table
get
Parents
get
Name
get
Method
map
To
Int
get
Class
Hierarchy
load
All
Sources
get
Translator
init
define
Function
define
Abstract
Function
define
Field
to
WALA
Type
Name
define
Type
to
String
Enclosing
Object
Reference
Java
New
Enclosing
Instruction
Java
Invoke
Instruction
Assert
Instruction
Assign
Instruction
Each
Element
Get
Instruction
Each
Element
Has
Next
Instruction
Echo
Instruction
Global
Read
Global
Write
Is
Defined
Instruction
Is
Defined
Instruction
Is
Defined
Instruction
Is
Defined
Instruction
Lexical
Read
Lexical
Read
Lexical
Read
Lexical
Write
Lexical
Write
Lexical
Write
Yield
Instruction
Property
Read
Property
Write
get
Instruction
Factory
method
Entity
To
Selector
field
Entity
To
Atom
get
Number
Of
Uses
get
Use
get
Enclosing
to
String
copy
For
SSA
get
Exception
Types
has
Def
get
Def
get
Def
get
Number
Of
Defs
get
Enclosing
Type
copy
For
SSA
to
String
visit
hash
Code
get
Exception
Types
is
Fall
Through
copy
Instruction
visit
get
Exception
Types
hash
Code
visit
Java
Invoke
visit
Enclosing
Object
Reference
visit
Java
Invoke
visit
Enclosing
Object
Reference
Java
Invoke
Instruction
Enclosing
Object
Reference
Java
New
Enclosing
Instruction
main
get
Value
get
Value
main
from
Inner
from
Inner2
method
another
Method
main
main
get
A
X
make
AB
do
Some
Crazy
Stuff
do
More
With
AB
Sub
A
get
A
X
from
AB
get
A
X
thru
AB
get
ABA
X
get
A
X
get
ABA
X
get
ABA
X
get
A
X
make
ABAA
get
A
X
run
test
main
hello
hash
Code
main
main
main
support
Local
Business
hash
Code
anonymous
Coward
hash
Code
main
to
String
meenie
hello
hello
Again
hello2
set
SE
Var
hello
main
static
Test
protected
Integer
protected
Integer2
default
Void
private
Void
protected
Void
private
Integer
private
Integer2
private
Integer
protected
Integer
hello
main
to
String
main
main
main
main
main
main
main
test
empty
empty
Instance
hey
main
main
run
hash
Code
do
Stuff
main
instance
Method1
instance
Method2
main
main
main
foo
bar
foo
bar
main
do
All
This
get
A
X
make
AB
do
Some
Crazy
Stuff
do
More
With
AB
Sub
A
get
A
X
from
AB
get
A
X
thru
AB
get
ABA
X
get
A
X
get
ABA
X
get
ABA
X
get
A
X
make
ABAA
get
A
X
test
main
main
foo
set
Int
Value
int
Value
equals
int
Value
set
Int
Value
equals
valid
Non
Dispatched
Call
main
main
bar
bar
do
Stuff
main
instance
Method1
instance
Method2
create
sum
diff
sum
main
main
bar
main
test
funky
main
funky
main
get
Value
get
Value
Base
method
get
Value
get
Value
Base
main
start
hash
Code
main
get
Constant
make
Int
Constant
get
Constant
main
main
convert
main
test
One
test
Two
test
Three
random
Isolate
incr
main
test
main
get
Value
get
Value
Base
main
get
Value
get
Value
Base
method
get
Value
get
Value
Base
get
Value
hello
World
hello
World
another
Call
main
doit
doit
run
main
main
run
main
run
main
foo
bar
main
foo
main
main
bar
bletch
main
main
foo
foo
foo
foo
bar
bar
main
doit
print
Collection
print
Collection1
print
Collection2
main
doit
foo
foo
foo
main
doit
get
get
get
doit
main
get
Opposite
get
Opposite
get
Opposite
get
Opposite
get
Opposite
get
Translation
doit
main
from
Array
To
Collection
foo
main
doit
main
make
Array
part1
part2
mymethod
main
main
doit
hello
my
Values
main
doit
doit
main
nullary
unary
unary
nullary
main
doit
unary
nullary
main
hello
hello
main
doit
foo
bar
bar
foo
set
Foo
foo
do
Foo
get
B
cg2With
Side
Effects
main
doit
has
Next
next
remove
main
doit
main
doit
varargs
varargs
main
nullary
nullary
main
doit
main
doit
main
doit
get
get
main
doit
incr
main
main
read
First
Line
From
File
view
Table
main
decode
Instruction
nop
copy
Accum
To
add
To
Accum
sub
From
Accum
multiply
Accum
By
divide
Accum
By
set
Accum
From
return
From
Call
jump
To
jump
If
Accum
Zero
To
jump
If
Accum
Nonzero
To
set
Accum
From
Memory
write
Accum
To
Memory
call
To
test
main
main
get
Type
Of
Day
With
Switch
Statement
main
test
test
main
main
main
remove
cons
contains
main
main
get
Classes
test
Break
From
If
main
main
get
Analysis
Engine
make
Default
Entrypoints
get
Analysis
Engine
make
Default
Entrypoints
get
Analysis
Engine
make
Default
Entrypoints
test
Comments
get
Analysis
Engine
make
Default
Entrypoints
get
Analysis
Engine
make
Default
Entrypoints
check
test
Binary
Literals
check
test
Catch
Multiple
Exception
Types
test
Strings
In
Switch
test
Try
With
Resources
Statement
test
Type
Inferencefor
Generic
Instance
Creation
test
Underscores
In
Numeric
Literals
get
Analysis
Engine
make
Default
Entrypoints
get
Class
Loader
Factory
make
Source
Loader
get
Translator
make
C
Ast
Translator
translate
To
C
Ast
make
Position
get
Class
Loader
Factory
get
C
Ast
Type
For
Union
get
C
Ast
Type
For
get
Num
Dimensions
get
Element
Type
get
Name
get
Supertypes
to
String
get
Name
get
Supertypes
build
Super
Types
get
Qualifiers
is
Interface
get
Type
get
Name
get
Supertypes
get
Constituents
is
Assignment
Compatible
equals
hash
Code
create
Array
Type
get
Binary
Name
get
Bound
get
Component
Type
get
Declared
Fields
get
Declared
Methods
get
Declared
Modifiers
get
Declared
Types
get
Declaring
Class
get
Declaring
Method
get
Dimensions
get
Element
Type
get
Erasure
get
Interfaces
get
Modifiers
get
Name
get
Package
get
Qualified
Name
get
Superclass
get
Type
Arguments
get
Type
Bounds
get
Type
Declaration
get
Type
Parameters
get
Wildcard
is
Annotation
is
Anonymous
is
Array
is
Capture
is
Cast
Compatible
is
Class
is
Enum
is
Record
is
From
Source
is
Generic
Type
is
Interface
is
Intersection
Type
is
Local
is
Member
is
Nested
is
Null
Type
is
Parameterized
Type
is
Primitive
is
Raw
Type
is
Sub
Type
Compatible
is
Top
Level
is
Type
Variable
is
Upperbound
is
Wildcard
Type
get
Annotations
get
Java
Element
get
Key
get
Kind
is
Deprecated
is
Equal
To
is
Recovered
is
Synthetic
get
Generic
Type
Of
Wildcard
Type
get
Rank
get
Functional
Interface
Method
get
Type
Annotations
get
Declaring
Member
get
Type
Ref
type
To
Type
ID
anon
Local
Type
To
Type
ID
get
Field
Ref
fake
Method
Ref
No
Args
get
Method
Ref
selector
For
Method
make
New
Class
Loader
make
Source
Loader
get
Translator
make
Position
get
URL
get
Reader
get
First
Line
get
Last
Line
get
First
Col
get
Last
Col
get
First
Offset
get
Last
Offset
accept
AST
compute
Class
Path
load
All
Sources
make
IR
Translator
make
C
Ast
Translator
map
Modifiers
To
Qualifiers
map
Assign
Operator
map
Binary
Opcode
is
Long
Or
Less
default
Value
For
Type
promote
Types
get
Declaring
Class
Of
Node
anon
Type
Name
get
Erased
Type
get
Types
Variables
Base
map
Assign
Operator
To
Infix
Operator
get
Method
In
Class
Or
Superclass
get
Overridden
Method
same
Erased
Signature
And
Return
Type
translate
To
C
Ast
get
Position
get
Annotations
get
Kind
get
Name
get
Signature
get
Argument
Names
get
Argument
Defaults
get
Argument
Count
get
AST
get
All
Scoped
Entities
get
Scoped
Entities
get
Control
Flow
get
Source
Map
get
Position
get
Node
Type
Map
get
Node
Type
get
Mapped
Nodes
get
Qualifiers
get
Type
get
Name
Position
is
Interface
visit
Type
Decl
create
Class
Declaration
visit
visit
create
Default
Constructor
With
Parameters
create
Default
Constructor
find
Default
Ctor
create
Constructor
Body
make
Synthetic
Covariant
Redirect
visit
handle
Annotations
get
Type
get
Arguments
to
String
get
All
Scoped
Entities
get
Scoped
Entities
get
Signature
get
Annotations
to
String
get
Kind
get
Name
get
Argument
Names
get
Argument
Defaults
get
Argument
Count
get
AST
get
Control
Flow
get
Source
Map
get
Position
get
Node
Type
Map
get
Qualifiers
get
Type
is
Static
get
Return
Type
get
Argument
Types
get
Argument
Count
get
Name
get
Supertypes
get
Exception
Types
get
Declaring
Type
get
Position
get
Name
Position
visit
Field
Init
Node
get
Annotations
get
Kind
get
Name
get
Signature
get
Argument
Names
get
Argument
Defaults
get
Argument
Count
get
Scoped
Entities
get
All
Scoped
Entities
get
AST
get
Control
Flow
get
Source
Map
get
Position
get
Node
Type
Map
get
Qualifiers
get
Type
get
Position
get
Name
Position
create
Block
visit
visit
visit
visit
visit
visit
create
Class
Instance
Creation
handle
Throws
From
Call
visit
visit
visit
create
Method
Invocation
populate
Arguments
visit
visit
do
Funky
Generic
Assign
Pre
Op
Hack
visit
visit
visit
visit
visit
visit
visit
visit
find
Closest
Enclosing
Class
Subclass
Of
visit
create
Field
Access
visit
visit
visit
create
Infix
Expression
visit
visit
visit
create
Constructor
Invocation
visit
visit
visit
create
Cast
visit
visit
visit
visit
visit
visit
make
Break
Or
Continue
Target
visit
visit
visit
get
Switch
Case
Constant
visit
visit
visit
visit
make
Iterator
Enhanced
For
Loop
make
Array
Enhanced
For
Loop
visit
visit
visit
visit
hook
Up
NPE
Targets
visit
visit
visit
visit
visit
Node
visit
Node
Or
Nodes
get
Annotations
get
Kind
get
Name
get
Signature
get
Argument
Names
get
Argument
Defaults
get
Argument
Count
get
All
Scoped
Entities
get
Scoped
Entities
get
AST
get
Control
Flow
get
Source
Map
get
Position
get
Node
Type
Map
get
Qualifiers
get
Type
get
Position
get
Name
Position
get
Catch
Targets
get
Label
Map
need
L
Value
get
Catch
Targets
get
Label
Map
need
L
Value
get
Catch
Targets
get
Label
Map
need
L
Value
need
L
Value
get
Catch
Targets
get
Break
For
get
Continue
For
add
Name
Decl
get
Name
Decls
get
Label
Map
cfg
add
Scoped
Entity
pos
get
Node
Type
Map
get
Catch
Targets
need
L
Value
make
Node
make
Node
make
Node
make
Node
make
Node
make
Node
make
Node
make
Node
set
Pos
make
Position
make
Position
visit
create
Enum
Constant
Declaration
Init
create
Enum
Value
Of
Method
create
Enum
Values
Method
do
Enum
Hidden
Entities
visit
create
Enum
Constructor
With
Parameters
process
main
get
Loader
Factory
doit
get
Entrypoints
verify
CFG
Assertions
verify
Source
Assertions
verify
Name
Assertions
verify
Graph
Assertions
verify
No
Edges
to
String
get
Nodes
get
Classes
get
Super
Classes
get
Instance
Fields
get
Static
Fields
get
Instance
Methods
get
Static
Methods
get
Language
get
Test
Path
get
Class
Loader
Factory
run
Translator
dump
check
Assertions
test
Internal
test
Internal
fake
Entity
get
Kind
get
Name
get
Signature
get
Argument
Names
get
Argument
Defaults
get
Argument
Count
get
All
Scoped
Entities
get
Scoped
Entities
get
AST
get
Control
Flow
get
Source
Map
get
Position
get
Node
Type
Map
get
Qualifiers
get
Type
get
Annotations
get
Position
get
Name
Position
test
Segments
Root1
test
Root1
test
Segments
Root2
test
Root3
test
Root4
invent
Ast
add
Rewriter
translate
To
C
Ast
get
Kind
get
Name
get
Signature
get
Argument
Names
get
Argument
Defaults
get
Argument
Count
get
All
Scoped
Entities
get
Scoped
Entities
get
AST
get
Control
Flow
get
Source
Map
get
Position
get
Node
Type
Map
get
Qualifiers
get
Type
get
Annotations
get
Position
get
Name
Position
test
Native
C
Ast
make
Node
test
test
Simple
Name
test
Simple
Star
Name
test
Simple
Repeated
One
test
Simple
Repeated
Two
test
Simple
Repeated
Three
test
Simple
Double
Star
test
Simple
Alternative
test
Simple
Optional
With
test
Simple
Optional
Not
test
Recursive
Tree
One
test
Recursive
Tree
Two
test
Recursive
Tree
Five
test
Buggy
Recursive
Tree
One
test
Buggy
Recursive
Tree
Two
test
Buggy
Recursive
Tree
Five
test
Tested
Tree
One
test
Tested
Tree
Two
test
Tested
Tree
Five
test
Tested
Tree
One
With
Test
do
Array
Read
do
Array
Write
get
AST
get
Control
Flow
get
Source
Map
get
Node
Type
Map
get
Argument
Names
get
Argument
Defaults
get
Argument
Count
get
Local
File
get
File
make
Location
get
First
Line
get
Last
Line
get
First
Col
get
Last
Col
get
First
Offset
get
Last
Offset
get
URL
get
Input
Stream
to
String
get
Reader
translate
To
C
Ast
to
String
get
Kind
get
Name
get
Type
get
Qualifiers
translate
get
Kind
get
File
get
Name
to
String
get
Argument
Names
get
Argument
Defaults
get
Argument
Count
get
Qualifiers
get
File
Name
add
Rewriter
translate
To
C
Ast
get
Parent
add
Name
Decl
get
Name
Decls
get
Scoped
Entities
get
Catch
Target
get
Catch
Target
top
add
Scoped
Entity
cfg
pos
get
Node
Type
Map
get
Continue
For
get
Break
For
get
Scoped
Entities
get
Name
Decls
add
Scoped
Entity
cfg
pos
get
Node
Type
Map
get
Continue
For
get
Break
For
top
get
Parent
top
get
Parent
get
Break
For
get
Continue
For
get
Catch
Target
get
Catch
Target
get
Parent
top
add
Scoped
Entity
get
Scoped
Entities
cfg
pos
translate
Do
Loop
push
Source
Position
get
AST
get
Type
get
Control
Flow
get
Source
Map
get
Node
Type
Map
set
Goto
Target
set
Labelled
Goto
Target
set
Node
Position
set
Node
Type
set
Ast
get
All
Scoped
Entities
get
Signature
get
Annotations
set
Position
get
Position
get
Scoped
Entities
add
Scoped
Entity
use
Default
Init
Values
treat
Globals
As
Lexically
Scoped
top
Level
Functions
In
Global
Scope
default
Catch
Type
make
Type
define
Type
declare
Function
define
Function
define
Field
compose
Entity
Name
do
Throw
do
Array
Read
do
Array
Write
do
Field
Read
do
Field
Write
do
Materialize
Function
do
New
Object
do
Call
top
Type
exception
Type
lift
Declarations
For
Lexical
Scoping
is
Exception
Label
has
Implicit
Globals
has
Special
Undeclared
Variables
handle
Unspecified
Literal
Key
do
Prologue
do
Primitive
do
Local
Read
do
Local
Write
do
Lexically
Scoped
Read
ignore
Name
do
Lex
Read
Helper
mark
Exposed
In
Enclosing
Entities
do
Lexically
Scoped
Write
do
Global
Read
do
Global
Write
make
Global
Ref
get
Code
Body
Position
get
Code
Name
Position
get
Instruction
Position
get
Operand
Position
get
Source
Names
For
Values
get
Parameter
Position
disjoint
get
Comment
get
URL
get
Reader
get
First
Line
get
Last
Line
get
First
Col
get
Last
Col
get
First
Offset
get
Last
Offset
get
Following
Comment
get
Leading
Comment
get
Number
get
Graph
Node
Id
set
Graph
Node
Id
get
First
Instruction
Index
set
First
Index
get
Last
Instruction
Index
set
Last
Index
make
Exit
Block
make
Entry
Block
make
Handler
Block
is
Entry
Block
is
Exit
Block
is
Handler
Block
to
String
instructions
is
Catch
Block
get
Method
iterator
get
Parent
hash
Code
equals
covers
set
Unwind
State
set
Unwind
State
find
Or
Create
Code
flow
Out
To
get
Source
Map
get
Control
Flow
get
Current
Instruction
get
Current
Block
has
Catch
Block
has
Monitor
Op
note
Catch
Block
get
Line
Position
Map
new
Block
add
Delayed
Edge
make
Entry
Block
make
Exit
Block
set
Current
Block
As
Handler
has
Delayed
Edges
check
For
Realized
Edges
check
For
Realized
Exit
Edges
set
Unwind
State
add
Pre
Node
add
Pre
Node
add
Pre
Edge
add
Pre
Edge
add
Pre
Edge
To
Exit
add
Pre
Edge
To
Exit
add
Edge
is
Dead
Block
get
Block
note
Line
Position
ensure
Position
Space
note
Operands
unknown
Instructions
add
Instruction
to
String
get
Operand
Position
Map
act
transfer
Edges
check
Block
Boundaries
hash
Code
equals
get
Block
For
Instruction
get
Instructions
get
Program
Counter
to
String
type
name
is
Final
is
Case
Insensitive
is
Internal
Name
default
Init
Value
is
Internal
Name
value
Number
get
Defining
Scope
is
Parameter
constant
set
Constant
is
Final
is
Global
is
Internal
Name
default
Init
Value
type
type
allocate
Temp
Value
get
Constant
Value
is
Constant
get
Constant
Object
declare
declare
is
Case
Insensitive
contains
lookup
get
All
Names
size
is
Global
is
Lexically
Scoped
get
Entity
get
Parent
is
Final
default
Init
Value
constant
set
Constant
get
Defining
Scope
get
Underlying
Symtab
get
Parent
size
get
All
Names
allocate
Temp
Value
get
Constant
Value
is
Constant
get
Constant
Object
declare
declare
map
Name
make
Symbol
make
Symbol
make
Symbol
is
Case
Insensitive
lookup
contains
is
Global
is
Lexically
Scoped
get
Entity
Scope
get
Entity
make
Script
Scope
get
Underlying
Symtab
get
Entity
Scope
is
Lexically
Scoped
get
Entity
type
make
Symbol
to
String
type
value
Number
is
Internal
Name
is
Parameter
is
Global
get
Argument
Count
get
Argument
Names
make
Function
Scope
to
String
name
type
is
Final
is
Case
Insensitive
is
Internal
Name
default
Init
Value
get
Underlying
Symtab
get
Entity
Scope
is
Lexically
Scoped
get
Entity
type
find
make
Symbol
type
to
String
value
Number
is
Internal
Name
is
Parameter
is
Global
make
Local
Scope
type
get
Underlying
Symtab
get
Entity
Scope
is
Lexically
Scoped
get
Entity
make
Symbol
to
String
type
value
Number
is
Internal
Name
is
Parameter
is
Global
make
Global
Scope
to
String
map
Name
get
Parent
is
Global
is
Lexically
Scoped
get
Entity
size
get
All
Names
allocate
Temp
Value
get
Constant
Value
is
Constant
get
Constant
Object
type
contains
is
Case
Insensitive
lookup
name
is
Final
is
Case
Insensitive
is
Internal
Name
default
Init
Value
type
declare
declare
to
String
type
is
Parameter
is
Internal
Name
value
Number
is
Global
make
Type
Scope
map
Name
get
Parent
is
Global
is
Lexically
Scoped
get
Entity
size
get
All
Names
allocate
Temp
Value
get
Constant
Value
is
Constant
get
Constant
Object
type
contains
is
Case
Insensitive
lookup
declare
declare
to
String
type
is
Parameter
is
Internal
Name
value
Number
is
Global
code
Context
get
Module
get
Name
file
get
Source
Map
get
Control
Flow
current
Scope
entity
Scopes
cfg
get
Unwind
State
set
Catch
Type
set
Catch
Type
get
Catch
Types
add
Entity
Name
get
Entity
Name
has
Value
set
Value
get
Value
expose
Name
Set
get
Accesses
get
Global
Scope
code
Context
get
Accesses
get
Module
get
Name
file
top
get
Source
Map
get
Control
Flow
current
Scope
entity
Scopes
cfg
get
Unwind
State
set
Catch
Type
set
Catch
Type
get
Catch
Types
add
Entity
Name
get
Entity
Name
has
Value
set
Value
get
Value
expose
Name
Set
get
Global
Scope
get
Name
get
Unwind
State
get
Name
top
get
Source
Map
code
Context
get
Accesses
expose
Name
Set
get
Control
Flow
cfg
current
Scope
entity
Scopes
get
Unwind
State
set
Catch
Type
set
Catch
Type
get
Catch
Types
has
Value
set
Value
get
Value
get
Control
Flow
cfg
get
Unwind
State
current
Scope
build
Lexical
Use
Array
build
Lexical
Names
Array
get
Exit
Exposed
Uses
get
Exposed
Uses
get
All
Exposed
Uses
get
Exposed
Names
get
Scoping
Parents
is
Read
Only
get
Scoping
Name
has
Exposed
Uses
add
Access
add
Exposed
Name
get
Code
Context
set
Default
Value
translate
Unary
Opcode
translate
Binary
Opcode
translate
Condition
Opcode
make
Name
Map
get
Type
For
Node
get
Position
make
File
Context
make
Type
Context
make
Code
Context
enter
Entity
visit
File
Entity
leave
File
Entity
visit
Field
Entity
leave
Field
Entity
visit
Global
Entity
leave
Global
Entity
visit
Type
Entity
leave
Type
Entity
visit
Function
Entity
leave
Function
Entity
visit
Macro
Entity
visit
Script
Entity
leave
Script
Entity
init
Function
Entity
close
Function
Entity
get
Parameter
Positions
make
Local
Context
make
Special
Parent
Context
parent
type
scope
For
contains
lookup
get
Underlying
Symtab
make
Symbol
get
Entity
Scope
is
Lexically
Scoped
get
Entity
make
Unwind
Context
process
Function
Expr
visit
Function
Expr
leave
Function
Expr
visit
Function
Stmt
leave
Function
Stmt
visit
Local
Scope
visit
Special
Parent
Scope
leave
Local
Scope
leave
Special
Parent
Scope
visit
Block
Expr
leave
Block
Expr
visit
Block
Stmt
leave
Block
Stmt
visit
Loop
leave
Loop
Header
leave
Loop
visit
Get
Caught
Exception
leave
Get
Caught
Exception
visit
This
leave
This
visit
Super
leave
Super
visit
Call
leave
Call
visit
Var
leave
Var
visit
Constant
leave
Constant
visit
Binary
Expr
handle
Binary
Op
Throw
handle
Possible
Throw
leave
Binary
Expr
visit
Unary
Expr
leave
Unary
Expr
visit
Array
Length
leave
Array
Length
visit
Array
Ref
leave
Array
Ref
visit
Decl
Stmt
leave
Decl
Stmt
visit
Return
leave
Return
visit
Ifgoto
leave
Ifgoto
visit
Goto
leave
Goto
visit
Label
Stmt
leave
Label
Stmt
process
If
leave
If
Stmt
Condition
leave
If
Stmt
True
Clause
leave
If
Stmt
leave
If
Expr
Condition
leave
If
Expr
True
Clause
leave
If
Expr
visit
If
Stmt
visit
If
Expr
visit
New
leave
New
visit
Object
Literal
leave
Object
Literal
Field
Init
leave
Object
Literal
visit
Array
Literal
leave
Array
Literal
Object
leave
Array
Literal
Init
Element
leave
Array
Literal
visit
Object
Ref
leave
Object
Ref
visit
Assign
leave
Assign
gather
Array
Dims
process
Assign
Op
visit
Array
Ref
Assign
leave
Array
Ref
Assign
visit
Array
Ref
Assign
Op
leave
Array
Ref
Assign
Op
visit
Object
Ref
Assign
leave
Object
Ref
Assign
visit
Object
Ref
Assign
Op
leave
Object
Ref
Assign
Op
visit
Block
Expr
Assign
leave
Block
Expr
Assign
visit
Block
Expr
Assign
Op
leave
Block
Expr
Assign
Op
visit
Var
Assign
assign
Value
leave
Var
Assign
visit
Var
Assign
Op
leave
Var
Assign
Op
is
Simple
Switch
do
Simple
Switch
do
If
Convert
Switch
visit
Switch
leave
Switch
Value
leave
Switch
visit
Throw
leave
Throw
visit
Catch
set
Type
leave
Catch
visit
Unwind
leave
Unwind
has
Incoming
Edges
visit
Try
get
Msg
leave
Try
Block
leave
Try
visit
Empty
leave
Empty
visit
Primitive
leave
Primitive
visit
Void
leave
Void
visit
Assert
leave
Assert
visit
Each
Element
Get
leave
Each
Element
Get
visit
Each
Element
Has
Next
leave
Each
Element
Has
Next
visit
Type
Literal
Expr
leave
Type
Literal
Expr
visit
Is
Defined
Expr
leave
Is
Defined
Expr
visit
Echo
leave
Echo
visit
Yield
leave
Yield
get
Included
Entity
leave
Include
copy
Include
Expr
copy
Nodes
get
Source
Map
get
Control
Flow
walk
Entities
code
Context
get
Module
file
top
current
Scope
entity
Scopes
get
Source
Map
get
Control
Flow
cfg
get
Unwind
State
get
Name
set
Catch
Type
set
Catch
Type
get
Catch
Types
add
Entity
Name
get
Entity
Name
has
Value
set
Value
get
Value
expose
Name
Set
get
Accesses
get
Global
Scope
translate
translate
do
Is
Field
Defined
to
String
get
Kind
get
Name
get
Type
get
Qualifiers
eval
copy
Nodes
add
Rewriter
translate
To
C
Ast
to
String
get
Kind
get
Name
get
Type
get
Qualifiers
get
Entity2Exposed
Names
get
Entity2Written
Names
top
get
Source
Map
run
make
Code
Context
leave
Decl
Stmt
leave
Function
Stmt
leave
Class
Stmt
check
For
Lexical
Access
leave
Var
leave
Var
Assign
Op
leave
Var
Assign
do
Visit
do
Visit
Assign
Nodes
get
Node
Manager
get
Edge
Manager
entry
exit
get
Catch
Blocks
get
Block
For
Instruction
get
Instructions
get
Program
Counter
get
Method
get
Exceptional
Successors
get
Normal
Successors
get
Exceptional
Predecessors
get
Normal
Predecessors
which
Pred
visit
Property
Read
visit
Property
Write
visit
Ast
Lexical
Read
visit
Ast
Lexical
Write
visit
Ast
Global
Read
visit
Ast
Global
Write
visit
Assert
visit
Each
Element
Has
Next
visit
Each
Element
Get
visit
Is
Defined
visit
Echo
visit
Property
Read
visit
Property
Write
visit
Ast
Lexical
Read
visit
Ast
Lexical
Write
visit
Ast
Global
Read
visit
Ast
Global
Write
visit
Assert
visit
Each
Element
Has
Next
visit
Each
Element
Get
visit
Is
Defined
visit
Echo
make
Branch
Visitor
make
PEI
Visitor
copy
For
SSA
get
Number
Of
Defs
get
Def
get
Number
Of
Uses
get
Use
to
String
visit
get
Number
Of
Return
Values
get
Return
Value
to
String
has
Def
get
Def
get
Def
get
Number
Of
Uses
get
Number
Of
Defs
get
Name
hash
Code
equals
to
String
set
Accesses
get
Accesses
get
Access
get
Access
Count
is
Fall
Through
get
Exception
Types
hash
Code
get
Number
Of
Uses
get
Use
copy
For
SSA
to
String
visit
hash
Code
get
Exception
Types
is
Fall
Through
is
From
Specification
copy
For
SSA
is
PEI
visit
copy
For
SSA
to
String
visit
copy
For
SSA
to
String
visit
get
Exception
Types
has
Def
get
Def
get
Def
get
Number
Of
Defs
get
Number
Of
Uses
get
Use
is
Fall
Through
hash
Code
get
Field
Ref
copy
For
SSA
to
String
visit
copy
For
SSA
get
Number
Of
Uses
get
Use
get
Number
Of
Defs
get
Def
to
String
visit
visit
Assign
get
Number
Of
Defs
get
Def
get
Number
Of
Uses
get
Use
is
Assign
Instruction
get
Max
Value
Number
is
Live
skip
is
Constant
get
Next
New
Value
Number
initialize
Variables
repair
Exit
place
New
Phi
At
get
Phi
set
Phi
repair
Phi
Defs
repair
Phi
Use
repair
Instruction
Uses
repair
Instruction
Defs
push
Assignment
pop
Assignment
perform
get
Instructions
iterate
Instructions
init
make
Assignment
Map
add
Defining
Block
place
Phi
Nodes
get
Work
set
Work
get
Has
Already
set
Has
Already
rename
Variables
SEARCH
push
peek
pop
Search
Pre
Rec
Search
Post
Rec
make
New
Uses
make
New
Defs
skip
Repair
fail
has
Default
Value
get
Default
Value
top
get
Number
Of
Defs
get
Def
get
Number
Of
Uses
get
Use
hash
Code
is
Fall
Through
get
Exception
Types
copy
For
SSA
to
String
visit
get
Exception
Types
is
Fall
Through
is
PEI
visit
Property
Read
visit
Property
Write
visit
Ast
Lexical
Read
visit
Ast
Lexical
Write
visit
Ast
Global
Read
visit
Ast
Global
Write
visit
Assert
visit
Each
Element
Get
visit
Each
Element
Has
Next
visit
Is
Defined
visit
Echo
make
CFG
make
IR
make
CFG
lexical
Info
set
Catch
Instructions
setup
Catch
Types
get
Local
Map
instruction
Position
get
Method
get
Indirection
Data
make
IR
make
Default
Factory
context
Is
Irrelevant
get
Instruction
Index
get
Use
Number
to
String
hash
Code
equals
get
B
Bnumber
get
Phi
Number
get
Use
Number
to
String
hash
Code
equals
get
Rhs
get
Instruction
Index
get
Renamed
Uses
get
Child
Records
to
String
hash
Code
equals
add
Child
add
Use
add
Use
undo
undo
undo
undo
Copy
Propagation
copy
Use
get
Local
Names
undo
Copy
Propagation
copy
Use
get
Copy
History
to
String
top
R
push
peek
get
Number
Of
Defs
get
Def
get
Number
Of
Uses
get
Use
is
Assign
Instruction
get
Max
Value
Number
skip
is
Live
add
Phi
place
New
Phi
At
get
Phi
set
Phi
repair
Phi
Defs
repair
Phi
Use
push
Assignment
repair
Instruction
Uses
repair
Instruction
Defs
pop
Assignment
is
Constant
skip
Repair
get
Next
New
Value
Number
initialize
Variables
repair
Exit
fail
get
Computed
Local
Map
perform
values
To
Convert
convert
convert
skip
Assign
Instruction
Assert
Instruction
Echo
Instruction
Global
Read
Global
Write
Is
Defined
Instruction
Is
Defined
Instruction
Is
Defined
Instruction
Is
Defined
Instruction
Lexical
Read
Lexical
Read
Lexical
Read
Lexical
Write
Lexical
Write
Lexical
Write
Each
Element
Get
Instruction
Each
Element
Has
Next
Instruction
Property
Read
Property
Write
Yield
Instruction
copy
For
SSA
to
String
visit
is
PEI
visit
Ast
Lexical
Read
visit
Ast
Lexical
Write
visit
Ast
Global
Read
visit
Ast
Global
Write
visit
Assert
visit
Each
Element
Get
visit
Each
Element
Has
Next
visit
Is
Defined
visit
Echo
visit
Yield
visit
Property
Read
visit
Property
Write
copy
For
SSA
to
String
visit
get
Val
to
String
to
String
copy
For
SSA
to
String
visit
is
Fall
Through
get
Exception
Types
get
Global
Name
to
String
get
Def
get
Number
Of
Uses
get
Value
get
Use
copy
For
SSA
to
String
visit
get
Exception
Types
is
Fall
Through
copy
For
SSA
to
String
visit
is
Fall
Through
get
Exception
Types
get
Global
Name
is
Live
Entry
is
Live
Exit
get
Live
Before
perform
perform
perform
to
String
equals
hash
Code
evaluate
to
String
equals
hash
Code
process
Defs
process
Uses
evaluate
get
Flow
Graph
get
Transfer
Function
Provider
has
Node
Transfer
Functions
has
Edge
Transfer
Functions
get
Node
Transfer
Function
get
Edge
Transfer
Function
get
Meet
Operator
to
String
is
Live
Entry
is
Live
Exit
get
Live
Before
copy
Instruction
copy
For
SSA
get
Number
Of
Positional
Parameters
visit
get
Number
Of
Uses
hash
Code
get
Use
get
Name
equals
hash
Code
to
String
get
Object
make
Control
Flow
Graph
add
Global
Read
add
Direct
Call
add
Allocation
fire
Callbacks
has
Callback
has
All
Callbacks
add
Callback
add
All
Callbacks
clear
Mutated
Cache
add
Target
make
Node
get
Language
get
Language
get
Selector
get
Selector
get
Instance
Key
For
Allocation
get
Instance
Key
For
Multi
New
Array
get
Instance
Key
For
Constant
get
Instance
Key
For
PEI
get
Instance
Key
For
Metadata
Object
get
Pointer
Key
For
Local
get
Filtered
Pointer
Key
For
Local
get
Pointer
Key
For
Return
Value
get
Pointer
Key
For
Exceptional
Return
Value
get
Pointer
Key
For
Static
Field
get
Pointer
Key
For
Object
Catalog
get
Pointer
Key
For
Instance
Field
get
Pointer
Key
For
Array
Contents
get
Pointer
Keys
For
Reflected
Field
Write
get
Field
Name
Type
get
Instance
Field
Pointer
Key
For
Constant
get
Pointer
Keys
For
Reflected
Field
Read
use
Object
Catalog
is
Uncatalogued
Field
get
Global
Object
make
Default
Context
Interpreters
make
System
make
Pointer
Analysis
make
Heap
Model
get
Pointer
Key
For
Array
Length
get
Pointer
Keys
For
Reflected
Field
Read
get
Pointer
Keys
For
Reflected
Field
Write
get
Pointer
Key
For
Object
Catalog
make
Implicit
Points
To
Visitor
visit
Property
Read
visit
Property
Write
visit
Ast
Lexical
Read
visit
Ast
Lexical
Write
visit
Ast
Global
Read
visit
Ast
Global
Write
visit
Assert
visit
Each
Element
Get
visit
Each
Element
Has
Next
visit
Is
Defined
visit
Echo
create
Empty
Call
Graph
visit
Property
Read
visit
Property
Write
visit
Ast
Lexical
Read
visit
Ast
Lexical
Write
visit
Ast
Global
Read
visit
Ast
Global
Write
visit
Assert
visit
Each
Element
Get
visit
Each
Element
Has
Next
visit
Is
Defined
visit
Echo
make
Interesting
Visitor
has
No
Interesting
Uses
make
Visitor
get
Builder
get
Pointer
Key
For
Object
Catalog
get
Pointer
Keys
For
Reflected
Field
Read
get
Pointer
Keys
For
Reflected
Field
Write
visit
Lexical
visit
Property
Read
get
Instruction
Position
visit
Property
Write
visit
Ast
Lexical
Read
action
visit
Ast
Lexical
Write
action
visit
Ast
Global
Read
visit
Ast
Global
Write
visit
Put
evaluate
hash
Code
equals
to
String
visit
Assert
visit
Each
Element
Has
Next
visit
Each
Element
Get
evaluate
hash
Code
equals
to
String
visit
Is
Defined
visit
Echo
do
Lexical
Pointer
Keys
evaluate
action
to
String
equals
hash
Code
get
Lexical
Definers
add
Upward
Funarg
Constraints
handle
Root
Lexical
Reference
get
Defining
Node
equals
hash
Code
to
String
action
dump
new
Field
Operation
new
Field
Operation
Field
Constant
new
Field
Full
Operation
evaluate
to
String
equals
hash
Code
new
Field
Operation
Only
Field
Constant
evaluate
hash
Code
equals
to
String
new
Field
Operation
Only
Object
Constant
evaluate
hash
Code
equals
to
String
new
Field
Operation
Object
And
Field
Constant
new
Field
Write
dump
action
new
Field
Write
new
Field
Write
dump
action
new
Field
Write
new
Field
Write
new
Field
Read
dump
action
field
Read
Action
new
Field
Read
field
Key
For
Unknown
Writes
same
Method
get
Language
get
Selector
get
Allocated
Target
make
Source
Module
make
Source
Module
get
Input
Stream
make
Scope
make
Scope
make
Cache
get
Short
Name
get
Short
Name
dump
CG
handle
File
Names
understands
iterate
New
Sites
iterate
Call
Sites
get
Language
get
Language
get
Selector
get
Callee
Target
get
Primordial
Loader
get
Extension
Loader
get
Application
Loader
get
Array
Class
Loader
get
Synthetic
Loader
add
Class
File
To
Scope
get
Loader
get
Loaders
get
Number
Of
Loaders
to
String
get
Concrete
Type
to
String
get
Creation
Sites
get
hash
Code
equals
to
String
get
Callee
Target
get
Relevant
Parameters
get
Name
equals
hash
Code
to
String
get
Callee
Target
get
Relevant
Parameters
make
Site
get
Parameter
Types
get
Number
Of
Parameters
add
Call
make
Script
Site
keep
iterator
make
get
Language
Root
add
Phi
add
Get
Instance
add
Get
Static
add
Checkcast
add
Allocation
add
Invocation
add
Invocation
Internal
add
Global
Read
add
Direct
Call
get
Language
Roots
make
Fake
Root
Node
get
Pointer
Keys
For
Reflected
Field
Read
get
Pointer
Keys
For
Reflected
Field
Write
get
Pointer
Key
For
Object
Catalog
get
Callee
Target
might
Return
Synthetic
Method
needs
Scope
Mapping
Key
get
Concrete
Type
get
Funarg
Nodes
hash
Code
equals
to
String
get
Base
get
Creator
get
Creation
Sites
get
Instance
Key
For
Allocation
get
Constructor
Callers
get
Instance
Key
For
Multi
New
Array
get
Instance
Key
For
Constant
get
Instance
Key
For
PEI
get
Instance
Key
For
Metadata
Object
get
Field
Identifier
to
String
equals
hash
Code
to
String
literal
get
Field
Identifier
mapped
get
Field
Identifier
index
get
Field
Identifier
make
Main
Visitor
Selector
make
Interesting
Visitor
Selector
make
Implicit
Visitor
Selector
make
Root
Node
Selector
create
Empty
Call
Graph
get
Language
make
Interesting
Visitor
make
Visitor
make
System
make
Pointer
Analysis
make
Implicit
Points
To
Visitor
custom
Init
get
Language
get
Selector
get
Callee
Target
get
Relevant
Parameters
make
Heap
Model
visit
Property
Read
visit
Property
Write
visit
Ast
Lexical
Read
visit
Ast
Lexical
Write
visit
Ast
Global
Read
visit
Ast
Global
Write
visit
Assert
visit
Each
Element
Get
visit
Each
Element
Has
Next
visit
Is
Defined
visit
Echo
make
Ref
Visitor
visit
Ast
Lexical
Read
visit
Ast
Lexical
Write
visit
Ast
Global
Read
visit
Ast
Global
Write
visit
Assert
visit
Each
Element
Get
visit
Each
Element
Has
Next
visit
Is
Defined
visit
Echo
visit
Property
Read
visit
Property
Write
make
Mod
Visitor
get
Factory
get
Scope
get
Hierarchy
get
Hierarchy
get
Hierarchy
get
Hierarchy
get
Hierarchy
get
Hierarchy
get
Hierarchy
get
Loaders
get
Loader
add
Class
get
Number
Of
Classes
is
Root
Class
get
Root
Class
get
Number
get
Possible
Targets
get
Possible
Targets
resolve
Method
resolve
Field
resolve
Field
resolve
Method
lookup
Class
is
Interface
get
Least
Common
Superclass
get
Least
Common
Superclass
is
Subclass
Of
implements
Interface
compute
Sub
Classes
get
Java
Lang
Runtime
Exception
Types
get
Java
Lang
Error
Types
get
Implementors
get
Number
Of
Immediate
Subclasses
get
Immediate
Subclasses
is
Assignable
From
iterator
make
Inner
make
get
Unresolved
Classes
make
compute
Lexical
Ref
compute
Lexical
Mod
scan
Node
For
Lex
Reads
scan
Node
For
Lex
Writes
get
Node
Name
Pairs
For
Access
fn
Reference
get
Children
get
Current
Position
top
get
Source
Map
make
File
Context
make
Type
Context
make
Code
Context
make
Local
Context
make
Unwind
Context
get
Parent
set
Parent
do
Visit
Entity
visit
Scoped
Entities
visit
Scoped
Entities
get
Code
Context
visit
Entities
enter
Entity
post
Process
Entity
visit
Entity
leave
Entity
visit
File
Entity
leave
File
Entity
visit
Field
Entity
leave
Field
Entity
visit
Global
Entity
leave
Global
Entity
visit
Type
Entity
leave
Type
Entity
visit
Function
Entity
leave
Function
Entity
visit
Macro
Entity
leave
Macro
Entity
visit
Script
Entity
leave
Script
Entity
do
Visit
do
Visit
Assign
Nodes
visit
Children
visit
All
Children
visit
leave
Special
Parent
Scope
make
Special
Parent
Context
visit
Special
Parent
Scope
do
Visit
Array
Ref
Node
visit
Assign
Nodes
enter
Node
post
Process
Node
visit
Node
leave
Node
visit
Function
Expr
leave
Function
Expr
visit
Function
Stmt
leave
Function
Stmt
visit
Class
Stmt
leave
Class
Stmt
visit
Local
Scope
leave
Local
Scope
visit
Block
Expr
leave
Block
Expr
visit
Block
Stmt
leave
Block
Stmt
visit
Loop
visit
For
In
leave
Loop
Header
leave
Loop
leave
For
In
visit
Get
Caught
Exception
leave
Get
Caught
Exception
visit
This
leave
This
visit
Super
leave
Super
visit
Call
leave
Call
visit
Var
leave
Var
visit
Constant
leave
Constant
visit
Binary
Expr
leave
Binary
Expr
visit
Unary
Expr
leave
Unary
Expr
visit
Array
Length
leave
Array
Length
visit
Array
Ref
leave
Array
Ref
visit
Decl
Stmt
leave
Decl
Stmt
visit
Return
leave
Return
visit
Yield
leave
Yield
visit
Ifgoto
leave
Ifgoto
visit
Goto
leave
Goto
visit
Label
Stmt
leave
Label
Stmt
visit
If
Stmt
leave
If
Stmt
Condition
leave
If
Stmt
True
Clause
leave
If
Stmt
visit
If
Expr
leave
If
Expr
Condition
leave
If
Expr
True
Clause
leave
If
Expr
visit
New
leave
New
visit
Object
Literal
leave
Object
Literal
Field
Init
leave
Object
Literal
visit
Array
Literal
leave
Array
Literal
Object
leave
Array
Literal
Init
Element
leave
Array
Literal
visit
Object
Ref
leave
Object
Ref
visit
Assign
leave
Assign
visit
Array
Ref
Assign
leave
Array
Ref
Assign
visit
Array
Ref
Assign
Op
leave
Array
Ref
Assign
Op
visit
Object
Ref
Assign
leave
Object
Ref
Assign
visit
Object
Ref
Assign
Op
leave
Object
Ref
Assign
Op
visit
Block
Expr
Assign
leave
Block
Expr
Assign
visit
Block
Expr
Assign
Op
leave
Block
Expr
Assign
Op
visit
Var
Assign
leave
Var
Assign
visit
Array
Literal
Assign
leave
Array
Literal
Assign
visit
Object
Literal
Assign
leave
Object
Literal
Assign
visit
Var
Assign
Op
leave
Var
Assign
Op
visit
Switch
leave
Switch
Value
leave
Switch
visit
Throw
leave
Throw
visit
Catch
leave
Catch
visit
Unwind
leave
Unwind
visit
Try
leave
Try
Block
leave
Try
visit
Empty
leave
Empty
visit
Primitive
leave
Primitive
visit
Void
leave
Void
visit
Cast
leave
Cast
visit
Instance
Of
leave
Instance
Of
leave
Assert
visit
Assert
visit
Each
Element
Has
Next
leave
Each
Element
Has
Next
visit
Each
Element
Get
leave
Each
Element
Get
visit
Type
Literal
Expr
leave
Type
Literal
Expr
visit
Is
Defined
Expr
leave
Is
Defined
Expr
visit
Echo
leave
Echo
visit
Include
leave
Include
visit
Macro
Var
leave
Macro
Var
make
File
Context
make
Type
Context
make
Code
Context
make
Local
Context
make
Unwind
Context
get
Parent
set
Parent
delegate
do
Visit
Entity
enter
Entity
post
Process
Entity
visit
Entity
leave
Entity
visit
File
Entity
leave
File
Entity
visit
Field
Entity
leave
Field
Entity
visit
Type
Entity
leave
Type
Entity
visit
Function
Entity
leave
Function
Entity
visit
Script
Entity
leave
Script
Entity
do
Visit
enter
Node
post
Process
Node
visit
Node
leave
Node
visit
Function
Expr
leave
Function
Expr
visit
Function
Stmt
leave
Function
Stmt
visit
Class
Stmt
leave
Class
Stmt
visit
Local
Scope
leave
Local
Scope
visit
Block
Expr
leave
Block
Expr
visit
Block
Stmt
leave
Block
Stmt
visit
Loop
leave
Loop
Header
leave
Loop
visit
Get
Caught
Exception
leave
Get
Caught
Exception
visit
This
leave
This
visit
Super
leave
Super
visit
Call
leave
Call
visit
Var
leave
Var
visit
Constant
leave
Constant
visit
Binary
Expr
leave
Binary
Expr
visit
Unary
Expr
leave
Unary
Expr
visit
Array
Length
leave
Array
Length
visit
Array
Ref
leave
Array
Ref
visit
Decl
Stmt
leave
Decl
Stmt
visit
Return
leave
Return
visit
Ifgoto
leave
Ifgoto
visit
Goto
leave
Goto
visit
Label
Stmt
leave
Label
Stmt
visit
If
Stmt
leave
If
Stmt
Condition
leave
If
Stmt
True
Clause
leave
If
Stmt
visit
If
Expr
leave
If
Expr
Condition
leave
If
Expr
True
Clause
leave
If
Expr
visit
New
leave
New
visit
Object
Literal
leave
Object
Literal
Field
Init
leave
Object
Literal
visit
Array
Literal
leave
Array
Literal
Object
leave
Array
Literal
Init
Element
leave
Array
Literal
visit
Object
Ref
leave
Object
Ref
visit
Assign
leave
Assign
visit
Array
Ref
Assign
leave
Array
Ref
Assign
visit
Array
Ref
Assign
Op
leave
Array
Ref
Assign
Op
visit
Object
Ref
Assign
leave
Object
Ref
Assign
visit
Object
Ref
Assign
Op
leave
Object
Ref
Assign
Op
visit
Block
Expr
Assign
leave
Block
Expr
Assign
visit
Block
Expr
Assign
Op
leave
Block
Expr
Assign
Op
visit
Var
Assign
leave
Var
Assign
visit
Var
Assign
Op
leave
Var
Assign
Op
visit
Switch
leave
Switch
Value
leave
Switch
visit
Throw
leave
Throw
visit
Catch
leave
Catch
visit
Unwind
leave
Unwind
visit
Try
leave
Try
Block
leave
Try
visit
Empty
leave
Empty
visit
Primitive
leave
Primitive
visit
Void
leave
Void
visit
Cast
leave
Cast
visit
Instance
Of
leave
Instance
Of
visit
Special
Parent
Scope
leave
Special
Parent
Scope
get
Mapped
Nodes
get
Node
Type
get
Kind
get
Name
get
Signature
get
Argument
Names
get
Argument
Defaults
get
Argument
Count
get
All
Scoped
Entities
get
Scoped
Entities
get
AST
get
Control
Flow
get
Source
Map
get
Position
get
Name
Position
get
Position
get
Node
Type
Map
get
Qualifiers
get
Type
get
Annotations
get
Original
get
C
Ast
Type
For
resolve
Reference
iterator
to
String
name
is
Final
is
Case
Insensitive
default
Init
Value
is
Internal
Name
type
get
Name
get
Supertypes
is
Interface
get
Qualifiers
get
Num
Dimensions
get
Element
Type
get
Return
Type
get
Argument
Types
get
Exception
Types
get
Argument
Count
get
Declaring
Type
is
Static
get
Type
get
Constituents
get
Name
get
Supertypes
get
Kind
get
Value
to
String
hash
Code
equals
get
Target
get
Target
Labels
get
Source
Nodes
get
Mapped
Nodes
get
Kind
get
Value
get
Child
get
Child
Count
get
Children
type
pretty
Print
get
URL
get
Reader
to
String
get
First
Line
get
Last
Line
get
First
Col
get
Last
Col
get
First
Offset
get
Last
Offset
compare
To
get
URL
get
Reader
read
close
get
Position
get
Mapped
Nodes
positions
node
Map
key
hash
Code
equals
parent
copy
Nodes
skip
fold
copy
Nodes
get
AST
get
Control
Flow
get
Source
Map
get
Node
Type
Map
get
All
Scoped
Entities
get
Scoped
Entities
copy
Nodes
copy
Nodes
copy
hash
Code
equals
parent
key
new
Root
new
Cfg
new
Pos
new
Types
new
Children
new
Defaults
copy
Nodes
copy
Subtrees
Into
New
Node
copy
Subtrees
Into
New
Node
copy
Children
Array
copy
Children
Array
And
Targets
flow
Out
To
copy
Flow
old
Nodes
In
New
Map
copy
Source
copy
Types
copy
Children
rewrite
new
Defaults
new
Root
new
Cfg
new
Pos
new
Types
new
Children
rewrite
to
String
get
Scoped
Entities
get
All
Scoped
Entities
get
AST
get
Node
Type
Map
get
Source
Map
get
Control
Flow
get
Argument
Defaults
to
String
get
Scoped
Entities
get
All
Scoped
Entities
hash
Code
parent
equals
to
String
translate
key
key
flow
Out
To
copy
Nodes
create
C
Ast
Rewriter
copy
Nodes
get
Type
get
Arguments
get
Position
get
Mapped
Nodes
set
Position
set
Position
set
Position
get
First
Line
get
Last
Line
get
First
Col
get
Last
Col
get
First
Offset
get
Last
Offset
get
URL
get
Reader
to
String
set
Position
set
Position
add
All
positions
type
name
is
Final
is
Case
Insensitive
default
Init
Value
is
Internal
Name
to
String
compare
To
get
First
Line
get
Last
Line
get
First
Col
get
Last
Col
get
First
Offset
get
Last
Offset
get
URL
get
Reader
make
Unique
get
Kind
get
Value
get
Children
to
String
hash
Code
make
Node
make
Node
make
Node
make
Node
make
Node
make
Node
make
Node
make
Node
make
Node
make
Node
get
Kind
get
Value
to
String
hash
Code
make
Constant
make
Constant
make
Constant
make
Constant
make
Constant
make
Constant
make
Constant
make
Constant
hash
Code
equals
to
String
get
Target
get
Target
Labels
get
Source
Nodes
get
Mapped
Nodes
add
map
add
All
is
Mapped
to
String
equals
hash
Code
compare
To
to
String
get
C
Ast
Type
For
map
iterator
resolve
Reference
get
Node
Type
add
get
Mapped
Nodes
add
All
get
First
Line
get
Last
Line
get
First
Col
get
Last
Col
get
First
Offset
get
Last
Offset
get
URL
get
Reader
to
String
get
Original
get
Kind
get
Name
get
Signature
get
Argument
Names
get
Argument
Defaults
get
Argument
Count
get
All
Scoped
Entities
get
Scoped
Entities
get
AST
get
Control
Flow
get
Source
Map
get
Position
get
Node
Type
Map
get
Qualifiers
get
Type
get
Annotations
get
Position
get
Name
Position
is
Internal
Name
hash
Code
equals
make
Node
hash
Code
equals
make
Constant
to
String
get
Kind
get
Value
make
Node
make
Node
make
Node
make
Node
make
Node
make
Node
make
Node
make
Node
make
Node
make
Node
make
Constant
make
Constant
make
Constant
make
Constant
make
Constant
make
Constant
make
Constant
make
Constant
make
Unique
get
Bit
get
Name
equals
hash
Code
to
String
matches
get
Last
Match
matches
matches
matches
matches
matches
member
type
to
String
hash
Code
equals
member
get
Single
get
Multiple
add
All
add
to
String
match
Children
match
try
Match
Children
try
Match
match
parse
find
All
top
get
Source
Map
leave
Node
find
All
do
Visit
do
Visit
Assign
Nodes
parse
Name
parse
find
If
iterate
Nodes
get
Pending
Children
set
Pending
Children
get
Connected
has
Next
next
remove
find
All
collect
Constants
collect
Constants
write
flush
close
set
Printer
kind
As
String
get
Kind
As
String
print
do
Print
print
do
Print
do
Print
print
print
To
do
Print
To
print
To
do
Print
To
xml
To
do
Xml
To
xml
To
do
Xml
To
escape
For
XML
escape
For
XML
print
To
do
Print
To
entity
Kind
As
String
get
Entity
Kind
As
String
print
To
do
Print
To
to
DOM
node
To
DOM
check
For
Front
End
Errors
get
get
First
Line
get
Last
Line
get
First
Col
get
Last
Col
get
First
Offset
get
Last
Offset
compare
To
get
URL
get
Reader
to
String
substitute
get
First
Line
get
Last
Line
get
First
Col
get
Last
Col
get
First
Offset
get
Last
Offset
get
URL
get
Reader
visit
Property
Read
visit
Property
Write
visit
Ast
Lexical
Read
visit
Ast
Lexical
Write
visit
Ast
Global
Read
visit
Ast
Global
Write
visit
Assert
visit
Each
Element
Get
visit
Each
Element
Has
Next
visit
Is
Defined
visit
Echo
initialize
to
String
get
Class
Loader
is
Interface
is
Abstract
is
Public
is
Private
is
Static
is
Synthetic
get
Modifiers
get
Superclass
get
Direct
Interfaces
get
All
Implemented
Interfaces
get
All
Ancestor
Interfaces
get
Method
get
Field
get
Field
get
Reference
get
Source
Position
get
Source
URL
get
Source
File
Name
get
Source
get
Class
Initializer
is
Array
Class
get
Declared
Methods
get
Declared
Instance
Fields
get
Declared
Static
Fields
get
All
Instance
Fields
get
All
Static
Fields
get
All
Fields
get
All
Methods
get
Name
is
Reference
Type
get
Code
Body
has
Implicit
This
get
Invocation
Code
get
Invocation
String
to
String
clone
Reference
is
Dispatch
is
Static
is
Fixed
is
Interface
is
Abstract
is
Public
is
Private
is
Reference
Type
is
Array
Class
is
Synthetic
get
Modifiers
get
Source
Position
get
Source
URL
get
Source
File
Name
get
Source
get
Name
get
Reference
get
Class
Loader
get
Superclass
gather
Interfaces
get
Direct
Interfaces
get
All
Implemented
Interfaces
get
Class
Initializer
get
Method
get
Field
get
Field
get
Declared
Methods
get
Declared
Instance
Fields
get
Declared
Static
Fields
get
All
Instance
Fields
get
All
Static
Fields
get
All
Fields
get
All
Methods
retranslate
get
Entity
get
Code
Body
Position
get
Code
Name
Position
get
Instruction
Position
get
Source
Names
For
Values
get
Operand
Position
get
Parameter
Position
get
Leading
Comment
get
Following
Comment
get
Exposed
Names
get
Exit
Exposed
Uses
get
Exposed
Uses
get
All
Exposed
Uses
get
Scoping
Parents
is
Read
Only
get
Scoping
Name
cfg
symbol
Table
catch
Types
clone
Lexical
Info
lexical
Info
debug
Info
get
Annotations
get
Name
get
Method
hash
Code
equals
get
Parents
get
Declaring
Class
get
Signature
get
Selector
is
Clinit
is
Init
get
Name
get
Descriptor
get
Reference
get
Return
Type
is
Static
is
Synchronized
is
Native
is
Wala
Synthetic
is
Synthetic
is
Abstract
is
Private
is
Protected
is
Annotation
is
Enum
is
Module
is
Public
is
Final
is
Bridge
get
Control
Flow
Graph
has
Exception
Handler
has
Monitor
Op
get
Number
Of
Parameters
get
Parameter
Source
Position
get
Line
Number
get
Source
Position
get
Parameter
Position
get
Source
Position
get
Loader
get
The
Loader
get
The
Reference
make
The
Loader
to
String
get
Declaring
Class
get
Name
get
Field
Type
Reference
get
Reference
is
Final
is
Private
is
Protected
is
Public
is
Volatile
is
Static
get
Class
Hierarchy
get
Annotations
hash
Code
equals
messages
For
add
Messages
add
Message
get
Messages
get
Modules
With
Parse
Errors
get
Modules
With
Warnings
get
Messages
clear
Messages
lookup
Class
lookup
Class
iterate
All
Classes
get
Number
Of
Classes
get
Name
get
Number
Of
Methods
get
Source
File
Name
get
Source
File
Name
get
Source
get
Source
get
Parent
remove
All
get
Annotations
get
Declaring
Class
to
String
get
Name
get
Field
Type
Reference
get
Reference
is
Static
is
Final
is
Private
is
Protected
is
Public
is
Volatile
get
Class
Hierarchy
get
Field
is
Static
Field
get
Translator
To
C
Ast
should
Translate
init
Translator
get
Local
File
finish
Translation
init
translate
Module
Entry
To
C
Ast
get
Msg
get
Msg
translate
Module
To
C
Ast
get
Class
Hierarchy
set
Code
Body
get
Annotations
get
Entity
retranslate
get
Class
Hierarchy
to
String
get
Declared
Exceptions
get
Parents
get
Name
get
Method
get
Local
Variable
Name
has
Local
Variable
Table
get
Max
Locals
get
Max
Stack
Height
get
Parameter
Type
get
Class
Hierarchy
to
String
get
Direct
Interfaces
get
Superclass
get
Annotations
get
Nodes
config
test
Ex1
test
Rewriter
erase
Generated
Names
test
Rewriter
parse
JS
parse
JS
test1
test2
test3
test4
test5
test6
test7
test8
test9
test10
test11
test12
test13
test14
test15
test16
test17
test18
test19
test20
test21
test22
test23
test24
test25
test26
test27
test28
test29
test30
test31
close
configure
indent
dump
dump
dump
Scoped
Entities
is
Trivial
get
Non
Trivial
Child
Count
dump
test
Simple
Data
test
Simple
All
test
Simple
Control
slice
find
Target
Statement
test
Args
test
Args
test
Simple
test
Objects
test
Inherit
test
Newfn
test
Controlflow
test
More
Controlflow
test
Forin
test
Simple
Lexical
test
Recursive
Lexical
test
Lexical
Multiple
test
Try
test
String
Op
test
Upward
test
String
Prims
test
Nested
test
Instanceof
test
Crash1
test
Crash2
test
Lexical
Ctor
test
Multivar
test
Protoype
Contamination
test
Stack
Overflow
On
Ssa
Conversion
Bug
test
Ext
JS
Switch
test
Function
Dot
Call
test
Function
Dot
Apply
test
Function
Dot
Apply2
test
Function
Dot
Apply3
test
Wrap1
test
Wrap2
test
Wrap3
test
Complex
Call
test
Global
Obj
Passing
test
Global
Obj2
test
Return
This
test
Return
This2
test
Arguments
test
Function
Is
A
Function
test
Lexical
Broken
test
Dead
Phi
test
Scoping
Overwrite
Function
test
Nested
Assign
To
Param
test
Dispatch
test
Dispatch
Same
Target
test
For
In
Prototype
test
Array
Index
Conv
test
Array
Index
Conv2
test
Date
As
Property
test
Dead
Code
test
Shadow
test
Extend
test
Dead
Catch
test
Ugly
Loop
Crash
test
Try
Finally
Crash
test
Many
Strings
test
Tutorial
Example
test
Loops
test
Primitive
Strings
test
Renaming
test
Lexical
Catch
test
Throw
Crash
test
Nr
Wrapper
Crash
test
Finally
Crash
test
For
In
Expr
test
Complex
Finally
get
Parser
set
Up
tear
Down
test
Page1
test
Page2
test
Crawl
Page11
test
Crawl
Page11b
test
Crawl
Page12
test
Crawl
Page13
test
Crawl
Page15
test
Crawl
Page16
test
Crawl
Page17
test
Apollo
Example
test
Nojs
test
Page4
test
List
test
Iframe
Test2
test
Windowx
test
Window
Onload
test
Skeleton
test
Skeleton2
config
test
Page3Without
Hack
test
Page3With
Hack
test
J
Query
With
Hack
test
Bad
For
In
Without
Hack
test
Bad
For
In
With
Hack
testbadforin2Without
Hack
testbadforin2With
Hack
test
For
In
Recursion
add
Hacked
For
In
Loop
Sensitivity
test
Prototype
map
test
map
map
ptrs
is
Global
test
Page
test
Test
Script
test
get
Prototype
Sites
get
Fb
Prototypes
get
Prop
Prototypes
test
Page
User
Code
Equivalent
name
Filter
test
Window
Onload
test
Objects
test
Inherit
test
Ajaxslt
test
Ajaxpath
test
Swine
Flu
test
Simple
Lexical
test
Rewriter
test
Rewriter
create
Policy
parse
JS
parse
JS
make
Correlation
Finder
test1
test2
test3
test4
test5
test6
test7
test8
test9
test10
test11
test12
test13
test14
test15
test16
test17
test18
test18
b
test18
c
test19
test20
test21
test22
test23
test24
test25
test
Ajaxslt
test
Ajaxpath
build
Flow
Graph
extract
Call
Graph
Edges
process
Pending
Call
Worklist
process
Pending
Reflective
Call
Worklist
add
Call
Edge
add
Flow
Edge
add
Reflective
Call
Edge
build
Flow
Graph
visit
Program
visit
Function
add
Primitives
handle
Lexical
Def
visit
Phi
visit
Prototype
Lookup
visit
Put
visit
Put
visit
Set
Prototype
visit
Ast
Global
Write
visit
Property
Write
visit
Ast
Lexical
Write
visit
Get
visit
Ast
Global
Read
visit
Property
Read
visit
Ast
Lexical
Read
visit
Return
visit
Throw
visit
Get
Caught
Exception
visit
Java
Script
Invoke
visit
New
accept
to
String
get
Caller
get
Site
get
Instruction
accept
to
String
to
Source
Level
String
get
Full
Name
accept
to
String
get
Creation
Sites
get
Concrete
Type
to
Source
Level
String
make
Call
Vertex
make
Reflective
Call
Vertex
get
Call
Vertices
make
Creation
Site
Vertex
creation
Sites
make
Func
Vertex
get
Func
Vertices
make
Param
Vertex
make
Prop
Vertex
get
Prop
Vertices
make
Ret
Vertex
get
Ret
Vertices
make
Arg
Vertex
get
Arg
Vertices
make
Unknown
Vertex
make
Var
Vertex
get
Var
Vertices
make
Lexical
Access
Vertex
global
get
Func
accept
to
String
to
Source
Level
String
visit
Vertex
visit
Var
Vertex
visit
Prop
Vertex
visit
Unknown
Vertex
visit
Func
Vertex
visit
Creation
Site
Vertex
visit
Param
Vertex
visit
Ret
Vertex
visit
Arg
Vertex
visit
Callee
Vertex
visit
Lexical
Access
Vertex
visit
Global
Vertex
visit
Prototype
Vertex
visit
Reflective
Call
Vertex
get
Function
get
Value
Number
accept
to
String
to
Source
Level
String
accept
to
Source
Level
String
get
Func
get
Index
accept
to
String
to
Source
Level
String
accept
to
String
get
Concrete
Type
get
Method
get
Creation
Sites
accept
get
Func
accept
to
String
to
Source
Level
String
visit
Var
Vertex
visit
Prop
Vertex
visit
Unknown
Vertex
visit
Func
Vertex
visit
Creation
Site
Vertex
visit
Param
Vertex
visit
Ret
Vertex
visit
Callee
Vertex
visit
Lexical
Access
Vertex
visit
Arg
Vertex
visit
Global
Vertex
visit
Prototype
Vertex
visit
Reflective
Call
Vertex
instance
get
Concrete
Type
get
Creation
Sites
accept
get
Prop
Name
accept
to
String
get
Caller
get
Site
get
Instruction
is
New
accept
to
String
to
Source
Level
String
accept
to
String
visit
Function
compute
optimistic
closure
compute
Closure
visit
Vertex
visit
Unknown
Vertex
get
Vertex
Factory
add
Edge
get
Reaching
Set
get
Succ
iterator
get
Pointer
Analysis
get
IR
property
Key
get
get
Vertex
get
Points
To
Set
get
Instance
Keys
is
Filtered
get
Instance
Key
Mapping
get
Pointer
Keys
get
Heap
Model
get
Pointer
Key
For
Local
get
Pointer
Key
For
Return
Value
get
Pointer
Key
For
Instance
Field
get
Instance
Key
For
Allocation
get
Instance
Key
For
Multi
New
Array
get
Instance
Key
For
Constant
get
Instance
Key
For
PEI
get
Instance
Key
For
Metadata
Object
get
Filtered
Pointer
Key
For
Local
get
Pointer
Key
For
Exceptional
Return
Value
get
Pointer
Key
For
Static
Field
get
Pointer
Key
For
Array
Contents
iterate
Pointer
Keys
get
Class
Hierarchy
get
Pointer
Key
For
Array
Length
get
Pointer
Keys
For
Reflected
Field
Read
get
Pointer
Keys
For
Reflected
Field
Write
get
Pointer
Key
For
Object
Catalog
get
Heap
Graph
ensure
Node
get
Core
Proto
get
Reachable
Instances
get
Heap
Model
get
Pointer
Analysis
get
Class
Hierarchy
to
JSON
build
Flow
Graph
filter
Function
resolve
Local
Calls
visit
Java
Script
Invoke
build
Flow
Graph
add
Edge
add
Reflective
Call
Edge
setup
Method
Target
Selector
flow
Graph
Factory
build
Flow
Graph
get
Call
Graph
get
Pointer
Analysis
get
Flow
Graph
build
Call
Graph
extract
extract
handle
Function
Call
Or
Apply
Invocation
add
Edge
To
JS
Call
Graph
add
CG
Edge
With
Context
get
Reflective
Targets
get
Constructor
Targets
extract
Call
Graph
Edges
is
Function
Constructor
Invoke
equals
make
Control
Flow
Graph
get
Number
Of
Parameters
get
Parameter
Type
to
String
constructed
Type
record
make
Nullary
Value
Constructor
make
Unary
Value
Constructor
make
Value
Constructor
make
Nullary
Object
Constructor
make
Unary
Object
Constructor
make
Object
Constructor
make
Object
Call
make
Array
Length
Constructor
make
Array
Contents
Constructor
make
Array
Constructor
make
Nullary
String
Call
make
Unary
String
Call
make
String
Call
make
Nullary
Number
Call
make
Unary
Number
Call
make
Number
Call
make
Function
Constructor
make
Function
Constructor
get
Name
is
Class
File
is
Source
File
get
Input
Stream
read
is
Module
File
as
Module
get
Class
Name
get
Container
get
Entries
get
Input
Reader
get
URL
make
Function
Object
Constructor
find
Or
Create
Constructor
Method
find
Or
Create
Call
Method
setup
Context
Selector
setup
Method
Target
Selector
setup
SSA
Context
Interpreter
make
get
IR
get
DU
to
String
hash
Code
equals
get
to
String
get
Callee
Target
get
Relevant
Parameters
context
Is
Irrelevant
make
IR
handle
Argument
Ref
copy
Nodes
get
Argument
Count
get
Argument
Names
compose
Entity
Name
define
Function
translate
make
CFG
get
Callee
Target
recursive
Context
update
For
Node
get
Relevant
Parameters
recursion
Possible
get
Callee
Target
exceeds
Recursion
Bound
get
Relevant
Parameters
returns
This
get
Callee
Target
get
Relevant
Parameters
set
Translator
Factory
get
Translator
Factory
make
Options
make
Loaders
make
Loaders
make
Hierarchy
For
Scripts
make
Hierarchy
make
Script
Roots
get
Nodes
get
Method
Reference
load
Additional
File
load
Additional
File
define
Function
leave
Function
Stmt
simulate
To
String
For
Property
Names
get
Entries
is
Class
File
is
Source
File
get
Input
Stream
is
Module
File
as
Module
get
Class
Name
get
Container
get
Name
get
Input
Reader
get
URL
get
Prologue
File
get
Relevant
Parameters
get
Callee
Target
create
Apply
Dummy
Method
gen
Synthetic
Method
Ref
get
Callee
Target
get
Callee
Target
get
Global
Object
direct
Global
Object
Ref
make
Non
Global
Field
Reference
get
Base
URL
set
Base
URL
is
Constant
Ref
use
Object
Catalog
is
Uncatalogued
Field
field
Key
For
Unknown
Writes
get
Pointer
Key
For
Global
Var
create
Empty
Call
Graph
make
Type
Inference
add
Assignments
For
Catch
Pointer
Key
visit
Binary
Op
visit
Java
Script
Invoke
visit
Type
Of
visit
Java
Script
Instance
Of
visit
Check
Ref
visit
With
Region
visit
Set
Prototype
visit
Prototype
Lookup
make
Interesting
Visitor
visit
Java
Script
Invoke
visit
Type
Of
visit
Java
Script
Instance
Of
visit
Check
Ref
visit
With
Region
visit
Ast
Global
Read
visit
Set
Prototype
visit
Prototype
Lookup
make
Implicit
Points
To
Visitor
make
System
make
Pointer
Analysis
make
Visitor
get
Some
Position
For
Method
visit
Unary
Op
add
Lval
Type
Key
Constraint
visit
Is
Defined
visit
Java
Script
Instance
Of
visit
Each
Element
Has
Next
visit
Type
Of
visit
Ast
Global
Read
visit
Ast
Global
Write
visit
Binary
Op
visit
Java
Script
Invoke
handle
Javascript
Dispatch
action
get
Instruction
get
Receiver
get
Property
get
Node
evaluate
compute
Invariant
Parameters
hash
Code
equals
to
String
dump
handle
Javascript
Dispatch
get
Node
get
Instruction
evaluate
hash
Code
equals
to
String
handle
Binary
Op
get
Node
get
Instruction
to
String
hash
Code
equals
get
Instances
Array
is
String
Constant
add
Key
evaluate
is
Number
Type
handle
Binary
Operator
Args
visit
Check
Ref
visit
With
Region
evaluate
act
hash
Code
equals
to
String
visit
Set
Prototype
visit
Prototype
Lookup
process
Calling
Constraints
process
Calling
Constraints
Internal
same
Method
get
Relevant
Parameters
get
hash
Code
equals
to
String
get
Callee
Target
equals
hash
Code
to
String
is
Bogus
Key
get
Pointer
Key
For
Object
Catalog
get
Pointer
Key
For
Instance
Field
get
Pointer
Key
For
Array
Contents
get
Pointer
Keys
For
Reflected
Field
Read
get
Pointer
Keys
For
Reflected
Field
Write
get
Instance
Field
Pointer
Key
For
Constant
get
Field
Name
Type
get
to
String
get
collect
Values
identify
Dependent
Parameters
uses
First
Arg
As
Property
Name
get
Callee
Target
get
Relevant
Parameters
handle
Call
Apply
set
Handle
Call
Apply
use
Load
File
Target
Selector
set
Use
Load
File
Target
Selector
make
Script
Site
make
Control
Flow
Graph
add
Direct
Call
make
Fake
World
Clinit
Node
make
Fake
Root
Node
get
Nodes
understands
get
IR
make
IR
For
Arg
List
pass
Arbitrary
Property
Val
As
Params
pass
Actual
Property
Vals
As
Params
make
IR
For
No
Arg
List
get
DU
get
Parents
needs
Scope
Mapping
Key
get
Constructor
Callers
get
Callee
Target
might
Return
Synthetic
Method
get
Instance
Key
For
Allocation
get
Instance
Key
For
Metadata
Object
get
Instance
Key
For
Constant
get
Instance
Key
For
Multi
New
Array
get
Instance
Key
For
PEI
add
Correlation
pp
get
Correlations
is
Empty
get
Positions
case
Root
Pos
case
Child
Pos
case
For
In
Loop
Body
Pos
case
Label
Pos
get
Parent
get
Index
get
Parent
Pos
get
Child
get
Child
Pos
accept
hash
Code
equals
accept
hash
Code
equals
get
Parent
get
Parent
Pos
accept
accept
key
in
Subtree
add
Node
get
Label
get
Node
enter
Entity
leave
Entity
copy
Nodes
copy
Constant
copy
Block
copy
Var
copy
Goto
copy
Return
copy
Node
extract
Region
new
Root
new
Cfg
new
Pos
new
Types
new
Children
new
Defaults
add
Spurious
Exn
Flow
create
Return
Fixup
create
Goto
Fixup
wrap
In
wrap
In
add
Exn
Flow
add
Exn
Flow
get
Throw
Target
case
Root
Pos
case
Child
Pos
case
For
In
Loop
Body
Pos
case
Label
Pos
make
Var
Ref
in
Function
mark
Synthetic
is
Synthetic
no
Jumps
And
No
Calls
no
Jumps
And
No
Calls
uses
Arguments
set
Rewrite
get
Kind
get
Name
get
Signature
get
Argument
Names
get
Argument
Defaults
get
Argument
Count
compute
Parms
get
All
Scoped
Entities
get
Scoped
Entities
get
AST
get
Control
Flow
get
Source
Map
get
Position
get
Node
Type
Map
get
Qualifiers
get
Type
get
Annotations
to
String
get
Position
get
Name
Position
create
Policy
find
Nodes
At
Pos
find
Nodes
At
Pos
add
Correlation
filter
Names
find
Closest
Containing
Block
get
Covering
Child
Index
add
Correlations
make
extract
get
Start
get
End
get
Parameters
set
Start
set
End
get
Locals
get
Start
Inner
get
End
Inner
create
C
Ast
Rewriter
create
Policy
create
Policy
extract
hash
Code
equals
hash
Code
add
Node
add
Flow
delete
Flow
is
Flow
Deleted
get
Current
Entity
get
Enclosing
Entities
add
Entity
copy
Children
flow
Out
To
copy
Flow
rewrite
enter
Entity
leave
Entity
extract
get
Parent
get
Start
get
End
get
Region
contains
get
Parameters
add
Goto
Target
contains
Return
add
Return
get
Goto
Targets
add
This
contains
This
contains
Goto
contains
Outer
Goto
contains
Jump
get
This
Parm
Name
add
Nested
Pos
get
Nested
Loops
set
Extracted
Entity
get
Extracted
Entity
set
Call
Site
get
Call
Site
accept
get
Outermost
Enclosing
Extraction
Pos
case
Root
Pos
case
Child
Pos
case
For
In
Loop
Body
Pos
case
Label
Pos
get
Enclosing
Extraction
Pos
case
Root
Pos
case
Child
Pos
case
For
In
Loop
Body
Pos
case
Label
Pos
is
Outermost
get
Parent
Pos
visit
Read
Write
Correlation
visit
Escape
Correlation
find
Correlated
Accesses
get
Source
Level
Name
get
Source
Level
Names
must
Be
Numeric
print
Correlated
Accesses
print
Correlated
Accesses
find
Correlated
Accesses
find
Correlated
Accesses
find
Correlated
Accesses
to
Url
get
Start
Position
get
End
Position
pp
accept
get
Index
Name
get
Flown
Through
Locals
get
Start
Position
get
End
Position
pp
accept
get
Start
Position
get
End
Position
get
Number
Of
Arguments
pp
accept
get
Position
get
Callee
Target
warn
About
Imprecise
Call
Graph
get
Function
Call
Target
gen
Synthetic
Method
Ref
get
Key
get
Number
Of
Args
Passed
get
Name
equals
hash
Code
to
String
visit
Java
Script
Invoke
visit
Type
Of
visit
Java
Script
Instance
Of
visit
With
Region
visit
Check
Ref
visit
Set
Prototype
visit
Prototype
Lookup
make
Ref
Visitor
visit
Java
Script
Invoke
visit
Type
Of
visit
Java
Script
Instance
Of
visit
With
Region
visit
Check
Ref
visit
Set
Prototype
visit
Prototype
Lookup
make
Mod
Visitor
make
Ctor
Reference
make
make
build
Analysis
Scope
build
Class
Hierarchy
set
Translator
Factory
set
J2SE
Libraries
set
J2SE
Libraries
make
Default
Entrypoints
make
Default
Cache
get
Default
Options
get
Builder
Type
set
Builder
Type
get
Default
Options
get
Call
Graph
Builder
make
Call
Graph
get
Pointer
Analysis
get
Analysis
Cache
get
Class
Hierarchy
get
Call
Graph
Builder
make
translate
Internal
make
eval
parent
parent
key
in
Read
in
Assignment
set
Assign
in
Assignment
in
Read
set
Assign
in
Assignment
in
Read
set
Assign
in
Assignment
in
Read
set
Assign
make
Const
Read
make
Var
Read
copy
Nodes
is
Prologue
Script
use
Default
Init
Values
has
Implicit
Globals
treat
Globals
As
Lexically
Scoped
default
Catch
Type
make
Type
ignore
Name
make
Name
Map
add
Defined
Check
do
Lexically
Scoped
Read
do
Global
Read
define
Type
define
Field
compose
Entity
Name
declare
Function
define
Function
do
Throw
do
Call
do
New
Object
do
Materialize
Function
do
Array
Read
do
Array
Write
do
Field
Read
do
Field
Write
do
Primitive
New
do
Primitive
visit
Instance
Of
leave
Instance
Of
do
Prologue
do
Visit
get
Name
get
Supertypes
top
Type
exception
Type
get
Parameter
Positions
get
Parent
script
set
Operation
found
Member
Operation
copy
Operation
get
Parent
script
top
add
Name
Decl
get
Name
Decls
get
Catch
Target
set
Operation
found
Member
Operation
copy
Operation
get
Parent
add
Name
Decl
get
Name
Decls
script
get
Catch
Target
set
Operation
found
Member
Operation
copy
Operation
script
set
Operation
found
Member
Operation
copy
Operation
get
Parent
serialize
extract
Edges
serialize
Call
Site
get
JSON
Rep
For
Node
get
Context
String
get
Native
Method
Name
get
JSON
Rep
For
Call
Site
get
Call
Target
Method
is
Valid
Function
From
Source
is
Function
Prototype
Call
Or
Apply
is
Harness
Method
to
JSON
use
One
CFA
handle
Call
Apply
extract
Correlated
Pairs
make
Script
CG
Builder
get
UR
Lfor
File
make
Script
Scope
make
Script
Scope
make
Source
Modules
make
Source
Modules
make
Script
CG
Builder
make
Script
CG
Builder
make
Script
CG
make
Script
CG
make
Script
CG
Builder
Without
Correlation
Tracking
make
Script
CG
Builder
Without
Correlation
Tracking
make
Script
CG
make
Script
CG
make
HTMLCG
Builder
make
HTMLCG
Builder
make
HTMLCG
Builder
make
HTMLCG
Builder
make
Html
Scope
make
Html
Scope
make
HTMLCG
make
HTMLCG
make
CG
Builder
make
CG
make
HTMLCG
make
HTMLCG
make
HTMLCG
Builder
make
HTMLCG
Builder
get
Arguments
Array
Vns
get
Arguments
Array
Vn
field
Based
Call
Graph
Builder
Factory
field
Based
Call
Graph
Builder
Factory
field
Based
Call
Graph
Builder
Factory
field
Based
Call
Graph
Builder
Factory
build
CG
build
CG
build
Script
CG
build
Script
Dir
CG
build
Script
Dir
Bounded
CG
find
Scripts
In
Dir
build
Test
CG
build
Page
CG
build
CG
build
Bounded
CG
compare
C
Gs
initialize
visit
Java
Script
Invoke
visit
Type
Of
visit
Java
Script
Instance
Of
visit
Check
Ref
visit
With
Region
visit
Set
Prototype
visit
Prototype
Lookup
make
make
Variable
get
Constant
Type
init
get
Name
get
Root
Type
get
Throwable
Type
get
Constant
Type
is
Null
Type
get
Array
Interfaces
lookup
Primitive
Type
infer
Invoke
Exceptions
get
Metadata
Token
get
Pointer
Type
methods
Have
Declared
Parameter
Types
instruction
Factory
Check
Reference
Get
Instruction
Instance
Of
Invoke
Invoke
Invoke
Property
Read
Property
Write
Put
Instruction
Type
Of
Instruction
With
Region
Assert
Instruction
Assign
Instruction
Each
Element
Get
Instruction
Each
Element
Has
Next
Instruction
Echo
Instruction
Yield
Instruction
Global
Read
Global
Write
Is
Defined
Instruction
Is
Defined
Instruction
Is
Defined
Instruction
Is
Defined
Instruction
Lexical
Read
Lexical
Read
Lexical
Read
Lexical
Write
Lexical
Write
Lexical
Write
Array
Length
Instruction
Array
Load
Instruction
Array
Store
Instruction
Binary
Op
Instruction
is
PEI
copy
For
SSA
Check
Cast
Instruction
Check
Cast
Instruction
Check
Cast
Instruction
Check
Cast
Instruction
Comparison
Instruction
Conditional
Branch
Instruction
Conversion
Instruction
copy
For
SSA
Get
Caught
Exception
Instruction
Get
Instruction
Get
Instruction
is
PEI
Goto
Instruction
Instanceof
Instruction
Invoke
Instruction
Invoke
Instruction
Load
Metadata
Instruction
Monitor
Instruction
New
Instruction
is
PEI
get
Exception
Types
New
Instruction
Phi
Instruction
Pi
Instruction
Put
Instruction
is
PEI
Put
Instruction
Return
Instruction
Return
Instruction
Switch
Instruction
Throw
Instruction
is
PEI
get
Exception
Types
Unary
Op
Instruction
Address
Of
Instruction
Address
Of
Instruction
Address
Of
Instruction
Load
Indirect
Instruction
Store
Indirect
Instruction
Prototype
Lookup
Set
Prototype
is
Double
Type
is
Float
Type
is
Int
Type
is
Long
Type
is
Metadata
Type
is
String
Type
is
Void
Type
get
String
Type
get
Primitive
is
Boolean
Type
is
Char
Type
get
Fake
Root
Method
make
Ref
Visitor
make
Mod
Visitor
make
Code
Body
Type
define
Function
Type
define
Script
Type
define
Code
Body
Code
make
Code
Body
Code
get
Language
get
Reference
get
Instruction
Factory
reset
Prologue
File
set
Prologue
File
add
Bootstrap
File
get
Translator
To
C
Ast
init
Translator
should
Translate
make
The
Loader
get
The
Reference
visit
Java
Script
Invoke
visit
Type
Of
visit
Java
Script
Instance
Of
visit
Check
Ref
visit
With
Region
visit
Set
Prototype
visit
Prototype
Lookup
visit
Java
Script
Invoke
visit
Type
Of
visit
Java
Script
Instance
Of
visit
Check
Ref
visit
With
Region
visit
Set
Prototype
visit
Prototype
Lookup
make
Branch
Visitor
make
PEI
Visitor
create
Pa
Panel
init
Data
Structures
get
Pointer
Keys
Under
Instance
Key
get
Root
Nodes
get
Children
For
handle
Start
Tag
handle
Text
handle
End
Tag
get
Name
get
Attribute
By
Name
get
All
Attributes
get
Element
Position
get
Content
Position
resolve
de
Resolve
print
get
Input
Stream
println
print
println
write
To
File
write
dump
get
Number
Of
Line
Drops
resolve
de
Resolve
make
The
Loader
init
Translator
is
Nested
Within
Script
Body
is
Script
Body
do
Global
Read
do
Local
Write
leave
Function
Stmt
get
Included
Position
get
Include
Position
includes
get
Start
get
End
get
Starting
Line
get
Ending
Line
to
String
to
String
get
Included
Position
get
First
Line
get
Last
Line
get
First
Col
get
Last
Col
get
First
Offset
get
Last
Offset
get
URL
get
Reader
get
Include
Position
to
String
get
Input
Stream
get
Mapping
get
Logger
debug
error
get
Msg
info
is
Debug
Enabled
is
Error
Enabled
is
Info
Enabled
is
Warn
Enabled
warn
parse
parse
get
Position
get
First
Line
get
Last
Line
get
First
Col
get
Last
Col
get
First
Offset
get
Last
Offset
get
URL
get
Reader
make
All
Attributes
get
All
Attributes
get
Attribute
By
Name
get
Body
Text
get
File
Path
get
Name
to
String
get
Element
Position
get
Content
Position
get
Temp
File
extract
Sources
extract
Sources
add
Mapping
get
Included
Position
to
String
get
Mapping
relative
To
Absolute
Url
is
Absolute
Url
handle
End
Tag
handle
DOM
println
Indented
println
Indented
new
Line
make
Ref
write
Element
input
Element
Callback
write
Attribute
write
Event
Attribute
write
Portlet
Attribute
end
Element
create
Html
Callback
write
To
Final
Region
write
Entrypoint
add
Default
Handler
Invocations
make
Pos
handle
End
Tag
handle
Text
handle
Start
Tag
is
Usable
Identifier
handle
DOM
handle
DOM
handle
Attribute
write
Entrypoint
quotify
extruct
JS
handle
Script
get
Script
From
Url
get
Script
Name
write
Event
Loop
Header
write
To
Final
Region
extract
Sources
create
Html
Callback
create
Output
File
main
get
Temp
File
set
Factory
extract
Script
From
HTML
extract
Script
From
HTML
main
get
Stream
get
Included
Position
get
First
Line
get
Last
Line
get
First
Col
get
Last
Col
get
First
Offset
get
Last
Offset
get
URL
get
Reader
to
String
get
Parser
get
Included
Position
parse
copy
For
SSA
get
Number
Of
Uses
to
String
visit
get
Number
Of
Positional
Parameters
get
Use
get
Function
get
Exception
Types
hash
Code
get
Number
Of
Uses
get
Use
copy
For
SSA
to
String
visit
hash
Code
is
Fall
Through
copy
For
SSA
get
Exception
Types
is
PEI
hash
Code
is
Fall
Through
to
String
visit
get
Number
Of
Defs
get
Def
get
Number
Of
Uses
get
Use
copy
For
SSA
get
Exception
Types
hash
Code
is
Fall
Through
to
String
visit
get
Number
Of
Uses
get
Use
visit
Java
Script
Invoke
visit
Type
Of
visit
Java
Script
Instance
Of
visit
With
Region
visit
Check
Ref
visit
Set
Prototype
visit
Prototype
Lookup
visit
Java
Script
Invoke
visit
Property
Read
visit
Property
Write
visit
Type
Of
visit
Java
Script
Instance
Of
visit
Check
Ref
visit
With
Region
visit
Set
Prototype
visit
Prototype
Lookup
copy
For
SSA
to
String
visit
get
Exception
Types
copy
For
SSA
to
String
visit
get
Exception
Types
type
Error
Exceptions
no
Exceptions
copy
For
SSA
get
Exception
Types
hash
Code
is
Fall
Through
to
String
visit
is
PEI
get
Number
Of
Uses
get
Use
Check
Reference
Get
Instruction
Instance
Of
Invoke
Invoke
Invoke
Put
Instruction
Type
Of
Instruction
With
Region
Prototype
Lookup
Set
Prototype
get
Exception
Types
test
Require
Simple
test
Require
Static
Circular
test
Require
Dynamic
test
Require
Node
Modules
test
Require
Core
Modules
test
get
Module
make
is
Core
Module
get
Input
Stream
get
Class
Name
get
Name
load
Wrapper
Sources
load
Wrapper
Source
convert
File
To
Class
Name
make
make
CG
Builder
make
CG
Builder
set
Call
Graph
Builder
get
Callee
Target
get
Invoke
Instruction
get
Require
Targets
resolve
load
As
File
load
As
Directory
load
Node
Modules
node
Module
Paths
test
Page3
test
JS
Parse
Error
get
Parser
set
Up
set
Up
test214631
test
Rewriter
Does
Not
Change
Labels
Bug
test
Repr
test
Translate
To
C
Ast
Crash1
test
Translate
To
C
Ast
Crash2
test
Translate
To
C
Ast
Crash3
test
Non
Loop
Break
Label
test
For
In
Name
test
Parse
Error
set
Up
set
Up
test
Jquery
Spec
Test
Source
Mappings
check
Function
Bodies
set
Up
set
Up
set
Up
set
Up
set
Up
test
Named
IIFE
test
Param
And
Return
test
Call
And
Apply
get
Parsed
Flow
Graph
JSON
parse
JS
make
Correlation
Finder
parse
JS
set
Up
test
Crawl
test
Parse
Error
get
Parser
set
Up
set
Up
test
CPA
set
Up
test
Basic
test
Native
test
Reflective
Calls
test
Native
Callback
get
Flattened
JSONCG
flatten
Parsed
CG
get
Parsed
JSONCG
build
Call
Graph
get
Targets
Starting
With
has
Item
Starting
With
set
Up
test1
8
2
test
Bound1Worklist
test
Bound2Worklist
test
Bound3Worklist
test
Bunny
Hunt
test
Beslimed
test
Digg
Attack
test
River
Raider
test
Solitaire
test
World
Of
Solitaire
test
Minesweeper
test
Proto
RPG
test
Battleship
set
Up
run
Test
run
Test
run
Bounded
Test
dump
CG
test
test
Skeleton
Pessimistic
test
Skeleton
Optimistic
test
Skeleton
Worklist
test
Skeleton2Pessimistic
test
Skeleton2Optimistic
test
Skeleton2Worklist
test
Simple
JS
Pessimistic
test
Simple
JS
Optimistic
test
Simple
JS
Worklist
test
Oneshot
Pessimistic
test
Oneshot
Optimistic
test
Oneshot
Worklist
test
Callbacks
Optimistic
test
Callbacks
Worklist
test
Lexical
Pessimistic
test
Lexical
Optimistic
test
Lexical
Worklist
test
Reflective
Call
Optimistic
test
Reflective
Call
Worklist
test
New
Optimistic
test
New
Worklist
test
Callbacks2Optimistic
test
Callbacks2Worklist
test
New
Fn
Empty
No
Crash
test
Recursive
Lex
Write
test
Named
Fn
Twice
test
Switch
Default
test
Bug2979
test
Bad
New
Function
Call
build
HTMLCG
to
Url
main
print
I
Rs
For
JS
print
I
Rs
For
CHA
print
I
Rs
For
HTML
main
main
get
Sources
get
Global
Object
make
Main
Visitor
Selector
make
Interesting
Visitor
Selector
make
Implicit
Visitor
Selector
make
Root
Node
Selector
use
Object
Catalog
field
Key
For
Unknown
Writes
same
Method
process
Calling
Constraints
get
Java
Script
Loader
make
New
Class
Loader
add
Default
Dispatch
Logic
main
main
make
script
get
Parent
get
Parent
get
Parent
operation
Receiver
Name
operation
Receiver
Var
operation
Element
Name
operation
Element
Var
translate
Opcode
make
Builtin
New
handle
New
handle
New
is
Prologue
Script
get
Call
Target
is
Primitive
Call
get
New
Target
is
Primitive
Creation
make
Call
make
Ctor
Call
make
Call
to
String
get
Name
get
Signature
get
Kind
get
Argument
Names
get
Argument
Defaults
get
Argument
Count
get
All
Scoped
Entities
get
Scoped
Entities
get
AST
get
Control
Flow
get
Source
Map
get
Position
get
Node
Type
Map
get
Annotations
get
Qualifiers
get
Type
get
Position
get
Name
Position
walk
Entity
make
Position
note
Source
Position
read
Name
get
Labels
make
Empty
Label
Stmt
make
Loop
Context
make
Break
Context
visit
visit
Array
Comprehension
visit
Array
Comprehension
Loop
visit
Array
Literal
visit
Assignment
visit
Ast
Root
visit
Block
visit
Break
Statement
visit
Catch
Clause
visit
Comment
visit
Conditional
Expression
visit
Continue
Statement
visit
Do
Loop
visit
Object
Read
visit
Element
Get
visit
Empty
Expression
visit
Empty
Statement
visit
Error
Node
visit
Expression
Statement
visit
For
In
Loop
visit
For
Loop
gather
Call
Arguments
visit
Function
Call
get
Parent
Name
visit
Function
Node
visit
If
Statement
visit
Infix
Expression
visit
Jump
visit
Keyword
Literal
visit
Label
visit
Labeled
Statement
visit
Let
Node
visit
Name
visit
New
Expression
visit
Number
Literal
visit
Object
Literal
visit
Object
Property
visit
Parenthesized
Expression
visit
Property
Get
visit
Reg
Exp
Literal
visit
Return
Statement
visit
Scope
visit
Script
Node
visit
String
Literal
visit
Switch
Case
visit
Switch
Statement
visit
Symbol
visit
Throw
Statement
visit
Try
Statement
visit
Unary
Expression
visit
Update
Expression
visit
Variable
Declaration
enter
Entity
do
Visit
visit
Variable
Initializer
visit
While
Loop
visit
With
Statement
visit
Xml
Dot
Query
visit
Xml
Elem
Ref
visit
Xml
Expression
visit
Xml
Fragment
visit
Xml
Literal
visit
Xml
Member
Get
visit
Xml
Prop
Ref
visit
Xml
Ref
visit
Xml
String
visit
Yield
make
Var
Ref
translate
To
C
Ast
error
get
Msg
runtime
Error
warning
add
Rewriter
visit
visit
Array
Comprehension
visit
Array
Comprehension
Loop
visit
Array
Literal
visit
Assignment
visit
Ast
Root
visit
Block
visit
Break
Statement
visit
Catch
Clause
visit
Comment
visit
Conditional
Expression
visit
Continue
Statement
visit
Do
Loop
visit
Element
Get
visit
Empty
Expression
visit
Empty
Statement
visit
Error
Node
visit
Expression
Statement
visit
For
In
Loop
visit
For
Loop
visit
Function
Call
visit
Function
Node
visit
If
Statement
visit
Infix
Expression
visit
Jump
visit
Keyword
Literal
visit
Label
visit
Labeled
Statement
visit
Let
Node
visit
Name
visit
New
Expression
visit
Number
Literal
visit
Object
Literal
visit
Object
Property
visit
Parenthesized
Expression
visit
Property
Get
visit
Reg
Exp
Literal
visit
Return
Statement
visit
Scope
visit
Script
Node
visit
String
Literal
visit
Switch
Case
visit
Switch
Statement
visit
Symbol
visit
Throw
Statement
visit
Try
Statement
visit
Unary
Expression
visit
Update
Expression
visit
Variable
Declaration
visit
Variable
Initializer
visit
While
Loop
visit
With
Statement
visit
Xml
Dot
Query
visit
Xml
Elem
Ref
visit
Xml
Expression
visit
Xml
Fragment
visit
Xml
Literal
visit
Xml
Member
Get
visit
Xml
Prop
Ref
visit
Xml
Ref
visit
Xml
String
visit
Yield
translate
Internal
make
get
Parser
parse
count
Lines
set
Document
Locator
start
Element
get
Name
get
Attribute
By
Name
get
All
Attributes
entry
Set
get
Key
get
Value
set
Value
get
Element
Position
get
Content
Position
end
Element
characters
ignorable
Whitespace
start
Document
end
Document
start
Prefix
Mapping
end
Prefix
Mapping
processing
Instruction
skipped
Entity
read
