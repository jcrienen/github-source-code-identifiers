root
line
call
Stack
caller
stack
caller
Frame
line
caller
Class
caller
Method
lib
Reader
x
ci
ci
callee
Class
callee
Method
instrumenter
ci
i
lib
Reader
cw
class
Name
r
methods
m
d
v
me
the
Class
the
Method
is
Constructor
non
Static
method
Signature
key
trampoline
me
types
i
local
type
mode
inst
inst
v
mt
v
cw
p
i
item
Type
entry
i
new
Args
entries
ci
cw
w
name
need
Transform
offset
end
i
r
decoder
md
compiler
out
cw
iterator
r
cw
r
cw
lr
lw
table
i
lr
lw
table
lr
lw
table
i
elems
i
t
cr
w
r
cp
CP
Count
item
Type
i
iter
field
Count
i
method
Count
i
source
File
reader
attrs
file
index
log
i
ci
class
Name
m
d
v
me
msg0
no
Trace
Label
msg0
instr
i
no
Trace
Label
msg0
no
Trace
Label
cw
instrumenter
ci
t
c
Type
m
sig
params
flags
m
UID
t
elem
Type
c
last
Dot
i
dot
i
seed
r
ci
class
Name
m
d
v
passes
i
do
Get
do
Put
do
Array
Store
tmp
Int
tmp
Any
me
label
t
cw
i
ci
cr
class
Name
all
Private
Constructors
method
Calls
Constructor
class
Init
Calls
Constructor
m
d
f
constructor
Calls
instrs
invoke
i
ci
class
Name
m
d
me
handlers
put
Dumper
At
offset
cw
valid
range
start
end
this
Cause
pos
source
start
source
end
range
cause
crt
length
i
pc
start
index
pc
end
index
source
start
position
source
end
position
flags
l
source
Info
source
Info
Index
i
short
pc
sb
i
names
index
t
Flags
date
sw
log
Stream
put
in
changed
back
Edge
Count
i
targets
hs
i
i
targets
target
hs
target
result
instr
d
targets
hs
st
i
instr
source
li
j
locs
path
killed
v
k
i
instr
s
source
path
killed
v
j
type
new
Var
abstract
Stacks
i
i
d
j
i
popped
i
i
count
j
i
stack
targets
hs
stack
back
reachable
reaching
targets
targets
cached
Jar
cached
Jar
base
e
entry
name
fs
pound
Index
f
leftover
i
a
r
in
r
name
in
s
out
r
buf
read
jin
entry
new
Entry
name
cl
entry
Name
cl
Out
entry
Name
cl
Out
i
r
p
i
i
t
i
s
locals
Used
locals
Wide
visitor
ts
t
param
Types
index
last
HS
max
Used
j
words
i
instr
new
Words
d
size
delta
words
j
b
w
bt
t
hs
t
new
Words
delta
result
patches
cur
Offset
cur
Offset
Ref
stack
Len
stack
Len
Ref
stack
Words
instr
Ref
no
Opcode
Handler
count
offset
stack
Len
size
delta
offset
stack
Len
size
Words
delta
Words
offset
stack
Len
top
Size
next
Size
i
instr
opcode
start
I
fall
To
Conditional
cbr
cbr
target
I
invert
i
Start
delta
p
target
I
invert
i
Start
delta
p
cp
Index
ci
t
cp
Index
ci
t
i0
i1
i2
i3
c
v
op
v
v
target
I
delta
p
start
sw
cases
And
Labels
j
start
sw
cases
And
Labels
j
g
cp
Index
p
cp
Index
inv
cp
Index
inv
cp
Index
inv
sig
cp
Index
n
have
Stack
d
size
delta
b
w
s
s
new
Code
handler
Counts
max
Count
i
len
raw
Handler
List
i
j
first
h
raw
Handlers
count
r
i
off
old
Edges
left
right
mid
new
Edges
i
instr
back
i
instr
targets
hs
i
back
j
new
Back
i
instr
lts
t
ret
Type
call
Wrapper
cur
Stack
Len
sig
Buf
i
live
Vars
i
t
i
sig
name
saved
Max
Stack
prefix
Length
initial
Stack
i
new
Code
i
local
suffix
Offset
raw
Handlers
bytecode
Map
patch
start
HS
new
HS
t
patch
HS
last
Invalid
i
back
outside
Branch
j
p
i
targets
outside
Branch
p
i
out
hs
h
targets
p
untouched
Stack
unread
Stack
i
low
Water
Mark
unknown
Type
i
t
live
At
End
multiple
Defs
local
Defed
first
Def
second
Def
i
instr
l
p
start
HS
num
Outs
t
mismatched
Handlers
first
Mismatch
i
hs
matching
Outs
t
match
p
p
offset
patches
p
j
index
v
r
table
i
i
i
i
i
i
i
i
i
i
i
i
i
i
i
i
ci
offset
size
instr
j
handler
Addr
stack
Words
r
j
targets
r
instr
local
Index
ret
Addr
r
clone
Stack
Words
size
j
instr
offset
targets
i
opcode
i
wide
two
Down
v
c
v
start
def
low
high
t
j
start
def
n
t
j
f
f
m
m
m
d
delta
size
pushed
Words
s
new
Index
instr
Count
i
i
instr
targets
j
Index
opcode
offset
num
Handlers
j
hs
j
class
Index
catch
Class
len
i
sub
Start
map
sub
i
s
offset
j
instr
i
instr
i
stack
Words
i
instructions
Len
i
p
i
offset
s
j
i
i
hs
handlers
Valid
Before
i
num
Handlers
j
s
j
r
i
r
i
t
i
t
opcode
i
cur
Case
last
Case
r
i
cs
i
i
h
i
b
i
opcode
ch
i
i
l
r
i
i
r
t
i
i
r
i
t
i
r
i
t
i
opcode
i
t
t
index
t
opcode
i
r
r
i
i
i
instructions
st
c
instructions
max
visitor
v
v
r
l
visitor
c
r
i
j
k
i
index
count
alias
alias
name
alias
index
count
count
r
index
len
count
r
index
len
t
buf
f
f
buf
i
methods
result
result
cs
m
opcode
len
ch
r
r
offset
r
bytes
b
big
offset
r
r
catchers
i
targets
hs
r
p
i
i
t
i
ifaces
r
iface
v
r
c
sup
visited
v
subtypes
r
subt
v
v
ifaces
r
last
c
r
c
last
c
ifaces
r
r
c
t1Supers
t1Exact
Classes
t1Class
Count
t1Exact
Interfaces
t2Supers
t2Exact
Classes
t2Exact
Interfaces
t2Supers
Size
iter
element
subsumed
t
ch2
ch1
1
old
Edges
left
right
mid
new
Edges
i
i
instr
targets
hs
i
back
j
new
Back
x
r
targets
instr
targets
hs
reachable
targets
targets
reaching
instr
targets
hs
stack
locals
j
j
r
a
b
changed
st
j
t
changed
ls
lj
cj
t
cur
Stack
cur
Locals
cur
Stack
Size
cur
Locals
Size
locals
Update
sz
i
i
t
index
t
restart
instr
popped
d
size
s
pushed
local
bc
declared
Type
handler
target
cls
catch
Stack
targets
this
Type
i
stack
Sizes
info
info
info
info
t
class
Type
class
Type
type
class
Type
signature
this
Class
params
i
i
v
v
all
invoke
Type
t
t
index
class
Loader
bootstrap
CL
bootstrap
Class
bt
bootstrap
args
my
Lookup
impl
lookup
lutrusted
i
return
Type
return
Class
param
Types
param
Classes
i
mt
r
i
i
i
t
handlers
i2b
i
key
r
r
s
s
s
hs
i
count
hp
Iterator
patched
Handlers
hp
Iterator
w
old
Instructions
To
New
p
method
Handlers
i
basic
Handlers
hp
p
replace
p
branch
Over
hp
Iterator
hp
Iterator
p
label
Defs
new
Instructions
To
Old
i
adjusted
Handlers
i
hs
h
i
i
r
t
i
i
k
r
i
from
to
i
prime
result
other
prime
result
other
r
i
r
r
r
class
Name
elt
Name
elt
Desc
kind
bootstrap
name
type
i
v
s
buf
len
i
ch
num
Fields
i
UID
digest
interfaces
fields
field
Names
field
Count
f
flags
name1
name2
i
f
methods
method
Kinds
method
Sigs
method
Count
m
name
flags
m1
m2
name1
name2
i
m
hash
i
data
r
i
ci
i
d
v
me
msg0
ins
k
instr
msg
v
oi
ci
cr
method
Count
iter
i
code
d
md
v
ci
cl1
cl2
r
cp
i
w
p
oi
ci
bss
cw
result
cr
name
code
decoder
cpr
orig
Insts
x
m
insts
arg
an
cr
attrs
method
Count
result
i
oi
classpath
Entries
w
p
urls
i
f
ci
name
code
decoder
insts
target
attrs
method
Count
i
oi
w
p
ci
b
i
v
b
i
ch
buf
c
fs
name
val
name
code
raw
Handlers
decoder
disasm
e
code
Attrs
c
Name
map
line
count
j
line2
locals
line
count
j
vars
line2
buf
k
n
cv
sr
sr
r
len
pos
amount
t
buf
i
ch
h
cp
i
t
attrs
field
Count
i
method
Count
i
iter
code
d
md
instructions
type
handlers
i2b
md
i
i
field
Count
i
i
md
comp
oc
flags
aux
iter
code
new
Line
Map
old
Line
Map
new
To
Old
Map
i
old
raw
Table
lines
old
Map
new
To
Old
Map
new
Map
last
Locals
i
old
raw
Table
locals
code
code
Attr
Count
lines
locals
stacks
sm
var
Types
new
To
Old
vars
i
idx
j
type
code
Attributes
code
Attr
Index
iter
method
Attr
Count
method
Attributes
i
bytes
ci
cw
super
Interfaces
i
super
Name
compiler
output
code
lines
new
Line
Map
raw
Table
elements
r
name
data
bs
old
To
New
i
i
positions
sms
position
new
Frames
bytes
bytes
bytes
i
trimmed
stack
Types
x
j
stack
Type
idx
frames
instruction
To
Bytecode
insts
type
Checker
bbs
offset
i
position
frame
Offset
frame
Type
local
Types
local
Write
Types
stack
Types
stack
Write
Types
offset
offset
cp
Offset
prime
result
other
result
offset
i
attribute
And
Size
num
Param
Offset
param
Count
result
offset
i
j
attribute
And
Size
type
num
Element
Value
Pairs
size
offset
element
Name2Val
i
element
Name
element
Val
And
Size
tag
next
Short
num
Values
num
Array
Bytes
vals
cur
Array
Offset
i
array
Elem
Value
And
Size
attribute
And
Size
attr
Name
r
r
r
i
t
i
index
ifs
i
size
new
Buf
offset
size
offset
final
Offset
len
offset
chars
i
o
item
t
offset
nat
inv
handle
kind
x
x
x
ref
s
slen
offset
max
Bytes
p
j
ch
bytes
offset
offset
offset
offset
offset
i
num
Fields
num
Methods
num
Attrs
b
n
item
entries
ptr
i
frame
Type
offset
offset
stack1
offset
stack1
offset
offset
locals
offset
j
offset
num
Locals
locals
j
num
Stack
stack
j
iter
r
result
offset
i
attribute
And
Size
target
type
p
Annotation
Target
And
Size
type
path
offset
path
length
type
path
current
path
element
i
type
path
kind
type
argument
index
annotation
begin
p
Attribute
And
Size
interface
Index
super
Type
throws
Index
table
length
offset
start
pc
length
index
i
exception
table
index
raw
Handler
catch
Type
offset
offset
type
argument
index
target
Types
type
Path
Kinds
attr
Name
offset
count
count
r
offset
i
r
cr
iter
line
Number
Table
Reader
attr
count
offset
j
start
PC
line
Num
last
i
cur
count
count
r
count
r
cp
i
sb
j
i
v
var
Count
entries
var
End
last
Vector
entry
Count
i
k
entry
Offset
name
Index
type
Index
end
r
offset
magic
minor
Version
major
Version
constant
Pool
Count
field
Count
method
Count
attr
Count
i
size
i
i
c
s
indices
i
s
names
i
s
s
s
prime
result
other
this
Class
attrs
offset
offset
s
offset
s
offset
s
offset
offset
offset
offset
offset
offset
offset
offset
offset
offset
offset
offset
offset
offset
index
offset
offset
offset
s
count
end
buf
x
y
y
z
i
tag
item
Len
count
count
r
count
r
cp
i
inner
i
x
cp
inner
i
cp
base
i
method
Handle
Offset
args
Base
index
argument
Count
index
index
t
class
Name
elt
Name
elt
Desc
type
cls
m
lk
size
start
i
v
i
offset
count
count
r
offset
i
new
Vector
r
cr
iter
local
Variable
Table
Reader
attr
count
offset
j
start
PC
length
name
Index
type
Index
var
Index
k
new
Vector
bytes
i
v
raw
Count
last
raw
Table
index
i
next
offset
attr
Count
i
len
r
r
offset
i
params
c
Iter
cr
data
m
Pos
r
pos
iter
sp
Read
last
i
cur
klass
size
data
table
Data
cr
Table
pc
r
p
pos
start
end
pos
i
line
apk
File
multi
Dex
scope
classes
number
Of
Classes
scope
scope2
cha
cha2
test
APK
multidex
Apk
scope
dex
Tmp
Dir
dex1
dex2
scope
scope2
cha
cha2
multidex
Apk
entry
scope
cha
cache
b2
b
caller
Ref
callee
Ref
b2Class
target
Method
entrypoints
options
cgb
cg1
cg2
caller
Nodes
caller
Node
callee
Nodes
callee
Node
buffer
read
java
Jar
java
Jar
Path
F
tmp
Dir
F
libs
name
F
android
Dex
dalvik
Scope
x
result
android
Libs
android
Java
Jar
apk
File
uncalled
x
bad
f
test
Parameters
apk
Root
uncalled
input
File
input
File
java
Scope
java
Jar
Path
android
Dex
android
input
File
scope
cha
entrypoints
options
builder
CG
result
fts
tts
java
java
Scope
java
Jar
Path
android
Dex
android
android
Methods
java
Methods
java
Extra
Edges
android
Extra
Edges
ajlines
aalines
m
jlines
bc
Index
java
Line
am
alines
ai
both
fail
java
Extra
Nodes
i
x
s
result
F
scope
cha
cache
es
options
cgb
call
Graph
ptr
Analysis
scope
scope
cha
main
Class
Ref
main
Class
entrypoints
cache
options
cgb
call
Graph
mmr
ptr
Analysis
input
File
input
File
apk
time
CG
start
Time
pm
code
ctx
intent
param
iintent
param
intent
target
iintent
self
callee
Sel
is
Explicit
action
Key
in
Intent
intent
self
action
Key
intent
self
intent
self
action
Key
intent
self
ret
target
info
relevant
m
Ref
num
Args
other
compo
search
Loader
t
Context
Wrapper
t
Context
t
Activity
do
Fragments
do
Users
t
Fragment
Activity
immutable
immutable
intent
intent
intent
intent
found
Action
intent
intent
intent
intent
action
action
O
clone
pack
andoid
Intent
Action
type
type
type
ret
other
possible
Targets
it
it
target
Component
a
Type
ctx
calling
Class
in
Intent
intent
method
model
info
type
override
method
info
intent
target
Component
model
override
target
ir
ir
statements
statements
other
main
Thread
pc
n
Ref
new
Instr
pc
m
Ref
exception
site
params
ctor
Call
system
Context
pc
desc
m
Sel
m
Ref
site
exception
params
call
false
Const
pc
m
Restricted
put
Inst
package
Context
pc
n
Ref
new
Instr
pc
m
Ref
exception
site
params
ctor
Call
false
Const
pc
m
Restricted
put
Inst
package
Name
uid
pc
n
Ref
new
Instr
null
Apk
null
I
Binder
pc
desc
m
Sel
m
Ref
exception
site
params
call
s
Name
c
Name
m
Class
descr
others
A
others
cha
t
Ref
instruction
Factory
p
Acc
pm
instantiator
mini
mini
Acc
params
excpetion
pc
site
invokation
ext
Ret
external
external
Acc
params
excpetion
pc
site
invokation
s
Name
c
Name
m
Class
descr
selector
m
Class
cha
t
Ref
instruction
Factory
body
p
Acc
pm
instantiator
ret
Val
n
T
n
T
n
T
n
T
n
T
n
T
n
T
n
T
return
PC
return
Instruction
resolved
m
Ref
resolved
overrides
call
To
monitor
monitor
Counter
target
Model
target
Model
starters
methods
To
Override
info
in
Class
override
Me
possible
Targets
target
Model
override
MT
Sel
m
Class
intent
Name
bundle
Name
descr
selector
m
Class
cha
t
Ref
instruction
Factory
p
Acc
in
Intent
in
Bundle
next
Local
out
Bundle
out
Intent
call
PC
m
Sel
m
Ref
site
exception
params
invokation
out
Name
out
Value
call
PC
m
Sel
m
Ref
site
exception
params
invokation
return
PC
return
Instruction
null
Instrumentation
null
Info
title
null
Parent
null
Config
Instance
c
Name
type
null
Configuration
desc
m
Sel
m
Ref
params
call
PC
site
exception
invokation
i
Caller
i
Activity
i
App
i
Service
android
Context
i
Binder
intent
Sender
i
Intent
Sender
call
PC
m
Sel
m
Ref
site
exception
params
invokation
call
PC
m
Sel
m
Ref
site
exception
params
invokation
m
Main
Thread
inst
PC
m
Main
Thread
Ref
get
Inst
call
PC
m
Sel
m
Ref
site
exception
params
invokation
m
Activity
Token
Ref
inst
PC
get
Inst
m
Token
Ref
inst
PC
put
Inst
call
PC
m
Sel
m
Ref
site
exception
params
invokation
tmp
Result
Code
m
Result
Code
Ref
inst
PC
get
Inst
tmp
Result
Data
m
Result
Data
Ref
inst
PC
get
Inst
ret
Val
phi
PC
phi
android
m
Class
clinit
Ref
clinit
instruction
Factory
components
ssa
No
instance
pc
n
Ref
instr
pc
ctor
site
exception
params
ctor
Call
fd
Name
pc
fd
Ref
put
Inst
methods
fd
Ref
access
Flags
field
m
Class
restricted
Entries
selector
m
Class
cha
t
Ref
klass
current
Progress
tsif
instantiator
entered
A
Section
application
tmp
App
null
Intent
null
Binder
boot
paramses
mutli
Type
Positions
params
i
as
Managed
key
seen
position
In
Mutli
Type
Position
multi
Type
Position
types
On
Position
type
Count
On
Position
new
paramses
i
new
params
i
params
type
as
Managed
key
seen
call
PC
site
invokation
exception
return
Type
return
Key
old
Value
return
Value
new
Value
phi
PC
to
Phi
phi
return
Value
flags
instruction
Factory
acc
pm
redirect
instantiator
self
model
Acc
models
Activities
all
Activities
activity
Type
in
As
Method
fd
Name
m
Class
field
inst
PC
target
get
Inst
new
Instance
inst
PC
fd
Ref
put
Inst
new
Instance
defaults
null
Bundle
intent
Array
incoming
unpacked
Intent
Key
unpacked
Intent
pc
fetch
intent
tool
context
Type
android
Context
redirect
Params
call
PC
site
invokation
exception
svc
return
PC
return
Instruction
declaring
Class
override
trash
result
Codes
result
Data
m
Result
Code
m
Result
Data
out
Request
Code
call
PC
m
Sel
m
Ref
site
exception
params
invokation
declaring
Class
override
as
Method
clazz
method
Name
return
Type
descr
m
Class
encap
instruction
Factory
acc
pm
model
params
instantiator
i
arg
T
arg
fd
Name
field
inst
PC
get
Inst
inst
PC
fd
Ref
put
Inst
managed
key
call
PC
site
exception
invokation
method
as
Parameter
To
in
Call
param
Count
i
types
param
Type
i
as
Parameter
To
in
Call
with
Name
bc
Index
local
Number
beh
a
Types
clazz
name
return
Type
descr
m
Ref
param
SSA
descriptor
Offset
t
Name
t
Ref
rp
instance
app
Components
m
Class
fd
Type
i
Key
instance
pc
sub
Key
get
Inst
i
Key
instance
instance
pc
phi
context
Key
context
instance
ctor
params
current
Depth
seen
o
param
a
Param
did
Phi
param
a
Param
param
a
Param
param
a
Param
ret
candidate
SSA
candidate
Scope
ssa
ret
seen
Live
beh
other
type
K
type
V
pack
pack
K
pack
V
beh
test
Class
test
Key
value
beh
prefix
prefix
Key
value
beh
beh
pack
V
type
K
type
K
val
type
K
val
stripped
Behaviours
val
other
type
K
type
V
pack
pack
K
pack
V
beh
test
Class
test
Key
value
beh
prefix
prefix
Key
value
beh
beh
pack
V
type
K
stripped
Behaviours
val
s
Inst
klass
instance
m
Class
fd
Name
field
inst
PC
get
Inst
types
new
Inst
payload
Type
payload
new
Inst
pc
n
Ref
array
Length
params
pc
write
sub
Instances
sub
Klass
sub
Instance
new
Inst
new
Seen
abstraction
cls
pc
phi
pc
n
Ref
new
Instr
pc
exception
site
params
ctor
Call
c
Tor
ctor
Acc
acc
null
Self
seen
ctor
Params
cls
ret
cls
impls
subs
a
Cls
dim
inner
inner
Types
a
T
i
ret
cls
ctor
score
klass
candid
Score
param
Count
i
param
Type
seen
o
instance
s
Inst
klass
instance
types
new
Inst
payload
Type
payload
new
Inst
pc
n
Ref
array
Length
params
pc
write
sub
Instances
sub
Klass
sub
Instance
new
Inst
new
Seen
abstraction
cls
pc
phi
pc
n
Ref
new
Instr
pc
exception
site
params
ctor
Call
c
Tor
ctor
Acc
acc
null
Self
seen
ctor
Params
cls
ret
cls
impls
subs
a
Cls
dim
inner
inner
Types
a
T
i
ctor
score
klass
candid
Score
param
Count
i
param
Type
current
Depth
seen
o
descr
m
Class
m
Class
outer
Phis
Needed
phi
Key
new
Value
phi
PC
old
Allow
Reserved
for
Phi
phi
true
Key
true
Val
phi
Key
all
phi
Type
new
Value
phi
outer
Phis
Needed
phi
Key
new
Value
phi
PC
old
Allow
Reserved
for
Phi
phi
true
Key
true
Val
phi
Key
all
phi
Type
new
Value
phi
return
Types
aep
outer
Phis
Needed
phi
Key
new
Value
phi
PC
old
Allow
Reserved
for
Phi
phi
true
Key
true
Val
ssa
Value
phi
Key
all
phi
Type
new
Value
phi
cha
activity
max
min
min
max
max
other
tr
A
handler
factory
attr
allowed
Sub
Tags
sub
Tag
subs
allowed
Tags
urls
names
current
o
Name
o
Url
intent
allowed
Tags
override
Targets
current
o
Intent
pack
name
intent
tag
handler
tag
handler
type
action
ret
m
Uri
pack
ret
ep
Class
pre
prev
prev
prev
ctor
first
original
ori
Type
new
Type
ori
source
ori
Type
new
Type
original
ori
Type
new
Type
from
to
ret
old
prev
pass
pass
pass
pass
entrypoits
test
pass
behaviour
entrypoits
test
behave
pass
entrypoits
params
flags
entry
Points
dummy
bases
ret
base
Class
candids
methods
ep
compo
ep
app
Loader
app
It
app
Class
android
Class
is
Android
Class
methods
ep
i
Faces
if
Methods
method
ep
ep
old
Types
new
Types
clr
set
cls
Name
dfa
indent
i
i
T
i
Cand
type
test
Ref
test
Class
scope
exclusions
File
code
File
is
Container
File
multi
Dex
paths
f
f
j
bb0
handlers
r
catchers
block
Count
instructions
i
targets
hs
entry
j
i
b
exit
last
targets
b
next
exit
cha
exception
Types
go
To
All
Handlers
hs
loader
l
call
target
m
Target
b
caught
Exception
loader
caught
Class
caught
Class
caught
klass
subtype1
exit
exit
handlers
hs
next
s
catches
j
succ
Nodes
ir
temp
prime
result
other
result
values
at
name
v
value
values
at
name
ev
value
vs
rs
idx
bl
bt
c
d
o
field
Name
ft
ct
f
iv
l
m
method
Name
method
Sig
s
str
t
sig
field
Type
Array
T
method
cfg
symbol
Table
new
Instrs
new
Cfg
bc
Index
line
Number
builder
field
Name
field
Type
T
type
descriptor
intf
List
size
i
enc
Inst
Fields
ifs
enc
Stat
Fields
sfs
result
types
result
result
result
i
methods
AL
direct
Methods
virtual
Methods
i
method
class
Module
Entries
class
Files
result
dex
Entry
class
Name
t
Name
i
Class
strings
annotation
Set
tname
loader
result
number
number
i
ref
name
D
tries
line
Number
fe
that
try
Blocks
temp
array
i
start
Address
end
Address
start
Inst
end
Inst
end
Size
i
i
m
dummy
Dex
Name
container
path
cp
analyzer
instrucs
inst
Loc
inst
Counter
current
Code
Address
i
i
i
cname
type
Ref
cname
cname
cname
params
cname
register
Count
params
args
i
cname
new
Site
Ref
my
Type
Ref
register
Count
params
args
i
cname
new
Site
Ref
my
Type
Ref
array
Element
Type
cname
fname
ftname
cname
fname
ftname
cname
fname
ftname
cname
fname
ftname
register
Count
args
i
cname
mname
pname
register
Count
args
i
cname
mname
pname
register
Count
args
i
cname
mname
pname
register
Count
args
i
cname
mname
pname
register
Count
args
i
cname
mname
pname
register
Count
args
i
cname
mname
pname
register
Count
args
i
cname
mname
pname
register
Count
args
i
cname
mname
pname
register
Count
args
i
cname
mname
pname
register
Count
args
i
cname
mname
pname
lit
lit
lit
lit
lit
lit
lit
lit
lit
lit
lit
lit
lit
lit
lit
lit
lit
lit
lit
array
Fill
interesting
Register
cur
Counter
cur
Inst
new
Array
uo
csites
target
fsites
fsites
asites
nsites
raw
result
ret
ret
name
tf
st
lhs
rhs
lhs
Type
meet
ignore
Zero
contains
Non
Primitive
contains
Zero
scope
loader
path
l
r
i
i
i
r
i
arg
String
sep
arg
String
sep
arg
String
sep
arg
String
sep
arg
String
sep
i
i
i
meet
xfer
Functions
exit
entry
new
Exit
exit
entry
new
Exit
problem
result
result
s
bb
other
changed
changed
L
n
Locals
i
R
j
meet
lhs
n
Locals
i
rhs
lhs
height
i
rhs
result
i
i
i
i
i
i
result
instructions
i
instructions
i
new
BB
phi
result
v
x
i
entry
State
parameter
Number
local
i
t
symbol
i
s
array
Ref
dest
length
index
array
Ref
dest
result
t
value
index
array
Ref
t
iae
i
ae
index
array
Ref
t
value
val2
val1
dest
result
lit
val2
val1
dest
result
val
result
bbranch
val2
val1
t
ubranch
val2
val1
t
dest
symbol
const
Inst
type
Ref
s
dest
result
f
instance
ref
dest
result
lang
m
code
site
exc
n
i
params
arg
i
i
i
inst
result
dest
inst
ref
dest
result
dest
result
sizes
i
dest
result
sizes
i
value
f
ref
ret
D
result
is
Primitive
ret
S
result
is
Primitive
val
index
bb
new
BB
s
x
new
BB
s
throwable
idx
bbidx
new
BB
s
exception
Value
val
from
Type
to
Type
overflows
dest
result
dest
result
n
bb
path
out
Num
pi
pi
pi
max
S
number
local
Numbers
m
result
i
bb
first
Instruction
locals
i
p
result
i
count
result
j
i
graph
root
leaf
result
result
result
result
old
op
result
result
other
result
result
i
lhs
result
i
other
i
result
op
other
result
result
global
Change
s
code
s
result
start
end
result
eq
s
s
code
s
s
s
s
v
temp
eq
rhs
lhs
variable
lhs
rhs
lhs
order
number
elt
v
result
S
size
old
method
result
result
hc
s
h
o
count
result
count
result
i
result
index
index
index
i
result
mis
result
result
result
result
result
key
values
s
result
key
val
result
value
To
Keys
key
value
value
keys
size
ret
i
added
i
i
i
ind
result
ne
bs
left
Index
right
Index
left
Object
right
Object
bs
hp
Index
parent
s
i
page
v
local
X
page
v
local
X
v
v
v
it
result
v
it
v
local
Max
element
element
element
o
o
ret
vals
elems
ret
ret
edges
result
trace
Dump
result
result
result
oldsecurity
c
buf
fields
i
type
name
value
lastdot
dollar
Index
top
Level
Type
Str
total
Memory
free
Memory
used
Memory
i
other
size
tmp
Entries
size
tmp
Entries
obj
Array
To
String
i
j
tmp
Entries
i
j
size
tmp
Entries
size
tmp
Entries
num
From
This
size
tmp
Entries
result
result
i
i
v
i
old
Length
old
Entry
Count
old
Last
Key
Slot
old
First
Value
Slot
new
Length
new
Entry
Count
new
Last
Key
Slot
new
First
Value
Slot
i
result
result
result
i
p
rows
result
c
i
p
s
c
result
c
result
i
i
format
result
i
heading
j
i
e
element
r
result
i
j
i
element
result
j
r
i
to
Remove
i
row
i
f
result
reader
line
row
line
st
n
Columns
r
i
st
n
Columns
i
result
i
regex
line
m
test
i
k
k
result
i
result
i
result
i
result
i
roots
result
n
e
output
node
Manager
edge
Manager
result
seen
Insts
new
Insts
next
Insts
ss
n
sg
result
i
result
i
other
i
result
i
ptr
next
Node
prev
next
dfs
node
i
node
e
prev
u
bucket
Enum
node2
u
s
tmp
i
node
sb
frontier
DT
XS
X
DF
X
i
v
functions
index
f
count1
count2
count3
count4
n1
n2
n3
n4
n5
n
set1
o1
b
set2
o2
b
s1clone
first
first
o
current
result
N
number
ts
next
N
children
c
result
n
parent
o
current
result
N
dfs
result
dfs
result
dfs
order
result
dfs
i
nxt
t1
t2
reverse
Finish
Time
current
SCC
v
color
Map
i
o1edges
o2edges
colors
vertices
current
Color
colored
id
result
fn
tos
k
i
j
new
Len
paths
s
i
j
fn
tn
intermediate
in
result
paths
x
i
j
fn
tn
intermediate
none
result
in
path
finish
Time
rev
G
T
cp
key
key
e
v
v
pc
n
Children
n
to
Return
stack
Top
empty
next
Root
e
n
n
path
result
current
Node
stack
Top
next
Root
e
sb
props
ss
s
edge
Count
r
it
result
visited
onstack
src
dst
stack
stack
Set
stack
It
finished
current
current
It
is
Finished
succ
src
dst
backedges
index
gn
pred
Iter
result
acyclic
worklist
sink
Path
p
first
it
n
arr
i
r
N
number
new
Length
N
number
result
i
N
number
s
s
s
tmp
orig
orig
x
x
os
es
result
result
result
i
en
pred
empty
en
pred
en
s
en
succ
empty
en
s
n
n
n
en
succ
i
all
Edges
i
j
i
impl
number
s
empty
number
number
s
empty
s
empty
x
x
y
x
y
number
succ
pred
number
pred
src
Number
dst
Number
number
succ
node
Preds
node
Preds
node
Succs
node
Succs
succs
For
Src
i
result
result
it
y
s
result
labels
ret
labels
count
preds
count
succs
preds
succs
sb
file
Path
read
buffer
result
i
key
JF
rt
b
data
data
d
p
files
result
n
buf
f
b
f
result
result
b
n
bb
f
cmdarray
output
error
p
repeat
data
n
Read
data
n
Read
dot
String
Buffer
f
result
rankdir
fontsize
Str
fontcolor
Str
fontname
Str
dot
Nodes
result
cmdarray
p
r
r
result
end
Time
sb
osname
osname
osname
jmods
base
Path
version
dot
end
elapsed
sparse
Bits
bit
sparse
Bits
max
Offset
max
Count
max
Max
offset
bits
count
old
Bit
next
Bit
new
Bits
new
Count
bit
i
sparse
Bits
this
Bit
move
Count
new
Offset
new
Count
new
Length
bits
count
next
Bit
count
bits
index
bits
bit
base
current
Size
new
Size
fraction
i
lower
is
i
new
This
bits
bit
temp
next
b
b
bit
bits
bits
b
that
bits
change
that
old
Size
bits
bit
old
Size
bits
bit
bs
bs
b
change
bits
bit
sb
C
bits
bit
bits
bits
C
bits
bit
C
bits
bit
new
Dense
Part
bits
new
Dense
Part
bits
C
bits
bit
i
i
ar
ai
al
br
bi
bl
cmp
new
Elts
ar
ai
al
br
bi
bl
cr
ci
cmp
tail
sb
ii
len
tok
set
result
i
temp
s
temp
temp
temp
it
x
temp
i
i
result
k
m
it
i
i
i
j
x
result
h
i
count
set
Length
i
result
buffer
need
Separator
limit
i
last
Word
count
top
j
word
bit
set
Length
i
default
Factory
int
Set
Factory
Class
int
Set
Factory
vals
p
Copy
s
Copy
result
it
I
d
it
I
mid
mid
Value
sis
result
i
result
x
index
index
result
result
sparse
Size
bv
Size
result
result
that
b
temp
that
result
result
s
result
b
a
b
b
result
it
it
result
result
word
Diff
oldbits
shift
Bits
subscript
new
Offset
ss
shift
Bits
ss
shift
Bits
nb
i
set
word
Diff
max
Word
i
word
Diff
max
Word
i
j
j
word
Diff
max
Word
i
word
Diff
max
Word
i
new
Offset
new
Capacity
word
Diff
i
new
Offset
new
Capacity
word
Diff
i
word
Diff
max
Word
i
b
b
b
b
val
index
length
new
Short
Size
new
Short
Store
new
Byte
Store
i
new
Short
Size
new
Int
Store
i
new
Byte
Store
i
newindex
new
Int
Size
new
Int
Store
i
new
Short
Store
length
old
new
Size
new
Data
old
new
Size
new
Data
old
new
Size
new
Data
str
p
page
v
local
X
page
v
local
X
v
v
old
count1
count
shift
Bits
subscript
ss
shift
Bits
ss
shift
Bits
b
n
i
i
b
n
i
delta
other
Bits
n
i
v1
v2
v3
b
b
n
i
n
i
n
i
i
i
i
ai
bi
set
i
b
remove
insert
new
Extent
tmp
set
j
i
that
ar
ai
al
br
bi
bl
cr
ci
cmp
result
br
bl
ar
ai
al
bi
cr
ci
cmp
tail
tail
pr
sr
result
db
ppr
ssr
db
ppr
ssr
temp
db
ppr
ssr
db
ppr
ssr
db
db
ps
ss
ppr
ssr
db
db
df
pr
sr
bits
pi
x
si
x
bits
bits
T
result
data
result
y
temp
temp
m
bv
result
it
x
temp
t
result
result
result
temp
t
s
s1
s2
it
s1
s1
s1
temp
t
other
result
result
result
temp
result
result
it
x
temp
result
result
old
Size
result
old
Size
temp
b
temp
other
b
result
result
it
x
temp
b
result
temp
other
o
o
result
result
temp
backing
Store
db
pr
sr
index
index
size
i
m
it
wr
bv
m
tmp
bv
percent
result
i
delegated
small
Store0
i
v
ss
Length
val
s
i
s
result
y
ss0
ss
Length
ss1
ss1
result
result
s
i
j
i
result
result
i
T
result
data
result
isect
union
index
s
index
shift
Bits
shift
Bits
shift
Bits
n
i
b
n
i
b
set
Length
i
b
set
Length
i
n
i
set
Length
i
h
i
count
set
n
i
set
Length
i
result
buffer
need
Separator
limit
i
T
copy
i
result
backing
Store
T
copy
i
result
backing
Store
bs
default
Factory
int
Set
Factory
Class
int
Set
Factory
result
it
I
it
I
mid
mid
Value
sis
result
i
I
I
result
result
i
index
i
I
s
s
result
it
remove
insert
new
Extent
tmp
set
j
i
that
ar
ai
al
br
bi
bl
cr
ci
cmp
old
Size
result
br
bl
ar
ai
al
bi
cr
ci
cmp
tail
tail
ai
i
ai
i
it
result
it
i
result
it
i
o
length
n
n
n
i
result
start
i
m
S
S
s
i
backing
it
B
delta
other
B
other
B
newbie
temp
next
Bit
i
elements
i
next
Bit
i
count
bits
xbits
w
b
i
b
i
val
it
x
result
it
old
Size
b
it
o
root
z
i
i
ar
ai
al
br
bi
bl
cmp
ar
ai
al
br
bi
bl
cr
ci
cmp
tail
sb
ii
len
tok
set
result
i
temp
i
i
result
k
m
i
i
j
x
result
java
cp
heap
signal
Param
cmd
lib
Path
pa
cmds
p
lib
Path
d
d
cp
p
d1
d2
d
d
ev
p
ev
p
result
i
out
result
out
b
result
err
result
out
b
result
repeat
data
b
next
data
n
Read
next
r
classpath
bin
Directories
class
File
Names
dir
fdir
result
files
p
t
result
n
result
objects
Visited
c
fields
c
fields
result
c
element
Type
length
fields
c
S
contents
c
scalar
p
p
element
Klass
length
i
contents
klass
c
fields
p
status
contents
klass
result
klass
fields
s
klass
fields
fc
result
t
f
r
t
f
r
I
new
Count
s
new
Size
Count
result
sorted
I
bytes
i1
i2
d
d
total
Size
result
total
Instances
total
Size
sorted
Demo
root
d
d1
d2
G
functions
v
v
v
all
Vars
i
x
y
functions
G
meet
uf
meet
Threshold
n
Pred
rhs
i
f
f
f
f
i
rep
x
y
n
Pred
p
U
bv
other
U
r
rr
other
U
other
intersect
vlhs
bvv
U
U
U
bv
other
U
U
other
empty
U
other
res
a
res
a
test
i
arr
o
o2
a1
o1
result1
a2
o2
result2
b
c
a1
a2
b1
b2
b
result
pi
added
f
added
s1
s2
s3
sep
x
y
x
s
test
Args
form
form2
set
stream
o
a
i
x
i
x
x
y
I
i
x
exp
x
message
o1
o2
o3
x
I
i
list
o1
o2
a1
a2
o3
abc
w
x
y
o1
o2
o3
a1
a2
a3
x
o1
a1
a2
a3
o3
w1
w2
i
j
k
k
a
x
x
y
I
i
arr1
arr2
i
j
x
i
list
r
i
j
testee
array
Arg
c
h
helper
m
a
helper
Class
constrs
param
Type
i
init
Args
helper
Class
object
Class
param
Array
Types
m
helper
Object
param
Array
Objects
c
param
Types
constr
params
fp
c
m
c
m
i
c
ms
mods
c
ctors
i
c
ctors
h
c
m
i
h
c
m
c
m
clazz
helper
Class
object
Class
param
Array
Types
constr
param
Array
Objects
c
h
c
i
c
m
c
m
i
c
m
c
m
length
c
h
c
h
helper
Class
helper
Object
methods
param
Type
i
init
Args
f
i
r1
r2
r3
r4
f
i
r1
r2
r3
r4
multi
t
x
arr
i
len
A
len
B
result
i
len
Src
len
Dst
i
l1
l2
length
i
tmp
next
tmp
i
i
five
a
b
len
buffer
zero
i
pivot
lhs
rhs
tmp
i
i
e
i2
i3
index
sum
forward
arr
l
i
arr
sum
i
sum
i
orig
tester
ret
a
a2
x
o1
a1
a2
a3
o2
o1
o2
o3
s1
s2
o1
o2
o1
o2
o3
x
o1
o2
o3
o4
tmp
new
Element
tmp
i
tmp
a2
a
o
s1
s2
o1
o2
a0
a1
a2
a3
a4
a5
a6
a7
a8
a9
x
h1
h2
key1
key2
o1
o2
s1
s2
a
b
o1
o2
a1
a2
o3
o4
multi
t
t2
s1
s2
a
b
o1
a1
a2
a3
o2
arr
x
b
a1
a2
s1
s2
key1
key2
o1
o2
o1
o2
a1
a2
o3
o4
o1
o2
a1
a2
o3
o4
l1
l2
o1
o2
o1
o2
o3
o4
x
l1
l2
o1
o2
l1
l2
o1
o2
arr
ind
o
s1
s2
a
b
x
y
p
i
strs
x
c
x
r
c
bc
f
m
s
i
b
s
o
s
in
zip
Out
x
y
z
y
a
a
a
b
c
fad
fad
fad
fad
b
fad
b
b3
b3
b3
b3
b3
b3
b1
b2
unknown
fa
b3
b3
b3
b3
b3
b3
b1
b2
unknown
x
v1
v2
v3
mc
junk
s
t
s2
scope
type
Under
Test
expected
Runtime
Invisible
Annotations
expected
Runtime
Visible
Annotations
type
Under
Test
expected
Runtime
Invisible
Annotations
expected
Runtime
Visible
Annotations
class
Under
Test
bc
Class
Under
Test
runtime
Invisible
Annotations
runtime
Visible
Annotations
type
Ref
klass
shrike
Class
class
Annotations
method
Ref
Under
Test
method
Under
Test
bc
Method
Under
Test
runtime
Visible
Annotations
x
type
Ref
field
Ref
Under
Test
field
Under
Test
annots
expected
Annotations
type
Ref
method
Ref
Under
Test
method
Under
Test
I
Bytecode
Method
Under
Test
parameter
Annotations
i
e
a
temporary
Directory
rt
Jar
args
p
project
Dir
child
Jvm
jvm
Args
tmp
File
command
Line
x
edges
nodes
callee
x
not
Found
check
For
Callee
lines
line
edge
caller
caller
Class
caller
Method
caller
Ref
nodes
callee
Class
callee
Method
callee
profile
listener
normalized
Elt
result
found
String
scope
File
s
scope
cha
options
cache
scope
cha
n
Classes
n
Methods
n
Parameters
files
java
Home
Path
jar
Files
p
x
result
cha
roots
options
cg
pa
escape
Analysis
Roots
heap
Model
static
Fields
threads
nodes
escaping
Instance
Keys
objects
new
Keys
type
fk
fobjects
fields
fk
fobjects
escaping
Types
main
Class
Name
jars
i
escaping
Types
scope
cha
n
Methods
n
Fields
method2Field
fields
scope
cha
entrypoints
options
builder
cg
reaching
Defs
result
supergraph
delegate
solution
int
Iterator
next
cache
ref
method
ir
ecfg
reaching
Defs
solver
out
cache
ref
method
ir
ecfg
reaching
Defs
solver
out
entrypoints
options
builder
cg
icfg
reaching
Defs
solver
delegate
solution
int
Iterator
application
Defs
next
def
entrypoints
options
builder
cg
reaching
Defs
result
supergraph
delegate
solution
int
Iterator
application
Defs
next
def
url
expected
actual
url
actual
url
actual
ssm
Int
Set
ssm
Int
Set2
tl
Vector
ignored
exclusions
scope
cha
entrypoints
options
builder
cg
main
s
pointer
Analysis
compute
Backward
Slice
slice
i
scope
cha
entrypoints
options
builder
cg
main
s
pointer
Analysis
compute
Backward
Slice
slice
scope
cha
entrypoints
options
builder
cg
main
s
pointer
Analysis
slice
scope
cha
entrypoints
options
builder
cg
main
s
pointer
Analysis
slice
scope
cha
entrypoints
options
builder
cg
n
s
pointer
Analysis
slice
scope
cha
entrypoints
options
builder
cg
main
s
pointer
Analysis
slice
scope
cha
entrypoints
options
builder
cg
process
s
pointer
Analysis
slice
scope
cha
entrypoints
options
builder
cg
main
s
pointer
Analysis
slice
scope
cha
entrypoints
options
builder
cg
main
s
pointer
Analysis
slice
scope
cha
entrypoints
options
builder
cg
main
s
pointer
Analysis
slice
scope
cha
entrypoints
options
builder
cg
main
s
pointer
Analysis
slice
scope
cha
entrypoints
options
builder
cg
main
s
pointer
Analysis
slice
scope
cha
entrypoints
options
builder
cg
main
s
pointer
Analysis
slice
scope
cha
entrypoints
options
builder
cg
main
s
pointer
Analysis
slice
scope
cha
entrypoints
options
builder
cg
main
s
pointer
Analysis
slice
scope
cha
entrypoints
options
builder
cg
main
s
pointer
Analysis
slice
scope
cha
entrypoints
options
builder
cg
main
s
pointer
Analysis
slice
scope
cha
entrypoints
options
builder
cg
main
s
pointer
Analysis
slice
scope
cha
entrypoints
options
builder
cg
main
s
pointer
Analysis
slice
compute
Backward
Slice
scope
cha
entrypoints
options
builder
cg
main
s
pointer
Analysis
slice
scope
cha
entrypoints
options
builder
cg
main
s
pointer
Analysis
slice
scope
cha
entrypoints
options
builder
cg
main
s
pointer
Analysis
slice
scope
cha
entrypoints
options
builder
cg
test
pcg
s
pointer
Analysis
slice
scope
cha
entrypoints
options
app
Selector
app
Interpreter
cache
builder
cg
test
pcg
s
pointer
Analysis
slice
scope
cha
entrypoints
options
builder
cg
main
s
pointer
Analysis
slice
scope
cha
entrypoints
options
builder
cg
main
seed
ts
slice
scope
cha
entrypoints
options
builder
cg
sdg
scope
cha
entrypoints
options
builder
cg
main
s
pointer
Analysis
slice
scope
cha
entrypoints
options
builder
cg
main
get
Call
nrc
pointer
Analysis
slice
normals
In
Main
scope
cha
entrypoints
options
builder
cg
main
get
Call
nrc
pointer
Analysis
slice
in
Main
hrc
location
ifk
scope
cha
entrypoints
options
builder
cg
main
s
pointer
Analysis
slice
in
Main
options
scope
entrypoints
cache
builder
deleted
Exceptional
deleted
Normal
analysis
exception
Analysed
Edge
Filter
cfg
orig
filter
Only
Edge
Filter
cfg
exception
Pruned
count
instruction
value
key
key
value
text
next
options
scope
entrypoints
cache
builder
analysis
condition
text
it
caught
exceptions
text
analysis
condition
exceptions
text
type
Under
Test
expected
Runtime
Invisible
Annotations
expected
Runtime
Visible
Annotations
catch
I
Index
instance
Of
I
Index
type
Under
Test
method
Ref
Under
Test
expected
Runtime
Invisible
Annotations
runtime
Exception
Ref
values
expected
Runtime
Visible
Annotations
type
Under
Test
expected
Annotations
path
type
Under
Test
expected
Annotations
path
A
path
B
path
C
path
D
path
E
class
Under
Test
bc
Class
Under
Test
runtime
Invisible
Annotations
runtime
Visible
Annotations
method
Under
Test
bc
Method
Under
Test
runtime
Invisible
Annotations
runtime
Visible
Annotations
class
Under
Test
bc
Class
Under
Test
field
Name
field
annotations
scope
cha
t
klass
m
scope
options
cha
t
klass
m
ir
scope
cha
klass
m
cache
ir
instructions
factory
scope
cha
t
klass
m
options
cache
ir
offset
Index
instr
local
Names
save
mref
imethod
cache
ir
names
save
mref
imethod
cache
ir
names
mr
m
options
cache
ir
cfg
mr
m
cache
ir
Before
ir
After
i
mr
m
cache
ir
control
Flow
Graph
mr
m
cache
ir
control
Flow
Graph
succs
mr
m
cache
ir
control
Flow
Graph
i
bb
j
cache
imethod
ir1
ir2
scope
cha
cl
summary
options
summaries
mr
m
method
Summary
summ
Method
ir
graph
exit
scope
cha
entrypoints
options
cg
tm
mm
mnode
t1s
t1m
t1node
scope
cha
entrypoints
options
cg
tm
mm
mnode
t2s
t2m
t2node
t3s
t3m
t3node
test1Type
test1Class
all
Methods
default
Method
private
Method
scope
cha
entrypoints
options
cg
tm
mm
mnode
t1s
t1m
t1node
scope
ref
cha
klass
cache
declared
Methods
found
factory
t
klass
s
t
klass
s
t
klass
s
scope
cha
ref
klass
cache
factory
prep
stmt
type
stmt
type
prep
stmt
stmt
obj
Array
Class
string
Array
Class
cloneable
Class
serializable
Class
scope
button
Ref
factory
t
m
c
m
c
test
Klass
m
scope
scope
cha
entrypoints
options
scope
cha
t
klass
source
File
scope
cha
t
klass
source
File
container
scope
cha
ref
klass
threw
Exception
f
scope
bcel
Jar
Path
cha
scope
cha
ci
amount
To
Add
signature
method
Data
instructions
index
constant
Double
Instruction
value
new
Value
me
read
Value
amount
To
Add
signature
method
Data
instructions
index
constant
Double
Instruction
value
new
Value
me
read
Value
cw
ci
method
Data
instructions
instruction
instruction2
index
instruction
constant
Instruction
cr
m
md
scope
cha
entrypoints
options
static
CG
static
CG
static
CG
static
CG
factory
method
imethod
ir
ti
i
method
imethod
ir
ti
method
imethod
ir
ti
type
method
imethod
ir
ti
type
scope
cha
entrypoints
options
cg
t
m
node
targets
scope
cha
entrypoints
options
cg
back
Edges
cg
Back
Edges
src
pcg
save
scope
cha
entrypoints
options
scope
cha
entrypoints
options
cg
tr
mr
nodes
scope
cha
entrypoints
options
cg
tr
mr
new
Instance
Nodes
succ
Nodes
succ
Nodes
Iter
extraneous
TR
hash
Class
extraneous
MR
extraneous
Nodes
scope
cha
entrypoints
options
cg
tr
mr
new
Instance
Nodes
succ
Nodes
succ
Nodes
Iter
extraneous
TR
extraneous
MR
extraneous
Nodes
scope
cha
entrypoints
options
cg
tr
mr
new
Instance
Nodes
succ
Nodes
succ
Nodes
Iter
extraneous
TR
extraneous
MR
extraneous
Nodes
scope
cha
entrypoints
options
cg
tr
mr
new
Instance
Nodes
succ
Nodes
succ
Nodes
Iter
extraneous
TR
extraneous
MR
extraneous
Nodes
scope
cha
entrypoints
options
cg
main
Class
main
Tr
main
Mr
constr
Tr
new
Instance
Mr
fp
Init
Sig
fp
To
String
Sig
main
Nodes
main
Children
file
Perm
Constr
New
Instance
Node
context
c
ctor
file
Perm
Init
Node
file
Perm
Constr
New
Instance
Children
node
file
Perm
To
String
Node
succ
Nodes
succ
Nodes
Iter
scope
cha
entrypoints
options
cg
tr
mr
nodes
scope
cha
entrypoints
options
cg
tr
mr
nodes
scope
cha
entrypoints
options
cg
tr
mr
nodes
scope
cha
entrypoints
options
cg
tr
mr
nodes
scope
cha
entrypoints
options
cg
tr
mr
nodes
scope
cha
entrypoints
options
cg
tr
mr
nodes
scope
cha
entrypoints
options
cg
tr
mr
nodes
scope
cha
entrypoints
options
cg
tr
mr
nodes
scope
cha
entrypoints
options
cg
tr
mr
nodes
scope
cha
entrypoints
options
cg
tr
mr
node
scope
cha
entrypoints
options
cg
tr
mr
node
succ
scope
cha
entrypoints
options
cg
tr
mr
nodes
scope
cha
entrypoints
options
cg
tr
mr
nodes
scope
cha
entrypoints
options
cg
tr
mr
nodes
scope
cha
entrypoints
options
cg
tr
mr
nodes
scope
cha
entrypoints
options
cg
tr
mr
nodes
scope
cha
entrypoints
options
pair
cg
pointer
Analysis
helper
Tr
helper
Class
reflect24Tr
mr
nodes
first
Matched
cg
Node
local
Pointer
Key
pts
ta
tb
tc
sfoo
sbar
sbaz
mafoo
mbfoo
mcfoo
mabar
mbbar
mcbar
mabaz
mbbaz
mcbaz
scope
cha
entrypoints
options
cg
cgn
scope
cha
entrypoints
options
cg
main
Method
main
Callees
scope
cha
t
mref
m
e
options
cg
t
A
bar
A
t
B
bar
B
root
ir
F
scope
cha
entrypoints
options
cache
builder
cg
s
scope
cha
lib
Models
Test
Class
entrypoints
options
cg
t
m
m2
scope
cha
entrypoints
options
scope
cha
entrypoints
options
scope
cha
entrypoints
options
scope
cha
entrypoints
options
ws
scope
cha
entrypoints
options
scope
cha
entrypoints
options
cg
found
Do
Nothing
scope
cha
entrypoints
options
cg
found
Sort
Forward
scope
cha
entrypoints
options
builder
cg
found
To
Char
Array
scope
cha
entrypoints
options
scope
cha
entrypoints
options
scope
cha
entrypoints
options
result
scope
cha
entrypoints
options
scope
cha
entrypoints
options
cache
builder
cg
pa
main
Method
key
To
Query
points
To
Set
scope
cha
entrypoints
options
cache
builder
cg
main
Method
main
Method
result
main
Ref
m
cg
rta
Methods
squash
Zero
squash
Zero
One
squash
Zero
Container
icfg
count
call
Graph
Methods
this
CG
nodes
pred
method
Reference
succ
method
Reference
scope
cha
main
Class
Ref
entrypoints
options
cg
main
Method
Ref
main
Method
Nodes
main
Method
Node
class
Ref
hash
Code
Ref
hash
Code
Nodes
scope
cha
entrypoints
options
cg
t
m
node
scope
cha
entrypoints
options
policy
number
Of
Calls
caller
Nodes
local
Cast
Node
actual
Local
Cast
Callees
scope
cha
static
Interface
Method
Ref
entrypoints
options
cg
scope
cha
entrypoints
options
cg
scope
cha
entrypoints
options
cg
A
ct
ctnodes
ts
tsnodes
scope
cha
entrypoints
options
cg
str
ct
ctnodes
tid1
mid1
id1node
sfnode
count
scope
cha
entrypoints
options
cg
get
Target
Ref
scope
cha
entrypoints
options
cg
get
Target
Ref
check
Called
From
One
Site
nodes
node
pred
Nodes
pred
sites
scope
cha
entrypoints
options
cg
scope
cha
entrypoints
options
builder
cg
str
ct
id
Nodes
scope
cha
CG
node
Num
succ
Node
pred
Node
Numbers
CG
status
color
load
Image
append$v
clinit
CG
nodes
nodes
scope
cha
entrypoints
options
cache
builder
cg
now
scope
cha
entrypoints
options
cg
tm
mm
mnode
t1s
t1m
t1node
t2s
t2m
t2node
tts
ttm
ttnode
test1Type
test1Class
all
Methods
default
Method
b
b
G
result
G
result
G
i
n
values
functions
F
s
values
functions
F
s
result
i
n
var
I
s
v
w
x
y
z
temp
temp1
temp2
temp
Y
a
i
b
f
tmp
ignored
c
d
e
idx
xx
idx
xx
idx
xx
idx
v
w
x
y
z
temp
temp1
temp2
temp
Y
a
i
b
f
tmp
ignored
c
d
e
idx
xx
idx
xx
idx
xx
idx
M
I1
I2
I3
I
M
I1
I2
I3
I4
I5
I6
I
G
pf
p
i
G
bfs
c
G
nodes
i
i
G
nodes
i
D
i
desired4
j
desired5
d
ok
impl
R
count
x
i
SIZE
uf
count
i
i
s
i
gets
bits
i
j
gets
bits
i
j
gets
bits
i
j
gets
bits
i
j
gets
bits
i
j
gets
bits
i
j
gets
bits
i
j
gets
bits
i
j
gets
bits
i
j
v1
v1
v2
v1
g
i
from
to
count
path
g
paths
g
paths
g
paths
g
paths
base
base
x
y
z
G
nodes
n
j
G
colors
G
colors
G
i
result
i
j
result
result
expected
Paths
result
Paths
paths
scope
cha
entrypoints
options
builder
cg
pa
node
pk
pts
To
scope
cha
entrypoints
options
builder
cg
pa
node
pk1
pk2
pts
To1
pts
To2
found
Intersection
scope
cha
entrypoints
options
builder
cg
pa
heap
Model
main
Node
points
To
Set
array
Key
array
Contents
pair
cg
pa
do
Nothing
local
Pointer
Key
pts
scope
cha
entrypoints
options
builder
cg
pa
main
Class
Tr
mr
nodes
first
Matched
ir
cfg
array
Bounds
Analysis
null
Pointer
Analysis
filter
edge
Filter
pruned
Cfg
type
Ref
i
Class
i
Class
i
Class
number
Of
Deleted
Exception
Edges
identifyer
cfgs
cfg
pruned
Cfg
is
Edge
Removed
is
Edge
Removed
exceptional
Successor
Cfg
exceptional
Successor
Pruned
last
Instruction
is
JLNPE
is
JLAIOOBE
has
JLNPE
has
JLAIOOBE
matcher1
item
Matcher
normal
Successor
Cfg
normal
Successor
Pruned
type
Ref
i
Class
i
Class
i
Class
condition
number
Of
Array
Accesses
ir
builder
identifyer
analysis
unnecessary
main
Class
dmp
test
Method
key
To
Query
points
To
dmp
dmp
main
Class
dmp
test
Method
key
To
Query
points
To
main
Class
dmp
test
Method
key
To
Query
points
To
dmp
d
name
ir
call
indices
call
Instr
flows
To
dmp
main
Method
key
To
Query
flows
To
flows
To
Type
Ref
main
IR
points
To
dmp
main
Method
key
To
Query
points
To
scope
cha
entrypoints
options
analysis
Cache
cg
Builder
cg
mam
builder
full
Demand
Points
To
drpt
ir
call
Sites
site
calls
pk
points
To
dmp
factory
entrypoints
options
builder
mr
inter
Exploded
CFG
call
Node
intra
Exploded
CFG
mr
call
Node
inter
Exploded
CFG
intra
Exploded
CFG
mr
inter
Exploded
CFG
call
Node
intra
Exploded
CFG
mr
inter
Exploded
CFG
call
Node
intra
Exploded
CFG
mr
inter
Exploded
CFG
call
Node
intra
Exploded
CFG
mr
call
Node
inter
Exploded
CFG
intra
Exploded
CFG
mr
inter
Exploded
CFG
call
Node
intra
Exploded
CFG
mr
inter
Exploded
CFG
call
Node
intra
Exploded
CFG
mr
inter
Exploded
CFG
call
Node
intra
Exploded
CFG
mr
call
Node
inter
Exploded
CFG
intra
Exploded
CFG
factory
mr
m
cache
ir
return
Node
return
Val
intra
Exploded
CFG
return
Node
Exploded
return
State
intra
SSACFG
return
State
mr
m
cache
ir
return
Node
return
Val
intra
Exploded
CFG
return
Node
Exploded
return
State
intra
SSACFG
return
State
mr
m
cache
ir
return
Node
return
Val
intra
Exploded
CFG
return
Node
Exploded
return
State
intra
SSACFG
return
State
mr
m
cache
ir
return
Node
return
Val
intra
Exploded
CFG
return
Node
Exploded
return
State
intra
SSACFG
return
State
mr
m
cache
ir
return
Node
return
Val
intra
Exploded
CFG
return
Node
Exploded
return
State
intra
SSACFG
return
State
mr
m
cache
ir
return
Node
return
Val
intra
Exploded
CFG
return
Node
Exploded
return
State
intra
SSACFG
return
State
mr
m
cache
ir
return
Node
return
Val
intra
Exploded
CFG
return
Node
Exploded
return
State
intra
SSACFG
return
State
mr
m
cache
ir
return
Node
return
Val
intra
Exploded
CFG
return
Node
Exploded
return
State
intra
SSACFG
return
State
mr
m
cache
ir
return
Node
return
Val
intra
Exploded
CFG
return
Node
Exploded
return
State
intra
SSACFG
return
State
mr
m
cache
ir
return
Node
return
Val
intra
Exploded
CFG
return
Node
Exploded
return
State
intra
SSACFG
return
State
mr
m
cache
ir
return
Node
return
Val
intra
Exploded
CFG
return
Node
Exploded
return
State
intra
SSACFG
return
State
mr
m
cache
ir
return
Node
return
Val
intra
Exploded
CFG
return
Node
Exploded
return
State
intra
SSACFG
return
State
mr
m
cache
ir
return
Node
return
Val
intra
Exploded
CFG
return
Node
Exploded
return
State
intra
SSACFG
return
State
mr
m
cache
ir
return
Node
return
Val
intra
Exploded
CFG
return
Node
Exploded
return
State
intra
SSACFG
return
State
mr
m
cache
ir
return
Node
return
Val
intra
Exploded
CFG
return
Node
Exploded
return
State
intra
SSACFG
return
State
mr
m
cache
ir
return
Node
return
Val
intra
Exploded
CFG
return
Node
Exploded
return
State
intra
SSACFG
return
State
mr
m
cache
ir
return
Node
return
Val
intra
Exploded
CFG
return
Node
Exploded
return
State
intra
SSACFG
return
State
mr
m
cache
ir
return
Node
return
Val
intra
Exploded
CFG
return
Node
Exploded
return
State
intra
SSACFG
return
State
return
Nodes
return
Inst
exit
ir
File
ir
scope
cha
entrypoints
options
rta
Builder
cg
fam
dmp
simple
Dmp
main
ir
ti
i
t
v
p
old
P
builder
full
Demand
Points
To
scope
warnings
cha
entrypoints
options
scope
warnings
cha
entrypoints
options
builder
old
CG
pa
rta
Builder
cg
fam
dmp
old
Node
ir
ti
i
t
heap
Model
pk
old
Pk
p2set
other
P2Set
new
Key
h
node
method
Ref
builder
full
Demand
Points
To
p
scope
cha
entrypoints
options
builder
cg
sdg
caller
Node
s
slice
pointer
Analysis
pointer
Analysis
g
p
ps
File
dot
Exe
gv
Exe
n
st
call
h
n
param
Callee
param
Caller
p
exclusion
File
scope
cha
entrypoints
options
builder
cg
pa
wala
Viewer
scope
cha
mr
m
options
cache
ir
cdg
wp
ps
File
dot
File
dot
Exe
gv
Exe
result
result
it
i
p
g
p
pdf
File
dot
Exe
gv
Exe
scope
cha
entrypoints
options
builder
cg
g
p
d
d
scope
cha
entrypoints
options
builder
cg
pointer
Analysis
sdg
p
ps
File
dot
Exe
g
gv
Exe
f
h
scope
cha
mr
m
options
cache
ir
wp
ps
File
dot
File
dot
Exe
gv
Exe
start
p
scope
File
entry
Class
main
Class
dump
exclusions
File
scope
cha
options
entrypoints
cache
builder
cg
end
result
klass
classpath
scope
cha
g
dot
File
pdf
File
dot
Exe
gv
Exe
slice
f
result
put
Instrs
ir
instructions
i
instruction
put
Instr
instr
Num
field
bv
instruction
instruction
Index
put
Instr
field
kill
gen
framework
solver
put
Instrs
ir
instructions
i
instruction
put
Instr
instr
Num
field
bv
result
ebb
instruction
instruction
Index
cg
Node
put
Instr
field
kill
gen
src
Inst
framework
solver
ebb
instruction
put
Instr
fact
Num
result
get
Instr
fact
Num
result
new
Instr
fact
Num
result
inv
Instr
fact
Num
result
cg
Node
entries
For
Procedure
result
ebb
instruction
put
Instr
cg
Node
fact
fact
Num
fake
Entry
get
Instr
cg
Node
fact
fact
Num
fake
Entry
new
Instr
cg
Node
fact
fact
Num
fake
Entry
inv
Instr
cg
Node
fact
fact
Num
fake
Entry
solver
result
ebb
instruction
put
Instr
fact
Num
result
static
Field
other
Put
Instr
And
Node
other
Put
Instr
other
Static
Field
cg
Node
entries
For
Procedure
result
ebb
instruction
put
Instr
cg
Node
fact
fact
Num
fake
Entry
solver
result
result
url
query
Block
def
def
Block
uses
not
Def
reached
s
result
b
b
b
nodes
alloc
N
instances
site
ik
p
rk
site
ik
live
ir
du
lpk
local
Root
Nodes
local
t
local
it
i
handler
factory
parser
element
cl
Name
mname
cname
ignore
cl
Name
alloc
String
element
statements
type
String
name
String
class
String
desc
String
type
nm
lang
insts
D
ref
site
n
Params
param
Count
params
i
arg
String
value
Number
exception
Value
def
Var
def
Num
lang
insts
class
String
type
def
Var
def
Num
ref
a
size
s
Number
lang
insts
V
value
Number
T
lang
insts
class
String
type
field
String
field
Name
ft
String
field
Type
field
def
Var
def
Num
R
ref
Number
G
lang
insts
class
String
type
field
String
field
Name
ft
String
field
Type
field
V
value
Number
R
ref
Number
P
lang
insts
class
String
type
field
String
field
Name
ft
String
field
Type
field
V
value
Number
P
lang
insts
R
ref
Number
I
V
str
Type
type
value
Number
S
lang
insts
R
ref
Number
I
idx
Number
str
Type
type
def
Var
def
Num
S
lang
insts
ret
V
R
value
Number
is
Primitive
R
value
Number
var
value
Number
type
String
value
String
reason
level
method
Name
m
Name
desc
String
lang
D
ref
is
Static
static
String
n
Params
specified
Args
factory
String
i
pn
param
Desc
String
param
Names
name
Table
bootstrap
Cls
bootstrap
Index
ref
cls
iface
result
result
i
index
cp
Index
cp
Index
cp
Index
cp
Index
cp
Index
insts
ref
num
FI
Method
Args
last
FI
Arg
Val
Num
summary
inst
num
Captured
Values
first
Captured
Val
Num
cur
Val
Num
i
lambda
Body
Callee
kind
is
New
code
resolved
num
Lambda
Callee
Params
params
new
Val
Num
cur
Param
Ind
i
i
ret
method
code
i
prev
did
Overwrite
i
inst
ret
i
s
result
real
Ifaces
result
name
instrs
ir
nominal
Ref
real
Type
real
Ref
synthetic
Name
result
x
result
summ
T
c
n
result
t
p
s
index
m
symbol
Table
icfg
j
j
vn
instrs
ir
call
invoke
bootstrap
cha
target
summary
cls
bootstrap
Index
ref
summary
index
lambda
insts
v
i
ref
cha
Target
target
bypass
Target
summ
T
C
T
C
n
ref
summ
n
l
null
Value
result
insts
T
n
p
pc
c
other
other
prime
result
other
other
other
p
solver
tr
slice
forwards
result
seed
result
seed
cfg
domain
ssa
Instruction
Index2Statement
rd
solver
pointer
Key
Mod
pointer
Key
Mod
hs
set
m
set
result
n
ref
bb
v
defs
r
p
v
r
bb
v
r
call
call
Block
x
xset
v
targets
ns
hs
result
n
arr
domain
r
call
i
j
kill
gen
s
st
domain
Index
gen
n
result
s
mod
static
Filter
kill
f
m
result
name
names
i
prime
result
other
ir
instruction
Indices
caller
Param
Statements
result
control
Flow
Graph
pruned
CFG
cdg
src
s
dest
method
Entry
dom
dest
phi
St
phi
Use
Index
use
pss
pst
cps
cpst
DU
instructions
ehbb
c
st
statement
i
def
base
arr
u
a
base
arr
u
ii
index
pei
st
pac
vn
a
d
call
st
st
ds
t
ir
f
h
relevant
Statements
heap
Reaching
Defs
defs
defs
f
f
a
s
filter
s
st
result
i
phi
pi
x
result
instructions
i
s
statement
n
p
ps
g
list
n
e
h
list
param
Count
i
s
h
instructions
i
s
statement
call
params
rets
j
st
st
st
uref
st
umod
st
bv
result
result
st
ref
h
st
mod
h
n
call
pdg
n
call
pdg
n
call
pdg
normal
result
normal
result
pdg
node
result
n
st
pdg
n
st
pdg
n
st
pdg
s
pdg
s
n
nrc
call
result
s
nrc
call
result
s
r
call
result
s
pac
parameter
Index
result
ir
indices
ii
i
call
p
s
hpc
result
ir
indices
ii
i
s
result
ir
indices
ii
i
s
ns
result
call
s
result
ir
indices
ii
i
s
result
ir
indices
ii
i
s
r
result
ir
indices
ii
i
s
pac
call
num
Params
Passed
result
i
s
pc
call
result
s
ns
call
r
r
r
h
callee
caller
call
callee
Node
i
callee
caller
result
result
result
sdg
mod
ref
mod
ref
slice
slice
h
result
ir
i
st
mod
normal
h
result
ir
i
st
mod
normal
pred
succ
s
hd
hs
other
other
other
other
other
prime
result
other
result
f
sf
f
t
sf
t
t
f
sf
ir
call
indices
ir
i
s
i
line
f
fo
count
ns
count
ns
count
ns
count
count
scope
count
ns
count
ns
count
ns
p
count
ns
count
ns
p
count
ns
p
count
ns
p
prime
result
other
scope
primordial
extension
application
synthetic
result
s
s
path
s
s
s
result
clr
ddesc
type
result
man
result
att
module
Lines
lr
Reference
module
Ldr
module
Lang
module
Type
module
Path
module
Descr
Line
ldr
Impl
Lines
lr
Reference
ldr
Name
ldr
Lang
ldr
Impl
Name
ldr
Impl
Descr
Line
shallow
Scope
m
p
n
values
count
Errors
j
n
value
old
Values
a
cha
p0
pi
param
Values
site
j
result
i
root
program
Counter
result
m
n
clinit
cln
clinits
n
methods
target
callee
n
k
x
y
result
gr
solver
result
bv
result
result
prime
result
other
prime
result
other
reachable
Nodes
n
Nodes
n
Edges
ret
counted
method
bytecodes
result
prime
result
other
other
f
f
f
i
f
f
f
idx
idx
copy
I
C
act
act
result
implementation
lhs
i
v
lhs
rhs
eq
op
lhs
rhs
R
b
i
R
lhs
rhs
R
i
R
it
l
lhs
temp
r
rhs
temp
R
it
p
lhs
rhs
result
graph
order
number
elt
eqs
result
eq
result
eqs
result
eq
result
lhs
number
result
i
op
R
s
list
number
result
i
op
R
s
list
number
result
s
number
result
s
count
total
Bytes
e
R
result
ueq
lhs
rhs
op
R
eqs
result
eq
result
eqs
result
eq
result
other
type
key
type
i
key
klass
cls
klass
m
collection
map
s
def
context
Selector
c
context
Interpreter
zik
zik
CCS
DCS
result
sites
Length
methods
Length
str
i
code
i
oc
i
other
ir
ir
other
that
length
base
Context
cs
def
context
Selector
def
I
context
Interpreter
other
that
other
resolve
Again
callee
Context
receiver
allocation
String
base
Context
receiver
Heap
Context
receiver
Alloc
Site
receiver
Alloc
String
site
Length
sites
base
Context
receiver
result
a
m
receiver
i
n
n
n
I
N
def
context
Selector
n
Obj
Context
Selector
t
C
s
count
smushees
i
count
alloc
t
ir
ir
return
Statements
changed
Nodes
slice
f
casts
result
m
result
c
klass
declared
Target
call
c
result
it
n
t
C
C
typed
Exception
other
c
cls
L
pk
S
filter
changed
target
Method
target
Context
def
S
def
d
Val
side
Effect
action
I
C
p
side
Effect
Mask
val
S
val
p
Val
instances
side
Effect
C
contents
p
side
Effect
Mask
S
ref
def
d
Val
value
side
Effect
action
I
p
S
side
Effect
Mask
other
S
val
p
Val
value
assign
side
Effect
action
I
S1
p
S2
side
Effect
Mask
other
ref
value
side
Effect
action
I
p
side
Effect
Mask
other
arrayref
value
side
Effect
action
I
C
contents
p
side
Effect
Mask
other
filter
debug
s
pk
filter
debug
S
changed
other
i
other
types
result
i
klass
type
node
To
Use
m
n
ir
new
Instruction
length
VN
c
key
type
key
result
O
ifk
i
contents
singleton
v
S
v
lpk
node
ir
du
ik
def
v
S
i
vn
lpk
pointees
set
S
i
vn
lpk
pointees
set
array
Ref
S
refs
key
pointees
set
f
f
Key
ref
S
refs
fkey
pointees
set
ir
peis
caught
Types
S
pei
e
s
s
ep
types
ik
ck
klass
rhs
rhs
Set
S
klass
exc
s
index
S
ret
Val
set
set
set
s2
result
set
result
it
j
lpk
result
pk
fpk
result
L
R
L
R
L
R1
R2
L
index
T
a
Class
dim
element
Class
i
jlo
jlo
Class
set
ifaces
i
Array
Ref
i
Array
Class
set
i
Array
Ref
i
T
t
Array
Ref
t
Array
Class
set
ifaces
set
set
v1
vs
i
v1
v2
s
u
rhs
value
top
Five
result
i
p
ik
cache
it
i
rep
p
Ref
p
Ref
assign
rhs
rhs
Rep
assign
lhs
lhs
Rep
rhs
new
RHS
i
other
type
m
n
key
type
key
other
prime
result
other
M
m
result
v
lpk
node
cha
ir
ti
type
ik
concrete
Type
v
x
field
Type
other
h1
h2
n1
n2
s1
s2
f1
f2
l1
l2
n1
n2
n1
n2
n1
n2
r1
n1
n2
k1
k2
d1
d2
i
rep
I
result
rep
I
i
i
result
i
i
i
i
i
v
it
i
rep
I
rep
J
pi
pj
rep
p
fpk
fp
lpk
f
r
f
P
ir
du
v
ir
b
sb
n
phi
def
use
ik
peis
exception
throwable
Type
c
pei
s
e
s
e
ik
types
ik
ck
klass
bb
it
sb
bb
cb
ehbb
ci
g
result
pred
index
pei
indices
p
ik
s
param
Vn
var
s
interp
type
result
array
Ref
Ptr
Key
ik
p
value
Ptr
Key
array
Ref
Ptr
Key
ik
p
contents
vk
ik
is
Root
types
cls
result
value
ik
cls
return
Value
result
ik
def
f
klass
f
Key
ref
Key
ik
p
f
ref
Key
rval
Key
ik
refk
p
refk
p
f
Key
rval
Key
ik
klass
unique
Catch
invariant
Parameters
params
i
trimmed
Params
vns
pks
dispatch
Operator
i
Key
def
klass
dim
last
Instance
sv
c
ik
pk
peis
def
types
result
dst
i
use
ik
dir
dst
cfg
val
cond
cause
target
direction
type
cls
dst
dst
use
Filter
src
ik
assignable
op
dst
dst
dst
src
Key
ik
const
Params
i
j
def
i
Key
klass
finalizer
ef
m
site
target
Method
target
fake
World
Clinit
Method
s
unique
Catch
sc
n
Uses
n
Expected
i
formal
ik
actual
result
ret
e
er
changed
rhs
Index
y
current
Objs
old
Objs
recv
target
side
Effect
Mask
receiver
Iter
rcvr
recv
target
Method
result
receiver
target
targets
i
j
h
other
site
targets
f
recv
target
params
v
field
field
f
declared
Target
resolved
Target
vn
filter
C
formal
Type
C
def
result
x
S
type
ik
type
ik
def
i
Key
v
exception
Types
types
c
result
type
result
klasses
sc
c
element
Type
result
s
index
lpk
filter
s
i
i
filter
r
t
klass
fake
World
Clinit
Method
m
site
target
Method
target
s
code
n
selector
dispatch
Operator
i
Key
klass
m
n
def
context
Selector
def
I
context
Interpreter
result
result
result
delegate
s
result
p
n
s
t
p
n
s
delegate
s
result
p
n
s
d
y
x
s
y
s
super
R
result
all
Possible
Preds
it
x
y
Set
it
y
y
Node
ir
result
s
ti
i
type
t
result
a
p
p
p
p
result
c
selector
s
Key
receivers
value
S
recv
Class
action
i
Key
target
targets
other
f
other
other
element
other
other
result
other
target
s
i
S
changed
prime
result
other
result
i
other
other
d
name
a
result
i
instrs
constants
cfg
new
Site
s
s
instance
ref
sizes
result
instance
result
ref
sizes
klass
array
Ref
e
n
alloc
ni
sizes
store
ctor
v
result
v
result
v
result
result
phi
result
result
lv
result
result
statements
s
result
statements
I
s
k
site
s
result
result
result
targets
key
other
im
result
packages
nm
Builder
nm
klass
y
s
y
klass
target
Type
k
result
result
s
s
h
it
t
n
s
result
S
s
s
n
it
pc
value
s
n
i
ir
du
n
n
n
x
y
x
y
x
y
n
n
n
n
ctx
A
ctx
B
ctx
U
C
CB
C
partial
Graph
nodes
partial
Graph
x
result
n
x
x
result
ci
r
s
summary
ms
cs
main
Method
result
main
Ref
m
main
Method
T
main
Ref
y
node
Diff
succ
Diff
pred
Diff
app
Selector
app
Interpreter
app
Selector
app
Interpreter
result
app
Selector
app
Interpreter
result
app
Selector
app
Interpreter
result
app
Selector
app
Interpreter
result
app
Selector
app
Interpreter
reader
m
result
prime
result
other
result
i
t
klass
array
Klass
innermost
impl
dim
implementors
subclasses
result
nominal
nc
subcs
subs
other
item
tmp
col
no
tmp
cnt
no
tmp
col
no
tmp
cnt
no
tmp
col
n
tmp
kp
tmp
kp
tmp
ret
tmp
ret
tmp
ret
it
next
A
B
i
it
analysis
Scope
result
fa
ir
get
fref
field
cls
put
fput
field
cls
ir
get
fref
field
cls
put
fput
field
cls
t
other
g
result
v
g
result
scan
scan
heap
Model
result
h
v
ir
result
h
v
ir
ref
ref
f
ref
x
dim
ik
pk
d
i
pk
i
pk
pk
i
type
pk
ref
f
ref
result
v
result
v
c
parent
ref
m2
c
parent
ref
m2
result
added
phantom
lang
Names
num
Loaders
idx
icl
to
Remove
added
loaded
Superclasses
loaded
Super
Interfaces
node
working
Superclasses
c
superclass
supernode
loader
super
Name
super
Ref
super
Class
impls
loader
declared
Class
targets
class
Cache
result
resolved
Method
result
impls
n
result
selector
resolved
receiver
selector
klass
result
superclass
result
m
result
result
result
i
n
lang
temp
A
n
super
B
aa
super
A
result
a
Class
b
Class
cls
loader
parent
p
c
elt
c
n
parent
element
Type
element
Klass
ce
n1
n2
impls
t
node
result
T
T
result
to
Class
innermost
node
node2Class
innermost
innermost
Subclasses
dim
result
ref
i
result
loaders
bits
bits
N
max
temp
reachable
back
result
result
blocks
i
i
valid
matcher
matcher
exception
is
Filtered
exception
Class
ignore
Class
filter
result
analysis
analysis
has
Exceptional
Edge
relevant
Instruction
thrown
Exceptions
filtered
Exceptions
is
Filtered
result
relevant
Instruction
result
result
unnecessary
result
ir
sb
cfg
instrs
p
b
inst
p
b
p
b
index
inst
texit
exit
ret
tentry
entry
call
entry
Block
exit
Block
ccfg
cinsts
i
call
site
caller
BB
b1
b2
b3
b4
b
cfg
i
cfg
block
num
cfg
it
b
block
num
cfg
site
irrelevant
Targets
tcfg
cb
Delegate
return
Blocks
ret
Block
num
cfg
node
num
node
num
statements
last
Index
last
cfg
site
statements
call
pc
site
callee
caller
exit
Block
entry
Block
callee
caller
entry
Block
exit
Block
cfg
entry
cfg
entry
node
is
Return
cfg
it
node
dispatch
Filter
bb
to
Context
b
m
cfg
cfg
prime
result
other
start
end
list
start
end
result
result
depth
sigs
begin
Token
end
Token
sc
sm
args
result
sig
sig
sig
args
i
off
depth
off
off
size
it
result
j
sigs
i
off
depth
off
depth
off
size
it
result
j
sig
fp
i
f
type
Sig
args
result
i
rt
String
index
args
result
i
i
depth
sm
sm
s
t
x
last
Dot
start
end
last
Dot
i
depth
t
PRIME
result
other
index
args
result
i
s
i
depth
start
result
end
arr
i
depth
sc
result
class
Name
p
package
Name
dim
innermost
Primitive
t
b
T
T
val
p
c
new
Dim
tmp
Dim
new
Dim
new
Dim
other
result
result
is
Primitive
d
masked
result
t
p
e
key
val
p
e
key
val
name
name
name
element
tn
that
mask
dims
all
Annotations
result
all
Annots
result
result
type
t
sb
prime
result
other
annotations
annotations
f
annotations
prime
result
other
all
Type
Annotations
result
annotations
annotation
prime
result
other
prime
result
other
prime
result
other
prime
result
other
prime
result
other
prime
result
other
prime
result
other
prime
result
other
prime
result
other
var
Index
name
i
catch
Type
catch
I
Index
iindex
iindex
key
val
c
ft
name
that
o
k
result
return
Type
parameters
k
result
b
result
i
other
i
result
result
e
x
x
method
Name
desc
other
key
val
d
t
name
d
parameter
Names
loader
i
r
s
that
builder
cha
factory
app
M
i
cha
eps
i
result
total
i
A
B
i
A
B
i
A
B
i
A
B
i
A
B
i
A
B
i
A
B
i
A
B
i
A
B
i
A
A
A
A
A
A
A
A
A
options
scope
S
builder
cg
S
builder
cg
ignored
S
builder
cg
S
builder
cg
ignored
S
builder
cg
S
builder
cg
S
builder
cg
scope
r
scope
File
line
in
From
Jar
r
line
in
Stream
toks
loader
Name
wala
Loader
language
entry
Type
entry
Pathname
fp
cf
cls
sf
bd
sd
M
just
Base
stdlibs
scope
loader
paths
path
jar
cp
f
addendum
f
t
p
b
T
result
S
s
n
buffer
result
result
occupancy
cache
cha
c
result
class
Loader
reference
methods
set
Up
Tear
Downs
is
Test
Class
class
Initializer
ctor
java
Name
target
Package
Atom
target
Simple
Class
Atom
target
Type
target
Method
Atom
entry
Pts
klass
Type
method
Atom
set
Up
Tear
Downs
junit
Package
junit
Class
junit
Suite
junit
Test
Case
Type
junit
Test
Suite
Type
ancestor
t
method
method
Name
junit
Package
junit
Class
junit
Suite
junit
Test
Case
Type
junit
Test
Suite
Type
set
Up
Method
Atom
tear
Down
Method
Atom
result
curr
Class
method
Atom
file
Part
suffix
Index
url
f
is
f
url
jc
f
entry
parent
file
Path
in
jar
In
uri
gcbean
listener
nanny
Thread
info
used
max
result
arr
result
result
index
i
n
b
nb
c
nnb
c
result
result
index
i
n
c
utflen
i
n
c
i
n
b
nb
c
nnb
c
array
Index
base
Type
dim
result
array
Index
base
Type
dim
result
i
sigs
i
off
off
off
T
c
size
it
result
j
last
Slash
i
dim
last
Slash
i
L
code
i
i
b
type
t
method
Name
desc
readable
number
Of
Dimensions
prefix
readable
number
Of
Dimensions
prefix
dot
Form
i
dot
Form
i
dot
Form
i
start
stop
utf8
ascii
val
i
key
val
i
sig
i
n
i
i
tmp
i
that
i
i
val
val
T
it
result
i
other
len
len
align
i
l
h
n
oc
len
i
i
i
i
other
has
Implicit
This
targets
m
Class
m
Sel
test
Classes
cand
looked
Up
cand
it
test
Static
tmp
Static
new
No
all
i
first
In
Selector
i
self
self
Type
self
cha
return
Type
all
all
all
all
Exctends
search
Type
all
Loaders
cand
Class
c
search
Type
all
all
Exctends
cand
Class
all
search
Type
all
Loaders
cand
Class
c
search
Type
all
cand
Class
params
params
i
param
params
i
params
i
param
assigned
callee
Params
this
Params
param
Type
inst
new
Param
i
from
Class
to
Class
cand
cand
sub
Class
super
Class
cand
cand
ret
prime
result
other
acc
ret
Type
a
Params
target
This
given
This
i
given
Param
target
Param
i
given
Param
target
Param
acc
m
Ref
a
Params
given
This
i
given
Param
target
Param
i
given
Param
target
Param
target
Value
Valid
In
inst
Valid
In
new
Value
Valid
In
inst
Valid
In
result
Valid
In
a
Params
i
param
Valid
In
result
Valid
In
result
Type
a
Params
i
param
Valid
In
inner
Type
inner
Type
other
other
other
other
other
other
param
a
Param
did
Phi
var
param
a
Param
var
param
a
Param
var
candidate
cand
ret
seen
Live
exc
names
suffix
current
Suffix
val
name
name
Atom
auto
Name
my
Suffix
name
Atom
name
name
Atom
auto
Name
my
Suffix
name
Atom
instruction
instruction
instruction
result
result
tree
ir
Viewer
new
Lead
Selection
Path
tree
Node
user
Object
node
ir1
parent
Node
ir2
cg
Root
root
tree
path
last
Node
new
Childs
user
Object
cg
Node
csr
cg
Node
successors
i
child
index
pc
first
Line
With
Position
br
line
Num
position
line
pc
m
new
Position
first
Space
pc
String
line
Num
cur
Selected
Index
split
Pane
method
source
Line
Number
source
File
Name
loader
url
succsess
br
line
cur
Selected
Index
root
n
heap
Tree
right
Panel
path
last
Node
new
Lead
Selection
Path
tree
Node
user
Object
lpk
ir1
def
pc1
instructions
i
instruction
ik
normal
Ik1
ir2
pc2
normal
Ik2
ir3
pc3
heap
Graph
instance
Key
Mapping
lpk
node
Id
rvk
node
Id
ifpk
instance
Key
Id
ret
children
i
child
ret
node
Id
ik
Index
ret
set
delegate
img
URL
tree
method
List
Model
method
List
new
Lead
Selection
Path
tree
Node
klass
root
Class
root
tree
path
last
Node
klass
immediate
Subclasses
i
child
tabbed
Pane
pa
Panel
labels
g
label
Map
bb
labels
result
start
end
ebb
s
instructions
j
x
gv
r
scope
factory
cha
entrypoints
options
cache
builder
cg
G
me
sb
reader
name
reader
name
prime
result
other
result
files
file
Module
prime
result
other
array
Class
type
element
Type
a
Ref
primordial
element
Cls
real
Type
element
Type
klass
elt
elt
Super
Ref
super
Ref
element
Type
result
klass
mask
dims
element
Type
other
s
prime
result
other
n
b
z
name
out
temp
n
bb
b
it
result
prime
result
other
prime
result
other
cr
field
Count
instance
List
static
List
i
access
Flags
name
b
annotations
type
Annotations
sig
signature
Reader
signature
s
s
method
Count
result
i
m
class
Name
name
m
result
r
r
attrs
r
cl
Ref
r
attrs
r
attrs
result
attrs
iter
r
iter
r
cl
Ref
r
attrs
result
r
r
outer
r
outer
modifiers
result
r
outer
result
result
result
result
result
jar
File
con
sm
bm
sm
bm
result
sm
bm
result
sm
bm
result
sm
bm
sm
sm
sm
sm
result
v
t
result
c
result
v
result
v
result
v
result
v
result
v
v
v
other
fr
other
b
s
bb
code
reader
reader
reader
d
reader
reader
reader
handlers
reader
cr
param
file
Name
param
Pos
i
pos
source
File
reader
i
p
map
local
Pairs
local
Index
name
Index
iter
iter
iter
iter
code
Reader
iter
reader
sig
r
r
cl
Ref
r
cl
Ref
result
num
Annotated
Params
result
reference
r
param
Annots
i
i
prime
result
other
other
b
z
name
out
temp
n
bb
b
it
result
prime
result
other
prime
result
other
shrike
Instructions
shrike
CFG
symbol
Table
new
Instrs
new
Cfg
du
i
instr
new
Instr
is
Safe
params
u
v
Length
bc
Index
line
Number
builder
other
result
info
pc
Map
iindex
i
result
l
l
list
bytecodes
name
desc
D
simple
Visitor
lang
instructions
i
t
i
that
loader
t
loader
f
loader
f
loader
m
program
Counter
site
strings
loader
result
handlers
result
loader
t
fields
f
f
f
unresolved
field
fields
f
f
result
C
result
s
result
s
result
s
result
superclass
inherit
c
result
last
sup
result
klass
result
T
type
fr
f
methods
tmp
Method
Map
m
set
klass
M
exception
Types
tok
cls
b
x
start
reader
name
result
result
s
class
Name
entry
Reader
T
reader
contents
tmp
Klass
entry
Sizes
For
File
result
entry
entry
Bytes
name
nested
Result
entry
Name
S
n
count
buffer
class
Name
T
success
T2
class
Module
Entries
source
Module
Entries
is
JMOD
Type
jar
File
class
Files
source
Files
all
Class
And
Source
File
Contents
result
cur
File
Result
jar
File
Name
s
jar
File
buffer
Size
b
n
parent
result
result
result
e
e
root
Path
file
Path
result
parent
Ref
parent
cl
impl
Class
cl
impl
ctor
impl
ctor
max
Var
Num
cfg
problem
block
State
finder
pointer
Keys
node
Mgr
inumber
pred
to
Node
n
p
n
p
n
succ
s
succ
succ
result
P
S
result
i
I
T
p
klass
result
p
R
i
n
succ
list
arr
i
n
num
succ
o1
o2
result
i
node
i
node
other
other
T
type
Klass
other
result
parameter
Value
Numbers
i
v
t
klass
st
i
v
call
v
default
Exceptions
types
t
klass
m
x
tc
d
lhs
Type
meet
lhs
Type
rhs
rhs
Type
lhs
Type
meet
array
Type
element
Type
t
Type
klass
klass
other
temp
jl
Class
Klass
type
p
klass
type
klass
type
klass
type
Abs
klass
x
type
bb
it
t
klass
result
t
Class
klass
type
st
variable
st
ta
number
Of
Vars
ret
i
var
other
other
result
result
context
method
hash
Key
result
context
tr
insts
tr
m
klass
public
Default
Ctor
instantiation
Exception
Ref
xobj
new
Statement
throw
Statement
illegal
Access
Exception
Ref
xobj
new
Statement
throw
Statement
instrs
ctor
Method
method
context
constants
name
instrs
name
instrs
m
Ref
context
tr
result
result
all
Methods
statements
next
Local
cls
insts
c
R
cls
cls
prime
result
other
prime
result
other
prime
result
other
base
Context
self
Key
ref
class
Key
name
Key
x
target
invoke
Exact
Trampoline
code
m
insts
cls
selector
vn
code
m
insts
ref
is
Static
is
Void
name
nargs
params
i
site
nargs
params
i
site
c
c
c
cls
other
ir
invoke
Instructions
st
receiver
Constant
Key
m
is
Static
is
Constructor
recv
Use
number
Of
Params
param
Index
param
Use
instr
new
Instr
vn
array
Length
c
context
method
hash
Key
result
tr
insts
statements
ret
Value
tr
l
R
t
result
instrs
context
method
hash
Key
result
statements
next
Local
ret
Value
tr
insts
l
R
instrs
result
I
klass
ref
alloc
dims
dim
extents
a
a
r
init
site
params
exc
s
cls
result
cls
statements
next
Local
ret
Value
ref
N
length
sizes
exception
Value
params
S
k
temp
Value
G
P
R
instrs
statements
statements
statements
statements
statements
statements
s
ir
symbol
Table
invoke
Instructions
use
class
Name
t
klass
name
Vn
ik
class
Name
t
klass
resolved
invoke
Instructions
context
method
hash
Key
result
constants
instrs
instrs
instrs
instrs
instrs
instrs
instrs
instrs
m
Ref
context
tr
result
result
all
Methods
result
result
statements
next
Local
ret
Value
cls
insts
arr
Type
site
size
Vn
alloc
Arr
i
c
index
index
Vn
store
R
statements
next
Local
cls
insts
c
R
cls
cls
cls
cls
cls
cls
cls
cls
m
types
m
s
m
result
s
m
I
s
types
m
T
m
m
m
types
m
m
m
m
T
ref
site
klass
implementors
subclasses
type
alloc
init
site
params
exc
s
original
next
Local
j
def
j
use
r
T
i
ref
a
sizes
r
init
site
params
s
result
i
instrs
constants
ir
symbol
Table
invoke
Instructions
use
sym
ck
type
c
cls
ck
cls
other
recv
c
m
method
hash
Key
result
r
insts
m
constants
next
Local
nargs
args
pc
parameters
Vn
allocated
Type
type
cast
next
Arg
next
Parameter
j
index
Const
temp
type
cast
exceptions
result
d
instrs
exceptions
bit
Vector
callsites
callsite
caught
filtered
bv
exceptions
Array
result
pos
result
i
result
i
result
original
Edge
result
instruction
original
Edge
result
intra
EA
result
throwing
Instruction
thrown
Exceptions
caught
Exceptions
filtered
Exceptions
it
sub
Classes
filtered
filters
result
exception
Variable
pointer
Key
it
next
instance
Key
iclass
result
last
Instruction
result
exceptional
Successors
it
sub
Classes
result
iindices
it
iindex
instruction
block
all
Caught
transfer
Function
Provider
graph
problem
instruction
caught
Exceptions
thrown
Exceptions
is
Caught
caught
Exception
caught
Exception
Class
thrown
Exception
Class
instruction
exceptions
all
Caught
is
Caught
caught
Exceptions
caught
Exception
thrown
site
targets
result
node
Filter
node
Result
meet
xfer
Functions
exit
entry
new
Exit
exit
entry
new
Exit
problem
result
result
bb
other
changed
changed
changed
meet
changed
height
i
R
j
m
meet
changed
n
Locals
i
R
j
meet
lhs
n
Locals
i
rhs
lhs
height
i
rhs
result
temp
result
start
i
i
i
i
result
result
i
i
i
instructions
i
instructions
i
size
delta
to
Pop
v1
v2
v3
v4
i
loader
return
Type
t
index
exception
Type
set
old
Check
new
Check
builder
zero
weight
array
Lengths
array
Node
weight
tmp
instruction
construction
Length
arrays
Node
helper
value
nodes
in
Edges
edges
node
in
Edge
def
op
value
phi
i
use
branch
pi
Var
pi
Parent
cnd
pi
Restrictor
variables
Used
As
Index
branch
Target
Block
todo
next
buffer
node
Count
i
edge
Value
new
Weight
node
Weight
temp
edges
To
Iterate
max
Of
Sources
new
Updated
Edges
old
Weight
new
Weight
result
result
result
other
prime
result
other
prime
result
constant
Node
value
helper1
helper2
src
Node
dst
Node
weight
edge
Weight
edge
helper1
helper2
result
node
result
array
Var
indices
i
var
result
other
value
constant
Pos
i
constant
op
prime
result
other
PRIME
result
other
n
ir
ti
symbol
Table
i
parameter
t
param
Pk
f
call
Instr
node
array
Writes
ir
s
r
param
Pos
ir
call
Instrs
actual
Pk
is
Exceptional
possible
Callees
ret
Val
field
Writes
ir
s
r
field
Writes
ir
du
peis
exception
c
pei
s
e
s
e
types
ik
ck
klass
v
cfg
n
def
use
result
value
types
cls
result
value
def
return
Value
f
def
f
Key
f
use
f
Key
i
use
def
exc
i
Key
def
peis
def
types
ir
n
cg
Node
param
Pos
param
Succs
ir
call
Instrs
actual
Pk
instrs
param
Preds
i
call
Site
Ref
possible
Callees
param
Val
call
Instr
return
Succs
is
Exceptional
call
Site
Ref
possible
Callees
ret
Val
cg
Node
is
Exceptional
return
Preds
ir
call
Instrs
return
Pk
v
cfg
n
def
use
callee
ret
symbol
Table
num
Params
i
parameter
param
Pk
return
Key
exception
Return
Key
result
array
Ref
value
array
Ref
types
cls
result
value
def
return
Value
f
def
f
Key
ref
Key
f
use
f
Key
ref
Key
i
use
s
def
exc
i
Key
def
klass
dim
last
Instance
last
Var
ik
pk
peis
def
types
src
dst
i
def
def
Pk
j
use
use
Pk
PRIME
result
other
PRIME
result
other
param
Pk
return
Key
exception
Return
Key
result
array
Ref
value
array
Ref
types
cls
filter
result
value
def
return
Value
f
def
f
Key
ref
Key
f
use
f
Key
ref
Key
i
Key
def
multi
Dim
Info
peis
def
types
pei
s
e
s
e
types
ik
ck
klass
def
use
def
i
Key
new
Instrs
arr
Store
Instrs
i
Key
klass
def
dim
last
Instance
last
Var
ik
pk
PRIME
result
other
prime
result
other
calls
i
use
s
def
exc
instrs
field
Writes
field
Reads
writes
written
ir
s
r
lpk
ack
ik
nain
rvk
reads
read
Into
ir
s
r
array
Writes
written
node
ir
instruction
s
r
multi
Dim
Info
array
Reads
read
ir
s
r
peis
exception
c
pei
s
e
s
e
types
ik
ck
klass
symbol
Table
i
v
S
type
ik
pk
PRIME
result
other
PRIME
result
other
mem
Accesses
ack
mem
Accesses
ack
mem
Accesses
ifk
mem
Accesses
ifk
result
result
norm
Stmt
ir
i
parameter
t
ret
ir
statements
v
i
s
sm
v
statements
i
i
s
declared
Type
fr
f
s
fa
fr
f
s
fa
tr
tr
tr
fr
f
s
fa
fr
f
s
fa
result
result
result
all
Fields
reads
writes
node
ir
instructions
instruction
Index
s
prime
result
other
method
Ref
ret
nodes
size
ret
old
CG
Node
new
CG
Node
mnik
ret
old
CG
Node
new
CG
Node
Anext
Pass
Bnext
Pass
Ashould
Refine
declaring
Class
m
found
Pattern
top
Most
Class
i
cl
klass
Str
dollar
Index
top
Most
Name
top
Most
Class
ret
i
declared
Target
tmp
field
Next
Pass
call
Next
Pass
class
To
Check
cl
klass
Str
dollar
Index
top
Most
Name
top
Most
Class
v
filter
C
formal
Type
C
lpk
g
node
dfs
keys
o
other
ret
ret
ret
instructions
i
p
p2Set
With
States
final
P2Set
queried
Pk
p
final
P2Set
this
Filtering
Heap
Model
last
P2Set
succeeded
num
Passes
pass
Num
cur
P2Set
completed
Pass
In
Budget
computer
result
queried
Pk
succeeded
num
Passes
pass
Num
completed
Some
Pass
completed
Pass
In
Budget
passed
initial
Memory
computer
memory
After
Pass
used
By
Pass
result
ik
last
Flows
To
Set
succeeded
num
Passes
pass
Num
cur
Flows
To
Set
computer
result
PRIME
result
other
PRIME
result
other
pk
type
Filter
type
Filter
added
concrete
Type
tmp
ik
And
State
tmp
ik
And
State
the
Only
Instance
Key
tmp
ik
And
State
node
cur
State
succ
Pk
And
State
ret
unbarred
Label
cur
State
pred
Pk
States
trans
State
ret
cur
State
succ
Pk
States
trans
State
otf
Calls
node
node
caller
call
receiver
State
p2set
ik
target
Method
target
CG
Nodes
calls
return
Label
def
And
State
ret
exc
exc
Ret
actual
Num
param
Bar
Label
tracked
Set
cur
Pk
And
State
cur
Pk
cur
State
v
ik
ik
And
State
n
field
load
Base
load
Base
And
State
cur
Pk
local
Pk
callee
param
Pos
caller
call
param
Label
call
Instrs
actual
Pk
call
Instrs
call
Instr
actual
Pk
possible
Targets
call
Instr
caller
is
Exceptional
call
Site
Ref
call
Site
And
CG
Node
possible
Callees
ret
Val
target
Methods
ret
Val
ik
Pred
ik
Pred
And
State
mapped
Index
caller
this
Arg
this
Arg
And
State
node
call
cur
Pk
And
State
cur
Pk
cur
State
pred
Visitor
field
store
Base
store
Base
And
State
if
Key
And
State
field
dst
Ptr
Key
load
Def
And
State
succ
Visitor
field
dst
Ptr
Key
store
Dst
tracked
Set
ifk
cur
Pk
cur
State
return
Key
callee
is
Exceptional
caller
call
return
Bar
Label
call
Instrs
return
At
Caller
Key
call
Instrs
call
Instr
return
At
Caller
Key
possible
Targets
local
Pk
caller
i
call
Site
Ref
call
Site
And
CG
Node
possible
Callees
param
Val
target
Methods
param
Val
cur
Pk
And
State
cur
Pk
cur
State
tracked
Set
succ
Visitor
field
dst
Ptr
Key
need
Field
store
Dst
ifk
pred
Visitor
pred
Pk
pred
Pk
And
State
field
store
Base
store
Base
And
State
ifk
pred
Pk
And
State
field
dst
Ptr
Key
need
Field
loaded
Val
ifk
pred
Pk
pred
Pk
And
State
dst
And
State
stored
Val
And
State
field
base
And
State
tracked
Set
ifk
loaded
Val
And
State
field
base
Pointer
Key
load
Dst
State
base
And
State
To
Handle
base
Pointer
Okay
cur
P2Set
ifk
base
And
State
ifk
result
result
ir
ret
next
State
ret
visited
worklist
lpk
call
caller
result
this
Arg
this
Arg
And
State
this
P
To
Set
ik
target
Method
cur
Pk
cur
State
local
Pk
callee
param
Pos
caller
call
param
Label
call
Instrs
actual
Pk
call
Instrs
call
Instr
actual
Pk
possible
Targets
otf
Targets
call
Instr
caller
is
Exceptional
call
Site
Ref
call
Site
And
CG
Node
possible
Callees
ret
Val
otf
Targets
ret
Val
lpk
int
P2Set
result
tracked
States
pk
And
State
h
init
Pk
And
State
cur
Pk
And
State
cur
Pk
cur
State
ik
field
load
Base
base
P
To
Set
base
And
Stored
Pairs
base
stored
reached
Flow
States
node
ir
base
stored
instruction
s
s
converted
Base
written
Pk
succ
Pk
v
cur
Pk
For
PA
Heap
Model
points
To
Set
should
Refine
method
Targets
ik
pred
Pk
pred
Pk
And
State
result
top
Call
Site
tmp
Stack
new
Recursive
Sites
prev
Stack
v
p
dir
p
dir
f
col
result
i
result
output
Dir
wala
Report
file
defprop
result
env
Property
url
x
normal
In
exceptional
In
number
xtra
xtra
xtra
i
number
normal
In
exceptional
In
result
n
Normal
n
Exc
number
number
v
result
i
i
i
number
x
x
x
v
s
succ
Nodes
result
number
s
result
j
bb0
handlers
r
catchers
instructions
i
targets
hs
entry
j
i
b
exit
last
targets
b
next
exit
cha
exception
Types
go
To
All
Handlers
hs
loader
l
call
target
m
Target
need
Edge
To
Exit
For
All
Handlers
b
caught
Exception
loader
caught
Class
caught
Class
caught
klass
subtype1
exit
exit
handlers
hs
i
next
s
j
succ
Nodes
i
b
instructions
r
branch
Visitor
pei
Visitor
i
b
i
j
exit
i
jump
Target
targets
i
j
j
other
last
tgt
tgt
Nd
target
normal
Succ
Node
Number
targets
i
exit
i
pi
insts
exit
Number
next
s
j
succ
Nodes
instructions
i
result
fs
s
cases
And
Labels
i
sw
sw
cases
And
Labels
i
c
operator
i
cfg
g
exit
s
exceptions
cb
ex
Class
i
exi
declared
is
Declared
exi
dc
c
l
call
inpa
info
number
parameter
Numbers
invoke
Blocks
inpa
first
Node
first
Pass
node
invokes
ir
ims
m
State
intra2
deleted
Edges2
cfg2
single
State1
deleted
Edges1
single
State2
result
ir
intra
deleted
Edges
cfg
info
invoke
Blocks
state
invoke
Instruction
parameter
Numbers
param
State
Of
Invoke
Block
targets
state
Map
filter
Set
world
Clinit
filter
nodes
partial
Roots
partial
CG1
partial
CG2
sym
state
number
Of
SSA
Vars
values
j
is
Contant
instr
numbers
Of
Params
ls
sb
mutable
bv
Orig
bv
This
block
orig
Succ
all
Succs
this
Succs
exc
Succs
this
Succs
succs
succ
orig
Preds
all
Preds
this
Preds
exc
Preds
this
Preds
preds
pred
i
i
lhs
changed
i
other
i
buf
changed
changed
other
i
str
i
state
state
p
i
prev
state
buf
params
Set
other
result
i
changed
orig
cfg
has
Exception
succ
instr
instr
phi
Transfer
Functions
uses
arg1
arg2
test
Op
op
ssa
Var
uses
ssa
Var
nodes
exc
Succ
found
Exit
found
Catch
All
caught
t
catched
problem
deleted
filter
new
Cfg
n
CF
Gbuilder
deleted
instr
exc
my
Excs
exc
my
Excs
var
Num
var
Num
var
Num
var
Num
var
Num
var
Num
var
Num
back
Edges
has
Back
Edge
cfg2
from
to
orig
cfg
has
Exception
succ
control
Dependence
RDF
s
labels
s
n
x
x
sb
r
r
s
edge
j
f
D3
summaries
s
p
n
x
call
Flow
call
Flow
Source
Nodes
it
global
C
D4
proc
entries
retf
D5
action
D5
D3
number
lp
c
all
Return
Sites
has
Callee
f
D3
f
reached
reached
return
Sites
For
Callee
f
r
f
r
summaries
call
Flow
s
p
num
got
Reuse
p
exits
x
num
reached
By
Summary
retf
D51
D52
result
result
result
number
p
Local
alpha
lp
pre
Exist
Facts
size
result
result
result
result
proc
n
entries
result
all
Entries
p
Seeds
lp
result
map
c
bb1
bb2
proc
s
s
result
key
proc
reached
ii
summaries
num1
num2
s
R
s
R
result
s
R
result
result
max
Key
Value
i
R
R2
s
R2
z
R
R
s
z
related
result
related
result
related
result
z
s
R
result
contents
it
d2
R
s
contents
it
d2
s
R
result
contents
it
d2
R
contents
it
d1
s
contents
it
d2
s
result
n
R
n
R
n
R
n
R
result
id
result
result
problem
f
uf
facts
it4
d3
fake
Entry
seed
w
is
Entry
Filter
b
all
Preds
same
Proc
same
Proc
Preds
not
Call
d
prime
result
other
instructions
op
def
n
uses
j
vars
Count
i
result
i
i
result
i
i
v
result
v
s
old
Dictionary
m
to
Remove
key
val
p
method
Map
ref
p
method
Map
ref
cast
Method
cast
Method
n
Expected
other
new
BB
phi
result
v
new
BB
phi
result
v
x
i
bb
Number
new
BB
s
exception
Value
entry
State
parameter
Number
local
i
t
symbol
i
s
array
Ref
length
index
array
Ref
result
t
value
index
array
Ref
t
val2
val1
result
is
Float
val
result
type
Names
t
i
val2
val1
result
val2
val1
t
l
type
symbol
value
value
value
value
value
rval
val
result
from
Type
to
Type
result
f
ref
ref
ref
result
t
n
params
i
lang
m
code
site
exc
bootstrap
result
result
t
type
ref
result
t
ref
sizes
i
value
f
ref
f
result
t
val2
val1
result
val
index
bb
new
BB
s
x
new
BB
s
exception
val
result
address
Val
result
t
name
idx
val
address
Val
t
n
bb
path
out
Num
pi
pi
S
number
local
Numbers
m
result
i
result
i
new
Locals
bb
first
Instruction
locals
i
p
count
result
j
i
i
x
names
result
i
bb
start
end
catch
Iter
next
ebb
s
j
any
x
val
Names
v
val
Num
v
val
Num
any
result
i
it
bb
result
i
i
result
s
result
index
it
i
i
i
i
index
s
result
index
it
i
bb
result
result
prime
result
other
result
prime
result
other
result
i
result
i
ir
du
ir
du
it
i
s
j
j
use
uses
Set
prime
result
other
b
path
b
local
t
exception
Type
klass
instruction
Index
b
bb
i
N
number
B
B
result
result
n
Removed
i
new
Length
old
j
i
new
Length
old
j
lookup
end
dummy
i
result
i
s
size
old
j
size
old
j
result
b
result
s
i
bb
succ
Nodes
n
i
n
number
n
n
i
n
number
n
n
ss
c
n
f
src
Num
src
Num
n
ss
c
n
ss
c
n
DU
system
cfg
b
to
Remove
def
phi
def
maybe
Dead
B
def
B
u
ud
U
V
B
i
bb
original
result
i
eb
result
eb
result
orig
eb
result
eb
result
eb
eb
original
result
eb
z
result
result
eb
e
prime
result
other
s
succ
Nodes
i
v
result
r
result
result
phi
value
nt
pis
result
i
s
i
code
s
i
new
Lhs
unresolved
Dependencies
instance
Keys
as
sbua
node
m
context
caller
csr
receiver
iks
dep
Site
pred
Set
succ
Set
start
Nodes
candidate
current
pred
Nodes
changed
i
changed
prev
Prefix
new
Prefix
ret
Val
prefix
ret
Val
prefix
ret
Val
prefix
dep
Prefix
ret
Val
block
Set
block
Search
block
Ordering
target
nominated
Node
lpk
pts
instructions
buf
prefix
New
prefix
Full
prefix
ret
Val
s
bbs
mapping
blocks
Seen
concatenated
Instance
Keys
b
Prev
b
Next
i
Next
tgt
lpk
lpk
ck
unresolved
Dependencies
mapping
instance
Keys
lpk
naik
dep
Site
value
node
nain
as
sbua
context
caller
receiver
csr
node
s2si
iks
context
caller
csr
invoke
pts
Uri
uri
Key
points
string
Key
return
Set
node
iks
alloc
Node
context
caller
csr
invoke
pts
Uri
uri
Key
points
string
Key
node
iks
alloc
Node
context
caller
csr
invoke
points
string
Key
node
iks
pred
Set
succ
Set
prime
result
other
prime
result
other
elts
elements
i
de
i
prime
result
other
elements
other
FE
sources
local
Elt
elts
node
pk
iks
prime
result
other
block
Map
elements
elements
new
Arg
Nums
entries
For
Procedure
bb
targets
target
List
temp
List
inv
Inst
i
arg
Nums
taint
Map
ss
ss
AL
set
de
de
set
de
taint
elt
set
de
def
use
new
DE
num
Params
i
actual
formal
existing
Formals
de
set
formals
p
this
To
Result
ch
i
j
ret
Inst
i
this
To
Result
inv
Inst
i
target
Method
i
pi
pk
elements
declared
Field
static
Field
value
Number
m
gi
pk
declared
Field
static
Field
value
Number
elements
m
i
Methods
static
Type
Ref
static
Class
static
Field
set
de
instruction
parameter
Map
i
elements
set
de
inv
Inst
set
set
lpk
elts
set
de
ik
elts
de
src
Inst
num
Params
actual
Params
i
pairs
inst
node
in
Code
Elts
out
Code
Elts
flow
Function
elts
sfe
field
taint
Source
new
Taints
inst
flow
From
Dest
invoke
flow
To
Dest
def
No
elts
field
Access
Code
Elts
i
val
No
use
No
elts
i
val
No
elts
field
Ref
field
pk
points
To
Set
ik
elts
field
Ref
elts
pk
points
To
Set
array
Type
ik
set
prime
result
other
s
inv
prime
result
other
prime
result
other
inv
prime
result
other
prime
result
other
domain
initial
Edges
bb
Taints
taint
BB
entry
Blocks
bbic
problem
solver
flow
Result
dests
target
List
temp
List
invoke
Instrs
inv
Inst
i
arg
Nums
static
Index
target
Param
Count
node
result
Set
taint
Type
Set
le
elements
lpkey
new
Arg
Nums
node
entries
For
Procedure
entry
Block
static
Index
target
Param
Count
mapped
Index
mapped
Index
node
exits
For
Procedure
possible
Elements
it
real
Block
inst
pk
taint
Flow
ss
sink
Points
points
methods
entry
Block
exit
Block
ssa
Val
sink
Flow
sink
Point
points
methods
callees
callee
Refs
callers
caller
insts
invoke
Index
i
invoke
Inst2
block
call
Block
ssa
Val
sink
Flow
sink
Point
points
methods
null
Exit
Block
exit
Blocks
exit
Block
inst
return
Inst
ssa
Val
sink
Flow
sink
Point
points
graph
sources
source
scope
cha
options
analysis
Options
cache
cgb
graph
Built
status
nodes
pcg
n
succs
n1
preds
n2
elts
iks
ik
clazz
type
Ref
points
To
Set
contents
Class
contents
IK
elt
contents
IK
elt
elt
field
Type
Ref
field
Class
pk
points
To
Set
field
IK
elt
elt
pk
points
To
Set
field
IK
elt
elt
f
cmdarray
output
error
p
repeat
data
data
dot
String
Buffer
f
result
rankdir
fontsize
Str
fontcolor
Str
fontname
Str
dot
Nodes
result
node
String
class
Name
method
Name
decl
Class
node
Cl
Ref
decl
Class
node
Cl
Ref
node
Cl
Ref
entry
Point
M
Rs
entries
method
References
mr
method
References
mr
st
pb
p
std
Input
std
Error
s
f
Xml
File
db
Factory
d
Builder
doc
base
Package
i
List
i
n
Node
e
Element
nl
List
n
Value
Intent
List
action
List
parent
Intent
Class
i
n
Node
method
im
formatter
myargs
reflection
summary
Classes
summaries
new
Summary
XML
native
Summaries
ms
cs
clazzes
done
todo
i
lang
callback
Size
loop
Label
switch
Value
def
Label
cases
And
Labels
i
im
dispatch
class
Name
method
Name
governing
Class
m
Name
lang
D
mref
n
Params
i
tr
package
Name
outer
Class
Name
inner
Class
Name
tr
LL
index
inner
TR
created
I
Ds
i
tr
class
Name
deps
j
dep
Class
Name
params
start
Pos
i
n
ref
a
sizes
klass
array
Ref
e
n
alloc
ni
sizes
store
ctor
found
Valid
Ctor
params
deps
index
otr
otr
p
I
new
Site
s
v
result
fields
specs
methods
matching
atom
desc
all
Methods
matching
c
targets
return
String
class
Name
method
Name
descriptor
pattern
s1Sources
s2Sources
new
Array
flow
new
Arg
Nums
ssa
Val
node
value
Elements
pk
flow
Set
flow
Set
i
matching
c
atom
all
Fields
value
Elements
flow
type
Ref
pk
points
To
Set
cha
clazz
ik
flow
ssa
Val
value
Elements
pk
points
To
Set
type
Ref
clazz
ik
ik
new
Arg
Nums
ignore
Methods
more
Entry
Point
Specs
i
elt
ref
Str
def
Str
elt
ref
Str
value
Str
elt
local
Name
elt
Name
elt
ref
Name
def
field
Type
class
Type
field
Name
elt
Name
elt
ref
Name
value
field
Type
class
Type
field
Name
elt
callee
desc
String
type
String
name
String
class
String
def
Num
local
Name
param
Count
i
arg
Name
def
Num
local
Name
type
class
Name
elt
size
Elt
size
Name
new
Name
class
Name
pkg
Name
doc
Factory
doc
Builder
baos
transformer
Factory
transformer
source
result
meth
Elt
meth
Class
clr
Name
pkg
class
Name
method
Name
descriptor
instructions
class
Elt
class
Elt
pkg
Elt
clr
Elt
v
type
Sigs
i
tr
return
Type
descriptor
root
project
root
project
fs
provider
container
Path
import
Op
bundle
path
url
file
URL
file
file
scope
cha
g
v
roots
result
f
slice
p
g
v
scope
cha
entrypoints
options
builder
cg
pointer
Analysis
p
app
Jar
exclusion
File
scope
cha
entrypoints
main
Class
options
builder
cg
wp
ps
File
dot
File
dot
Exe
gv
Exe
v
p
scope
cha
entrypoints
options
cache
builder
cg
reaching
Defs
result
test
Graph
And
Roots
v
root
leaf
result
options
ssa
Options
t
bb
delegate
s
call
def
result
i
g
field
Name
result
proc
filter
local
Graph
selection
first
w
d
r
r
t
w
viewer
mm
result
i
roots
p
scratch
ir
File
Name
output
File
dot
File
v
g
action
roots
ir
selection
first
selection
first
cls
get
Workspace
Method
workspace
get
Root
path
module
url
url
lib
File
Name
bin
File
Name
f
url
String
fixed
Up
Url
last
Index
space
Index
p
p
url
install
b
l
include
Source
file
j
s
s
output
s
project
Path
ws
root
project
java
Project
model
bd
i
l
entries
model
absolute
Path
resource
scope
p
x
workspace
Root
workspace
Root
Path
result
projects
Files
entry
proj
parser
length
buffer
scope
scope
loader
result
result
resources
Bundle
stuff
i
p
ws
root
ifile
p
p
p
s
mes
info
p
e
cha
p
s
modules
mes
info
visitor
elt
mw
calls
parser
parser
ast
jp
jp1
path
path
s
model
File
e
entry
Kind
path
s
html
Pages
html
Page
scripts
url
String
eps
eps
p
file
Name
scripts
script
Name
filter
options
builder
b
b
result
jp
path
project
Paths
job
e
jp
result
exception
scope
selection
projects
e
jp
scope
seen
p
Scope
progress
Service
p
file
Path
pkg
Decl
package
Name
cu
package
Name
class
Name
fully
Q
Name
class
Name
java
Project
simple
Name
project
Name
workspace
Root
java
Model
java
Project
result
workspace
Root
jp
t
projects
type
name
param
Types
m
methods
matches
type
Parameter
Names
i
s1
s2
tp
type
Parameter
Names
result
d
sigs
i
off
off
c
size
it
result
j
p
scope
engine
kludge
requestor
result
result
p
p2
scope
engine
requestor
projects
i
selection
workspace
Root
java
Model
hello
World
Project
parser
root
path
entry
Kind
cont
entries
output
s
jp
source
File
jdt2cast
java2ir
problems
length
buffer
buf
cl
modules
jar
File
Module
directory
Tree
Module
projects
Files
entry
proj
parser
units
cl
p
dmp
scope
cha
entrypoints
options
cg
And
PA
cg
fam
full
Demand
Points
To
ret
CG
ret
PA
cache
builder
master
cha
failing
num
Safe
num
Might
Fail
declaring
Class
ir
instrs
instruction
cast
Instr
declared
Result
Types
prim
Only
casted
Pk
cast
Pred
ik
Type
Ref
start
Time
query
Result
running
Time
field
Refine
Policy
hacked
Field
Policy
engine
tf
ir
inference
def
ssa
Variable
def
ssa
Variable
class
Hierarchy
method
Ref
method
node
ea
ea
ea
ea
src
Method
src
Nodes
src
Node
tgt
Method
tgt
Nodes
tgt
Node
found
mref
found
dbg
pos
mref
insts
i
ln
j
def
names
cls
at
at
stack
i
engine
builder
call
Graph
source
Paths
unreachable
cha
source
Loader
node
Iter
fn
node
ldr
Type
Meth
loader
Name
type
Str
meth
Name
meth
Sig
type
Ref
l
clr
type
Name
type
Ref
loader
Atom
loaders
found
Lib
lib
File
src
File
Name
f
result
cm
cdg
result
cm
assertions
type
Str
type
i
Class
type
Str
type
i
Class
type
Str
type
i
Class
interfaces
type
Str
type
derived
Class
base
Type
base
Class
subclasses
mref
count
node
mref
node
s
mref
node
instructions
s1
s2
symbol
Table
i
as
value
Of
Array
Index
value
Assigned
edge
Assertionses
mref
node
s
field
type
Str
type
i
Class
type
Str
type
i
Class
x
cg
pa
method
Sigs
ik
Concrete
Type
Strings
i
all
Iks
Builder
all
Iks
x
cg
pa
all
Iks
Builder
all
Iks
type
Str
local
Class
Str
main
Foo
Type
main
Foo
Class
method
Foo
Type
method
Foo
Class
local
Class
type
Str
type
i
Class
cls
Name
cls
Ref
name
Atom
descr
x
pa
cg
slice
Root
Ref
roots
y
slice
test
Name
sources
x
pa
cg
statement
mod
Ref
sdg
slice
ts
exclusions
x
cha
top
Type
incl
Type
excl
Type
unwind
Body
first
Stmt
expr
var
Name
protect
Body
expr2
var
Name2
var
Name
test
result
nir
insts
i
pcg
sdg
stmts
context
Interpreter
def
context
Selector
cls
result
M
parents
result
ti
i
symtab
obj
Val
objs
enclosing
tv
i
Key
enclosing
lval
Key
obj
Key
cls
i
Key
klass
enclosing
Invariant
Keys
enclosing
Class
obj
Key
enclosing
Val
symtab
current
Cls
x
reference
selector
containing
Class
def
context
Selector
context
Interpreter
zik
CCS
DCS
zik
app
src
cha
factory
options
so
options
ssa
Options
print
Writer
cast
rw
print
Writer
array
Type
Ref
array
Type
Ref
field
Ref
field
Ref
type
Ref
site
labels
target
dummy
Site
Ref
inst
Number
pc
is
Static
real
Args
pos
i
i
real
Site
Ref
owner
Name
owner
method
Type
owning
Type
owner
method
Type
owning
Type
type
Name
owner
parent
Type
result
result
result
to
Type
to
Ref
from
Type
from
Ref
result
result
type
ref
offset
parameter
Positions
i
op
type
klass
type
klass
st
klass
string
Type
Abs
st
meet
ta
L
lhs
Type
excluded
Supertype
domo
Type
result
domo
Type
sb
annotations
result
wala
Type
Name
ref
args
types
type
arg
Count
i
i
f
Type
exception
Types
result
i
parents
result
i
last
Left
Paren
last
Q
type
Name
cls
sig
name
End
name
Str
name
desc
Str
desc
sel
hack
result
super
Type
Names
java
Class
name
signature
ret
Type
Name
arg
Type
Names
i
desc
it
foo
ch2
w
e
x
a
aa
ab
myx
myx2
ab
absuba
abaa2
aba
abab
abaa
myaba
x
mya
x
absubaa
myaba
x2
mya
x2
abaa
myaba
x3
mya
x3
r
t
i
x
a
b
x
i
j
i
j
k
i
j
k
a
x
x
xx
outie
a
se2
sub2
foo
x
z
nullmm
y
t
y
k
x
y
z
a
o1
os1
os2
x
x
y
z
a
b
c
d
qn
y
x
o
s
prod
j
sum
i
s
s1
x
x
a
b
c
d
e
f
g
j
ih1
b1
b2
i
a
a
aa
ab
myx
myx2
ab
absuba
abaa2
aba
abab
abaa
myaba
x
mya
x
absubaa
myaba
x2
mya
x2
abaa
myaba
x3
mya
x3
so
f
ary
i
sum
e1
f
f
prod
tc
j
sum
i
b
SI
f1
f
l1
i1
s1
f1
d1
d2
d3
d4
f2
f3
l2
l3
i2
base
f
base
f
num
o
x
y
y
ignored
foo
haha
ic
x
s1
ch
ch
so
base
f
base
f
sc
isc
y
i
x
y
if1
b
s2
x
x
wt1
x
stop
f
nptl
f
al2
x
y
b
a
bb
aa
x
e
e
e
e
e3
a
b
c
x
s
n
sss
ss
list
array
a
frenchy
s
sicilian
qqq
iter
iter
s1
hey
i
a
useless1
aa
aaa
b
useless2
bb
bbb
abc
efg
x
y
x
str
Quadrupler
x
global
Economy
ops
hack
a
result
a
absinthe
rye
foo
thrownaway
mygeneric
x
y
real
oneheyya
a
x
sink
cs
x
ops
global
Economy
local
Economy
lsa
o
oa
li
s
x
y
z
total
sup
x
x
query
rs
coffee
Name
supplier
ID
price
sales
total
x
register
address
credit
Card
Number
social
Security
Number
pi
hex
Bytes
hex
Words
max
Long
nybbles
bytes
type
Of
Day
num
a
b
list
list2
my
Object
al1
a
b
sn
w
xp
head
x
ret
head
l1
l2
e2
fis
fos
data
classes
size
qs
fq
x
engine
engine
engine
result
m
dbg
engine
engine
st
i
expected
Types
found
Types
engine
ast
unwind
types
elts
jdt
Type
type
supers
super
Type
N
name
type
Name
ref
outer
Type
ID
met
Selector
Name
met
Binding
short
Name
target
Type
target
Type
Ref
field
Type
field
Type
Ref
field
Name
ref
owner
Type
owner
Type
Ref
name
arg
Type
Names
ret
Type
Name
desc
selector
ref
owner
Type
owner
Type
Ref
ref
name
arg
Type
Names
formal
Types
length
i
ret
Type
Name
desc
cl
jdt2cast
java2ir
problems
length
buffer
paths
sources
libs
modules
jar
File
Module
F
directory
Tree
Module
sources
source
Map
s
source
Files
parser
options
quals
t
doble
flotando
largo
current
bin
Name
dollar
Sign
Number
superclass
overridden
params1
params2
i
decl
Entities
member
Entities
inits
static
Inits
initializer
is
Static
fd
is
Static
field
Decl
quals
field
Binding
met
Decl
overridden
Mets
child
Entities
new
Context
body
Nodes
static
Init
Ast
quals
decl
class
Entity
lcd
Node
new
Type
super
Type
super
Ctor
member
Entities
context
fake
Ctor
fake
Arguments
param
Types
i
svd
body
Nodes
children
call
Site
Ref
i
arg
Name
arg
Type
ast
fake
Ctor
first
Statement
orig
Statements
body
Nodes
i
super
Type
default
Super
Ctor
call
Site
Ref
super
Call
mapper
orig
Statements
body
Nodes
member
Entities
context
calltarget
param
Types
arguments
i
var
Node
from
Type
to
Type
callnode
mdast
param
C
Ast
Types
member
Entities
context
mdast
annotations
annotations
cast
Annotations
annotation
Type
Binding
annotation
Type
args
name
value
i
type
p
f
field
Ref
is
Static
this
Node
lhs
Node
init
rhs
Node
ass
Node
stmt
Nodes
stmt
Nodes
modifiers
is
Final
type
init
init
Node
t
default
Value
result
result
type
new
Type
Ref
elt
Nodes
visited
new
Node
call
Node
tmp
Name
ctor
Ref
new
Type
new
Type
Ref
qual
Node
plain
This
Type
implicit
This
Type
new
Exceptions
arg
Nodes
dummy
PC
call
Site
Ref
throw
Types
catch
Targets
target
owning
Type
Ref
binding
target
target
type
Of
This
method
Is
Private
implicit
This
Class
node
realtype
fromtype
is
Static
method
Owner
n
Formals
children
dispatch
Type
call
Site
Ref
fake
Cfg
Map
result
n
Formals
n
Actuals
last
Arg
Type
i
arg
num
Subargs
subargs
new
Type
Ref
j
arg
ret
Expr
left
result
exc
Targets
left
right
field
infixop
tmp
Name
expr
Node
tmp
Decl
Node
obref1
obref2
realtype
fromtype
casted
Obref
result
str
type
Name
str
binding
target
Node
type
Of
This
field
Is
Private
implicit
This
Class
t
current
is
In
Subtype
supertp
target
Node
field
Binding
target
Type
field
Ref
ref
Node
exc
Targets
realtype
fromtype
owning
Type
owning
Type
Ref
binding
left
left
Type
left
Start
Position
left
Node
left
Length
result
right
Node
start
end
pos
left
Pos
right
Pos
right
Type
result
op
Node
exc
Targets
target
Node
owning
Type
Ref
ctor
Type
call
Site
Ref
n
Formals
children
target
Node
result
arg
casted
From
casted
To
cfg
Map
Dummy
ast
exc
Targets
var
decl
Node
op
op
cast
Op
zero
type
cast
Op
result
stmt
result
break
Target
break
Node
child
labeled
label
target
result
label
target
result
cond
body
break
Target
break
Node
continue
Target
continue
Node
loop
Label
lc
expr
constant
label
break
Target
break
Ast
loop
Label
child
Context
cond
cases
c
case
Nodes
current
Block
stmt
Nodes
position
Of
All
stmt
Nodes
position
Of
All
switch
Ast
loop
Label
token
break
Target
break
Node
continue
Target
continue
Node
loop
Test
loop
Context
loop
Body
made
Node
expr
Node
svd
body
tmp
Name
iter
Method
Ref
iter
Call
Site
Ref
iter
Call
Node
o1
iter
Assign
Node
has
Next
Method
Ref
iter
Var
has
Next
Call
Site
Ref
has
Next
Call
Node
o2
next
Method
Ref
next
Call
Site
Ref
iter
Var2
next
Call
Node
casted
Node
default
Value
next
Assign
Node
break
Target
continue
Target
loop
Label
loop
Context
tmp
Array
Name
expr
Node
array
Decl
Node
tmp
Index
Name
index
Decl
Node
tmp
Array
Length
Node
cond
Node
tmp
Array
Inc
Node
tmp
Array
Access
Node
svd
default
Value
next
Assign
Node
break
Target
continue
Target
loop
Label
loop
Context
break
Target
continue
Target
loop
Label
loop
Context
inits
i
init
iters
inits
Block
iters
Block
catch
Blocks
finally
Block
try
Block
resources
body
i
fb
object
m
me
target
tc
try
Node
body
formal
exc
Decl
decl
Stmt
local
Scope
type
result
label
catch
Nodes
exc
Targets
elt
Type
Ref
cast
new
Type
ai
array
Type
Ref
dims
args
expr
Node
expr
Name
decl
Stmt
monitor
Enter
Node
body
Nodes
monitor
Exit
Node
big
Body
p
catch
Nodes
catch
Type
result
cn
cn
cn
cn
cn
cn
cn
cn
hidden
Variable
Name
field
Ref
lhs
Node
arguments
rhs
Node
ass
Node
met
super
Met
member
Entities
context
fake
Met
string
S
type
Lit
string
Svar
args
call
cast
body
Node
param
Types
met
member
Entities
context
fake
Met
elt
Nodes
array
Type
Ref
body
Node
param
Types
constants
new
Type
javalangenum
Type
super
Ctor
member
Entities
context
fake
Ctor
fake
Arguments
i
i
param
Types
i
svd
body
Nodes
children
call
Site
Ref
i
ast
start
p
source
Dir
main
Class
scope
stdlibs
root
src
File
Name
cha
options
entrypoints
cache
builder
cg
end
entrypoints
function
edges
cfg
i
bb
j
function
M
insts
i
inst
pos
file
Name
file
ir
names
local
Names
found
j
srcs
check
Absence
target
Name
src
dsts
dst
sources
dests
cls
Name
super
Name
instance
Fields
static
Fields
instance
Methods
static
Methods
loaders
scope
cha
cls
fld
fld
mth
i
classes
supers
instance
Fields
static
Fields
instance
Methods
static
Methods
cls
Count
cls
fld
fld
mth
np
key
test
Path
file
Names
i
url
cha
x
x
x
ce
nce
matches
x
Ast
junk
xlator
ast
child0Value
name
result
node
List
s
o
nm
Ast
Ast
Ast
Ast
Ast
Ast
Ast
Ast
Ast
Ast
Ast
Ast
Ast
url
String
x
other
Body
header
loop
Goto
set
entity
exposed
Names
i
current
Scope
symbol
arg
VN
type
A
entity
exposed
entity
exposed
lval
S
defining
Scope
E
entity
Name
result
A
cur
Scope
cur
Symbol
vn
A
entity
S
defining
Scope
E
A
lval
result
A
result
global
A
global
root
Type
Ref
i
pos
prev
Set
ppos
first
second
intermediate
source
Context
dummy
ast
Context
target
Context
key
e
current
Block
start
Block
ast
end
Block
previous
src
exception
target
src
exception
target
handlers
save
inst
sb
i
boundaries
live
Blocks
blocks
has
Dead
Blocks
normal
Edges
exceptional
Edges
instruction
i
block
Number
block
offset
old
PC
x
bi
ci
succs
target
succs
target
t1
t2
branch
i
ni
i
insts
s
params
i
bb
j
nm
nm
mapped
Name
scoped
mapped
Name
v
i
yuck
i
x
v
global
Symbols
case
Insensitive
Names
mapped
Name
name
type
Symbols
case
Insensitive
Names
mapped
Name
name
data
new
Data
i
i
x
lexical
Uses
j
lexical
Names
j
EN
exposed
Names
Set
read
Only
Names
i
parents
i
j
uses
new
Val
map
v
p
scope
top
Entity
names
symtab
catch
Types
cfg
line
operand
katch
monitor
nms
LI
parameter
Positions
DBG
special
Name
fn
result
ex
result
result
fn
cs
context
header
B
branch
B
body
B
next
B
context
nm
v
context
result
context
result
exp
fun
function
Name
args
i
context
nm
s
type
context
context
result
may
Be
Integer
may
Throw
labels
target
context
result
l
r
may
Be
Integer
current
Instruction
context
result
context
result
v
current
Instruction
context
result
context
result
array
Expr
array
Value
current
Instruction
context
array
Value
result
s
nm
t
scope
v
context
current
Instruction
return
Expr
context
current
Instruction
arg
op
left
Expr
right
Expr
context
control
Flow
Map
context
context
true
B
false
B
l
current
Instruction
src
B
r
f
context
result
context
result
arguments
i
context
context
context
result
context
result
elt
num
Dims
dims
i
context
rval
op
temp2
may
Be
Integer
current
Instruction
context
rval
context
temp
dims
rval
context
rval
context
temp
rval
context
rval
nm
ls
context
nm
ls
type
temp
ret
current
Instruction
rval
has
Case
ctrl
case
Labels
xn
val
num
ctrl
switch
Value
v
has
Explicit
Default
case
Labels
cases
cases
And
Labels
switch
Instr
Block
current
Instruction
dummy
Default
Block
switch
Body
cn
target
case
Label
ctrl
switch
Value
v
case
Labels
label
To
Block
current
Instruction
default
Goto
Block
switch
Body
target
target
context
context
labels
target
context
id
v
caught
Type
caught
Ref
context
add
Skip
Catch
Goto
end
Of
Try
after
Block
context
context
result
context
from
Spec
assertion
result
current
Instruction
result
current
Instruction
result
current
Instruction
wc
type
Name
Str
type
Name
type
Ref
result
wc
ref
Expr
ref
result
current
Instruction
wc
rvals
rposs
i
current
Instruction
wc
rvals
rposs
i
current
Instruction
wc
included
is
Macro
Expansion
copy
nc
arg
expr
exposed
Names
Collector
field
field
Ref
result
left
right
v
expr
then
children
copy
Ast
entity
argument
Names
s
nm
fn
nm
fn
nm
entity
entity
Names
declaring
Entity
cur
Entity
cur
Entity
Names
nm
i
accesses
i
old
Access
sb
i
A
v
result
result
accesses
i
old
Access
sb
i
A
BB
j
Iter
Count
X
W
V
X
Y
V
stack
f
next
e
id
Xf
i
phi
i
inst
lhs
rhs
new
Rhs
new
Uses
new
Defs
Y
Y
id
j
i
phi
old
Use
new
Use
id
Xf
i
A
j
i
A
j
new
Uses
j
new
Defs
j
ii
i
i
v
i
B
bb
j
pos
old
Cfg
old
Instrs
instrs
new
IR
sb
rec
rec
c
new
Uses
i
lhs
use
idx
inst
use
bb
phi
BB
info
info
v
names
Data
v
Names
x
vals
use
use
sb
rec
params
phi
phi
new
Uses
v
old
Use
new
Use
lhs
rhs
rec
j
lexical
Uses
j
lexical
Use
new
Use
lexical
Uses
m
i
bb
exit
Live
v
v
V
params
exit
Lives
i
i
lexical
Uses
insts
found
One
found
Two
j
def
ssa
live
At
Exit
instructions
changed
j
j
bits
s
rval
i
inst
U
S
s
i
bb
bb
bits
s
i
inst
j
j
new
Params
i
j
new
Lvals
new
Exp
i
j
s
instance
ref
result
done
ignored
result
ifk
v
f
ifk
x
c
uses
instruction
Position
method
instruction
Position
lval
lnode
lvn
lir
lsymtab
ldu
ik
rval
ik
symtab
obj
Vn
field
Name
obj
Key
field
Name
Keys
obj
Keys
obj
Catalog
hack
objects
object
cat
lval
lk
rval
rk
objects
catalog
objects
object
obj
Catalog
name
definer
vn
creators
funarg
Key
other
i
i
result
F
ir
symtab
du
function
Keys
K
x
FV
i
Key
K
x
LI
names
i
vn
ir
du
st
rhs
objs
result
ir
symtab
du
obj
Key
field
Key
x
x
x
x
obj
Keys
fields
Keys
fields
Keys
ir
symtab
du
obj
Key
object
Keys
receivers
fields
receiver
cat
field
key
objects
object
obj
Catalog
key
key
obj
Catalog
fields
field
key
obj
Catalog
key
key
ir
symtab
du
rhs
Key
unknown
hacked
Name
script
File
bs
result
result
method
orig
Name
result
s
function
Name
fst
ir
file
Names
i
url
ir
ir
F
prime
result
other
base
smik
clr
loader
ref
ref
klass
klass
site
function
Vn
param
Vns
j
ES
classes
cls
cls
language
Root
language
Root
Node
site
fake
Root
Node
fake
Root
Method
language
root
type
language
root
type
language
root
language
root
language
root
type
language
root
language
root
type
language
root
loader
function
Type
Ref
declarer
fun
constructor
Callers
result
func
Key
base
other
obj
prop
obj
prop
loaders
total
ldr
languages
hierarchies
ll
scan
scan
result
ir
read
name
And
Definer
result
ir
write
name
And
Definer
result
function
Values
smik
child
restore
file
Context
type
Context
code
Context
code
Context
code
Context
end
i
restore
p
NT
local
Context
local
Context
i
i
unwind
Context
NT
assign
pre
Op
i
file
line
start
offset
end
offset
constants
nce
i
children
pair
Key
copy
new
Children
new
N
new
Children
children
target
Labels
new
Map
mapped
Outside
Nodes
all
New
Target
Nodes
old
Sources
N
old
Source
key
new
Source
old
Target
target
Key
k
new
Label
new
Target
old
Nodes
new
Map
N
old
Node
new
Node
new
Map
N
old
Node
new
Node
new
Children
N
old
Node
new
Node
new
Entities
key
new
Entities
nodes
new
Root
new
Defaults
i
rewrite
new
Children
children
new
Children
key
new
Values
test
body
count
lc
code
pair
Key
s
replacement
other
i
code
i
children
key
target
node
found
found
nodes
ls
ss
to
sb
key
p
p
x
xf
pos
nm
value
other
Node
other
result
res
i
o
name
nodes
o
x
sb
i
repeated
Pattern
optional
Pattern
ss
result
ss
result
s
s
s
name
Start
name
End
internal
Name
name
result
str
End
pattern
Name
str
End
str
End
alternatives
children
children
kind
End
kind
Str
kind
Field
kind
children
result
var
val
values
bad
sb
sb
p
i
i
names
document
Builder
Factory
document
Builder
dom
Implementation
document
root
Node
node
Elt
type
Tag
type
value
Tag
value
message
errors
error
Module
current
Line
lines
offset
line
end
Offset
end
Line
end
Column
start
Offset
start
Line
start
Column
result
i
start
Line
end
Line
new
Lines
i
hack
new
Text
Lines
new
Lines
i
j
result
result
result
result
result
result
result
pos
prime
result
other
pos
x
is
Static
f
ast
top
Level
Entities
xlator
To
IR
value
xlator
To
C
Ast
file
Entity
s
ps
parents
result
i
hack
method
url
builder
CG
generated
Name
Pattern
generated
Fun
Name
Pattern
expected
actual
tmp
ast
module
Name
module
buf
scoped
Entities
i
scoped
Entities
m
first
cnt
labels
first
target
result
result
result
B
CG
sdg
ss
result
ss
loaders
scope
cha
roots
options
cache
builder
CG
CG
CG
CG
CG
CG
CG
CG
B
CG
CG
CG
B
CG
B
CG
CG
B
CG
B
CG
B
CG
CG
CG
CG
CG
CG
cg
succs
CG
CG
CG
CG
CG
CG
CG
CG
CG
B
CG
CG
CG
CG
CG
CG
CG
B
CG
B
CG
cg
b
cg
b
cg
B
CG
B
CG
builder
cg
builder
cg
B
CG
B
monitor
CG
B
CG
B
CG
B
CG
B
CG
B
B
CG
B
CG
B
CG
B
CG
B
CG
url
CG
url
CG
url
CG
url
CG
url
CG
url
CG
url
CG
url
CG
url
CG
url
CG
url
url
url
builder
CG
url
url
builder
CG
url
builder
CG
url
CG
url
CG
url
builder
CG
url
builder
CG
url
builder
CG
B
CG
B
CG
B
CG
B
CG
B
CG
orig
url
CG
result
x
n
preds
caller
sites
site
result
result
l
pointers
l
pointers
fb
fb
Result
propagation
Builder
prop
CG
prop
PA
save
fb
fb
Result
propagation
Builder
prop
CG
prop
PA
hg
functions
To
Compare
ref
fb
Nodes
prop
Nodes
node
ir
max
Vn
nir
i
fb
Ptrs
prop
Ptrs
symtab
property
p
obj
obj
Key
obj
Ptrs
prop
Key
val
val
Key
val
Ptrs
prop
Name
prop
Key
vn
fb
Prototypes
prop
Prototypes
dump
pointer
Key
For
Instance
Field
fb
Protos
fb
Key
fb
Points
To
proto
name
url
CG
url
CG
url
CG
b
CG
lex
Accesses
read
Result
write
Result
n
read
Vars
written
Vars
read
Vars
tmp
summaries
ast
in
Entity
policy
Factory
policy
actual
expected
module
Name
module
url
mod
url
mod
factory
worklist
reaching
Functions
reflective
Callee
Vertices
pending
Call
Worklist
pending
Reflective
Call
Worklist
fv
cnt
v
v
Reach
w
Reach
changed
res
v
call
Vertex
full
Name
invk
reflective
Callee
Vertex
is
Call
v
invk
And
Is
Call
factory
caller
invk
offset
i
factory
caller
i
flowgraph
ir
visitor
normal
Instructions
i
factory
typeref
klass
prop
v
n
w
i
v
v
w
prop
Name
p
pn
v
w
v
w
prop
Name
v
w
lval
p
pn
v
w
arg
Vns
v
w
v
w
v
w
v
w
v
w
fn
name
klass
fn
fn
Vertex
i
cs
pn
cs
concrete
Type
method
method
Name
ctor
Ref
f
ctor
c
callers
caller
sites
site
method
site
key
value
site
key
value
key
value
value
key
value
value
value
value
key
value
key
value
concrete
Type
method
ir
method
Pos
local
Names
result
cgn
concrete
Type
method
pruned
flowgraph
optimistic
closure
proto
rval
func
du
obj
object
prototype
key
m
fun
result
function
function
f
pa
rval
func
du
obj
object
obj
ir
creation
proto
cache
edges
node
Str
succs
filtered
gson
flowgraph
ir
defn
fn
Name
fn
Class
fn
callee
use
invk
i
i
def
i
flowgraph
known
Edges
changed
iter
new
Edges
new
Edge
factory
invk
caller
offset
i
factory
caller
invk
receiver
Vertex
real
Callees
i
result
builder
fg
Begin
fg
End
cg
Begin
cg
End
flow
Graph
cg
interpreter
cg
fake
Root
Method
fake
Root
Node
nd
invk
edges
call
Vertex
target
Vertex
kaller
caller
site
target
is
Function
Prototype
Call
is
Function
Prototype
Apply
fun
ctor
Caller
ref
sites
r
function
Prototype
Call
Selector
callee
Context
ret
function
Prototype
Call
Node
reflective
Targets
reflective
Call
Site
reflective
Tgt
Method
ret
callee
invoke
function
Param
invoke
object
Param
factory
result
fn
fndef
agr
insts
ref
S
insts
ref
S
key
insts
ref
S
insts
ref
S
key
key
insts
ref
S
insts
ref
S
vn
i
key
insts
ref
S
insts
ref
S
cs
key
insts
ref
S
insts
ref
S
cs
key
insts
table
Key
ref
S
ST
ref
cls2
cl
i
fun
j
file
Name
ME
fn
Names
fcls
insts
key
ref
S
cs
args
i
pc
context
Interpreter
def
context
Selector
target
Selector
context
Interpreter
base
Context
v
v
m
myloader
x
arg
result
s
x
ref
children
copy
args
fold
arg
Names
i
a
base
Context
worklist
p
cur
Context
cur
Encountered
caller
Node
i
filter
ik
node
method
new
Encountered
declaring
Class
base
Context
exceeds
Recursion
Bound
caller
Node
i
filter
ik
mref
b
ret
base
Context
options
loaders
scope
suffix
nodes
tail
MR
ctor
MR
TR
TR
to
C
Ast
names
to
IR
fn
Name
fn
cs
result
tree
fcls
result
one
Level
Call
String
Context
ref
S
atom
desc
ref
method
tn
target
names
call
file
Name
V
ptrs
v
str
cl
url
script
non
Global
Field
Name
x
utf8
field
Ref
f
ti
i
js
Analysis
field
f
S
global
Obj
fkey
pointees
set
method
ir
instructions
i
p
lval
lk
bool
key
lval
field
def
f
global
Obj
p
rval
field
f
global
Obj
p
rval
Key
ik
function
Vn
field
Dispatch
Action
function
Obj
x
prototype
Objs
obj
Keys
fields
Keys
field
Key
receiver
Vn
receiver
Key
ik
ik
lval
lk
lv
arg1
arg2
op
v
temp
n
do
Default
changed
iks1
iks2
op
v1
v2
lval
Key
bc
bk
l
B
k1
proto
Obj
proto
Obj
Key
op
new
Obj
Key
new
Obj
Key
source
IR
source
ST
target
IR
target
ST
target
Visitor
av
v
vns
n
param
Count
arg
Count
num
pseudoargs
i
fn
F
j
A
i
fn
A
nullvn
source
DU
nullkeys
i
F
svn
lnv
RF
RA
EF
EA
params
i
prime
result
other
declaring
Class
method
base
Ctxt
tn
is
Non
Null
Array
args
List
t
v
str
Val
f
context
Item
g
g
dependent
Parameters
inst
du
i
values
mref
f
used
As
Property
Name
used
As
Something
Else
du
rma
aidi
base
Context
f
caller
Ik
new
Site
s
result
method
is
Non
Null
Array
ref
declaring
Class
insts
nargs
S
num
Params
To
Pass
params
To
Pass
To
Invoked
cur
Val
Num
cs
result
Val
exc
Val
t
cur
Val
Num
each
Element
Get
Result
null
Pred
Vn
property
Read
Result
i
null
Vn
cur
Val
Num
i
const
VN
property
Read
Result
ref
declaring
Class
insts
nargs
S
result
Val
cs
params
t
function
creator
Context
caller
Of
Constructor
result
cs
methods
m
cha
ref
method
caller
IR
call
Stmts
nargs
bk
res
prime
result
other
label
new
Node
regions
copied
children
next
child
new
Node
epos
new
Node
target
epos
label
return
Lit
new
Node
epos
retval
new
Node
new
Node
children
i
new
Node
epos
labels
invalidate
C
Flow
target
target
entity
extracting
Block
extracting
Local
Scope
extracting
Empty
name
new
entity
prologue
fun
body
stmts
block
start
tler
i
j
stmts
i
node
to
extract
locals
the
Local
ret
Local
stmts
the
Local
Decl
new
Block
fun
body
nodes
new
Root
the
Source
the
Cfg
the
Types
the
Children
i
rw
args
fun
Expr
outer
call
stmts
decl
fixup
return
fixup
new
Node
new
Node
flow
var
fixup
cond
then
branch
target
kind
parms
c
callsite
scoped
entity
c
node
ndpos
i
res
spmap
ast
i
start
Pos
end
Pos
start
Nodes
end
Nodes
arity
iter
candidate
start
Node
end
Node
iter
locals
region
info
regions
i
region2
iter
node
index
pos
block
start
end
start
inner
end
inner
cfg
i
stmt
target
target
Index
block
Child
i
correlations
all
Scoped
Entities
policy
summary
map
pos
policy
Factory
policy
loop
Var
parms
parms
prime
result
that
prime
result
nodes
edges
flow
tmp
flow
map
es
e
relevant
c
node
Map
Copy
flow
from
label
to
entity
i
outer
kind
outer
kind
ast
Method
du
instr
Indices
summary
puts
insts
ii
inst
get
index
index
Name
lexical
Info
reached
worklist
done
i
i2
def
def
j
index
Name
source
Names
For
Values
res
iter
name
worklist
done
i
inst2
j
use
operator
j
use
correlations
i
scripts
summaries
loaders
scope
cha
factory
ssa
Options
correlations
ir
summary
f
url
method
tn
target
indices
caller
Method
pos
nargs
key
insts
ref
S
method
line
result
Val
cs
params
i
t
atom
desc
ref
caller
IR
call
Stmts
nargs
files
options
roots
builder
result
N
xlator
get
result
receiver
Temp
elt
receiver
Temp
element
Temp
get
result
kind
read
Loop
receiver
element
ctxt
lval
rval
op
temp1
temp2
copy
copy
copy
children
last
i
copy
copy
children
copy
names
target
read
Vn
read
Vn
fn
Name
fn
Name
ref
type
Ref
nm
tmp
old
entity
x
field
field
rval
name
context
result
context
result
value
type
temp
Val
args
result
ref
ref
ps
i
edges
edges
method
edges
For
Method
target
Names
true
Target
result
ast
Method
cs
call
String
cs
Ref
caller
Method
type
Name
result
ast
Method
method
Name
method
Name
method
Name
filtered
method
Loc
call
Sites
filtered
Sites
gson
script
preprocessor
loaders
scope
f
provider
script
modules
b
CG
preprocessor
b
CG
ir
Factory
preprocessor
loaders
scripts
Array
builder
scripts
dummy
scripts
Array
b
CG
b
CG
scope
cha
roots
options
cache
builder
original
Args
Vn
result
size
i
inst
v
names
loaders
scripts
loaders
scripts
loaders
scripts
js
Files
scripts
loaders
scripts
loaders
scripts
scope
cha
roots
cache
builder
scope
cha
roots
cache
builder
diff
key
targets1
targets2
st
c
utf8
C
translator
heap
Graph
instance
Key
Mapping
opck
instance
Key
instance
Key
Id
ret
ik
Index
ret
ret
node
Id
cg
Node
start
Offset
end
Offset
number
Of
Line
Drops
map
range
Start
text
range
End
number
Of
Line
Drops
map
ret
i
result
window
Val
is
Defined
src
B
true
B
false
B
sr
window
Val
fn
fn
Value
window
Val
parser
src
child
Elements
tag
child
Elements
result
content
line
Num
nl
body
result
absolute
Url
orig
Host
And
Path
host
path
index
Of
back
Dir
context
Path
path
is
Context
Directory
split
right
Trim
From
Path
i
a
v
cons
indented
Line
attrs
attr
value
prop
type
x
quote
url
id
Attribute
func
Name
attribute
Set
url
pos
att
Name
att
Value
f
Name
signature
Line
quote
content
content
script
Src
bs
line
x
file
last
Idx
Of
Slash
html
Callback
final
Region
output
File
file
Mapping
single
File
Module
output
File
file
Name
dom
Less
Scope
Generator
entrypoint
Url
html
Parser
url
Resolver
res
entry
extractor
sources
conn
fn
new
Params
i
j
new
Lvals
new
Exp
i
j
s
i
prime
result
file
Url
file
builder
CG
cg
String
file
Url
file
builder
CG
cg
String
file
Url
file
builder
CG
cg
String
file
Url
file
builder
CG
cg
String
file
Url
file
builder
CG
cg
String
file
Url
file
builder
CG
cg
String
p
f
file
source
File
Module
module
Source
wrapper
Source
ext
wrapped
Module
Source
normalized
Working
Dir
URI
normalized
File
URI
relative
Path
class
Name
source
File
Module
translator
Factory
language
languages
ir
Factory
cache
loaders
main
Source
Module
main
File
Class
Name
files
scope
cha
roots
options
base
Selector
require
Target
Selector
builder
context
Selector
pointer
Analysis
js
Loader
called
Method
call
Instr
targets
working
Dir
source
Module
class
Name
script
method
caller
IR
call
Instrs
set
pk
instance
Keys
value
module
module
js
File
json
File
package
Json
File
package
Json
Content
package
Json
main
File
Name
main
File
js
File
json
File
dirs
module
dirs
url
CG
url
B
b
B
sources
loaders
scope
cha
fun
sb
script
URL
util
call
Graph
Result
fg
json
gson
map
Type
translator
entity
translator
entity
url
CG
url
B
builder
CG
script
cg
cg2JSON
parsed
JSONCG
methods
call
Sites
flattened
script
cg
cg2JSON
parsed
script
cg
cg2JSON
parsed
script
cg
cg2JSON
parsed
parsed
result
json
gson
map
Type
script
URL
url
url
url
url
url
url
url
url
url
cg
monitor
cg
loaders
monitor
scripts
url
cg2JSON
edges
second
Fun
Name
res
url
builder
master
start
cg
end
f
url
parsed
Args
src
tmp
File
timeout
reachable
Name
res
cha
factory
name
m
ir
ast
Method
url
p
scripts
loaders
scope
cha
filename
domless
url
sources
builder
cg
pa
ignored
source
Extractor
sources
Map
sources
i
context
Interpreter
def
language
Selectors
instance
Keys
js
Loader
L
method
Target
Selectors
loaders
scope
files
i
script
cha
js
Roots
entrypoints
roots
options
factory
cache
b
builder
CG
target
children
nargs
arguments
call
f
i
is
Function
Expression
j
params
pi
stmts
ast
map
pos
subs
url
line
pos
np
cn
target
l
st
ex
loop
Context
labels
loop
Context
labels
ast
index
elt
Nodes
lit
children
nodes
break
Stmt
target
continue
Stmt
target
loop
Test
break
Stmt
break
Label
cont
Stmt
cont
Label
loop
Context
loop
Body
loop
get
result
operation
Index
obj
loop
get
object
name
var
V
obj
break
Stmt
break
Label
cont
Stmt
cont
Label
loop
Context
ctch
temp
Name
loop
Header
decl
init
break
Stmt
break
Label
cont
Stmt
cont
Label
garbage
Stmt
garbage
Label
loop
Context
body
init
Node
decl
init
ctch
break
Stmt
break
Label
cont
Stmt
cont
Label
garbage
Stmt
garbage
Label
loop
Context
body
ctch
break
Stmt
break
Label
cont
Stmt
cont
Label
loop
Context
loop
top
nodes
args
callee
this
Base
Var
Num
child
fun
args
global
Ref
i
prop
label
child
body
name
x
label
name
Exists
fne
fun
l
r
l
r
value
property
value
type
global
Ref
label
ex
ex
Node
label
Body
Context
result
prev
decl
stmts
receiver
props
args
label
lit
elt
flags
Node
val
Node
val
nodes
stmts
break
Stmt
break
Label
switch
Body
Context
i
children
label
label
C
Ast
s
catch
Node
throw
Ast
outer
catches
try
Catch
unwind
Name
unwind
Catch
unwind
Catch
Name
var
catch
Var
Name
var
code
i
clause
catch
Block
try
Context
expr
op
l
last
inits
children
init
Code
name
Var
Pattern
break
Stmt
break
Label
cont
Stmt
cont
Label
loop
Context
loop
reporter
compiler
Env
P
top
child
tv
body
xx
local
File
Name
parser
r
line
i
index
v
