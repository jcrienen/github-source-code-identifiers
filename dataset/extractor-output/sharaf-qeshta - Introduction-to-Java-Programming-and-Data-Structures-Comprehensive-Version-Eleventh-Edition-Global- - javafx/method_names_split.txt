main
main
main
main
main
main
main
main
main
main
main
main
main
main
get
Size
main
count
Keywords
main
main
get
First
Name
get
Last
Name
get
Major
get
Age
get
Score
main
main
main
main
to
Character
Array
main
main
main
get
Char
main
main
get
Name
get
Score
to
String
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
pattern
A
pattern
B
pattern
C
pattern
D
main
main
main
main
main
judge
converter
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
smallest
Factors
push
pop
peek
empty
get
Size
main
get
Area
get
Perimeter
get
Rectangle
min
Max
contains
contains
overlaps
get
X
set
X
get
Y
set
Y
get
Width
set
Width
get
Height
set
Height
get
BMI
get
Status
get
Name
get
Age
get
Weight
get
Height
get
Inches
set
Inches
get
Feet
set
Feet
main
main
char
At
length
substring
to
Lower
Case
equals
value
Of
get
Length
get
Str
set
Date
get
Year
get
Month
get
Day
main
main
char
Value
compare
To
equals
hash
Code
to
String
is
Letter
is
Digit
to
Upper
Case
to
Lower
Case
append
append
length
char
At
to
Lower
Case
substring
re
Assign
Chars
re
Assign
String
to
String
main
main
main
get
Area
get
Perimeter
contains
contains
overlaps
get
X
get
Y
get
Radius
main
get
E
main
split
is
In
distance
distance
get
X
get
Y
main
get
Area
get
Perimeter
sign
contains
contains
contains
overlaps
intersect
get
P1
set
P1
get
P2
set
P2
get
P3
set
P3
main
print
set
Filing
Status
get
Filing
Status
set
Brackets
get
Brackets
set
Rates
get
Rates
set
Taxable
Income
get
Tax
main
get
Area
get
Perimeter
contains
contains
overlaps
get
X
set
X
get
Y
set
Y
get
Width
set
Width
get
Height
set
Height
add
Student
get
Students
get
Number
Of
Students
get
Course
Name
drop
Student
main
get
BMI
get
Status
get
Name
get
Age
get
Weight
get
Height
main
push
pop
peek
empty
get
Size
main
main
is
Palindrome
filter
reverse
main
factorial
main
get
Annual
Interest
Rate
set
Annual
Interest
Rate
get
Number
Of
Years
set
Number
Of
Years
get
Loan
Amount
set
Loan
Amount
get
Monthly
Payment
get
Total
Payment
get
Loan
Date
main
is
Prime
main
set
Time
get
String
get
Hour
get
Minute
get
Second
compare
substring
to
Upper
Case
to
Chars
value
Of
to
Chars
get
String
get
Str
main
main
insert
reverse
length
char
At
to
Upper
Case
substring
re
Assign
Chars
re
Assign
String
to
String
main
is
Prime
add
Student
get
Students
get
Number
Of
Students
get
Course
Name
clear
drop
Student
main
get
Id
set
Id
get
Balance
set
Balance
get
Annual
Interest
Rate
set
Annual
Interest
Rate
get
DATE
CREATED
get
Monthly
Interest
Rate
get
Monthly
Interest
withdraw
deposit
main
is
Valid
Account
start
enqueue
dequeue
empty
get
Size
main
main
get
Value
is
Odd
is
Odd
is
Odd
is
Even
is
Even
is
Even
is
Prime
is
Prime
is
Prime
equals
equals
parse
Int
parse
Int
main
main
distance
distance
get
X
get
Y
main
evaluate
main
main
get
All
Primes
is
Prime
push
pop
peek
empty
get
Size
reverse
main
write
In
File
get
All
Lines
main
get
Area
get
Perimeter
to
String
get
Side1
get
Side2
get
Side3
main
get
Color
set
Color
is
Filled
set
Filled
main
write
In
File
get
All
Lines
sort
main
get
All
Lines
increment
main
main
get
All
Files
get
All
Lines
write
Lines
replace
main
main
get
First
Five
get
All
Words
get
All
Content
main
read
In
File
main
generate
Random
Data
write
In
main
get
All
Lines
write
Lines
get
All
Files
replace
main
main
get
All
Lines
get
Bounds
main
main
main
get
All
Files
get
All
Lines
write
In
main
main
get
All
Content
get
All
Info
main
main
main
hex
To
Decimal
hex
Char
To
Decimal
main
count
Chars
count
Words
main
get
Annual
Interest
Rate
set
Annual
Interest
Rate
get
Number
Of
Years
set
Number
Of
Years
get
Loan
Amount
set
Loan
Amount
get
Monthly
Payment
get
Total
Payment
get
Loan
Date
main
crawler
get
Sub
UR
Ls
get
Radius
set
Radius
get
Number
Of
Objects
find
Area
main
main
main
main
quotient
main
main
main
main
sum
main
crawler
get
Sub
UR
Ls
main
get
Radius
set
Radius
get
Number
Of
Objects
find
Area
get
Radius
main
method1
method2
main
main
main
quotient
main
main
main
write
In
main
evaluate
main
evaluate
main
main
get
All
Content
main
rename
File
get
All
Files
main
main
get
All
Files
get
All
Lines
write
In
main
main
bin2Dec
is
Binary
main
main
main
rename
File
get
All
Files
main
main
main
main
start
create
Asterisks
check
get
All
Lines
main
get
Annual
Interest
Rate
set
Annual
Interest
Rate
get
Number
Of
Years
set
Number
Of
Years
get
Loan
Amount
set
Loan
Amount
get
Monthly
Payment
get
Total
Payment
get
Loan
Date
main
main
hex
To
Decimal
hex
Char
To
Decimal
get
O1
get
O2
get
O3
main
get
Size
peek
push
pop
reverse
main
add
multiply
zero
add
Matrix
multiply
Matrix
print
Result
main
add
subtract
multiply
divide
abs
get
A
get
B
get
Real
Part
get
Imaginary
Part
to
String
compare
To
add
multiply
zero
main
sort
main
shuffle
max
add
multiply
zero
add
multiply
zero
add
Matrix
multiply
Matrix
print
Result
main
print
main
sort
print
List
add
multiply
zero
main
max
main
main
max
get
Size
peek
push
pop
is
Empty
to
String
main
equal
Area
main
print
main
add
main
get
Size
peek
push
pop
is
Empty
to
String
main
sort
get
O1
get
O2
get
O3
sum
main
main
min
main
get
O1
get
O2
main
get
O1
get
O2
get
Smallest
get
O1
get
O2
get
O3
get
O1
get
O2
main
search
insert
delete
get
Size
inorder
postorder
preorder
is
Empty
contains
add
remove
size
contains
All
add
All
remove
All
retain
All
to
Array
to
Array
main
create
New
Node
insert
update
Height
update
Sizes
count
Children
balance
Path
balance
Factor
balance
LL
balance
LR
balance
RR
balance
RL
delete
find
find
search
insert
create
New
Node
inorder
inorder
postorder
postorder
preorder
preorder
get
Size
get
Root
path
delete
iterator
inorder
inorder
has
Next
next
remove
clear
get
Node
is
Leaf
get
Path
search
insert
delete
get
Size
inorder
postorder
preorder
is
Empty
contains
add
remove
size
contains
All
add
All
remove
All
retain
All
to
Array
to
Array
create
New
Node
insert
update
Height
balance
Path
balance
Factor
balance
LL
balance
LR
balance
RR
balance
RL
delete
search
insert
create
New
Node
inorder
inorder
postorder
postorder
preorder
preorder
get
Size
get
Root
path
delete
iterator
inorder
inorder
has
Next
next
remove
clear
main
shuffle
main
print
Tree
create
New
Node
insert
update
Height
balance
Path
balance
Factor
balance
LL
balance
LR
balance
RR
balance
RL
delete
search
insert
delete
get
Size
inorder
postorder
preorder
is
Empty
contains
add
remove
size
contains
All
add
All
remove
All
retain
All
to
Array
to
Array
start
create
New
Node
insert
update
Height
balance
Path
balance
Factor
balance
LL
balance
LR
balance
RR
balance
RL
delete
search
insert
create
New
Node
inorder
inorder
postorder
postorder
preorder
preorder
get
Size
get
Root
path
delete
iterator
inorder
inorder
has
Next
next
remove
clear
display
Tree
start
search
insert
delete
get
Size
inorder
postorder
preorder
is
Empty
contains
add
remove
size
contains
All
add
All
remove
All
retain
All
to
Array
to
Array
create
New
Node
insert
update
Height
balance
Path
balance
Factor
balance
LL
balance
LR
balance
RR
balance
RL
delete
search
insert
create
New
Node
inorder
inorder
postorder
postorder
preorder
preorder
get
Size
get
Root
path
delete
iterator
inorder
inorder
has
Next
next
remove
clear
display
Tree
main
search
insert
delete
get
Size
inorder
postorder
preorder
is
Empty
contains
add
remove
size
contains
All
add
All
remove
All
retain
All
to
Array
to
Array
create
New
Node
insert
update
Height
balance
Path
balance
Factor
balance
LL
balance
LR
balance
RR
balance
RL
delete
search
insert
create
New
Node
inorder
inorder
postorder
postorder
preorder
preorder
get
Size
get
Root
path
delete
iterator
inorder
inorder
has
Next
next
remove
clear
get
Node
is
Leaf
get
Path
main
search
insert
delete
get
Size
inorder
postorder
preorder
is
Empty
contains
add
remove
size
contains
All
add
All
remove
All
retain
All
to
Array
to
Array
create
New
Node
insert
update
Height
balance
Path
balance
Factor
balance
LL
balance
LR
balance
RR
balance
RL
delete
display
Path
search
insert
create
New
Node
inorder
inorder
postorder
postorder
preorder
preorder
get
Size
get
Root
path
delete
iterator
inorder
inorder
has
Next
next
remove
clear
main
main
gcd
get
Numerator
get
Denominator
add
subtract
multiply
divide
to
String
equals
hash
Code
int
Value
long
Value
float
Value
double
Value
compare
To
get
Area
get
Perimeter
compare
To
to
String
get
Side1
get
Side2
get
Side3
main
get
Color
set
Color
is
Filled
set
Filled
get
Date
Created
to
String
get
Area
get
Perimeter
max
main
gcd
get
Numerator
get
Denominator
add
subtract
multiply
divide
to
String
equals
hash
Code
int
Value
long
Value
float
Value
double
Value
compare
To
main
average
compare
To
main
get
Color
set
Color
is
Filled
set
Filled
get
Date
Created
to
String
get
Area
get
Perimeter
get
Area
get
Perimeter
get
Side
Length
set
Side
Length
add
Student
get
Students
get
Number
Of
Students
get
Course
Name
drop
Student
clear
clone
main
gcd
get
Numerator
get
Denominator
add
subtract
multiply
divide
to
String
equals
hash
Code
int
Value
long
Value
float
Value
double
Value
compare
To
find
GCD
create
Rational
main
main
get
Area
get
Perimeter
compare
To
get
Side
set
Side
clone
get
Color
set
Color
is
Filled
set
Filled
get
Date
Created
to
String
get
Area
get
Perimeter
max
main
add
subtract
multiply
divide
abs
get
A
get
B
get
Real
Part
get
Imaginary
Part
to
String
compare
To
get
Width
set
Width
get
Height
set
Height
get
Area
get
Perimeter
equals
to
String
compare
To
get
Radius
set
Radius
get
Area
get
Diameter
get
Perimeter
to
String
compare
To
equals
main
sum
Area
get
Color
set
Color
is
Filled
set
Filled
get
Date
Created
to
String
get
Area
get
Perimeter
max
peek
pop
push
to
String
main
main
add
Student
get
Students
get
Number
Of
Students
get
Course
Name
drop
Student
clear
clone
main
get
Area
get
Perimeter
get
Id
get
Area
get
When
Built
clone
compare
To
main
equal
Area
display
Geometric
Object
main
get
Area
get
Perimeter
compare
To
to
String
main
get
Weight
set
Weight
sound
how
To
Eat
sound
sound
how
To
Eat
how
To
Eat
how
To
Eat
main
get
Color
set
Color
is
Filled
set
Filled
get
Date
Created
to
String
get
Area
get
Perimeter
main
gcd
get
Numerator
get
Denominator
add
subtract
multiply
divide
to
String
equals
int
Value
float
Value
double
Value
long
Value
compare
To
main
get
Largest
Number
main
find
GCD
get
Area
get
Perimeter
to
String
get
Side1
get
Side2
get
Side3
main
get
Color
set
Color
is
Filled
set
Filled
get
Date
Created
to
String
get
Area
get
Perimeter
main
gcd
get
Numerator
get
Denominator
add
subtract
multiply
divide
to
String
equals
hash
Code
int
Value
long
Value
float
Value
double
Value
compare
To
get
Radius
set
Radius
get
Area
get
Diameter
get
Perimeter
to
String
compare
To
equals
main
get
Color
set
Color
is
Filled
set
Filled
get
Date
Created
to
String
get
Area
get
Perimeter
max
get
Area
get
Perimeter
compare
To
to
String
get
Side1
get
Side2
get
Side3
how
To
Color
main
get
Color
set
Color
is
Filled
set
Filled
get
Date
Created
to
String
get
Area
get
Perimeter
max
how
To
Color
get
Area
get
Perimeter
compare
To
get
Side
Length
set
Side
Length
get
Width
set
Width
get
Height
set
Height
get
Area
get
Perimeter
equals
to
String
compare
To
main
get
Color
set
Color
is
Filled
set
Filled
get
Date
Created
to
String
get
Area
get
Perimeter
max
main
sort
main
add
subtract
multiply
divide
abs
get
A
get
B
get
Real
Part
get
Imaginary
Part
to
String
compare
To
main
print
Month
print
Month
Title
get
Month
Name
print
Month
Body
get
Start
Day
get
Total
Number
Of
Days
get
Number
Of
Days
In
Month
is
Leap
Year
get
Area
get
Perimeter
compare
To
to
String
get
Side1
get
Side2
get
Side3
main
get
Radius
set
Radius
get
Area
get
Diameter
get
Perimeter
to
String
compare
To
get
Color
set
Color
is
Filled
set
Filled
get
Date
Created
to
String
get
Area
get
Perimeter
max
start
get
Histogram
get
Array
add
remove
get
Size
main
heap
Sort
start
get
Histogram
get
Array
main
merge
Sort
merge
merge
Sort
merge
sort
initialize
Segments
merge
merge
One
Step
copy
Half
To
F2
merge
Segments
merge
Two
Segments
main
test
create
File
add
remove
get
Size
clone
equals
main
main
merge
Sort
merge
main
radix
Sort
count
Sort
main
insertion
Sort
insertion
Sort
main
test
test
Selection
Sort
test
Bubble
Sort
test
Merge
Sort
test
Quick
Sort
test
Heap
Sort
test
Radix
Sort
add
remove
get
Size
clone
equals
selection
Sort
bubble
Sort
merge
Sort
merge
quick
Sort
partition
heap
Sort
radix
Sort
count
Sort
main
quick
Sort
quick
Sort
partition
main
main
sort
initialize
Segments
merge
merge
One
Step
copy
Half
To
F2
merge
Segments
merge
Two
Segments
display
File
bubble
Sort
main
add
remove
get
Size
merge
Sort
merge
main
insertion
Sort
heap
Sort
main
start
get
GUI
get
Array
change
Value
get
Text
put
Pointer
main
bubble
Sort
bubble
Sort
start
get
GUI
get
Array
change
Value
get
Text
put
Pointer
add
remove
get
Size
add
remove
get
Size
main
heap
Sort
heap
Sort
add
remove
get
Size
main
heap
Sort
add
remove
get
Size
start
get
Heap
GUI
get
Heap
GUI
main
quick
Sort
quick
Sort
partition
quick
Sort
quick
Sort
partition
start
get
GUI
get
Array
change
Value
get
Text
add
Number
get
Name
main
quick
Sort
quick
Sort
partition
main
insertion
Sort
insertion
Sort
main
clear
main
main
main
sort
get
All
Names
main
main
crawler
get
Sub
UR
Ls
start
get
All
Content
get
All
Words
set
Names
main
get
All
Content
get
All
Words
get
Names
main
sort
main
main
get
All
Content
get
All
Words
set
Names
main
main
main
get
Test
Time
get
Remove
Time
main
main
count
Keywords
main
main
main
main
main
main
main
sort
main
count
Keywords
main
sort
get
All
Names
get
First
Names
main
main
main
sort
get
All
Names
main
main
get
First
get
Last
add
First
add
Last
add
remove
First
remove
Last
remove
to
String
clear
contains
get
index
Of
last
Index
Of
set
iterator
has
Next
next
remove
size
main
enqueue
dequeue
get
Size
to
String
main
add
ensure
Capacity
clear
contains
get
check
Index
index
Of
last
Index
Of
remove
set
to
String
trim
To
Size
iterator
has
Next
next
remove
size
add
get
index
Of
last
Index
Of
remove
set
add
is
Empty
remove
contains
All
add
All
remove
All
retain
All
to
Array
to
Array
get
First
get
Last
add
First
add
Last
add
remove
First
remove
Last
remove
to
String
clear
contains
get
index
Of
last
Index
Of
set
iterator
has
Next
next
remove
size
main
has
Next
next
main
add
get
index
Of
last
Index
Of
remove
set
add
is
Empty
remove
contains
All
add
All
remove
All
retain
All
to
Array
to
Array
start
draw
List
get
Decorations
forward
To
String
backward
To
String
get
First
get
Last
add
First
add
Last
add
remove
First
remove
Last
remove
to
String
clear
contains
get
index
Of
last
Index
Of
set
iterator
iterator
has
Next
next
remove
size
start
draw
Queue
get
Decorations
add
get
index
Of
last
Index
Of
remove
set
add
is
Empty
remove
contains
All
add
All
remove
All
retain
All
to
Array
to
Array
add
ensure
Capacity
clear
contains
get
check
Index
index
Of
last
Index
Of
remove
set
to
String
trim
To
Size
iterator
has
Next
next
remove
size
start
draw
Array
List
get
Decorations
main
has
Next
next
main
add
get
index
Of
last
Index
Of
remove
set
add
is
Empty
remove
contains
All
add
All
remove
All
retain
All
to
Array
to
Array
enqueue
dequeue
get
Size
add
ensure
Capacity
clear
contains
get
check
Index
index
Of
last
Index
Of
remove
set
to
String
trim
To
Size
iterator
has
Next
next
remove
size
main
main
main
to
String
compare
To
get
First
get
Last
add
First
add
Last
add
remove
First
remove
Last
remove
to
String
clear
contains
get
index
Of
last
Index
Of
set
iterator
has
Next
next
remove
size
enqueue
dequeue
get
Size
to
String
add
All
remove
All
retain
All
to
Array
to
Array
add
ensure
Capacity
clear
contains
get
check
Index
index
Of
last
Index
Of
remove
set
to
String
trim
To
Size
iterator
add
remove
contains
All
has
Next
next
remove
size
is
Empty
main
add
get
index
Of
last
Index
Of
remove
set
add
is
Empty
remove
contains
All
add
All
remove
All
retain
All
to
Array
to
Array
start
draw
Array
List
get
Decorations
add
ensure
Capacity
clear
contains
get
check
Index
index
Of
last
Index
Of
remove
set
to
String
trim
To
Size
iterator
has
Next
next
remove
size
start
draw
Linked
List
get
Decorations
start
draw
Stack
get
Decorations
main
add
get
index
Of
last
Index
Of
remove
set
add
is
Empty
remove
contains
All
add
All
remove
All
retain
All
to
Array
to
Array
get
First
get
Last
add
First
add
Last
add
remove
First
remove
Last
remove
to
String
clear
contains
get
index
Of
last
Index
Of
set
iterator
iterator
has
Next
next
remove
size
main
add
remove
get
Size
enqueue
dequeue
get
Size
enqueue
dequeue
get
Size
main
main
to
String
add
remove
get
Size
enqueue
dequeue
get
Size
main
main
get
Previous
Closing
Price
set
Previous
Closing
Price
get
Current
Price
set
Current
Price
get
Change
Percent
is
Solvable
get
X
get
Y
get
A
get
B
get
C
get
D
get
E
get
F
main
is
Solvable
get
X
get
Y
get
A
get
B
get
C
get
D
get
E
get
F
main
get
Speed
set
Speed
is
On
set
On
get
Radius
set
Radius
get
Color
set
Color
to
String
main
main
locate
Largest
get
Number
Of
Objects
get
Area
main
print
Areas
turn
On
turn
Off
set
Channel
set
Volume
channel
Up
channel
Down
volume
Up
volume
Down
main
main
main
get
Area
get
Perimeter
set
Radius
main
create
Circle
Array
print
Circle
Array
sum
main
get
Radius
set
Radius
get
Number
Of
Objects
get
Area
main
get
Area
get
Perimeter
set
Radius
main
get
Area
get
Perimeter
main
get
Perimeter
get
Area
get
N
set
N
get
Side
set
Side
get
X
set
X
get
Y
set
Y
main
get
Id
set
Id
get
Balance
set
Balance
get
Annual
Interest
Rate
set
Annual
Interest
Rate
get
DATE
CREATED
get
Monthly
Interest
Rate
get
Monthly
Interest
withdraw
deposit
main
main
get
Discriminant
get
Root1
get
Root2
get
Output
get
A
get
B
get
C
main
main
start
stop
get
Elapsed
Time
get
Start
Time
get
End
Time
main
selection
Sort
do
Get
do
Get
do
Get
do
Get
do
Get
do
Get
do
Get
insert
update
view
do
Get
init
do
Post
initialize
Jdbc
store
Student
do
Get
init
do
Get
do
Post
initialize
Jdbc
store
Student
get
First
Name
set
First
Name
get
Mi
set
Mi
get
Last
Name
set
Last
Name
get
Telephone
set
Telephone
get
Email
set
Email
get
Street
set
Street
get
City
set
City
get
State
set
State
get
Zip
set
Zip
do
Get
do
Post
init
do
Get
do
Post
initialize
Jdbc
store
Student
init
do
Get
do
Post
initialize
Jdbc
store
Student
do
Get
do
Get
get
Factorial
do
Get
do
Get
do
Get
init
do
Get
do
Get
init
do
Get
init
do
Get
do
Get
get
X
get
Y
get
Name
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
repaint
With
New
Vertex
add
Edge
clear
repaint
Graph
compare
To
start
get
X
get
Y
get
Name
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
create
Weighted
Graph
create
Weighted
Graph
get
Weight
print
Weighted
Edges
add
Edge
get
Minimum
Spanning
Tree
get
Minimum
Spanning
Tree
get
Total
Weight
get
Shortest
Path
get
Cost
print
All
Paths
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
get
Edges
get
Flipped
Node
flip
A
Cell
get
Index
get
Node
get
Shortest
Path
print
Node
compare
To
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
main
get
Edges
get
Number
Of
Flips
get
Number
Of
Flips
create
Weighted
Graph
create
Weighted
Graph
get
Weight
print
Weighted
Edges
add
Edge
get
Minimum
Spanning
Tree
get
Minimum
Spanning
Tree
get
Total
Weight
get
Shortest
Path
get
Cost
print
All
Paths
get
X
get
Y
get
Name
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
repaint
With
New
Vertex
add
Edge
draw
Shortest
Path
clear
repaint
Graph
compare
To
start
get
X
get
Y
get
Name
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
create
Weighted
Graph
create
Weighted
Graph
get
Weight
print
Weighted
Edges
add
Edge
get
Minimum
Spanning
Tree
get
Minimum
Spanning
Tree
get
Total
Weight
get
Shortest
Path
get
Cost
print
All
Paths
create
Adjacency
Matrix
create
Adjacency
Matrix
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
compare
To
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
create
Weighted
Graph
create
Weighted
Graph
get
Weight
print
Weighted
Edges
add
Edge
get
Minimum
Spanning
Tree
get
Minimum
Spanning
Tree
get
Total
Weight
get
Shortest
Path
get
Cost
print
All
Paths
main
get
X
get
Y
get
Name
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
repaint
Graph
compare
To
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
start
get
X
get
Y
get
Name
create
Weighted
Graph
create
Weighted
Graph
get
Weight
print
Weighted
Edges
add
Edge
get
Minimum
Spanning
Tree
get
Minimum
Spanning
Tree
get
Total
Weight
get
Shortest
Path
get
Cost
print
All
Paths
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
compare
To
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
main
create
Weighted
Graph
create
Weighted
Graph
get
Weight
print
Weighted
Edges
add
Edge
get
Minimum
Spanning
Tree
get
Minimum
Spanning
Tree
get
Total
Weight
get
Shortest
Path
get
Cost
print
All
Paths
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
compare
To
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
get
Shortest
Path
get
Minimum
Spanning
Tree
main
create
Weighted
Graph
create
Weighted
Graph
get
Weight
print
Weighted
Edges
add
Edge
get
Minimum
Spanning
Tree
get
Minimum
Spanning
Tree
get
Total
Weight
get
Shortest
Path
get
Cost
print
All
Paths
get
X
get
Y
get
Name
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
repaint
Graph
compare
To
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
start
get
X
get
Y
get
Name
create
Weighted
Graph
create
Weighted
Graph
get
Weight
print
Weighted
Edges
add
Edge
get
Minimum
Spanning
Tree
get
Minimum
Spanning
Tree
get
Total
Weight
get
Shortest
Path
get
Cost
print
All
Paths
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
compare
To
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
main
create
Weighted
Graph
create
Weighted
Graph
get
Weight
print
Weighted
Edges
add
Edge
get
Minimum
Spanning
Tree
get
Minimum
Spanning
Tree
get
Total
Weight
get
Shortest
Path
get
Cost
print
All
Paths
get
Shortest
Hamiltonian
Cycle
get
Shortest
Hamiltonian
Cycle
start
get
X
get
Y
get
Name
get
X
get
Y
get
Name
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
display
Shortest
Path
repaint
Graph
compare
To
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
create
Weighted
Graph
create
Weighted
Graph
get
Weight
print
Weighted
Edges
add
Edge
get
Minimum
Spanning
Tree
get
Minimum
Spanning
Tree
get
Total
Weight
get
Shortest
Path
get
Cost
print
All
Paths
compare
To
main
main
main
main
get
Edges
get
Number
Of
Flips
get
Number
Of
Flips
create
Weighted
Graph
create
Weighted
Graph
get
Weight
print
Weighted
Edges
add
Edge
get
Minimum
Spanning
Tree
get
Minimum
Spanning
Tree
get
Total
Weight
get
Shortest
Path
get
Cost
print
All
Paths
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
compare
To
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
main
search
insert
delete
get
Size
inorder
postorder
preorder
is
Empty
contains
add
remove
size
contains
All
add
All
remove
All
retain
All
to
Array
to
Array
get
Shortest
Path
create
Weighted
Graph
create
Weighted
Graph
get
Weight
print
Weighted
Edges
add
Edge
get
Minimum
Spanning
Tree
get
Minimum
Spanning
Tree
get
Total
Weight
get
Shortest
Path
get
Cost
print
All
Paths
create
New
Node
insert
update
Height
balance
Path
balance
Factor
balance
LL
balance
LR
balance
RR
balance
RL
delete
search
insert
create
New
Node
inorder
inorder
postorder
postorder
preorder
preorder
get
Size
get
Root
path
delete
iterator
inorder
inorder
has
Next
next
remove
clear
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
compare
To
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
main
create
Weighted
Graph
create
Weighted
Graph
get
Weight
print
Weighted
Edges
add
Edge
get
Minimum
Spanning
Tree
get
Minimum
Spanning
Tree
get
Total
Weight
get
Shortest
Path
get
Cost
print
All
Paths
get
MST
Using
Kruskal
Algorithm
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
compare
To
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
main
get
Shortest
Path
create
Weighted
Graph
create
Weighted
Graph
get
Weight
print
Weighted
Edges
add
Edge
get
Minimum
Spanning
Tree
get
Minimum
Spanning
Tree
get
Total
Weight
get
Shortest
Path
get
Cost
print
All
Paths
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
compare
To
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
main
create
Weighted
Graph
create
Weighted
Graph
get
Weight
print
Weighted
Edges
add
Edge
get
Minimum
Spanning
Tree
get
Minimum
Spanning
Tree
get
Total
Weight
get
Shortest
Path
get
Cost
print
All
Paths
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
get
Edges
get
Number
Of
Flips
get
Number
Of
Flips
compare
To
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
get
Edges
get
Flipped
Node
flip
A
Cell
get
Index
get
Node
get
Shortest
Path
print
Node
main
create
Weighted
Graph
create
Weighted
Graph
get
Weight
print
Weighted
Edges
add
Edge
get
Minimum
Spanning
Tree
get
Minimum
Spanning
Tree
get
Total
Weight
get
Shortest
Path
get
Cost
print
All
Paths
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
compare
To
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
main
create
Weighted
Graph
create
Weighted
Graph
get
Weight
print
Weighted
Edges
add
Edge
get
Minimum
Spanning
Tree
get
Minimum
Spanning
Tree
get
Total
Weight
get
Shortest
Path
get
Cost
print
All
Paths
create
Adjacency
Matrix
create
Adjacency
Matrix
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
main
compare
To
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
create
Weighted
Graph
create
Weighted
Graph
get
Weight
print
Weighted
Edges
add
Edge
get
Minimum
Spanning
Tree
get
Minimum
Spanning
Tree
get
Total
Weight
get
Shortest
Path
get
Cost
print
All
Paths
set
X
set
Y
get
X
get
Y
get
Name
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
display
MST
display
SP
valid
Coordinates
add
Edge
check
Circles
get
Index
Of
A
Circle
update
Weights
repaint
Graph
compare
To
start
set
X
set
Y
get
X
get
Y
get
Name
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
create
Weighted
Graph
create
Weighted
Graph
get
Weight
print
Weighted
Edges
add
Edge
get
Minimum
Spanning
Tree
get
Minimum
Spanning
Tree
get
Total
Weight
get
Shortest
Path
get
Cost
print
All
Paths
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
get
Edges
get
Flipped
Node
flip
A
Cell
get
Index
get
Node
get
Shortest
Path
print
Node
compare
To
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
get
Edges
get
Number
Of
Flips
get
Number
Of
Flips
create
Weighted
Graph
create
Weighted
Graph
get
Weight
print
Weighted
Edges
add
Edge
get
Minimum
Spanning
Tree
get
Minimum
Spanning
Tree
get
Total
Weight
get
Shortest
Path
get
Cost
print
All
Paths
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
get
Edges
get
Number
Of
Flips
get
Number
Of
Flips
compare
To
main
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
get
Edges
get
Flipped
Node
flip
A
Cell
get
Index
get
Node
get
Shortest
Path
print
Node
create
Weighted
Graph
create
Weighted
Graph
get
Weight
print
Weighted
Edges
add
Edge
get
Minimum
Spanning
Tree
get
Minimum
Spanning
Tree
get
Total
Weight
get
Shortest
Path
get
Cost
print
All
Paths
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
main
max
Induced
Subgraph
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
get
Path
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
main
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
start
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
get
Edges
get
Flipped
Node
flip
A
Cell
get
Index
get
Node
get
Shortest
Path
print
Node
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
main
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
start
is
Inside
A
Circle
color
If
Connected
overlaps
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
main
get
Edges
get
Flipped
Node
flip
A
Cell
get
Index
get
Node
get
Shortest
Path
print
Node
get
Number
Of
Invalid
Start
Patter
count
Valid
Start
increment
get
Integer
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
start
is
Inside
A
Circle
color
If
Connected
overlaps
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
get
Hamiltonian
Cycle
get
Hamiltonian
Cycle
get
Connected
Components
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
get
Hamiltonian
Cycle
equals
start
is
Inside
A
Circle
color
If
Connected
overlaps
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
get
Edges
get
Flipped
Node
flip
A
Cell
get
Index
get
Node
get
Shortest
Path
print
Node
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
start
get
X
get
Y
get
Name
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
get
Hamiltonian
Cycle
get
Hamiltonian
Cycle
repaint
Graph
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
get
Hamiltonian
Cycle
equals
start
get
X
get
Y
get
Name
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
main
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
get
Edges
get
Flipped
Node
flip
A
Cell
get
Index
get
Node
get
Shortest
Path
print
Node
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
main
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
is
Bipartite
main
main
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
get
Edges
get
Flipped
Node
flip
A
Cell
get
Index
get
Node
get
Shortest
Path
print
Node
get
X
get
Y
get
Name
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
repaint
Graph
get
Edges
get
Flipped
Node
flip
A
Cell
get
Index
get
Node
get
Shortest
Path
print
Node
main
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
start
get
X
get
Y
get
Name
equals
main
main
start
is
Inside
A
Circle
color
If
Connected
overlaps
main
get
X
get
Y
get
Name
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
get
Hamiltonian
Cycle
get
Hamiltonian
Cycle
dfs
bfs
repaint
Graph
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
get
Hamiltonian
Cycle
equals
start
get
X
get
Y
get
Name
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
main
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
start
is
Inside
A
Rectangle
color
If
Connected
overlaps
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
get
Hamiltonian
Cycle
get
Hamiltonian
Cycle
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
get
Hamiltonian
Cycle
equals
main
get
Edges
For
Chessboard
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
get
Bipartite
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
main
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
get
A
Cycle
main
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
get
Path
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
main
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
main
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
dfs
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
get
Hamiltonian
Cycle
get
Hamiltonian
Cycle
main
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
get
Hamiltonian
Cycle
equals
main
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
get
Connected
Components
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
main
create
Adjacency
Lists
create
Adjacency
Lists
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
dfs
dfs
bfs
get
Root
get
Parent
get
Search
Order
get
Number
Of
Vertices
Found
get
Path
print
Path
print
Tree
remove
remove
main
get
Size
get
Vertices
get
Vertex
get
Index
get
Neighbors
get
Degree
print
Edges
clear
add
Vertex
add
Edge
add
Edge
remove
remove
dfs
bfs
equals
is
Cyclic
main
start
main
start
main
start
main
start
get
All
Images
main
start
main
start
get
Hour
set
Hour
is
Hour
Hand
Visible
set
Hour
Hand
Visible
is
Minute
Hand
Visible
set
Minute
Hand
Visible
is
Second
Hand
Visible
set
Second
Hand
Visible
get
Minute
set
Minute
get
Second
set
Second
set
Current
Time
paint
Clock
set
Animation
stop
play
set
Width
set
Height
main
start
main
start
main
start
main
start
draw
set
Angles
is
On
Circumference
main
start
main
start
draw
set
Angles
main
start
main
start
main
start
is
In
Circle
main
start
main
start
draw
set
Animation
create
Ball
is
There
A
Space
main
start
start
resize
start
handle
handle
handle
handle
start
start
start
start
handle
handle
start
enlarge
shrink
get
Points
start
start
calculate
Loan
Payment
start
start
start
start
handle
enlarge
shrink
start
play
pause
increase
Speed
decrease
Speed
rate
Property
move
Ball
main
invalidated
start
start
start
main
start
generate
New
Random
Values
main
start
get4Random
Images
get
All
Images
main
start
reverse
move
set
Start
Angle
set
Values
set
W
set
H
main
start
main
start
main
start
main
start
main
start
draw
Path
draw
Path
hit
The
Border
main
start
draw
get
Vertical
Step
get
Horizontal
Step
main
start
draw
pause
play
increase
Speed
decrease
Speed
draw
Path
draw
Path
hit
The
Border
main
start
draw
get
Vertical
Step
get
Horizontal
Step
main
start
main
start
draw
play
pause
increase
Speed
decrease
Speed
main
start
update
Rectangle
add
Circle
remove
Circle
get
Max
X
get
Max
Y
get
Min
X
get
Min
Y
main
start
main
start
main
start
main
get
Path
Status
hit
The
Border
main
pos
pos
main
C
main
count
count
main
search
For
main
main
fib
main
dec2Hex
get
Hex
Value
start
draw
get
Index
get
Row
set
Row
get
Column
set
Column
get
Center
X
set
Center
X
get
Center
Y
set
Center
Y
valid
solve
clone
get
Solutions
main
odd
even
main
access
accessed
All
valid
Index
start
draw
draw
create
Triangle
get
Distance
main
dec2Bin
main
print
All
Permutations
create
Array
start
get
Instance
paint
draw
set
Order
start
paint
display
Circle
get
Order
set
Order
main
display
Permutation
display
Permutation
get
Instance
paint
draw
set
Order
start
main
reverse
Display
main
compute
Zero
Of
F
get
Y
main
Max
draw
get
Index
get
Row
set
Row
get
Column
set
Column
get
Center
X
set
Center
X
get
Center
Y
set
Center
Y
start
valid
solve
clone
get
Solutions
is
Palindrome
main
is
Palindrome
is
Palindrome
main
main
move
Disks
main
factorial
main
get
Size
main
fib
factorial
factorial
recursive
Binary
Search
recursive
Binary
Search
sort
sort
start
set
Order
paint
display
Triangles
paint
display
Triangles
get
Order
set
Order
start
increment
decrement
main
is
Anagrams
main
bin2Dec
main
get
Size
main
move
Disks
main
reverse
Display
main
calculate
Fibonacci
main
count
start
get
Instance
paint
draw
set
Order
main
print
Structure
start
solve
n
Queens
place
Queen
valid
clone
draw
main
dec2b
get
Fraction
Part
main
replace
replace
In
File
main
main
find
Kth
Smallest
Value
main
C
start
draw
modify
Cell
check
Path
clear
clear
main
random
Fill
Sorted
Array
sort
draw
draw
move
start
start
paint
display
Triangles
get
Order
set
Order
start
start
start
start
start
get
Country
set
Country
get
Capital
set
Capital
get
Population
set
Population
is
Democratic
set
Democratic
start
start
start
start
start
start
start
start
main
start
start
start
start
start
get
Country
set
Country
get
Capital
set
Capital
get
Population
set
Population
is
Democratic
set
Democratic
start
handle
Button
Action
initialize
start
main
start
get
Country
set
Country
get
Capital
set
Capital
get
Population
set
Population
is
Democratic
set
Democratic
start
add
Button
Action
subtract
Button
Action
multiply
Button
Action
divide
Button
Action
get
Result
start
perform
start
start
start
start
start
start
perform
start
start
start
start
start
start
start
start
translate
get
All
Images
get
Card
Number
select
Random
Images
check
Solution
evaluate
Expression
process
An
Operator
insert
Blanks
find
Solution
shuffle
get
Solution
translate
add
Solutions
add
Permutation
evaluate
start
add
subtract
play
pause
rate
Property
move
Ball
touch
start
get
All
Images
get
Card
Number
select
Random
Images
check
Solution
evaluate
Expression
process
An
Operator
insert
Blanks
find
Solution
shuffle
get
Solution
translate
add
Solutions
add
Permutation
evaluate
main
start
update
View
shuffle
reverse
main
move
Disks
main
evaluate
main
get
Width
set
Width
getheight
setheight
get
Area
get
Perimeter
to
String
get
Radius
set
Radius
get
Area
get
Diameter
get
Perimeter
to
String
compare
get
Color
set
Color
is
Filled
set
Filled
get
Date
Created
to
String
get
Area
get
Perimeter
main
selection
Sort
main
remove
Consecutive
Integers
reverse
main
move
Disks
main
main
main
evaluate
main
main
main
max
main
main
main
main
start
add
subtract
play
pause
increase
Speed
decrease
Speed
rate
Property
move
Ball
main
main
compare
main
evaluate
Expression
process
An
Operator
insert
Blanks
main
compare
get
Width
set
Width
getheight
setheight
get
Area
get
Perimeter
to
String
main
selection
Sort
get
Radius
set
Radius
get
Area
get
Diameter
get
Perimeter
to
String
compare
get
Color
set
Color
is
Filled
set
Filled
get
Date
Created
to
String
get
Area
get
Perimeter
main
display
main
main
evaluate
Equal
Precedence
main
get
Size
start
add
subtract
play
pause
rate
Property
move
Ball
compare
draw
next
start
check
create
Asterisks
main
main
shuffle
start
get
Solution
translate
add
Solutions
add
Permutation
evaluate
compare
to
String
main
main
main
get
Code
assign
Code
get
Huffman
Tree
get
Character
Frequency
compare
To
add
remove
get
Size
search
insert
delete
get
Size
inorder
postorder
preorder
is
Empty
contains
add
remove
size
contains
All
add
All
remove
All
retain
All
to
Array
to
Array
main
search
insert
create
New
Node
inorder
inorder
postorder
postorder
preorder
preorder
get
Size
get
Root
path
delete
iterator
inorder
inorder
has
Next
next
remove
clear
breadth
First
Traversal
breadth
First
Traversal
height
height
is
Perfect
BST
inorder
Without
Recursion
preorder
Without
Recursion
postorder
Without
Recursion
main
search
insert
delete
get
Size
inorder
postorder
preorder
is
Empty
contains
add
remove
size
contains
All
add
All
remove
All
retain
All
to
Array
to
Array
search
insert
create
New
Node
inorder
inorder
postorder
postorder
preorder
preorder
get
Size
get
Root
path
delete
iterator
inorder
inorder
has
Next
next
remove
clear
get
Node
is
Leaf
get
Path
search
insert
delete
get
Size
inorder
postorder
preorder
is
Empty
contains
add
remove
size
contains
All
add
All
remove
All
retain
All
to
Array
to
Array
search
insert
create
New
Node
inorder
inorder
postorder
postorder
preorder
preorder
get
Size
get
Root
path
delete
iterator
inorder
inorder
has
Next
next
remove
clear
breadth
First
Traversal
breadth
First
Traversal
height
height
is
Perfect
BST
main
search
insert
delete
get
Size
inorder
postorder
preorder
is
Empty
contains
add
remove
size
contains
All
add
All
remove
All
retain
All
to
Array
to
Array
main
search
insert
create
New
Node
inorder
inorder
postorder
postorder
preorder
preorder
get
Size
get
Root
path
delete
iterator
inorder
inorder
has
Next
next
remove
clear
search
insert
delete
get
Size
inorder
postorder
preorder
is
Empty
contains
add
remove
size
contains
All
add
All
remove
All
retain
All
to
Array
to
Array
main
search
insert
create
New
Node
inorder
inorder
postorder
postorder
preorder
preorder
get
Size
get
Root
path
delete
iterator
inorder
inorder
has
Next
next
remove
clear
breadth
First
Traversal
breadth
First
Traversal
height
height
is
Perfect
BST
inorder
Without
Recursion
preorder
Without
Recursion
postorder
Without
Recursion
get
Number
Of
Leaves
is
Leaf
get
Number
Of
Non
Leaves
bidirectional
Iterator
inorder
inorder
has
Next
next
has
Previous
previous
next
Index
previous
Index
remove
set
add
get
Elements
equals
clone
preorder
Iterator
preorder
has
Next
next
inorder
Iterator
search
insert
delete
get
Size
inorder
postorder
preorder
is
Empty
contains
add
remove
size
contains
All
add
All
remove
All
retain
All
to
Array
to
Array
main
search
insert
create
New
Node
inorder
inorder
postorder
postorder
preorder
preorder
get
Size
get
Root
path
delete
iterator
inorder
inorder
has
Next
next
remove
clear
breadth
First
Traversal
breadth
First
Traversal
height
height
is
Perfect
BST
inorder
Without
Recursion
preorder
Without
Recursion
postorder
Without
Recursion
get
Number
Of
Leaves
is
Leaf
get
Number
Of
Non
Leaves
bidirectional
Iterator
inorder
inorder
has
Next
next
has
Previous
previous
next
Index
previous
Index
remove
set
add
get
Elements
equals
clone
preorder
Iterator
preorder
has
Next
next
inorder
Iterator
search
insert
delete
get
Size
inorder
postorder
preorder
is
Empty
contains
add
remove
size
contains
All
add
All
remove
All
retain
All
to
Array
to
Array
main
search
insert
create
New
Node
inorder
inorder
postorder
postorder
preorder
preorder
get
Size
get
Root
path
delete
iterator
inorder
inorder
has
Next
next
remove
clear
breadth
First
Traversal
breadth
First
Traversal
height
height
is
Perfect
BST
inorder
Without
Recursion
preorder
Without
Recursion
postorder
Without
Recursion
get
Number
Of
Leaves
is
Leaf
get
Number
Of
Non
Leaves
bidirectional
Iterator
inorder
inorder
has
Next
next
has
Previous
previous
next
Index
previous
Index
remove
set
add
start
search
insert
delete
get
Size
inorder
postorder
preorder
is
Empty
contains
add
remove
size
contains
All
add
All
remove
All
retain
All
to
Array
to
Array
set
Status
display
Tree
display
Tree
search
insert
create
New
Node
inorder
inorder
postorder
postorder
preorder
preorder
get
Size
get
Root
path
delete
iterator
inorder
inorder
has
Next
next
remove
clear
breadth
First
Traversal
breadth
First
Traversal
height
height
is
Perfect
BST
inorder
Without
Recursion
preorder
Without
Recursion
postorder
Without
Recursion
get
Number
Of
Leaves
is
Leaf
get
Number
Of
Non
Leaves
bidirectional
Iterator
inorder
inorder
has
Next
next
has
Previous
previous
next
Index
previous
Index
remove
set
add
get
Elements
equals
clone
preorder
Iterator
preorder
has
Next
next
inorder
Iterator
inorder
List
preorder
List
postorder
List
main
main
add
remove
get
Size
main
get
Code
assign
Code
get
Huffman
Tree
get
Character
Frequency
compare
To
search
insert
delete
get
Size
inorder
postorder
preorder
is
Empty
contains
add
remove
size
contains
All
add
All
remove
All
retain
All
to
Array
to
Array
start
main
print
Tree
set
Status
display
Tree
display
Tree
search
insert
create
New
Node
inorder
inorder
postorder
postorder
preorder
preorder
get
Size
get
Root
path
delete
iterator
inorder
inorder
has
Next
next
remove
clear
main
dec2Bin
main
compare
To
get
Code
decode
search
insert
delete
get
Size
inorder
postorder
preorder
is
Empty
contains
add
remove
size
contains
All
add
All
remove
All
retain
All
to
Array
to
Array
main
search
insert
create
New
Node
inorder
inorder
postorder
postorder
preorder
preorder
get
Size
get
Root
path
delete
iterator
inorder
inorder
has
Next
next
remove
clear
breadth
First
Traversal
breadth
First
Traversal
height
height
add
remove
get
Size
write
Binary
bin2Dec
compare
To
get
Code
decode
main
get
Encoded
assign
Code
get
Huffman
Tree
get
Character
Frequency
main
search
insert
delete
get
Size
inorder
postorder
preorder
is
Empty
contains
add
remove
size
contains
All
add
All
remove
All
retain
All
to
Array
to
Array
main
search
insert
create
New
Node
inorder
inorder
postorder
postorder
preorder
preorder
get
Size
get
Root
path
delete
iterator
inorder
inorder
has
Next
next
remove
clear
breadth
First
Traversal
breadth
First
Traversal
height
height
is
Perfect
BST
inorder
Without
Recursion
preorder
Without
Recursion
postorder
Without
Recursion
get
Number
Of
Leaves
is
Leaf
get
Number
Of
Non
Leaves
bidirectional
Iterator
inorder
inorder
has
Next
next
has
Previous
previous
next
Index
previous
Index
remove
set
add
get
Elements
equals
clone
search
insert
delete
get
Size
inorder
postorder
preorder
is
Empty
contains
add
remove
size
contains
All
add
All
remove
All
retain
All
to
Array
to
Array
main
search
insert
create
New
Node
inorder
inorder
postorder
postorder
preorder
preorder
get
Size
get
Root
path
delete
iterator
inorder
inorder
has
Next
next
remove
clear
breadth
First
Traversal
breadth
First
Traversal
height
height
is
Perfect
BST
inorder
Without
Recursion
preorder
Without
Recursion
postorder
Without
Recursion
get
Number
Of
Leaves
is
Leaf
get
Number
Of
Non
Leaves
search
insert
delete
get
Size
inorder
postorder
preorder
is
Empty
contains
add
remove
size
contains
All
add
All
remove
All
retain
All
to
Array
to
Array
main
search
insert
create
New
Node
inorder
inorder
postorder
postorder
preorder
preorder
get
Size
get
Root
path
delete
iterator
inorder
inorder
has
Next
next
remove
clear
breadth
First
Traversal
breadth
First
Traversal
height
height
is
Perfect
BST
inorder
Without
Recursion
preorder
Without
Recursion
postorder
Without
Recursion
get
Number
Of
Leaves
is
Leaf
get
Number
Of
Non
Leaves
bidirectional
Iterator
inorder
inorder
has
Next
next
has
Previous
previous
next
Index
previous
Index
remove
set
add
get
Elements
equals
clone
preorder
Iterator
preorder
has
Next
next
main
search
insert
delete
get
Size
inorder
postorder
preorder
is
Empty
contains
add
remove
size
contains
All
add
All
remove
All
retain
All
to
Array
to
Array
search
insert
create
New
Node
inorder
inorder
postorder
postorder
preorder
preorder
get
Size
get
Root
path
delete
iterator
inorder
inorder
has
Next
next
remove
clear
breadth
First
Traversal
breadth
First
Traversal
height
height
is
Perfect
BST
inorder
Without
Recursion
start
get
Encoded
get
Huffman
Tree
get
Character
Frequency
add
remove
get
Size
compare
To
get
Code
decode
display
Tree
display
Tree
main
search
insert
delete
get
Size
inorder
postorder
preorder
is
Empty
contains
add
remove
size
contains
All
add
All
remove
All
retain
All
to
Array
to
Array
search
insert
create
New
Node
inorder
inorder
postorder
postorder
preorder
preorder
get
Size
get
Root
path
delete
iterator
inorder
inorder
has
Next
next
remove
clear
breadth
First
Traversal
breadth
First
Traversal
height
height
is
Perfect
BST
inorder
Without
Recursion
preorder
Without
Recursion
main
search
insert
delete
get
Size
inorder
postorder
preorder
is
Empty
contains
add
remove
size
contains
All
add
All
remove
All
retain
All
to
Array
to
Array
search
insert
create
New
Node
inorder
inorder
postorder
postorder
preorder
preorder
get
Size
get
Root
path
delete
iterator
inorder
inorder
has
Next
next
remove
clear
breadth
First
Traversal
breadth
First
Traversal
height
height
is
Perfect
BST
inorder
Without
Recursion
preorder
Without
Recursion
postorder
Without
Recursion
get
Number
Of
Leaves
is
Leaf
start
main
start
start
draw
valid
Move
check
add
Solution
mark
Solution
start
main
start
start
start
start
start
set
Display
get
Description
set
Title
set
Image
View
set
Description
start
re
Paint
paint
get
Max
Index
get
Min
Index
shrink
start
analyze
get
All
Lines
start
modify
Time
start
draw
pause
play
increase
Speed
set
Speed
decrease
Speed
start
start
intersects
start
adjust
Table
get
Rows
start
get
Pane
main
start
start
get
Pane
main
start
start
start
start
is
Full
is
Won
get
Token
set
Token
handle
Mouse
Click
start
set
Display
start
set
Title
set
Image
View
set
Description
get
Pane
main
get
Pane
start
start
reverse
move
set
Start
Angle
set
Values
set
W
set
H
start
get
Fan
stop
All
start
All
main
start
draw
get
Image
restore
start
start
get
Slide
reverse
move
set
Start
Angle
set
Values
set
W
set
H
start
start
get
Rectangle
Settings
set
Default
intersects
get
Hour
set
Hour
get
Minute
set
Minute
get
Second
set
Second
set
Current
Time
paint
Clock
set
Width
set
Height
main
start
set
Time
start
get
All
Lines
start
leap
Check
draw
next
Month
previous
Month
main
start
draw
check
check
Rows
check
Columns
check
Left
Diagonals
check
Right
Diagonals
clear
Cells
is
Draw
is
Occupied
set
Occupied
get
Column
get
Row
equal
get
Difference
get
Index
get
Player
start
start
main
start
start
main
start
search
get
Grade
get
Name
get
Count
increase
Count
initialize
Jdbc
store
Student
initialize
Jdbc
get
Tables
get
Connection
set
Username
get
Username
set
Password
get
Password
set
Driver
get
Driver
set
Url
get
Url
get
Count
increase
Count
initialize
Jdbc
get
Number
set
Number
get
Factorial
get
All
Locale
get
All
Time
Zone
get
Locale
Index
get
Time
Zone
Index
set
Locale
Index
set
Time
Zone
Index
current
Time
String
get
Number
set
Number
get
Factorial
format
create
Connection
insert
update
view
get
Number
set
Number
get
Factorial
update
Password
shuffle
compute
Tax
get
Income
get
Tax
get
Filling
Status
get
Grade
get
Name
main
add
Student
get
Students
get
Number
Of
Students
Course
Name
get
Course
Name
drop
Student
main
main
get
Area
get
Office
set
Office
get
Salary
set
Salary
get
Date
Hired
set
Date
Hired
to
String
get
Name
get
Address
get
Phone
Number
get
Email
set
Name
set
Address
set
Phone
Number
set
Email
to
String
set
Date
get
Year
get
Month
get
Day
to
String
get
Office
Hours
set
Office
Hours
get
Rank
set
Rank
to
String
get
Title
set
Title
to
String
main
main
union
main
sort
main
sum
get
Id
set
Id
get
Balance
set
Balance
get
Annual
Interest
Rate
set
Annual
Interest
Rate
get
DATE
CREATED
get
Monthly
Interest
Rate
get
Monthly
Interest
withdraw
deposit
to
String
main
to
String
main
remove
Duplicate
main
m
to
String
to
String
get
Width
set
Width
get
Height
set
Height
get
Area
get
Perimeter
main
is
Empty
get
Size
peek
pop
push
to
String
get
Radius
set
Radius
get
Area
get
Diameter
get
Perimeter
print
Circle
main
display
Object
main
main
display
Object
main
get
Color
set
Color
is
Filled
set
Filled
get
Date
Created
to
String
start
Filling
get
Weights
main
get
Area
get
Perimeter
to
String
get
Side1
get
Side2
get
Side3
main
get
Color
set
Color
is
Filled
set
Filled
get
Date
Created
to
String
get
Area
get
Perimeter
main
to
Character
Array
main
fill
find
Row
Column
main
shuffle
peek
pop
push
reverse
to
String
main
main
get
Id
set
Id
get
Balance
set
Balance
get
Annual
Interest
Rate
set
Annual
Interest
Rate
get
DATE
CREATED
get
Monthly
Interest
Rate
get
Monthly
Interest
withdraw
deposit
to
String
to
String
withdraw
to
String
main
get
All
Factors
count
Occurrence
main
max
main
to
String
to
String
start
start
main
start
main
get
Hour
set
Hour
get
Minute
set
Minute
get
Second
set
Second
set
Current
Time
paint
Clock
set
Width
set
Height
start
set
Available
Locales
set
Available
Time
Zones
start
set
Time
Zone
set
Locale
set
Current
Time
initialize
Combo
Box
start
compute
Loan
update
Strings
initialize
Combo
Box
start
compute
Loan
start
set
Available
Locales
show
Day
Names
show
Header
show
Days
update
Calendar
get
Month
set
Month
get
Year
set
Year
set
Locale
start
start
update
UI
set
Available
Locales
show
Day
Names
show
Header
show
Days
update
Calendar
get
Month
set
Month
get
Year
set
Year
set
Locale
main
start
get
Hour
set
Hour
get
Minute
set
Minute
get
Second
set
Second
set
Current
Time
paint
Clock
set
Width
set
Height
start
show
Day
Names
show
Header
show
Days
update
Calendar
get
Month
set
Month
get
Year
set
Year
set
Locale
start
start
start
connect
To
DB
execute
SQL
process
SQL
Select
process
SQL
Non
Select
first
next
prior
last
insert
delete
update
start
main
cursor
Moved
row
Changed
row
Set
Changed
start
show
File
copy
File
insert
Rows
start
connect
To
DB
execute
SQL
process
SQL
Select
process
SQL
Non
Select
main
main
display
Result
Set
main
display
Row
Set
start
connect
DB
store
Data
To
Table
fill
Data
In
Combo
Box
retrieve
Flag
Info
main
get
Connection
draw
draw
Testing
start
start
show
Content
start
show
Content
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
sort
main
add
Matrix
main
main
linear
Equation
main
average
Major
Diagonal
main
generate01Matrix
check
Rows
Even1s
check
Columns
Even1s
main
get
Triangle
Area
main
check
Rows
check
Columns
check
Diagonals
check
Major
Diagonal
main
is
Valid
read
A
Solution
check
Blocks
check
Block
check
Row
check
Col
check
Seq
main
sort
Columns
main
get
Central
City
get
Total
Distances
get
Distance
main
get
Binary
reverse
main
set
Default
check
Rows
check
Columns
check
Diagonals
display
is
Draw
main
is
Markov
Matrix
main
compute
Tax
main
find
Nearest
print
Same
get
Distance
main
main
get
Area
get
Triangle
Area
main
distance
main
main
read
A
Solution
is
Valid
is
Valid
main
get
Array
sum
main
main
check
Rows
check
Columns
check
Diagonals
main
sum
Row
main
get
Flipped
Row
get
Flipped
Column
main
equals
main
shuffle
main
check
Status
check
Draw
check
Equal
check
Input
draw
Board
insert
main
find
Nearest
get
Distance
main
get
Largest
Column
get
Largest
Row
main
find
Largest
Block
check
main
equals
is
In
main
get
Left
Most
Lowest
Point
get
Right
Most
Lowest
Point
main
bubble
Sort
main
get
Intersecting
Point
main
check
Unsafe
main
bubble
Sort
main
sort
Rows
main
multiply
Matrix
main
main
is
Latin
Square
occurs
Once
create
Range
check
In
Range
main
binary
Search
linear
Search
main
main
eliminate
Duplicates
is
In
main
main
main
count
Vowels
main
partition
main
lcm
get
Max
main
shuffle
Cards
pick
Cards
pick
Cards
is
One
OF
Each
Suit
print
main
is
Sorted
Constant
Interval
main
normalize
max
main
deviation
mean
main
bubble
Sort
main
solve
Quadratic
main
reverse
main
average
average
main
get
Random
main
main
main
main
print
Max
binary
Search
linear
Search
selection
Sort
main
swap
swap
First
Two
In
Array
main
main
create
Array
display
Array
count
Letters
display
Counts
main
is
Sorted
main
get
Char
main
main
print
Permutations
main
sort
main
max
main
generate
Numbers
main
index
Of
Largest
Element
main
check
create
Asterisks
start
main
dice
Permutations
main
sort
main
main
merge
main
sort
Two
Lists
main
main
main
sieve
Of
Eratosthenes
main
create
Machine
main
check
Diagonal
check
Row
check
Column
main
sequential
Add
Matrix
parallel
Add
Matrix
compute
reverse
move
set
Start
Angle
set
Values
set
W
set
H
start
main
parallel
Sum
compute
start
draw
pause
play
increase
Speed
decrease
Speed
start
search
find
Position
is
Valid
main
parallel
Quick
Sort
sequential
Quick
Sort
sequential
Quick
Sort
compute
partition
start
add
subtract
play
pause
rate
Property
move
Ball
touch
main
increment
decrement
start
get
Board
solve
is
Valid
solve
get
Grid
get
Free
Cell
List
is
Valid
assign
Value
set
Value
main
parallel
Assign
Values
compute
sequential
Assign
Values
main
run
run
get
Balance
withdraw
deposit
main
parallel
Merge
Sort
compute
merge
main
start
run
run
main
run
run
main
run
get
Balance
deposit
main
max
compute
main
parallel
Merge
Sort
compute
main
run
run
main
run
run
get
Balance
withdraw
deposit
get
Balance
deposit
main
run
get
Balance
deposit
main
run
run
write
read
start
selection
Sort
insertion
Sort
bubble
Sort
run
assign
shuffle
display
start
run
run
main
parallel
Search
compute
is
Valid
main
get
Hour
set
Hour
is
Hour
Hand
Visible
set
Hour
Hand
Visible
is
Minute
Hand
Visible
set
Minute
Hand
Visible
is
Second
Hand
Visible
set
Second
Hand
Visible
get
Minute
set
Minute
get
Second
set
Second
set
Current
Time
paint
Clock
set
Animation
stop
play
set
Width
set
Height
start
main
start
main
sequential
Multiply
Matrix
parallel
Multiply
Matrix
compute
main
add1With
Synchronization
add1Without
Synchronization
start
play
pause
increase
Speed
decrease
Speed
rate
Property
move
Ball
main
day
String
main
main
main
main
main
main
main
get
Card
Name
get
Suit
main
main
main
is
Leap
day
Per
Month
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
coin
Format
main
main
main
main
main
main
main
judge
converter
main
main
main
main
main
number
Of
Days
In
A
Year
main
display
Sorted
Numbers
main
compute
Tax
main
main
sum
Digits
main
square
Root
main
main
m
main
time
date
main
is
Prime
get
Palindrome
main
get
Number
main
compute
Commission
main
get
Random
Character
get
Random
Lower
Case
Letter
get
Random
Upper
Case
Letter
get
Random
Digit
Character
get
Random
Character
main
count
Letters
main
convert
Millis
main
get
Comparison
left
Of
The
Line
on
The
Same
Line
on
The
Line
Segment
main
print
Numbers
main
mile
To
Kilometer
kilometer
To
Mile
main
print
Table
main
time
date
get
Month
Name
main
print
Month
print
Month
Title
get
Month
Name
print
Month
Body
get
Start
Day
get
Total
Number
Of
Days
get
Number
Of
Days
In
Month
is
Leap
Year
main
main
increment
main
max
get
Random
Character
get
Random
Lower
Case
Letter
get
Random
Upper
Case
Letter
get
Random
Digit
Character
get
Random
Character
main
print
Prime
Numbers
is
Prime
main
get
Grade
main
swap
main
hex
To
Decimal
hex
Char
To
Decimal
main
gcd
main
max
max
max
main
print
Grade
main
is
Valid
area
main
get
Pentagonal
Number
main
count
main
is
Prime
main
check
Password
main
pound
To
Kilogram
kilogram
To
Pound
main
future
Investment
Value
main
is
Prime
main
area
main
is
Prime
main
is
Valid
Month
print
Calendar
Header
print
First
Day
print
Calendar
Itself
day
Of
Week
is
Leap
Year
last
Day
Of
Month
main
reverse
is
Palindrome
main
is
Valid
sum
Of
Double
Even
Place
get
Digit
sum
Of
Odd
Place
prefix
Matched
get
Size
get
Prefix
main
print
Matrix
main
reverse
main
is
Prime
is
Palindrome
main
display
Pattern
main
format
main
area
main
start
main
start
main
start
main
start
main
start
draw
main
start
main
start
get
Hour
set
Hour
get
Minute
set
Minute
get
Second
set
Second
set
Current
Time
paint
Clock
set
Width
set
Height
main
start
main
start
draw
main
start
main
start
draw
Arrow
Line
main
start
main
start
main
start
main
start
main
start
main
start
start
paint
set
Width
set
Height
get
Hour
set
Hour
get
Minute
set
Minute
get
Second
set
Second
set
Current
Time
paint
Clock
set
Width
set
Height
start
start
start
start
start
start
start
main
start
start
start
start
main
start
get
H
Box
get
V
Box
start
start
start
start
paint
set
Width
set
Height
start
start
main
start
main
start
main
start
draw
get
Status
set
X
set
Y
get
X
get
Y
set
Width
set
Height
get
Height
get
Width
get
Area
get
Perimeter
contains
contains
overlaps
get
Distance
get
Hour
set
Hour
is
Hour
Hand
Visible
set
Hour
Hand
Visible
is
Minute
Hand
Visible
set
Minute
Hand
Visible
is
Second
Hand
Visible
set
Second
Hand
Visible
get
Minute
set
Minute
get
Second
set
Second
set
Current
Time
paint
Clock
set
Width
set
Height
main
start
main
start
reflect
Across
Y
Axis
main
start
main
start
main
start
main
start
draw
main
start
main
start
main
start
get
Hour
set
Hour
get
Minute
set
Minute
get
Second
set
Second
set
Current
Time
paint
Clock
set
Width
set
Height
main
start
main
start
start
start
get
Interest
Rate
get
Years
get
Amount
start
start
main
main
get
Primes
start
run
start
run
send
Move
is
Full
is
Won
start
handle
main
main
start
connect
To
Server
wait
For
Player
Action
send
Move
receive
Info
From
Server
receive
Move
get
Token
set
Token
repaint
handle
Mouse
Click
get
Name
get
Street
get
City
get
State
get
Zip
start
start
start
start
start
start
main
main
get
Primes
start
run
start
start
start
run
start
run
increment
start
main
get
All
Students
add
run
start
get
Name
get
Street
get
City
get
State
get
Zip
main
count
Letters
display
main
main
decrypt
main
main
encrypt
write
Bit
write
Bit
close
start
get
UI
save
Changes
read
File
get
Decimal
get
Bits
start
get
UI
main
create
Backup
get
Values
start
get
UI
save
Changes
read
File
get
Bits
right
Pad
write
Bit
write
Bit
close
main
main
main
increase
Counter
get
Value
start
get
UI
get
Arguments
main
main
main
main
main
main
main
main
main
main
print
Hex
main
main
print
Bits
get
Bits
get
All
Rows
update
DB
clear
add
delete
update
start
get
UI
equals
get
ID
get
Name
set
Name
get
Street
set
Street
get
City
set
City
get
State
set
State
get
Zip
set
Zip
main
get
Annual
Interest
Rate
set
Annual
Interest
Rate
get
Number
Of
Years
set
Number
Of
Years
get
Loan
Amount
set
Loan
Amount
get
Monthly
Payment
get
Total
Payment
get
Loan
Date
main
create
Backup
get
Values
main
main
main
write
Bit
write
Bit
close
main
main
main
get
Annual
Interest
Rate
set
Annual
Interest
Rate
get
Number
Of
Years
set
Number
Of
Years
get
Loan
Amount
set
Loan
Amount
get
Monthly
Payment
get
Total
Payment
get
Loan
Date
show
Content
start
start
main
main
main
main
start
initialize
DB
show
Grade
main
main
main
start
initialize
DB
show
Grade
view
insert
update
clear
start
main
main
main
start
draw
start
show
Grades
start
show
Content
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
main
start
get
Histogram
get
Array
main
fill
sort
print
start
get
Non
Crossed
Polygon
get
Right
Most
Lowest
Point
get
Angle
is
Left
get
Side
set
Right
Most
Lowest
Point
compare
To
main
f
main
solve
is
Valid
print
sieve
Of
Eratosthenes
main
test
Listing5
test
Listing6
test
Listing7
efficient
Prime
Numbers
prime
Numbers
main
min
min
main
pack
find
Best
Fit
start
get
Board
solve
is
Valid
solve
clone
get
Grid
get
Free
Cell
List
is
Valid
assign
Value
set
Value
main
get
Convex
Hull
get
Right
Most
Lowest
Point
get
Angle
is
Left
get
Side
set
Right
Most
Lowest
Point
compare
To
to
String
main
get
Free
Cell
List
search
is
Valid
grid
To
String
read
A
Puzzle
is
Valid
start
get
Board
solve
display
Solution
is
Valid
solve
clone
get
Grid
get
Free
Cell
List
is
Valid
assign
Value
set
Value
main
get
Numbers
main
add
All
Primes
get
Last
write
get
Primes
main
write
All
Primes
start
get
Convex
Hull
get
Right
Most
Lowest
Point
get
Angle
is
Left
get
Side
set
Right
Most
Lowest
Point
compare
To
main
gcd
main
gcd
main
main
fib
main
start
search
find
Position
is
Valid
main
main
main
get
Time
start
find
Solution
color
get
Matrix
Pane
get
Matrix
find
Largest
Block
main
print
Squares
print
Cubes
start
solve
n
Queens
place
Queen
valid
clone
draw
get
Solution
GUI
start
get
Histogram
get
Array
main
get
Convex
Hull
get
Right
Most
Lowest
Point
to
The
Right
get
Distance
to
String
main
distance
distance
distance
get
Closest
Pair
get
Closest
Pair
main
get
Number
Of
Primes
main
get
Index
get
Distance
to
String
start
to
Array
distance
distance
get
Closest
Pair
get
Closest
Pair
main
exp
factorial
main
pack
gcd
main
test
GCD
test
GCD
Euclid
gcd
fib
clear
contains
Key
contains
Value
entry
Set
get
is
Empty
key
Set
put
remove
size
values
get
Key
get
Value
to
String
clear
contains
Key
contains
Value
entry
Set
get
is
Empty
key
Set
put
remove
size
values
hash
supplemental
Hash
trim
To
Power
Of2
remove
Entries
rehash
to
String
size
is
Empty
contains
iterator
has
Next
next
to
Array
to
Array
add
remove
contains
All
add
All
remove
All
retain
All
clear
to
String
main
main
search
insert
delete
get
Size
inorder
postorder
preorder
is
Empty
contains
add
remove
size
contains
All
add
All
remove
All
retain
All
to
Array
to
Array
clear
contains
add
remove
is
Empty
size
iterator
has
Next
next
remove
hash
supplemental
Hash
trim
To
Power
Of2
remove
Elements
rehash
set
To
List
to
String
add
All
contains
All
remove
All
retain
All
to
Array
to
Array
create
New
Node
insert
update
Height
balance
Path
balance
Factor
balance
LL
balance
LR
balance
RR
balance
RL
delete
search
insert
create
New
Node
inorder
inorder
postorder
postorder
preorder
preorder
get
Size
get
Root
path
delete
iterator
inorder
inorder
has
Next
next
remove
clear
clear
contains
Key
contains
Value
entry
Set
get
is
Empty
key
Set
put
remove
size
values
get
Key
get
Value
to
String
clear
contains
Key
contains
Value
entry
Set
get
is
Empty
key
Set
put
remove
size
values
to
String
main
get
X
get
Y
equals
hash
Code
main
main
clear
contains
add
remove
is
Empty
size
iterator
has
Next
next
remove
hash
supplemental
Hash
trim
To
Power
Of2
remove
Elements
rehash
set
To
List
to
String
add
All
contains
All
remove
All
retain
All
to
Array
to
Array
main
set
To
List
clear
contains
Key
contains
Value
entry
Set
get
is
Empty
key
Set
put
remove
size
values
get
Key
get
Value
to
String
clear
contains
Key
contains
Value
entry
Set
get
is
Empty
key
Set
put
remove
size
values
to
String
start
add
remove
remove
All
search
draw
main
equals
hash
Code
main
clear
contains
Key
contains
Value
entry
Set
get
is
Empty
key
Set
put
remove
size
values
get
Key
get
Value
to
String
main
clear
contains
Key
contains
Value
entry
Set
get
is
Empty
key
Set
put
remove
size
values
hash
supplemental
Hash
trim
To
Power
Of2
remove
Entries
rehash
to
String
clear
contains
add
remove
is
Empty
size
iterator
has
Next
next
remove
hash
supplemental
Hash
trim
To
Power
Of2
remove
Elements
rehash
set
To
List
to
String
add
All
contains
All
remove
All
retain
All
to
Array
to
Array
clear
contains
Key
contains
Value
entry
Set
get
is
Empty
key
Set
put
remove
size
values
get
Key
get
Value
to
String
clear
contains
Key
contains
Value
entry
Set
get
is
Empty
key
Set
put
remove
size
values
to
String
main
main
hash
Code
For
String
clear
contains
Key
contains
Value
entry
Set
get
is
Empty
key
Set
put
remove
size
values
get
Key
get
Value
to
String
clear
contains
Key
contains
Value
entry
Set
get
is
Empty
key
Set
put
remove
size
values
hash
supplemental
Hash
trim
To
Power
Of2
remove
Entries
rehash
to
String
start
add
remove
remove
All
search
draw
add
get
index
Of
last
Index
Of
remove
set
add
is
Empty
remove
contains
All
add
All
remove
All
retain
All
to
Array
to
Array
clear
contains
Key
contains
Value
entry
Set
get
is
Empty
key
Set
put
remove
size
values
get
Key
get
Value
to
String
clear
contains
Key
contains
Value
entry
Set
get
is
Empty
key
Set
put
remove
size
values
hash
supplemental
Hash
trim
To
Power
Of2
remove
Entries
rehash
to
String
add
ensure
Capacity
clear
contains
get
check
Index
index
Of
last
Index
Of
remove
set
to
String
trim
To
Size
iterator
has
Next
next
remove
size
main
main
clear
contains
Key
contains
Value
entry
Set
get
is
Empty
key
Set
put
remove
size
values
get
Key
get
Value
to
String
hash1
hash2
get
Prime
clear
contains
Key
contains
Value
entry
Set
get
is
Empty
key
Set
put
remove
size
values
to
String
main
clear
contains
Key
contains
Value
entry
Set
get
is
Empty
key
Set
put
remove
size
values
add
Value
get
Key
get
Values
to
String
clear
contains
Key
contains
Value
entry
Set
get
is
Empty
key
Set
put
remove
size
values
to
String
start
clear
contains
Key
contains
Value
entry
Set
get
is
Empty
key
Set
put
remove
size
values
get
Key
get
Value
to
String
clear
contains
Key
contains
Value
entry
Set
get
is
Empty
key
Set
put
remove
size
values
to
String
add
remove
remove
All
search
draw
