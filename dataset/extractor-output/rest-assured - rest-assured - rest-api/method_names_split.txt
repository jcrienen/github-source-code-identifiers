oauth1
url
encoded
oauth1
works
with
header
signing
oauth1
works
with
query
signing
oauth2
works
with
preemptive
header
signing
oauth2
works
with
non
preemptive
header
signing
map
Response
To
Object
Using
Jackson
map
Response
To
Object
Using
Jakarta
EE
Since
It
Is
Default
When
Found
In
Classpath
map
Response
To
Object
Using
Jackson
When
No
Content
Type
Is
Defined
content
Types
Ending
With
Plus
Json
Works
For
Json
Object
Mapping
when
No
Request
Content
Type
Is
Specified
Then
Rest
Assured
Serializes
To
JSON
when
Request
Content
Type
Is
Json
Then
Rest
Assured
Serializes
To
JSON
when
Request
Content
Type
Is
Xml
Then
Rest
Assured
Serializes
To
XML
Using
Default
Jakarta
EE
when
Request
Content
Type
Is
Xml
Then
Rest
Assured
Serializes
To
XML
Using
Explicit
Jaxb
when
Request
Content
Type
Is
Xml
And
Charset
Is
Us
Ascii
Then
Rest
Assured
Serializes
To
XML
Using
Default
Jakarta
EE
when
Request
Content
Type
Is
Xml
And
Charset
Is
Us
Ascii
Then
Rest
Assured
Serializes
To
XML
Using
Explicit
Jaxb
when
Request
Content
Type
Is
Json
And
Charset
Is
Us
Ascii
Then
Rest
Assured
Serializes
To
JSON
when
Request
Content
Type
Is
Xml
And
Charset
Is
Utf16Then
Rest
Assured
Serializes
To
XML
when
Request
Content
Type
Is
Xml
And
Default
Charset
Is
Utf16Then
Rest
Assured
Serializes
To
XML
when
Request
Content
Type
Is
Json
And
Charset
Is
Utf16Then
Rest
Assured
Serializes
To
JSON
map
Response
To
Object
Using
Jaxb
With
Jax
Object
Mapper
Defined
map
Response
To
Object
Using
Jackson1With
Jackson
Object
Mapper
Defined
map
Response
To
Object
Using
Jackson2With
Jackson
Object
Mapper
Defined
map
Response
To
Object
Using
Gson
With
Gson
Object
Mapper
Defined
serializes
Using
JAXB
When
JAXB
Object
Mapper
Is
Specified
serializes
Using
JAXB
When
JAXB
Object
Mapper
Is
Specified
For
Patch
Verb
serializes
Using
Gson
When
Gson
Object
Mapper
Is
Specified
serializes
Using
Jackson
When
Jackson
Object
Mapper
Is
Specified
serializes
Normal
Params
request
Specification
Allows
Specifying
Header
allows
Supplying
Mapping
Function
header
Exception
Can
Fail
When
Using
Mapping
Function
allows
Parsing
Multi
Value
Headers
order
Is
Maintained
For
Multi
Value
Headers
request
Specification
Allows
Specifying
Multi
Value
Headers
response
Specification
Allows
Parsing
Multi
Value
Headers
With
Values
Including
Equal
Character
request
Specification
Allows
Specifying
Headers
Object
request
Specification
Allows
Specifying
Multiple
Headers
In
Sequence
Which
Gets
Treated
As
Multi
Headers
request
Specification
Allows
Specifying
Headers
request
Specification
Allows
Specifying
Multiple
Headers
supports
Header
String
Matching
multiple
Header
Statements
Are
Concatenated
multiple
Headers
Short
Version
Using
Plain
Strings
multiple
Headers
Short
Version
Using
Hamcrest
Matching
multiple
Headers
Short
Version
Using
Mix
Of
Hamcrest
Matching
And
String
Matching
multiple
Headers
Using
Map
multiple
Headers
Using
Map
With
Hamcrest
Matcher
multiple
Headers
Using
Map
With
Mix
Of
String
And
Hamcrest
Matcher
when
Expected
Header
Doesnt
Match
An
Assertion
Then
Assertion
Error
Is
Thrown
when
Expected
Header
Is
Not
Found
Then
An
Assertion
Error
Is
Thrown
when
Multi
Value
Headers
Are
Presented
In
The
Response
Then
The
Last
Value
Has
Precedence
can
Use
Response
Aware
Matchers
For
Header
Validation
setting
Session
Id
Through
The
DSL
Config
setting
Session
Id
Through
The
DSL
setting
Session
Id
Through
The
DSL
Has
Precedence
Over
The
Config
setting
Session
Id
Through
The
DSL
Has
Precedence
Over
The
Static
Config
setting
Session
Id
Through
Static
Config
setting
Session
Id
Name
Through
The
DSL
Overrides
The
Session
Id
In
The
Default
Session
Config
setting
Session
Id
Name
Through
The
DSL
Works
setting
Session
Id
Statically
Works
setting
The
Session
Id
Twice
Overwrites
The
First
One
rest
Assured
Response
Supports
Getting
The
Session
Id
session
Id
Returns
Null
When
No
Cookies
Are
Defined
merges
request
params
by
default
merges
query
params
by
default
merges
form
params
by
default
replaces
request
params
when
configured
to
do
so
replaces
query
params
when
configured
to
do
so
replaces
form
params
when
configured
to
do
so
replaces
all
parameters
when
configured
to
do
so
merges
all
parameters
when
configured
to
do
so
follows
Redirects
By
Default
doesnt
Follow
Redirects
If
Explicitly
Specified
doesnt
Follow
Redirects
If
Specified
Statically
In
Redirect
Config
throws
Client
Protocol
Exception
If
Max
Number
Of
Redirect
Are
Exceeded
defining
Redirect
Config
In
The
DSL
Overrides
Settings
From
Default
Config
cookies
Are
Received
On
When
Server
Returns302
cookies
Are
Included
In
Redirects
When
Cookie
Policy
Is
Browser
Compatibility
request
Specification
Allows
Specifying
Cookie
body
Hamcrest
Matcher
Without
Key
patch
Supports
Binary
Body
patch
Supports
String
Body
patch
With
Form
Params
patch
With
Form
Param
patch
Supports
Multi
Value
Form
Parameters
can
Use
Map
As
Body
To
Patch
disable
tests
on
windows
response
time
can
be
extracted
response
time
can
be
be
converted
response
time
can
be
validated
with
implicit
time
unit
response
time
can
be
validated
with
explicit
time
unit
response
time
validation
can
fail
response
time
validation
can
be
specified
in
specification
response
time
validation
can
be
specified
in
specification
using
time
unit
response
time
validation
can
fail
when
specified
in
specification
can
use
response
time
validation
in
legacy
syntax
xml
Parameter
Support
xml
Parameter
Support
With
Another
Assertion
xml
With
Lists
post
With
X
Path
post
With
X
Path
Containing
Hamcrest
Matcher
post
With
Query
Params
post
With
Form
Param
And
Query
Params
post
With
Only
Query
Params
custom
Xml
Compatible
Content
Type
With
Body
custom
Xml
Compatible
Content
Type
With
Body
As
Input
Stream
request
Includes
Content
Type
When
Sending
Binary
Data
As
Xml
can
Download
Large
Files
can
Download
Large
Files
When
Logging
If
Validation
Fails
Is
Enabled
logging
With
Binary
Charset
Works
request
Specification
Allows
Specifying
Cookie
body
Hamcrest
Matcher
Without
Key
delete
Supports
String
Body
xml
Parameter
Support
xml
Has
Items
xml
Parameter
Support
With
Another
Assertion
children
Elements
children
Elements
Size
children
Elements
Is
Empty
xml
Nested
Elements2
xml
With
Content
Assertion
new
Syntax
With
X
Path
new
Syntax
With
X
Path
With
Contains
Matcher
xml
With
Content
Type
Text
XML
xml
With
Content
Type
HTML
html
Verification
html
Value
Verification
html
Child
Element
Size
html
Body
Size
supports
Parsing
Html
When
Content
Type
Ends
With
Plus
Html
can
Get
Specific
Entity
From
List
Html
Document
can
Get
Specific
Entity
From
List
Html
Document
Using
Get
At
rss
Verification
nested
Lists
Are
Converted
To
Java
Lists
supports
Parsing
Xml
Attributes
throws
IAE
On
Illegal
Xml
Expression
supports
Getting
All
Attributes
From
A
List
when
Returning
A
Non
Collection
And
Non
Array
Then
Size
Is
One
support
Body
Expectations
With
Minus
In
Root
Object
support
Body
Expectations
With
Minus
In
Child
Object
support
Body
Expectations
With
Underscore
In
Child
Object
xml
Child
List
Size
supports
Getting
Specific
Item
From
A
List
Array
Style
supports
Getting
Specific
Item
From
A
List
Non
Array
Style
supports
Finding
Elements
supports
Registering
Custom
Parser
For
A
Given
Mime
Type
supports
Registering
Custom
Parser
For
A
Given
Mime
Type
Per
Response
supports
Registering
Custom
Parser
For
A
Given
Mime
Type
Using
Response
Spec
supports
Parsing
Xml
When
Content
Type
Ends
With
Plus
Xml
throws
Nice
Error
Message
When
Illegal
Path
supports
Getting
Response
Body
As
String
When
Using
Body
Expectations
On
Root
when
Expecting
Content
Type
XML
Then
Text
Xml
Is
Allowed
As
Content
Type
when
Expecting
Content
Type
XML
Then
Custom
Xml
Is
Allowed
As
Content
Type
when
Expecting
Content
Type
XML
Then
Exception
Is
Thrown
If
Content
Type
Is
Json
request
method
accepts
enum
verb
request
method
accepts
enum
verb
and
unnamed
path
params
request
method
accepts
string
verb
request
method
accepts
string
verb
and
unnamed
path
params
static
request
method
accepts
string
verb
static
request
method
accepts
enum
verb
and
path
params
high
precedence
are
sorted
before
low
precedence
get
Order
filter
get
Order
filter
get
Order
filter
filters
are
sorted
in
insertion
order
when
all
filters
have
the
same
precedence
request
Specification
Allows
Specifying
Cookie
body
Hamcrest
Matcher
Without
Key
put
Supports
Binary
Body
put
Supports
String
Body
put
With
Form
Params
put
With
Form
Param
put
Supports
Multi
Value
Form
Parameters
simple
JSON
And
Hamcrest
Matcher
gpath
JSON
And
Hamcrest
Matcher
gpath
Assertion
With
Hamcrest
Matcher
And
JSON
Returns
Array
decimal
Number
Type
Mismatch
Is
Recognizable
integer
Number
Type
Mismatch
Is
Recognizable
parameter
Support
With
Standard
Hash
Map
param
Support
With
Standard
Hash
Map
query
Param
With
Boolean
Works
form
Param
Are
Treated
As
Query
Params
For
Get
Requests
parameter
Support
With
Map
Builder
multiple
Parameters
Are
Concatenated
multiple
Single
Parameters
Are
Concatenated
mixing
Single
And
Multiple
Parameters
Concatenates
Them
mixing
Single
And
Multiple
Params
Concatenates
Them
rest
Assured
Supports
Specifying
Request
Params
In
Get
rest
Assured
Supports
Printing
The
Response
rest
Assured
Supports
Pretty
Printing
The
Response
rest
Assured
Supports
Specifying
Request
Params
In
Get
When
Also
Specifying
Base
Uri
iae
Is
Thrown
When
No
Params
Specified
After
Get
Path
new
Syntax
new
Syntax
With
Parameters
new
Syntax
With
Wrong
Status
Code
new
Syntax
With
Correct
Status
Code
Using
Int
new
Syntax
With
Correct
Status
Code
Using
Hamcrest
Matcher
new
Syntax
With
Wrong
Status
Line
new
Syntax
With
Correct
Status
Line
Using
Hamcrest
Matcher
new
Syntax
With
Correct
Status
Line
Using
String
Matching
json
Hamcrest
Equal
Body
rest
Assured
Supports
Fully
Qualified
URI
multiple
Body
Hamcrest
Matchers
Short
Version
multiple
Body
Hamcrest
Matchers
Long
Version
multiple
Body
Json
String
Matchers
And
Hamcrest
Matchers
Short
Version
multiple
Body
Json
String
Matchers
And
Hamcrest
Matchers
Long
Version
multiple
Content
Hamcrest
Matchers
Short
Version
multiple
Content
Hamcrest
Matchers
Long
Version
multiple
Content
Json
String
Matchers
And
Hamcrest
Matchers
Short
Version
multiple
Content
Json
String
Matchers
And
Hamcrest
Matchers
Long
Version
has
Item
Hamcrest
Matching
Throws
Good
Error
Messages
When
Expected
Item
Not
Found
In
Array
specification
Syntax
content
Type
Specification
content
Type
Specification
With
Hamcrest
Matcher
request
Specification
Allows
Specifying
Cookie
supports
Validating
Cookies
With
No
Value
supports
Getting
List
Size
supports
Getting
List
Item
In
Array
Style
supports
Getting
List
Item
In
Non
Array
Style
supports
Getting
Single
Float
supports
Getting
Map
find
All
Books
With
Price
Greater
Than
Ten
get
Last
Element
In
List
get
First
Two
Elements
In
List
get
First
And
Last
Elements
In
List
get
Range
In
List
supports
Getting
Response
Body
When
Status
Code
Is401
throws
Nice
Error
Message
When
Illegal
Path
supports
Parsing
Json
Lists
supports
Getting
Empty
Response
Body
parameters
And
Query
Parameters
Are
Concatenated
parameter
And
Query
Parameter
Are
Concatenated
query
Parameters
Can
Be
Used
With
Ints
multi
Value
Parameters
Works
multi
Value
Parameters
Works
For
Sets
multi
Value
Parameters
Works
When
Passing
In
Map
multi
Value
Query
Parameters
Works
multi
Value
Query
Parameters
Works
When
Specified
In
The
Url
multi
Value
Query
Parameters
Works
When
Specified
In
In
The
Fluent
API
As
Path
Parameters
multi
Value
Query
Parameters
Works
When
Passing
In
Map
multi
Value
Parameters
Works
When
Passing
In
List
multi
Value
Query
Parameters
Works
When
Passing
In
List
With
Ints
multi
Value
Parameters
Supports
Appending
When
Passing
In
List
multi
Value
Query
Parameters
Supports
Appending
When
Passing
In
List
param
Supports
Multiple
Values
supports
Asserting
That
Json
Path
Doesnt
Exist
supports
Asserting
That
Header
Doesnt
Exist
supports
Registering
Json
Parser
For
A
Given
Mime
Type
registering
Json
Parser
For
A
Given
Mime
Type
But
Response
Is
Not
Json
given
No
Body
Expectations
Then
Non
Body
Expectations
Work
Even
Though
Content
Type
And
Body
Content
Does
Not
Match
malformed
Json
status
Code
Has
Priority
Over
Json
Parsing
When
Error
Occurs
can
Parse
Json
Path
With
A
Fragment
Starting
With
At
Sign
can
Parse
Json
Path
With
An
Escaped
Fragment
Starting
With
At
Sign
supports
Parsing
Json
When
Content
Type
Ends
With
Plus
Json
content
Type
But
No
Body
content
Type
But
No
Body
When
Error
uuid
Is
Treated
As
String
json
parser
is
used
for
text
json
content
type
throws
assertion
error
when
multiple
keys
are
the
same
in
a
multi
body
expectation
and
the
non
last
fails
specifying
multiple
with
args
without
additional
paths
works
can
Parse
Xml
With
Bom
xml
With
Header
And
Footer
takes
namespaces
into
account
when
correct
namespace
is
declared
takes
namespaces
into
account
when
correct
namespace
is
declared
with
different
name
doesnt
take
namespaces
into
account
when
no
namespace
is
declared
doesnt
take
namespaces
into
account
when
no
namespace
is
declared
but
namespace
aware
is
set
to
true
doesnt
take
namespaces
into
account
when
incorrect
namespace
is
declared
allows
specifying
content
decoders
statically
allows
specifying
content
decoders
per
request
uses
gzip
and
deflate
content
decoders
by
default
decoder
config
can
be
configured
to
use
no
decoders
filters
can
change
content
decoders
use
no
wrap
for
inflated
streams
supports
gzdeflate
method
json
content
type
is
configured
to
use
utf
8
by
default
can
specify
default
charset
for
a
specific
content
type
get
Parameters
should
Use
Map
Type
With
Object
Mappers
matches
string
schema
correctly
matches
input
stream
schema
correctly
matches
classpath
schema
correctly
works
with
expectation
api
can
mix
json
schema
validation
and
body
validations
throws
assertion
error
when
schema
doesnt
match
json
content
json
schema
validator
supports
disabling
checked
validation
statically
json
schema
validator
supports
specifying
json
schema
factory
instance
statically
json
schema
validator
supports
specifying
json
schema
factory
instance
and
disabling
checked
validation
statically
json
schema
validator
supports
using
a
supplied
json
schema
factory
instance
json
schema
validator
supports
using
the
supplied
json
schema
validator
settings
json
schema
validator
supports
draft
03
json
schema
validator
supports
draft
03
failures
greet
json
resource
conforms
to
the
greeting
schema
json
schema
validator
supports
matching
uri
json
schema
as
json
node
json
schema
validator
supports
matching
uri
json
schema
as
string
to
uri
shows
all
failing
json
path
expectations
when
using
legacy
syntax
shows
only
failing
expectations
error
message
look
ok
when
mixing
body
and
status
code
errors
error
message
look
ok
with
on
fail
message
error
message
look
ok
with
on
fail
message
validatable
response
error
message
with
failed
xpath
expected
looks
ok
error
message
with
failed
plain
body
expectation
looks
ok
rest
assured
is
configurable
to
use
default
hamcrest
error
messages
shows
all
failing
json
path
expectations
when
single
body
with
new
syntax
throws
nice
error
messages
when
json
path
property
doesnt
exist
options
Supports
String
Body
can
upload
json
from
file
can
upload
xml
from
file
can
upload
text
from
file
can
upload
binary
from
file
can
upload
file
with
custom
content
type
body
is
url
encoded
when
setting
body
rest
assured
is
reset
after
each
test
given
rest
assured
is
configured
with
double
as
return
type
double
works
floats
are
used
as
doubles
in
anonymous
list
with
numbers
when
configured
accordingly
can
use
the
close
to
hamcrest
matcher
when
number
return
type
is
double
statically
defined
default
parser
works
for
given
when
then
statements
non
statically
defined
default
parser
works
for
given
when
then
statements
simple
given
when
then
works
returns
Response
Of
Jsonp
takes
namespaces
into
account
when
correct
namespace
is
declared
doesnt
take
namespaces
into
account
when
no
namespace
is
declared
takes
namespaces
into
when
passing
xml
path
config
to
xml
path
method
in
response
object
setup
teardown
works
For
Request
Specifications
Using
Given
When
Then
Syntax
works
For
Request
Specifications
Using
Legacy
Syntax
doesnt
Log
Request
Specifications
Using
Given
When
Then
Syntax
When
Validation
Succeeds
doesnt
Log
Request
Specifications
Using
Legacy
Syntax
When
Validation
Succeeds
works
For
Response
Specifications
Using
Given
When
Then
Syntax
works
For
Response
Specifications
Using
Legacy
Syntax
doesnt
Log
Using
Given
When
Then
Syntax
When
Validation
Succeeds
doesnt
Log
Response
Spec
Using
Legacy
Syntax
When
Validation
Succeeds
configuring
Log
Config
To
Enable
Logging
Of
Request
And
Response
If
Validation
Fails
Works
As
Expected
configuring
Log
Config
To
Enable
Logging
Of
Request
And
Response
If
Validation
Fails
Works
As
Expected2
configuring
Log
Config
To
Enable
Logging
Of
Request
And
Response
If
Validation
Fails
Works
As
Expected
When
Specifying
Log
Detail
configured
Logging
In
Given
Overwrites
The
Logging
Specified
In
Log
Config
logging
of
both
request
and
response
validation
works
when
test
fails
when
using
static
response
and
request
specs
declared
before
enable
logging
doesnt
log
request
or
response
when
test
fails
when
using
non
static
request
spec
declared
before
enable
logging
since
config
is
immutable
and
spec
config
has
precedence
over
global
config
logging
of
both
request
and
response
validation
works
when
test
fails
when
using
non
static
request
spec
declared
after
enable
logging
logging
doesnt
change
original
content
by
pretty
printing
logging
is
applied
when
using
non
static
response
specifications
logging
is
applied
when
thrown
assertion
errors
from
matcher
internal
matches
Safely
describe
To
logged
Request
Path
In
starting
finished
filter
start
Jetty
start
Jetty
One
Way
SSL
start
Jetty
Two
Way
SSL
dont
Send
Date
Header
set
Up
Before
Test
goto
Project
Root
is
Executed
From
Maven
stop
Jetty
handle
setup
RA
teardown
merges
Headers
Correctly
When
Only
Static
Merging
merges
Headers
Correctly
When
Using
Given
Request
Spec
merges
Headers
Correctly
When
Using
Given
Spec
Request
Spec
doesnt
Follow
Redirects
If
Specified
In
The
Http
Client
Config
doesnt
Throw
Client
Protocol
Exception
If
Max
Number
Of
Redirect
Are
Exceeded
In
Http
Client
Config
Because
Redirect
Config
Has
Precedence
http
Client
Is
Configurable
From
A
Non
Static
Http
Client
Config
filter
http
Client
Is
Configurable
From
A
Static
Http
Client
Config
With
Other
Configurations
filter
http
client
config
allows
specifying
that
the
http
client
instance
is
reused
in
multiple
requests
filter
local
http
client
config
doesnt
reuse
static
http
client
instance
when
local
config
specifies
reuse
filter
filter
local
http
client
config
reuse
reuse
static
http
client
instance
when
local
config
changes
other
configs
than
http
client
config
filter
filter
returns
empty
body
when
content
encoding
is
gzip
but
body
is
empty
returns
json
body
when
content
encoding
is
gzip
and
body
is
json
create
proxy
server
stop
proxy
server
using
proxy
with
hostname
and
port
using
proxy
with
hostname
using
proxy
with
hostname
as
a
uri
using
proxy
with
https
scheme
using
proxy
with
uri
using
proxy
with
proxy
specification
using
proxy
with
specification
using
statically
configured
proxy
defined
using
method
using
statically
configured
proxy
defined
using
field
using
statically
configured
proxy
defined
using
string
uri
without
port
proxy
details
are
shown
in
the
request
log
given
when
then
using
i18n
works
filter
Works
supports
Specifying
Default
Filters
filters
Can
Alter
Response
Before
Validation
default
Filters
Dont
Accumluate
http
Client
Is
Accessible
From
The
Request
Specification
filter
content
type
in
filter
contains
charset
by
default
filter
content
type
in
filter
doesnt
contain
charset
if
configured
not
to
filter
it
is
possible
to
change
port
and
base
path
from
filters
can
add
query
params
from
filter
can
change
path
from
filter
can
change
path
parameters
from
filter
can
change
partially
applied
named
path
parameters
from
filter
can
change
partially
applied
unnamed
path
parameters
from
filter
can
change
unnamed
path
param
with
named
path
param
from
filter
can
change
named
path
param
with
named
path
param
from
filter
can
change
unnamed
path
param
with
named
path
param
from
filter
when
path
param
is
used
in
several
places
can
change
named
path
param
with
named
path
param
from
filter
when
path
param
is
used
in
several
places
primitive
params
are
converted
to
strings
get
path
params
in
request
spec
returns
both
named
and
unnamed
path
params
can
remove
unnamed
path
parameter
by
value
from
filter
can
remove
unnamed
path
parameter
by
name
from
filter
can
remove
both
unnamed
and
named
path
parameter
from
filter
and
order
is
maintained
can
remove
a
specific
header
from
filter
can
remove
all
defined
headers
from
filter
can
remove
a
specific
cookie
from
filter
using
the
cookie
name
as
string
can
remove
a
specific
cookie
from
filter
using
a
cookie
object
can
remove
all
defined
cookies
can
replace
a
specific
header
from
filter
can
replace
a
specific
cookie
from
filter
using
cookie
name
and
value
can
replace
a
specific
cookie
from
filter
using
cookie
object
can
replace
all
defined
headers
can
replace
all
defined
cookies
filter
specifying
Root
Path
In
Expectation
Adds
The
Root
Path
For
Each
Subsequent
Body
Expectation
specifying
Root
Path
That
Ends
With
Dot
And
Body
That
Ends
With
Dot
Works
specifying
Root
Path
That
Ends
With
Dot
And
Body
That
Doesnt
End
With
Dot
Works
specifying
Root
Path
That
Doesnt
End
With
Dot
And
Body
That
Ends
With
Dot
Works
specifying
Root
Path
That
Doesnt
End
With
Dot
And
Body
That
Starts
With
Safe
Ref
Works
specifying
Root
Path
That
Doesnt
End
With
Dot
And
Body
That
Starts
With
Spread
Works
specifying
Root
Path
And
Body
That
Starts
With
Array
Indexing
Works
specifying
Root
Path
And
Body
That
Starts
With
Safe
Array
Indexing
Works
specifying
Root
Path
That
And
Empty
Path
Works
specifying
Empty
Root
Path
Resets
To
Default
Root
Object
when
Not
Specifying
Explicit
Root
Path
Then
Default
Root
Path
Is
Used
reset
Sets
Root
Path
To
Empty
String
specifying
Root
Path
With
Body
Args
specifying
Root
Path
With
Multiple
Body
Args
specifying
Root
Path
With
Multiple
Content
Arguments
specifying
Root
Path
In
Multi
Body
Adds
The
Root
Path
For
Each
Expectation
specifying
Root
Path
In
Multi
Content
Adds
The
Root
Path
For
Each
Expectation
specifying
Root
Path
With
Arguments
appending
Root
Path
Without
Arguments
Works
appending
Root
Path
With
Arguments
Works
can
Append
Root
Path
To
Empty
Root
Path
using
Body
Expectation
Without
Path
cannot
Use
Body
Expectation
With
No
Path
When
Root
Path
Is
Empty
cannot
Detach
Root
Path
To
From
Root
Path
detaching
Root
Path
Works
With
Old
Syntax
detaching
Root
Path
Works
With
New
Syntax
detaching
Root
Path
Works
When
Specifying
Dot
detaching
Root
Path
Throws
ISE
Root
Path
Doesnt
End
With
Path
To
Detach
supports
Appending
Arguments
Defined
In
Append
Root
At
A
Later
Stage
supports
Appending
Arguments
Defined
In
Root
At
A
Later
Stage
supports
Appending
Arguments
Defined
In
Root
At
A
Later
Stage
In
Multi
Expectation
Blocks
simple
Json
Validation
simple
Xml
Validation
path
Arguments
Demo
demo
Request
Specification
demo
Response
Specification
demo
Response
Specification
Using
Given
When
Then
simple
Json
Validation
With
Json
Path
simple
Xml
Validation
With
Xml
Path
simple
File
Uploading
byte
Array
Uploading
byte
Array
Uploading
When
Using
Multi
Part
Specification
text
Uploading
When
Using
Multi
Part
Specification
And
Charset
text
Uploading
When
Using
Multi
Part
Specification
And
Charset
And
Headers
input
Stream
Uploading
Using
Multi
Part
Specification
control
Name
In
Multi
Part
Spec
Builder
Has
Precedence
Over
Default
control
Name
In
Multi
Part
Spec
Builder
Has
Precedence
Over
Default
When
Configured
default
Control
Name
Is
Used
When
No
Control
Name
Is
Defined
In
Multi
Part
Spec
Builder
file
Name
In
Multi
Part
Spec
Builder
Has
Precedence
Over
Default
file
Name
In
Multi
Part
Spec
Builder
Has
Precedence
Over
Default
When
Configured
default
File
Name
Is
Used
When
No
File
Name
Is
Defined
In
Multi
Part
Spec
Builder
default
File
Name
Can
Be
Null
file
Name
Can
Be
Null
In
Multi
Part
Spec
returns
Error
When
Multipart
Patch
Returns
Failure
Status
Code
returns
Error
When
Multipart
Post
Returns
Failure
Status
Code
returns
Error
When
Multipart
Put
Returns
Failure
Status
Code
uses
Default
Boundary
From
Multipart
Config
When
No
Boundary
Is
Defined
In
Content
Type
uses
Boundary
From
Content
Type
When
Default
Boundary
Is
Defined
In
Multipart
Config
uses
Boundary
From
Content
Type
When
No
Default
Boundary
Is
Defined
In
Multipart
Config
allow
Passing
Multi
Parts
With
Content
Type
Containing
Multi
Part
Plus
Subtype
filter
groceries
Contains
Chocolate
And
Coffee
groceries
Contains
Chocolate
And
Coffee
Using
Double
Star
Notation
advanced
Json
Validation
advanced
Json
Validation2
products
custom
Auth
Demo
custom
Auth
Demo2
expectations
can
mix
text
and
path
validation
expectations
can
mix
path
and
text
validation
expectations
can
mix
text
followed
by
path
then
text
validation
expectations
can
mix
path
followed
by
text
then
path
validation
assertions
can
mix
text
and
path
validation
assertions
can
mix
path
and
text
validation
assertions
can
mix
text
followed
by
path
then
text
validation
assertions
can
mix
path
followed
by
text
then
path
validation
logs
Everything
Response
Using
Given
When
Then
Syntax
log
Response
That
Has
Cookies
With
Log
Detail
Cookies
Using
Given
When
Then
Syntax
log
Only
Headers
Using
Response
Using
Log
Spec
With
Given
When
Then
Syntax
supports
Passing
Path
Params
To
Request
Spec
possible
To
Get
Original
Request
Path
For
Unnamed
Path
Params
From
Request
Spec
possible
To
Get
Original
Request
Path
For
Named
Path
Params
Using
Request
Spec
supports
Passing
Path
Params
As
Map
To
Request
Spec
supports
Passing
Int
Path
Params
To
Request
Spec
url
Encodes
Path
Params
doesnt
Url
Encodes
Path
Params
When
Url
Encoding
Is
Disabled
url
Encodes
Path
Params
In
Map
doesnt
Url
Encode
Path
Params
In
Map
When
Url
Encoding
Is
Disabled
supports
Passing
Path
Params
To
Get
supports
Passing
Path
Params
As
Map
To
Get
throws
IAE
When
Number
Of
Supplied
Unnamed
Path
Params
Are
Greater
Than
Defined
Path
Params
throws
IAE
When
Number
Of
Supplied
Named
Path
Params
Are
Equal
But
Different
To
Placeholders
throws
IAE
When
Number
Of
Supplied
Named
Path
Params
Are
Defined
But
No
Placeholders
Are
Defined
throws
IAE
When
Number
Of
Supplied
Named
Path
Params
Is
Greater
Than
Defined
Placeholders
throws
IAE
When
Number
Of
Supplied
Named
And
Unnamed
Path
Params
Is
Greater
Than
Defined
Placeholders
throws
IAE
When
Number
Of
Supplied
Path
Params
Are
Lower
Than
Defined
Path
Params
supports
Passing
Path
Param
With
Given
supports
Passing
Path
Param
With
Int
With
Given
supports
Passing
Path
Params
With
Given
supports
Passing
Path
Params
With
Int
With
Given
supports
Passing
Path
Params
With
Map
With
Given
supports
Passing
Path
Params
With
Int
With
Map
When
Given
merges
Path
Params
Map
With
Non
Map
When
Given
passing
In
Two
Many
Path
Params
With
Given
Throws
IAE
passing
In
Too
Few
Named
Path
Params
With
Given
Throws
IAE
can
Use
Path
Params
With
Non
Standard
Chars
passing
In
Single
Path
Params
That
Have
Been
Defined
Multiple
Times
Works
unnamed
Query
Parameters
Works
throws
Illegal
Argument
Exception
When
Too
Many
Path
Parameters
Are
Used
throws
Illegal
Argument
Exception
When
Too
Few
Path
Parameters
Are
Used
mixing
Unnamed
Path
Parameters
And
Query
Parameters
Works
filter
url
Encodes
Unnamed
Path
Parameters
That
Contains
Curly
Braces
And
Equals
filter
url
Encodes
Named
Path
Parameters
That
Contains
Curly
Braces
And
Equals
filter
unnamed
Path
Parameters
Can
Be
Appended
Before
Sub
Path
named
Path
Parameters
Can
Be
Appended
Before
Sub
Path
unnamed
Path
Parameters
Can
Be
Appended
After
Sub
Path
named
Path
Parameters
Can
Be
Appended
After
Sub
Path
named
Path
Parameters
Works
With
Unicode
Parameter
Values
filter
unnamed
Path
Parameters
Works
With
Unicode
Parameter
Values
filter
unnamed
Path
Parameters
Works
When
There
Are
Multiple
Templates
Between
Each
Slash
named
Path
Parameters
Works
When
There
Are
Multiple
Templates
Between
Each
Slash
can
Set
Named
Path
Parameter
Defined
As
First
Path
Param
In
Path
And
Conj
With
An
Unnamed
Path
Param
can
Set
Named
Path
Parameter
Defined
As
Last
Path
Param
In
Path
And
Conj
With
An
Unnamed
Path
Param
named
path
parameters
have
precedence
over
unnamed
path
params
can
specify
space
only
named
path
params
can
specify
space
only
unnamed
path
params
can
specify
empty
named
path
params
can
specify
empty
unnamed
path
params
returns
nice
error
message
when
several
unnamed
path
parameter
are
be
null
returns
nice
error
message
when
single
unnamed
path
parameter
is
null
can
use
path
parameters
value
shorter
than
the
template
name
when
using
multiple
templates
in
a
subresource
can
use
path
parameters
value
longer
than
the
template
name
when
using
multiple
templates
in
a
subresource
setup
teardown
error
Logging
Filter
Works
log
Errors
Using
Request
Spec
log
Using
Request
Spec
log
Using
Response
Spec
log
Using
Response
Spec
Log
Detail
log
Response
That
Has
Cookies
With
Log
Detail
All
log
Response
That
Has
Cookies
With
Log
Detail
Cookies
logging
Response
Filter
Logs
Errors
logging
Response
Filter
Logs
Non
Errors
logging
By
Response
Spec
Log
Detail
Non
Errors
logging
Response
Filter
Logs
To
Specified
Writer
When
Matcher
Is
Fulfilled
logging
Response
Filter
Doesnt
Log
When
Specified
Matcher
Is
Not
Fulfilled
logging
Response
Filter
Logs
When
Expectations
Fail
logging
Request
Filter
With
Params
Cookies
And
Headers
logging
Request
Filter
Doesnt
Accept
Status
As
Log
Detail
logging
Request
Filter
With
Explicit
Content
Type
logging
Request
Filter
Path
Params
logging
Request
Filter
With
Body
logging
Request
And
Response
At
The
Same
Time
When
Request
Filter
Is
Added
Before
Response
Filter
logging
Request
And
Response
At
The
Same
Time
When
Response
Filter
Is
Added
Before
Request
Filter
log
Everything
Response
Using
Log
Spec
log
If
Status
Code
Is
Equal
To
Response
Using
Log
Spec
doesnt
Log
If
Status
Code
Is
Not
Equal
To
Response
Using
Log
Spec
log
If
Status
Code
Matches
Response
Using
Log
Spec
log
Only
Body
Using
Response
Using
Log
Spec
log
Only
Response
Body
With
Pretty
Printing
When
Json
log
Only
Response
Body
With
Pretty
Printing
When
Xml
log
Only
Response
Body
With
Pretty
Printing
When
Html
log
All
With
Pretty
Printing
When
Json
log
All
With
Pretty
Printing
Using
DSL
When
Json
log
All
With
No
Pretty
Printing
Using
DSL
When
Json
log
Only
Response
Body
With
Pretty
Printing
Using
DSL
When
Xml
log
Only
Response
Body
With
No
Pretty
Printing
Using
DSL
When
Xml
log
Only
Status
Using
Response
Using
Log
Spec
log
Only
Headers
Using
Response
Using
Log
Spec
log
Only
Headers
Using
Response
Using
Log
Spec
When
Multi
Headers
log
Only
Cookies
Using
Response
Log
Spec
log
Body
Pretty
Printed
Using
Response
Log
Spec
When
Content
Type
Doesnt
Match
Content
log
All
Using
Request
Log
Spec
log
Params
Using
Request
Log
Spec
log
No
Value
Params
Using
Request
Log
Spec
log
Body
Using
Request
Log
Spec
log
Body
With
Pretty
Printing
Using
Request
Log
Spec
log
Body
With
Pretty
Printing
Using
Dsl
And
Request
Log
Spec
log
Body
With
Pretty
Printing
Using
Request
Log
Spec
And
Object
Mapping
log
Body
With
Pretty
Printing
Using
Request
Log
Spec
And
Object
Mapping
When
XML
log
Cookies
Using
Request
Log
Spec
log
Headers
Using
Request
Log
Spec
log
Body
Pretty
Printed
Using
Request
Log
Spec
When
Content
Type
Doesnt
Match
Content
log
All
When
Base
Path
Is
Defined
Using
Request
Log
Spec
log
All
When
Base
URI
Is
Defined
Using
Request
Log
Spec
log
All
When
Base
Path
And
Base
Port
And
Base
URI
Is
Defined
Using
Request
Log
Spec
logs
Fully
Qualified
Urls
Are
Logged
Correctly
filter
logs
Xml
Namespaces
Correctly
logs
Multi
Part
Params
On
Log
All
doesnt
include
default
charset
in
request
log
when
it
is
configured
not
to
be
added
includes
default
charset
in
request
log
by
default
form
param
are
logged
as
query
params
for
get
requests
using
log
detail
method
only
logs
the
request
method
using
log
detail
uri
only
logs
the
request
uri
shows
request
log
as
url
encoded
when
explicitly
instructing
request
logging
filter
to
do
so
shows
request
log
as
without
url
encoding
when
explicitly
instructing
request
logging
filter
to
do
so
assert
that
register
text
json
content
type
can
be
used
in
conjunction
with
enable
logging
of
request
and
response
if
validation
fails
prettifying
empty
xml
body
doesnt
log
premature
end
of
file
its
possible
to
hide
request
headers
when
blacklist
is
defined
using
a
request
spec
builder
its
possible
to
hide
request
headers
when
blacklist
is
defined
in
log
config
from
request
specification
its
possible
to
hide
response
headers
when
blacklist
is
defined
in
log
config
from
request
specification
config
Can
Be
Set
Per
Request
supports
Specifying
Default
Content
Charset
supports
Configuring
Json
Config
Properties
supports
Configuring
Json
Config
Statically
configurations
Defined
Globally
Are
Applied
When
Using
Response
Spec
Builders
configurations
Defined
In
Dsl
Are
Applied
When
Using
Response
Spec
Builders
rest
assured
is
reset
after
each
test
given
rest
assured
is
configured
with
big
decimal
as
return
type
big
decimal
works
when
configured
in
given
clause
big
decimal
works
when
configured
statically
floats
are
used
as
big
decimal
in
anonymous
list
with
numbers
when
configured
accordingly
it
is
possible
to
configure
rest
assured
to
use
a
response
validation
failure
listener
create
Inbound
Root
set
Up
tear
Down
stress
With
Rest
Assured
Get
stress
With
Rest
Assured
Post
stress
With
Rest
Assured
Post
When
Same
Http
Client
Instance
Is
Reused
stress
With
Rest
Assured
Get
Manual
Close
handle
head
Supports
String
Body
can
use
gpath
with
namespace
using
given
when
then
api
can
use
hamcrest
xpath
matcher
with
namespace
using
given
when
then
api
get
Namespace
URI
get
Prefix
get
Prefixes
can
use
not
in
hamcrest
xpath
matcher
with
namespace
using
given
when
then
api
get
Namespace
URI
get
Prefix
get
Prefixes
can
validate
namespace
attributes
when
namespace
aware
is
set
to
false
specifying
Fully
Qualified
Path
Overrides
Values
when
Base
URI
Ends
With
Slash
And
Path
Begins
With
Slash
Then
One
Slash
Is
Removed
when
Base
URI
Includes
Port
And
Ends
With
Slash
And
Path
Begins
With
Slash
Then
One
Slash
Is
Removed
when
Base
URI
And
Path
Doesnt
Ends
With
Slash
Then
One
Slash
Is
Inserted
base
URI
Picks
Up
Scheme
And
Port
base
URI
Picks
Up
Scheme
And
Port
And
Base
Path
basic
Authentication
With
Base
Path
can
Call
Fully
Qualified
Urls
Without
Port
Defined
url
With
Underscore
In
Host
Name
Works
filter
fully
Qualified
Url
Ending
With
Slash
Doesnt
Add
Port8080
filter
doesnt
Add
Port8080To
Fully
Qualified
Url
Defined
In
Http
Verb
Method
filter
fully
Qualified
Url
Adds
Port8080If
Explicitly
Defined
Statically
filter
fully
Qualified
Url
Including
Port
Works
filter
fully
Qualified
Localhost
Url
Including
Port
Works
filter
fully
Qualified
Localhost
Url
Ending
With
Slash
Doesnt
Adds
Port8080
filter
when
No
Authority
Or
Port
Is
Specified
Then
Localhost
On
Port8080Is
Used
filter
takes
Specification
Port
Into
Account
When
No
Host
Is
Specified
filter
takes
Specification
Port
Into
Account
When
Localhost
Host
Is
Specified
Ending
With
Slash
filter
takes
Specification
Port
Into
Account
When
Localhost
Host
Is
Specified
Without
Ending
With
Slash
filter
takes
Specification
Port
Into
Account
When
Localhost
Host
Is
Specified
Statically
filter
takes
Port
Into
Account
When
Specified
In
The
URL
Using
Localhost
Host
filter
takes
Specification
Port
Into
Account
When
Localhost
Host
And
Port8080Is
Specified
Statically
filter
takes
Static
Specification
Port
Into
Account
When
No
Host
Is
Specified
filter
takes
Static
Specification
Port
Into
Account
When
Base
Uri
Is
Specified
filter
takes
Non
Static
Specification
Port
Into
Account
When
Host
Is
Specified
filter
trailing
Slashes
Are
Retained
When
Configured
Statically
filter
doesnt
Add
Trailing
Slashes
When
No
Trailing
Slash
Is
Used
filter
adds
Single
Trailing
Slash
To
Path
When
Slash
Is
Used
As
Path
In
Get
Method
filter
trailing
Slashes
Are
Retained
When
Passed
As
Argument
To
Get
Method
filter
fully
Qualified
Url
Is
Handled
Correctly
In
Log
filter
fully
Qualified
Url
Is
Handled
Correctly
In
Log
With
No
Value
Param
filter
can
Use
A
Get
Request
In
Dsl
For
Uris
can
Use
A
Post
Request
In
Dsl
For
Uris
can
Use
A
Static
Get
Request
With
Uris
can
Use
A
Static
Post
Request
With
Uris
can
Use
A
Get
Request
In
Dsl
For
Urls
can
Use
A
Post
Request
In
Dsl
For
Urls
can
Use
A
Static
Get
Request
With
Urls
can
Use
A
Static
Post
Request
With
Urls
can
Use
A
Get
Request
Without
Any
Parameters
In
Dsl
can
Use
A
Post
Request
Without
Any
Parameters
In
Dsl
can
Use
A
Static
Get
Request
Without
Any
Parameters
can
Use
A
Static
Post
Request
Without
Any
Parameters
query
param
name
with
empty
value
is
not
treated
as
no
value
query
param
given
a
base
uri
with
fully
qualified
url
defaults
to
using
port
80
if
port
is
not
explicitly
defined
filter
get
using
fully
qualified
url
uses
port
80
filter
get
request
with
query
parameters
as
map
that
contains
collection
as
one
of
params
get
request
with
form
parameters
as
map
that
contains
collection
as
one
of
params
csrf
Config
Without
Csrf
Token
Path
Disables
Csrf
csrf
With
Invalid
Token
Path
And
Auto
Detection
Of
Csrf
Input
Field
Name
csrf
With
Invalid
Token
Path
And
Specific
Csrf
Input
Field
Name
csrf
Dsl
With
Specific
Csrf
Input
Field
Name
csrf
Auto
Csrf
Detection
Defined
In
Request
Config
csrf
Config
Uses
Auto
Csrf
Detection
Defined
By
Default
When
Using
Constructor
To
Create
Csrf
Config
csrf
Config
Uses
Auto
Csrf
Detection
Defined
By
Default
When
Using
Static
Method
To
Create
Csrf
Config
csrf
Config
With
Logging
csrf
Is
Not
Used
When
Token
Path
Is
Undefined
csrf
Is
Not
Used
For
Get
Requests
csrf
Is
Not
Used
For
Head
Requests
csrf
Auto
Csrf
Detection
Defined
In
Statically
csrf
Request
Config
Is
Overriding
Static
Config
csrf
Dsl
Is
Merged
With
Static
Config
When
Specifying
Different
Thing
In
Dsl
And
Static
Config
csrf
Dsl
Is
Overriding
With
Static
Config
When
Specifying
Same
Property
In
Dsl
And
Static
Config
csrf
Header
csrf
Header
Derived
From
Specified
Meta
Tag
csrf
Header
With
Customized
Header
Name
prioritize
Header
Csrf
Over
Form
By
Default
When
Page
Contains
Both
prioritize
Header
Csrf
Over
Form
When
Header
Prioritization
Is
Used
When
Page
Contains
Both
Csrf
Header
And
Input
Field
prioritize
Form
Csrf
Over
Header
When
Form
Prioritization
Is
Used
When
Page
Contains
Both
Csrf
Header
And
Input
Field
merges
headers
by
default
overwrite
headers
configured
by
default
header
config
overwrite
headers
defined
at
once
configured
by
default
header
config
overwrite
headers
defined
using
headers
construct
configured
by
default
header
config
request
spec
merges
headers
by
default
request
spec
overwrites
headers
when
configured
in
header
config
example1
example2
make
sure
logging
to
disk
works
find
By
Name
of
to
String
setup
using
explicit
custom
object
mapper
deserialize
serialize
using
custom
object
mapper
statically
deserialize
serialize
using
default
object
mapper
type
if
specified
using
as
specified
object
using
custom
object
mapper
factory
create
simple
given
when
then
works
given
when
then
works
with
assert
that
and
and
given
when
then
works
with
xpath
assertions
given
when
then
works
with
multiple
body
assertions
has
xpath
works
with
single
check
has
xpath
works
when
wrapped
in
not
matcher
has
xpath
works
when
wrapped
in
all
of
matcher
has
xpath
works
when
wrapped
in
any
of
matcher
cant
mix
has
xpath
and
equal
to
matchers
xpath
works
with
namespaces
when
xml
config
is
configured
to
be
namespace
aware
get
Namespace
URI
get
Prefix
get
Prefixes
url
Encoding
Disabled
Statically
url
Encoding
Disabled
Using
Given
url
Encoding
Disabled
Using
Request
Spec
Builder
double
Url
Encoding
Should
Fail
Request
doesnt
Double
Encode
Params
When
Defining
Url
Encoding
To
False
Statically
doesnt
Double
Encode
Params
When
Defining
Url
Encoding
To
False
Non
Statically
doesnt
Double
Encode
Params
When
Defining
Url
Encoding
To
True
filter
urls
With
Scheme
Is
Ok
To
Send
In
Url
Without
Being
Url
Encoded
filter
url
Encodes
Named
Path
Parameters
filter
url
Encodes
Unnamed
Path
Parameters
filter
doesnt
Url
Encode
Path
Fragments
When
Url
Encoding
Is
Disabled
filter
url
Encodes
Path
Fragments
Regardless
If
They
Have
Been
Manually
Encoded
When
Url
Encoding
Is
Enabled
filter
given
when
then
works
with
root
path
cookies
Returns
A
Map
Where
The
Last
Value
Of
A
Multi
Value
Cookie
Is
Used
detailed
Cookies
Allows
To
Get
Multi
Values
when
Using
The
Dsl
And
Expecting
A
Multi
Value
Cookie
Then
The
Last
Value
Is
Used
supports
Detailed
Cookie
Matching
Using
Dsl
supports
Detailed
Cookie
Matcher
supports
Cookie
String
Matching
Using
The
Dsl
can
Specify
Multi
Value
Cookies
Using
By
Passing
In
Several
Values
To
The
Cookie
Method
multiple
Cookie
Statements
Are
Concatenated
multiple
Cookies
Short
Version
Using
Plain
Strings
multiple
Cookies
Short
Version
Using
Hamcrest
Matching
multiple
Cookies
Short
Version
Using
Mix
Of
Hamcrest
Matching
And
String
Matching
multiple
Cookies
Using
Map
multiple
Cookies
Using
Map
With
Hamcrest
Matcher
multiple
Cookies
Using
Map
With
Mix
Of
String
And
Hamcrest
Matcher
when
Expected
Cookie
Doesnt
Match
An
Assertion
Then
Assertion
Error
Is
Thrown
when
Expected
Cookie
Is
Not
Found
Then
An
Assertion
Error
Is
Thrown
request
Specification
Allows
Specifying
Cookie
With
No
Value
response
Specification
Allows
Parsing
Cookie
With
No
Value
request
Specification
Allows
Specifying
Cookies
request
Specification
Allows
Specifying
Cookie
Using
Map
request
Specification
Allows
Specifying
Multiple
Cookies
can
Get
Cookie
Details
cookies
Support
Equal
Character
In
Cookie
Value
cookies
Parsing
Supports
No
Value
Cookies
detailed
Cookie
Works
get
Detailed
Cookie
Works
multiple
Cookies
With
Same
Key
uses
Cookies
Defined
In
A
Static
Request
Specification
parses
Valid
Expires
Date
Correctly
removes
Double
Quotes
From
Cookie
With
Expires
Date
sets
Expires
Property
To
Null
When
Cookie
Has
Invalid
Expires
Date
can
Get
Cookie
Same
Site
Attribute
detailed
Cookie
Matcher
Supports
Same
Site
Attribute
multi
Part
Uploading
Works
For
Byte
Arrays
multi
Part
Uploading
Works
For
Strings
multi
Part
Uploading
Supports
Other
Sub
Types
Than
Form
Data
multi
Part
Uploading
Supports
Specifying
Default
Subtype
multi
Part
Uploading
Supports
Specifying
Charset
explicit
Multipart
Content
Type
Overrides
Default
Subtype
multipart
Content
Type
Set
By
Specification
Overrides
Default
Subtype
multi
Part
Uploading
Works
For
Json
Objects
multi
Part
Uploading
Works
For
Json
Objects
When
Mime
Type
Is
Specified
multi
Part
Uploading
Works
For
Xml
Objects
When
Mime
Type
Is
Specified
multi
Part
Supports
Specifying
An
Object
Mapper
Type
To
Multi
Part
Spec
Builder
multi
Part
Supports
Specifying
An
Object
Mapper
To
Multi
Part
Spec
Builder
multi
Part
Object
Mapper
Type
Have
Precedence
Over
Mime
Type
multi
Part
Uploading
Uses
Encoder
Config
To
Know
How
To
Serialize
Custom
Mime
Types
To
Json
multi
Part
Uploading
Uses
Encoder
Config
To
Know
How
To
Serialize
Custom
Mime
Types
To
Xml
multi
Part
Uploading
Throws
Exception
When
Using
Encoder
Config
To
Specify
Non
Serializable
Content
Type
multi
Part
Uploading
Works
For
Multiple
Strings
multi
Part
Uploading
Works
For
Byte
Array
And
Strings
multi
Part
Uploading
Works
For
Byte
Array
And
Form
Params
multi
Part
Uploading
Works
For
Byte
Array
And
Number
Form
Params
multi
Part
Uploading
Works
For
Byte
Array
And
Enum
Form
Params
multi
Part
Uploading
Works
For
Form
Params
And
Byte
Array
multi
Part
Uploading
Works
For
Byte
Array
And
Params
multi
Part
Uploading
Works
For
Params
And
Byte
Array
bytes
And
Form
Param
Uploading
Work
Using
Request
Builder
multi
Part
Uploading
Doesnt
Work
For
Delete
multi
Part
Byte
Array
Uploading
Works
Using
Put
multi
Part
Byte
Array
Uploading
Works
Using
Get
multi
Part
Byte
Array
Uploading
Works
Using
Options
multi
Part
Byte
Array
Uploading
Works
Using
For
Utf8Control
Names
When
Charset
Is
Specified
In
Content
Type
And
Multipart
Mode
Is
Not
Strict
multi
Part
Byte
Array
Uploading
Works
Using
For
Utf8Control
Names
When
Default
Charset
Is
Specified
In
Multi
Part
Config
And
Multipart
Mode
Is
Not
Strict
can
Validate
Response
Content
Type
can
Validate
Response
Content
Type
With
Hamcrest
Matcher
doesnt
Append
Charset
To
Content
Type
When
Content
Type
Is
Not
Explicitly
Defined
And
Encoder
Config
Is
Configured
Accordingly
doesnt
Append
Charset
To
Content
Type
When
Content
Type
Is
Explicitly
Defined
And
Encoder
Config
Is
Configured
Accordingly
appends
Charset
To
Content
Type
When
Content
Type
Is
Explicitly
Defined
And
Encoder
Config
Is
Configured
Accordingly
appends
Java
Nio
Charset
To
Content
Type
When
Content
Type
Is
Explicitly
Defined
And
Encoder
Config
Is
Configured
Accordingly
append
Charset
To
Content
Type
When
Content
Type
Is
Not
Explicitly
Defined
And
Encoder
Config
Is
Configured
Accordingly
doesnt
Append
Charset
To
Non
Streaming
Content
Type
When
Content
Type
Is
Explicitly
Defined
And
Encoder
Config
Is
Configured
Accordingly
appends
Charset
To
Non
Streaming
Content
Type
When
Content
Type
Is
Explicitly
Defined
And
Encoder
Config
Is
Configured
Accordingly
doesnt
Override
Defined
Charset
For
Non
Streaming
Content
Type
When
Content
Type
Is
Explicitly
Defined
And
Encoder
Config
Is
Configured
Accordingly
content
type
is
sent
to
the
server
when
using
a
get
request
no
content
type
is
sent
by
default
when
using
get
request
content
type
is
sent
to
the
server
when
using
a
post
request
content
type
is
application
x
www
form
urlencoded
with
default
charset
when
no
content
type
is
specified
for
post
requests
content
type
is
text
plain
with
default
charset
when
no
content
type
is
specified
for
put
requests
content
type
validation
is
case
insensitive
header
with
content
type
enum
works
encoder
config
can
specify
a
default
charset
for
a
specific
content
type
using
enum
encoder
config
can
specify
a
default
charset
for
a
specific
content
type
using
string
when
form
param
are
supplied
with
a
get
request
the
content
type
is
automatically
set
to
form
encoded
when
form
param
are
supplied
with
a
get
request
and
content
type
is
explicitly
defined
then
content
type
is
not
automatically
set
to
form
encoded
non
registered
content
type
starting
with
text
slash
is
encoded
as
text
non
registered
content
type
containing
plus
text
is
encoded
as
text
custom
registered
encoding
of
content
type
is
applied
through
encoder
config
shows
a
nice
error
message
when
failed
to
encode
content
validates
content
type
even
when
it
is
a
204
response
validates
content
type
json
validates
content
type
binary
can
assert
empty
or
null
content
type
ignores
spacing
between
content
type
and
charset
when
server
returns
single
space
between
content
type
and
charset
ignores
spacing
between
content
type
and
charset
when
server
returns
multiple
spaces
between
content
type
and
charset
ignores
spacing
between
content
type
and
charset
when
server
returns
no
spaces
between
content
type
and
charset
ignores
tabs
between
content
type
and
charset
when
server
returns
no
spaces
between
content
type
and
charset
doesnt
ignore
tabs
between
content
type
and
charset
when
server
returns
no
spaces
between
content
type
and
charset
but
when
using
equal
to
hamcrest
matcher
doesnt
send
a
content
type
header
when
there
is
no
body
no
content
type
will
prevent
rest
assured
from
adding
a
content
type
for
post
no
content
type
will
prevent
rest
assured
from
adding
a
content
type
for
patch
no
content
type
will
prevent
rest
assured
from
adding
a
content
type
for
delete
no
content
type
will
prevent
rest
assured
from
adding
a
content
type
for
options
no
content
type
will
prevent
rest
assured
from
adding
a
content
type
for
get
to
Jetty9
can
use
response
aware
matcher
to
construct
hamcrest
matcher
with
data
from
response
can
use
response
aware
matcher
to
construct
hamcrest
matcher
with
data
from
response
with
predefined
matcher
can
use
response
aware
matcher
to
construct
hamcrest
matcher
with
data
from
response
with
root
path
response
aware
matchers
are
composable
with
hamcrest
matchers
and
using
hamcrest
matchers
are
composable
with
response
aware
matchers
or
using
hamcrest
matchers
are
composable
with
response
aware
matchers
response
aware
matchers
are
composable
with
other
response
aware
matchers
response
aware
matchers
are
composable
with
other
response
aware
matchers
and
hamcrest
matchers
using
rest
Assured
Json
Root
Object
for
nested
queries
can
use
response
aware
matcher
to
construct
hamcrest
matcher
with
data
from
response
with
predefined
matcher2
supports
Specifying
Default
Response
Spec
expecting
Spec
Merges
The
Current
Specification
With
The
Supplied
One
body
Expectations
Are
Not
Overwritten
response
Specification
Supports
Merging
With
Another
Response
Specification
response
Specification
Can
Expect
Body
With
Args
response
Specification
Can
Expect
Content
With
Args
supports
Specifying
Parameters
In
Request
Spec
Builder
supports
Specifying
Default
Request
Spec
supports
Specifying
Query
Parameters
In
Request
Spec
Builder
When
Get
supports
Specifying
Query
Parameters
In
Request
Spec
Builder
When
Post
supports
Merges
Parameters
When
Using
Request
Spec
Builder
supports
Merging
Cookies
When
Using
Request
Spec
Builder
supports
Merging
Headers
When
Using
Request
Spec
Builder
supports
Merging
Request
Spec
Headers
Using
The
Builder
request
Spec
Builder
Supports
Setting
Authentication
supports
Merging
Multi
Value
Parameters
When
Using
Request
Spec
Builder
supports
Merging
Multi
Value
Query
Parameters
When
Using
Request
Spec
Builder
supports
Merging
Multi
Value
Form
Parameters
When
Using
Request
Spec
Builder
supports
Merging
Multi
Value
Parameters
Using
List
When
Using
Request
Spec
Builder
supports
Merging
Multi
Value
Query
Parameters
Using
List
When
Using
Request
Spec
Builder
supports
Merging
Multi
Value
Form
Parameters
Using
List
When
Using
Request
Spec
Builder
supports
Merging
Form
Parameters
When
Using
Request
Spec
Builder
supports
Merging
Path
Parameters
When
Using
Request
Spec
Builder
supports
Setting
Logging
When
Using
Request
Spec
Builder
supports
Setting
Logging
When
Using
Request
And
Response
Spec
Builder
supports
Setting
Logging
When
Using
Only
Response
Spec
Builder
supports
Setting
Config
When
Using
Request
Spec
Builder
merges
Statically
Defined
Response
Specifications
Correctly
merges
Statically
Defined
Request
Specifications
Correctly
using
Json
Parser
When
Content
Type
Is
Html
should
See
Exception
When
Mapping
Type
For
JAXB
simple
JSON
And
Hamcrest
Matcher
form
Params
Accepts
Int
Arguments
form
Param
Accepts
Int
Arguments
body
With
Single
Hamcrest
Matching
body
With
Single
Hamcrest
Matching
Using
Path
Params
body
Hamcrest
Matcher
Without
Key
using
Request
Spec
With
Params
Works
With
Post
request
Content
Type
uri
Not
Found
T
When
Post
request
Specification
Allows
Specifying
Headers
request
Specification
Allows
Specifying
String
Body
For
Post
request
Specification
Allows
Specifying
Json
Body
For
Post
request
Specification
Allows
Specifying
Json
Body
As
Input
Stream
For
Post
request
Specification
Allows
Specifying
String
For
Post
request
Specification
Allows
Specifying
Int
For
Post
request
Specification
Allows
Specifying
Float
For
Post
request
Specification
Allows
Specifying
Double
For
Post
request
Specification
Allows
Specifying
Short
For
Post
request
Specification
Allows
Specifying
Boolean
For
Post
request
Specification
Allows
Specifying
Json
Content
For
Post
request
Specification
Allows
Specifying
Json
Body
As
String
For
Post
response
Specification
Allows
Specifying
Json
Body
For
Post
response
Specification
Allows
Specifying
Json
Body
As
String
For
Post
multi
Value
Parameters
Supports
Appending
When
Passing
In
List
supports
Returning
Post
Body
supports
Getting
Response
Body
When
Status
Code
Is401
request
Specification
Allows
Specifying
Binary
Body
For
Post
request
Specification
With
Content
Type
Octet
Stream
Allows
Specifying
Binary
Body
For
Post
request
Specification
With
Unrecognized
Content
Type
Allows
Specifying
Binary
Body
For
Post
request
Specification
Allows
Specifying
Cookie
byte
Array
Body
With
Json
Content
Type
Is
Processed
Correctly
custom
Json
Compatible
Content
Type
With
Body
query
Parameters
In
Post
Are
Url
Encoded
uploading
Works
For
Byte
Arrays
With
Post
uploading
Works
For
Byte
Arrays
With
Put
uploading
Works
For
Byte
Arrays
Without
Explicit
Content
Type
uploading
Works
For
File
With
Post
uploading
Works
For
File
With
Put
uploading
Works
For
Input
Stream
With
Post
uploading
Works
For
Input
Stream
With
Put
uploading
Works
For
File
With
Post
And
Body
search
Heise
search
Apache
test
Url
Encoding
On
Heise
test
Url
Encoding
On
Apache
hello
World
Spec
throws
SSL
Exception
When
Hostname
In
Cert
Doesnt
Match
given
Trust
Store
Defined
Statically
When
Specifying
Jks
Key
Store
File
With
Correct
Password
Allows
To
Use
SSL
when
Enabling
Allow
All
Host
Names
Verifier
Without
Activating
A
Key
Store
using
Statically
Configured
Certificate
Authentication
Works
using
Statically
Configured
Certificate
Authentication
With
Illegal
Host
Name
In
Cert
Doesnt
Work
using
Statically
Configured
Certificate
Authentication
With
Illegal
Host
Name
In
Cert
Works
When
SSL
Config
Is
Configured
To
Allow
All
Host
Names
given
Keystore
Defined
Using
Given
When
Specifying
Jks
Key
Store
File
With
Correct
Password
Allows
To
Use
SSL
throws
IO
Exception
When
Password
Is
Incorrect
certificate
Authentication
Works
allows
specifying
trust
store
in
dsl
allows
specifying
trust
store
statically
allows
specifying
trust
store
and
allow
all
host
names
in
config
using
dsl
relaxed
https
validation
works
using
instance
config
relaxed
https
validation
works
using
instance
dsl
relaxed
https
validation
works
when
defined
statically
relaxed
https
validation
works
when
defined
statically
with
base
uri
truststore
works
with
static
base
uri
truststrore
works
with
static
base
uri
can
make
request
to
sites
that
with
valid
ssl
cert
allows
specifying
trust
store
statically
with
request
builder
supports
setting
truststore
in
request
specification
supports
overriding
truststore
in
request
specification
start
Jetty
relaxed
https
validation
throws
exception
without
keystore
relaxed
https
validation
works
using
instance
config
get
Hello
set
Hello
equals
hash
Code
get
First
Name
set
First
Name
get
Last
Name
set
Last
Name
equals
hash
Code
get
Message
set
Message
using
Static
Default
Parser
Parsers
Any
Content
When
Response
Content
Type
Is
Defined
using
Default
Parser
Parsers
Any
Content
When
Response
Content
Type
Is
Defined
using
Static
Default
Parser
When
Response
Content
Type
Is
Un
Defined
using
Default
Parser
When
Response
Content
Type
Is
Un
Defined
basic
Authentication
basic
Authentication
Using
Default
explicit
Exclude
Of
Basic
Authentication
When
Using
Default
supports
Expecting
Status
Code
When
Authentication
Error
supports
Preemptive
Basic
Authentication
supports
Expecting
Status
Code
When
Preemptive
Basic
Authentication
Error
preemptive
Basic
Authentication
Using
Default
explicit
Exclude
Of
Preemptive
Basic
Authentication
When
Using
Default
form
Authentication
Using
Spring
Auth
Conf
form
Authentication
With
Auto
Form
Details
And
Auto
Csrf
Detection
Defined
In
Request
Config
form
Authentication
With
Defined
Csrf
Field
Defined
In
Request
Config
form
Authentication
With
Auto
Form
Details
And
Auto
Csrf
Detection
Defined
In
Static
Request
Config
form
Authentication
With
Defined
Csrf
Field
Defined
In
Static
Request
Config
form
Authentication
With
Auto
Form
Details
And
Auto
Csrf
Detection
Defined
In
DSL
form
Authentication
With
Defined
Csrf
Field
Defined
Defined
In
DSL
form
Authentication
With
Defined
Csrf
Field
As
Header
form
Authentication
With
Additional
Fields
form
Authentication
With
Csrf
Auto
Detection
But
Specified
Form
Details
form
Authentication
Using
Logging
form
Authentication
Using
Logging
With
Log
Detail
Equal
To
Params
form
Authentication
Using
Logging
With
Log
Detail
Equal
To
Status
form
Authentication
Using
Spring
Auth
Conf
Defined
In
Request
Spec
form
Authentication
With
Login
Page
Parsing
session
Filter
Records
And
Provides
The
Session
Id
reusing
Same
Session
Filter
In
Different
Requests
Applies
The
Session
Id
To
The
New
Request
session
Filter
Records
And
Provides
The
Session
Id
When
Session
Name
Is
Not
Default
form
Authentication
Using
Default
With
Login
Page
Parsing
form
Authentication
Using
Default
With
Spring
Auth
Conf
can
Specify
Port
When
Using
Form
Auth
can
Override
Preemptive
Basic
Auth
From
Static
Configuration
get
method
with
content
filterable
request
specification
returns
correct
port
filter
default
port
keeps
undefined
for
non
localhost
default
port
for
localhost
pure
body
expectations
work
for
unicode
content
json
body
expectations
work
for
unicode
content
xml
body
expectations
work
for
unicode
content
unicode
values
works
in
utf8
for
json
content
by
default
unicode
values
works
in
utf8
for
json
content
when
defined
in
encoder
config
unicode
values
works
in
utf8
for
json
content
when
defined
explicitly
in
dsl
throws
assertion
error
when
a
body
assertion
is
incorrect
throws
assertion
error
when
a
status
assertion
is
incorrect
throws
assertion
error
when
content
type
assertion
is
incorrect
throws
assertion
error
when
header
assertion
is
incorrect
throws
assertion
error
when
cookie
assertion
is
incorrect
due
to
no
cookies
in
the
response
create
proxy
server
stop
proxy
server
using
proxy
with
host
port
and
auth
using
proxy
with
auth
using
proxy
without
ok
auth
can
use
external
proxy
when
No
Expectations
Defined
Then
Get
Can
Return
Body
As
String
when
No
Expectations
Defined
Then
Get
Can
Return
A
String
As
Byte
Array
when
Expectations
Defined
Then
As
String
Returns
Can
Return
The
Response
Body
when
No
Expectations
Defined
Then
Post
Can
Return
Body
As
String
when
No
Expectations
Defined
Then
Post
With
Body
Can
Return
Body
As
String
when
No
Expectations
Defined
Then
Put
Can
Return
Body
As
String
when
No
Expectations
Defined
Then
Put
With
Body
Can
Return
Body
As
String
when
No
Expectations
Defined
Then
Delete
With
Body
Can
Return
Body
As
String
response
Supports
Getting
Cookies
response
Supports
Getting
Headers
response
Supports
Getting
Status
Line
response
Supports
Getting
Status
Code
when
No
Expectations
Defined
Then
Get
Can
Return
Body
As
Input
Stream
when
Expectations
Defined
Then
Get
Can
Return
Body
As
Input
Stream
when
Expectations
Defined
And
Logging
Then
Get
Can
Return
Body
As
Input
Stream
when
No
Expectations
Defined
But
Logging
Then
Get
Can
Return
Body
As
Input
Stream
using
Json
Path
View
From
The
Response
using
Xml
Path
View
From
The
Response
using
Xml
Path
With
Html
Compatibility
Mode
From
The
Response
using
Html
Path
To
Parse
Html
From
The
Response
using
Path
With
Content
Type
Json
From
The
Response
using
Path
With
Parameters
using
Path
With
Content
Type
Xml
From
The
Response
using
A
Custom
Registered
Parser
Allows
Using
Path
using
A
Default
Parser
Allows
Using
Path
response
Take
Charset
Into
Account
json
Path
Returned
By
Response
Uses
Configuration
From
Rest
Assured
json
Path
With
Config
Returned
By
Response
Overrides
Configuration
From
Rest
Assured
path
Works
For
Multiple
Invocations
With
Json
path
Throws
Exception
When
Trying
To
Use
Xml
Path
After
Having
Used
Json
Path
path
Works
For
Multiple
Invocations
With
Xml
path
Throws
Exception
When
Trying
To
Use
Json
Path
After
Having
Used
Xml
Path
can
Parse
Path
After
Pretty
Print
can
Parse
Path
After
Print
can
Get
As
String
Multiple
Times
can
Get
As
Byte
Array
Multiple
Times
can
Combine
As
Byte
Array
With
Pretty
Print
And
As
String
can
Combine
As
String
With
Pretty
Print
And
As
Byte
Array
can
Parse
Path
After
Pretty
Peek
can
Parse
Path
After
Peek
extract
response
as
string
works
extract
response
as
pretty
string
works
extract
single
path
works
extract
entire
response
works
extract
single
path
works
after
body
validation
extract
single
path
works
after
status
code
and
body
validation
extract
single
path
works
after
multiple
body
validations
extract
using
type
ref
extract
using
type
ref2
validates
Xsd
String
validates
Xsd
String
In
Classpath
When
Path
Starts
With
Slash
validates
Xsd
String
In
Classpath
When
Path
Doesnt
Start
With
Slash
validates
Xsd
Input
Stream
validates
Xsd
String
And
Path
possible
To
Specify
A
Resource
Resolver
When
Matching
Xsd
filter
load
resolve
Resource
get
Character
Stream
set
Character
Stream
get
Byte
Stream
set
Byte
Stream
get
String
Data
set
String
Data
get
System
Id
set
System
Id
get
Public
Id
set
Public
Id
get
Base
URI
set
Base
URI
get
Encoding
set
Encoding
get
Certified
Text
set
Certified
Text
no
Value
Param
When
Using
Param
With
Get
Request
no
Value
Param
When
Using
Query
Param
With
Get
Request
multiple
No
Value
Query
Param
When
Using
Query
Param
In
Url
For
Get
Request
single
No
Value
Query
Param
When
Using
Query
Param
In
Url
For
Get
Request
mixing
Starting
No
Value
Query
Param
When
Using
Query
Param
In
Url
For
Get
Request
mixing
Ending
No
Value
Query
Param
When
Using
Query
Param
In
Url
For
Get
Request
no
Value
Param
When
Using
Form
Param
With
Put
Request
no
Value
Param
When
Using
Form
Param
With
Post
Request
multiple
No
Value
Param
When
Using
Form
Param
With
Post
Request
form
Params
Are
Url
Encoded
form
Params
Are
Url
Encoded
With
Defined
Charset
charset
Is
Really
Defined
form
Params
Are
Url
Encoded
With
Utf8When
Charset
Defined
With
No
Equal
Sign
mixing
No
Value
And
Value
Param
When
Using
Form
Param
With
Post
Request
no
Value
Param
When
Using
Param
With
Post
Request
when
Last
Param
In
Get
Request
Ends
With
Equal
Its
Treated
As
A
No
Value
Param
when
First
Param
In
Get
Request
Ends
With
Equal
Its
Treated
As
A
No
Value
Param
multi
Part
Uploading
Works
For
Form
Params
And
Byte
Array
set
Up
Before
Class
tear
Down
After
Class
validates
Xsd
Input
Stream
validates
Xsd
String
throws
Exception
When
Xsd
Validation
Fails
validates
Dtd
Input
Stream
validates
Dtd
String
validates
Dtd
String
In
Classpath
When
Path
Starts
With
Slash
validates
Dtd
String
In
Classpath
When
Path
Doesnt
Starts
With
Slash
throws
Exception
When
Dtd
Validation
Fails
throws
Exception
When
Using
Dtd
For
Xsd
throws
Exception
When
Using
Xsd
For
Dtd
accept
method
with
string
parameter
is
just
an
alias
for
header
accept
accept
method
with
content
type
parameter
is
just
an
alias
for
header
accept
accept
method
from
spec
is
set
to
request
when
specified
as
content
type
accept
method
from
spec
is
set
to
request
when
specified
as
string
accept
headers
are
overwritten
from
request
spec
by
default
filter
accept
headers
are
merged
from
request
spec
and
request
when
configured
to
filter
greeting
configure
json
Path
configure
rest
Assured
rest
Assured
Junit
Bundles
configure
get
UUID
Parses
A
String
Result
To
UUID
configure
Mock
Mvc
Instance
rest
Rest
Assured
file
uploading
works
web
app
context
setup
allows
passing
in
mock
mvc
configurers
using
the
dsl
web
app
context
setup
allows
passing
in
mock
mvc
configurers
statically
setup
basic
auth
request
post
processor
works
can
specify
request
post
processor
statically
for
authentication
can
specify
authentication
request
post
processor
using
spec
builder
basic
auth
request
post
processor
works
with
explicit
user
can
specify
user
for
controllers
not
protected
by
basic
auth
can
use
spring
security
mock
annotations
can
authenticate
using
dsl
post
processors
can
authenticate
using
static
post
processors
can
authenticate
using
post
processors
in
spec
spring
security
configurer
is
automatically
applied
when
spring
security
test
is
in
classpath
when
using
the
dsl
spring
security
configurer
is
automatically
applied
when
spring
security
test
is
in
classpath
when
using
the
dsl
and
post
processor
is
applied
before
web
app
context
setup
spring
security
configurer
is
automatically
applied
when
spring
security
test
is
in
classpath
when
using
a
specifications
applied
before
web
app
context
setup
spring
security
configurer
is
automatically
applied
when
spring
security
test
is
in
classpath
when
using
a
specifications
applied
after
web
app
context
setup
spring
security
configurer
is
automatically
applied
when
spring
security
test
is
in
classpath
when
using
static
configuration
doesnt
add
spring
security
configurer
automatically
when
mock
mvc
config
is
configured
not
to
doesnt
add
spring
security
configurer
automatically
when
a
spring
security
configurer
has
been
manually
applied
init
do
Filter
destroy
get
Filters
file
uploading
works
using
standard
rest
assured
file
uploading
works
using
standard
rest
assured2
data
configure
Mock
Mvc
Instance
rest
Rest
Assured
file
uploading
works
input
stream
uploading
works
byte
array
uploading
works
byte
array
uploading
works
with
mime
type
multiple
uploads
works
object
serialization
works
file
upload
and
param
mixing
works
allows
settings
default
control
name
using
instance
configuration
allows
settings
default
control
name
using
static
configuration
allows
settings
default
file
name
using
instance
configuration
allows
settings
default
file
name
using
static
configuration
allows
sending
multipart
without
a
filename
when
default
file
name
is
empty
allows
sending
multipart
without
a
filename
when
default
file
name
is
set
multi
part
uploading
supports
specifying
default
subtype
explicit
multi
part
content
type
has
precedence
over
default
subtype
get
First
Name
set
First
Name
get
Last
Name
set
Last
Name
equals
hash
Code
start
Jetty
pre
Configure
set
Up
Before
Test
stop
Jetty
configure
configure
multipart
Resolver
password
Encoder
get
Root
Config
Classes
get
Servlet
Config
Classes
get
Servlet
Mappings
get
Name
set
Name
get
Original
Name
set
Original
Name
get
Size
set
Size
get
Mime
Type
set
Mime
Type
get
Content
set
Content
greeting
get
Id
get
Content
file
Upload
file
Upload2
multi
File
Upload
file
Upload
With
Param
non
Multipart
File
Upload
file
Upload
With
Control
Name
Equal
To
Something
file
Upload
With
Control
Name
Equal
To
Something
greeting
get
File
set
File
get
Param
set
Param
json
path
returns
big
decimal
for
json
numbers
when
configured
accordingly
json
path
returns
float
for
json
numbers
when
configured
accordingly
json
path
returns
big
integer
for
json
integer
numbers
when
configured
accordingly
json
path
returns
big
integer
for
json
long
numbers
when
configured
accordingly
json
path
supports
deserializing
input
stream
using
with
given
charset
json
path
cannot
correctly
deserialize
input
stream
using
wrong
charset
json
path
supports
custom
deserializer
deserialize
json
path
supports
custom
deserializer
with
static
configuration
deserialize
extracting
first
lotto
winner
to
java
object
getting
numbers
greater
than
ten
for
lotto
winner
with
id
equal
to
23
data
json
path
supports
buitin
deserializers
json
path
supports
buitin
deserializers
with
arrays
get
Winner
Id
set
Winner
Id
get
Numbers
set
Numbers
get
First
Name
set
First
Name
get
Last
Name
set
Last
Name
equals
hash
Code
get
Category
set
Category
get
Author
set
Author
get
Title
set
Title
get
Isbn
set
Isbn
get
Price
set
Price
equals
hash
Code
get
List
first
Book
Category
last
Book
Title
books
With
Arg
Author
books
Between5And15
size
In
Path
get
Root
Object
As
Map
get
Float
And
Doubles
As
Big
Decimal
get
Float
And
Doubles
As
Big
Decimal
Using
Static
Configuration
non
Static
Json
Path
Config
Has
Precedence
Over
Static
Configuration
get
Root
Object
As
Map2
root
Path
root
Path
Followed
By
Array
Indexing
supports
Getting
Entire
Object
Graph
Using
Empty
String
supports
Getting
Entire
Object
Graph
Using$
supports
Getting
Entire
Object
Graph
Using
No
Argument
Get
get
Value
From
Unnamed
Root
Object
get
Value
From
Unnamed
Root
Object
Using
Brackets
get
Sub
Value
From
Unnamed
Root
Object
Using
Brackets
get
Numerical
Values
converts
Value
To
String
When
Explicitly
Requested
converts
Value
To
Int
When
Explicitly
Requested
converts
Value
To
Double
When
Explicitly
Requested
converts
Value
To
Float
When
Explicitly
Requested
converts
Value
To
UUID
When
Explicitly
Requested
converts
List
Members
To
Defined
Type
If
Possible
get
Map
With
Generic
Type
get
Map
With
Another
Generic
Type
get
String
Converts
The
Result
To
A
String
malformed
Json
get
Object
Works
When
Path
Points
To
A
Json
Object
get
Object
Works
When
Path
Points
To
A
Type
Ref
Map
get
Object
Works
When
Path
Points
To
A
Type
Ref
List
get
Object
Works
When
Path
Points
To
A
Json
Object2
get
Object
As
Map
Works
When
Path
Points
To
A
Json
Object
get
Object
Works
When
Path
Points
To
A
List
get
Object
As
Float
Works
When
Path
Points
To
A
Float
get
Object
As
String
Works
When
Path
Points
To
A
String
json
Path
Supports
Prettifiying
Json
json
Path
Supports
Pretty
Printing
Json
json
Path
Supports
Pretty
Peeking
Json
json
Path
Supports
Peeking
At
The
Json
can
Parse
Json
Document
When
First
Key
Is
Integer
Using
Manual
Escaping
can
Parse
Json
Document
When
First
Key
That
Is
A
Integer
Using
No
Escaping
can
Parse
Json
Document
When
Path
Includes
Key
That
Is
A
Integer
Using
No
Escaping
can
Parse
Json
Document
When
Path
Includes
Key
That
Is
A
Boolean
Using
Escaping
can
Parse
Json
Document
When
Path
Includes
Key
That
Is
A
Boolean
Using
No
Escaping
can
Parse
Json
Document
When
Path
Includes
Minus
Inside
Escaped
can
Parse
Json
Document
With
Multiple
Consecutive
Integers
Inside
Path
can
parse
multiple
values
pretty
printing
works
parses
json
document
with
attribute
name
equal
to
properties
parses
json
document
with
attribute
name
equal
to
size
can
find
if
a
key
exists
in
json
object
can
parse
json
attributes
starting
with
a
number
automatically
escapes
json
attributes
whose
name
equals
properties
can
manually
escape
class
property
automatically
escapes
class
property
unicode
json
values
are
pretty
printed
without
unicode
escaping
need
to
escape
lists
with
hyphen
and
brackets
doesnt
need
to
escape
lists
with
hyphen
without
brackets
does
not
fail
on
absent
lists
prettify
Json
deserialize
deserialize
do
Call
deserialize
do
Call
create
Jackson2Object
Mapper
deserialize
create
Jackson
Object
Mapper
deserialize
deserialize
as
String
as
Byte
Array
as
Input
Stream
deserialize
With
Object
Mapper
deserialize
With
Gson
deserialize
With
Jackson1
deserialize
With
Jackson2
deserialize
With
Johnzon
deserialize
With
Jsonb
default
Charset
charset
charset
number
Return
Type
number
Return
Type
should
Represent
Json
Numbers
As
Big
Decimal
default
Parser
Type
has
Default
Parser
Type
has
Custom
Gson
Object
Mapper
Factory
has
Custom
Jackson10Object
Mapper
Factory
has
Custom
Jackson20Object
Mapper
Factory
has
Custom
Johnzon
Object
Mapper
Factory
has
Custom
Jsonb
Object
Mapper
Factory
default
Parser
Type
default
Deserializer
has
Default
Deserializer
default
Object
Deserializer
gson
Object
Mapper
Factory
gson
Object
Mapper
Factory
jackson1Object
Mapper
Factory
jackson1Object
Mapper
Factory
jackson2Object
Mapper
Factory
johnzon
Object
Mapper
Factory
jackson2Object
Mapper
Factory
jsonb
Object
Mapper
Factory
jsonb
Object
Mapper
Factory
json
Path
Config
with
and
is
Float
Or
Double
get
get
get
Boolean
get
Char
get
Int
get
Byte
get
Short
get
Float
get
Double
get
Long
get
String
get
UUID
get
List
get
List
get
Map
get
Map
get
Object
get
Object
param
peek
pretty
Peek
prettify
pretty
Print
using
using
using
using
and
given
given
given
given
given
with
with
with
with
with
from
from
from
from
from
set
Root
set
Root
Path
parse
Input
Stream
do
Parse
With
method
parse
Reader
do
Parse
With
method
parse
File
do
Parse
With
method
parse
Text
do
Parse
With
method
parse
URL
do
Parse
With
method
to
Reader
method
invoke
get
Json
Object
create
Json
Assertion
create
Configurable
Json
Slurper
get
Json
Path
Config
parse
With
do
Parse
With
reset
to
Json
String
object
To
String
json
String
To
Object
deserialize
create
create
create
create
create
cookie
Policy
Is
Set
To
Ignore
Cookies
By
Default
set
Params
Respects
Other
Configuration
Settings
set
Params
Correctly
Updates
Previous
Setting
add
Params
Respects
Other
Configuration
Settings
add
Param
Correctly
Updates
Previous
Setting
should
Not
Overwrite
Failure
Config
on
Failure
should
Overwrite
Header
With
Name
returns
true
when
applicable
should
Overwrite
Header
With
Name
returns
false
when
applicable
should
Overwrite
Header
With
Name
is
case
insensitive
should
Overwrite
Header
With
Name
returns
true
when
defining
multiple
headers
at
once
content
type
header
is
overwritable
by
default
accept
header
is
overwritable
by
default
accept
header
is
mergeable
if
configured
accordingly
content
type
header
is
mergeable
if
configured
accordingly
merge
Headers
With
Name
works
as
expected
response
spec
doesnt
throw
NPE
when
logging
all
after
creation
response
Spec
Should
Contain
Merged
Expectations
response
Parser
Should
Handle
Configured
Content
Type
default
Response
Parser
Should
Be
Configured
To
Handle
Unrecognized
Content
Types
valid
Response
Should
Match
invalid
Response
Should
Not
Match
data
response
Mock
response
Mock
In
Json
request
spec
doesnt
throw
NPE
when
logging
after
creation
request
spec
picks
up
filters
from
static
config
request
spec
picks
up
headers
from
static
request
spec
root
Path
Should
Be
Set
root
Path
Should
Overwrite
Previous
Root
Path
root
Path
With
Arguments
Should
Be
Evaluated
And
Set
root
Path
To
Append
Should
Be
Appended
To
Previous
Root
Path
root
Path
With
Arguments
To
Append
Should
Be
Appended
To
Previous
Root
Path
root
Path
Should
Be
Reset
root
Path
Should
Be
Detached
header
has
same
name
as
expected
header
does
not
have
same
name
as
expected
content
type
with
charset
returns
the
content
type
with
the
given
charset
content
type
with
java
charset
returns
the
content
type
with
the
given
charset
content
type
matches
expected
content
type
using
ignore
case
content
type
doesnt
match
when
expected
content
type
is
not
equal
to
actual
content
type
doesnt
match
when
expected
content
type
is
null
data
should
find
content
type
from
string
can
use
negative
values
as
max
age
set
Up
add
Cookies
To
Matching
Url
Request
add
Duplicate
Name
Cookies
Like
In
Browser
doesnt
Add
Cookies
To
Non
Matching
Url
Request
preserve
Cookies
set
Value
get
Value
has
Value
has
Value
send
next
set
Value
get
Value
has
Value
has
Value
send
next
returns
false
when
uri
is
empty
returns
false
when
uri
is
null
returns
false
when
uri
is
blank
returns
false
when
uri
doesnt
contain
scheme
returns
false
when
uri
doesnt
contain
host
returns
false
when
uri
is
malformed
returns
true
when
uri
contains
scheme
and
host
can
merge
map
keys
with
parameters
returns
slash
string
when
fully
qualified
uri
doesnt
have
path
but
have
port
returns
slash
string
when
fully
qualified
uri
doesnt
have
path
and
no
port
returns
uri
as
is
when
uri
is
a
path
starting
with
slash
adds
slash
to
path
when
uri
is
a
path
not
starting
with
slash
removes
query
parameters
from
uri
when
uri
is
not
fully
qualified
removes
query
params
form
fully
qualified
uri
with
path
removes
query
params
form
uri
without
port
but
with
path
returns
slash
when
path
is
undefined
for
fully
qualified
uri
returns
path
when
param
has
scheme
returns
path
when
path
is
fully
qualified
uri
and
param
has
scheme
to
Byte
Array
small
to
Byte
Array
big
should
Include
Mismatched
Description
matches
Safely
describe
To
describe
Mismatch
Safely
should
Print
Nicely
Without
Mismatch
Description
matches
Safely
describe
To
should
Print
Nicely
With
Default
Equal
Matcher
returns
content
type
as
is
when
charset
is
undefined
returns
gzipped
decompressed
content
when
content
length
is
minus
one
get
Content
Length
should
not
fail
on
empty
response
with
gzip
get
Content
Length
gzip
Compress
data
expected
Message
Format
With
Type
Details
test
Set
Version
deals
with
empty
cookie
values
should
Print
Valid
Error
Message
For
Standard
Matchers
should
Print
Valid
Error
Message
For
Custom
Matcher
matches
Safely
describe
To
form
Input
Not
Null
Null
Null
Output
Illegal
Argument
Exception
form
Input
Null
Not
Null
Null
Output
Illegal
Argument
Exception
equals
Input
Null
Output
False
specification
querier
allows
querying
request
specifications
features
properties
features
properties
feature
property
declared
Namespaces
declare
Namespaces
declare
Namespace
disable
Loading
Of
External
Dtd
validating
is
Validating
namespace
Aware
is
Namespace
Aware
allow
Doc
Type
Declaration
is
Allow
Doc
Type
Declaration
with
and
xml
Config
is
User
Configured
key
Store
key
Store
key
Store
trust
Store
trust
Store
keystore
Type
trust
Store
Type
port
trust
Store
relaxed
HTTPS
Validation
relaxed
HTTPS
Validation
get
Accepted
Issuers
check
Client
Trusted
check
Server
Trusted
ssl
Socket
Factory
x509Hostname
Verifier
strict
Hostnames
allow
All
Hostnames
ssl
Config
and
with
using
get
Path
To
Key
Store
get
Path
To
Trust
Store
get
Key
Store
Password
get
Trust
Store
Password
get
Key
Store
Type
get
Trust
Store
Type
get
Port
get
Trust
Store
get
Key
Store
get
SSL
Socket
Factory
get
X509Hostname
Verifier
is
User
Configured
load
Key
Store
close
Idle
Connections
After
Each
Response
close
Idle
Connections
After
Each
Response
After
close
Idle
Connections
After
Each
Response
After
dont
Close
Idle
Connections
After
Each
Response
close
Idle
Connection
Config
should
Close
Idle
Connections
After
Each
Response
connection
Config
and
is
User
Configured
get
Idle
Time
get
Time
Unit
is
User
Configured
get
Failure
Listeners
failure
Config
with
failure
Listeners
failure
Listeners
is
User
Configured
is
Csrf
Enabled
csrf
Config
csrf
Meta
Tag
Name
csrf
Input
Field
Name
logging
Enabled
logging
Enabled
logging
Enabled
logging
Enabled
csrf
Header
Name
with
and
get
Csrf
Prioritization
is
Csrf
Prioritization
csrf
Prioritization
csrf
Token
Path
csrf
Token
Path
csrf
Token
Path
get
Csrf
Token
Path
get
Csrf
Meta
Tag
Name
get
Csrf
Header
Name
get
Csrf
Input
Field
Name
get
Log
Config
is
Logging
Enabled
get
Log
Detail
follow
Redirects
allow
Circular
Redirects
reject
Relative
Redirect
max
Redirects
and
follows
Redirects
allows
Circular
Redirects
reject
Relative
Redirects
max
Redirects
redirect
Config
is
User
Configured
error
Description
Type
error
Description
Type
has
Error
Description
Type
is
User
Configured
matcher
Config
default
Control
Name
default
File
Name
default
Subtype
empty
Default
File
Name
default
Control
Name
default
File
Name
default
Subtype
default
Boundary
default
Charset
default
Charset
default
Boundary
default
Charset
is
User
Configured
multi
Part
Config
and
with
overwrite
Headers
With
Name
merge
Headers
With
Name
should
Overwrite
Header
With
Name
header
Config
new
Hash
Map
Returning
False
By
Default
get
is
User
Configured
number
Return
Type
should
Represent
Json
Numbers
As
Big
Decimal
number
Return
Type
with
json
Config
is
User
Configured
is
Session
Id
Value
Defined
session
Id
Value
session
Id
Name
session
Id
Name
session
Id
Value
session
Config
and
is
User
Configured
default
Stream
blacklisted
Headers
default
Stream
is
Pretty
Printing
Enabled
is
Logging
Of
Request
And
Response
If
Validation
Fails
Enabled
log
Detail
Of
Request
And
Response
If
Validation
Fails
enable
Pretty
Printing
enable
Logging
Of
Request
And
Response
If
Validation
Fails
enable
Logging
Of
Request
And
Response
If
Validation
Fails
url
Encode
Request
Uri
blacklist
Header
blacklist
Headers
blacklist
Default
Sensitive
Headers
should
Url
Encode
Request
Uri
log
Config
and
is
User
Configured
default
Object
Mapper
Type
has
Default
Object
Mapper
Type
default
Object
Mapper
Type
default
Object
Mapper
has
Default
Object
Mapper
default
Object
Mapper
gson
Object
Mapper
Factory
gson
Object
Mapper
Factory
jackson1Object
Mapper
Factory
jackson1Object
Mapper
Factory
jackson2Object
Mapper
Factory
jackson2Object
Mapper
Factory
jaxb
Object
Mapper
Factory
jakarta
EE
Object
Mapper
Factory
johnzon
Object
Mapper
Factory
jsonb
Object
Mapper
Factory
jsonb
Object
Mapper
Factory
jaxb
Object
Mapper
Factory
jakarta
EE
Object
Mapper
Factory
object
Mapper
Config
and
is
User
Configured
new
Jaxb
Object
Mapper
Factory
Or
Null
If
Not
In
Classpath
new
Jakarta
EE
Object
Mapper
Factory
Or
Null
If
Not
In
Classpath
redirect
http
Client
log
Config
encoder
Config
decoder
Config
session
Config
object
Mapper
Config
connection
Config
json
Config
xml
Config
ssl
Config
matcher
Config
header
Config
multi
Part
Config
param
Config
oauth
Config
failure
Config
csrf
Config
and
set
with
get
Redirect
Config
get
Log
Config
get
Http
Client
Config
get
Encoder
Config
get
Decoder
Config
get
Session
Config
get
Object
Mapper
Config
get
Connection
Config
get
Json
Config
get
Xml
Config
get
SSL
Config
get
Matcher
Config
get
Header
Config
get
Multi
Part
Config
get
Param
Config
get
O
Auth
Config
get
Failure
Config
get
Csrf
Config
new
Config
config
is
User
Configured
conf
is
User
Configured
merge
All
Parameters
replace
All
Parameters
form
Params
Update
Strategy
request
Params
Update
Strategy
query
Params
Update
Strategy
form
Params
Update
Strategy
request
Params
Update
Strategy
query
Params
Update
Strategy
path
Params
Update
Strategy
is
User
Configured
param
Config
and
with
default
Charset
For
Content
Type
default
Charset
For
Content
Type
has
Default
Charset
For
Content
Type
default
Content
Charset
default
Query
Parameter
Charset
default
Charset
For
Content
Type
default
Charset
For
Content
Type
default
Charset
For
Content
Type
default
Charset
For
Content
Type
default
Content
Charset
default
Query
Parameter
Charset
default
Query
Parameter
Charset
default
Content
Charset
append
Default
Content
Charset
To
Content
Type
If
Undefined
should
Append
Default
Content
Charset
To
Content
Type
If
Undefined
encoder
Config
and
is
User
Configured
has
Content
Encoders
content
Encoders
encode
Content
Type
As
default
Charset
For
Content
Type
Or
Null
add
Empty
Access
Token
To
Base
String
should
Add
Empty
Access
O
Auth
Token
To
Base
String
is
User
Configured
oauth
Config
and
with
default
Charset
For
Content
Type
default
Charset
For
Content
Type
default
Charset
For
Content
Type
default
Charset
For
Content
Type
default
Charset
For
Content
Type
default
Charset
For
Content
Type
has
Default
Charset
For
Content
Type
default
Content
Charset
content
Decoders
use
No
Wrap
For
Inflate
Decoding
should
Use
No
Wrap
For
Inflate
Decoding
default
Content
Charset
default
Content
Charset
content
Decoders
no
Content
Decoders
decoder
Config
and
with
default
Content
Encoders
merge
is
User
Configured
params
and
reuse
Http
Client
Instance
dont
Reuse
Http
Client
Instance
is
Configured
To
Reuse
The
Same
Http
Client
Instance
set
Param
with
Params
set
Params
add
Params
http
Client
Factory
http
Client
Instance
http
Multipart
Mode
http
Client
Config
http
Multipart
Mode
default
Http
Client
Factory
create
Http
Client
is
User
Configured
create
Http
Client
as
String
as
Pretty
String
as
Byte
Array
as
Input
Stream
as
as
as
as
as
as
as
json
Path
json
Path
xml
Path
xml
Path
xml
Path
html
Path
path
then
print
pretty
Print
peek
pretty
Peek
and
Return
then
Return
body
get
Body
headers
get
Headers
header
get
Header
cookies
detailed
Cookies
get
Cookies
get
Detailed
Cookies
cookie
get
Cookie
detailed
Cookie
get
Detailed
Cookie
content
Type
get
Content
Type
status
Line
get
Status
Line
session
Id
get
Session
Id
status
Code
get
Status
Code
time
time
In
get
Time
get
Time
In
body
body
body
status
Code
status
Code
status
Line
status
Line
headers
headers
header
header
header
header
cookies
cookie
cookies
cookie
cookie
cookie
root
Path
root
Path
root
root
no
Root
no
Root
Path
append
Root
Path
append
Root
append
Root
Path
append
Root
detach
Root
Path
detach
Root
content
Type
content
Type
content
Type
body
body
body
body
and
using
assert
That
spec
parser
default
Parser
extract
log
time
time
on
Fail
Message
status
if
Error
if
Status
Code
Is
Equal
To
if
Status
Code
Matches
body
body
all
all
everything
everything
headers
cookies
if
Validation
Fails
if
Validation
Fails
if
Validation
Fails
body
headers
header
cookies
detailed
Cookies
cookie
detailed
Cookie
content
Type
status
Line
session
Id
status
Code
response
time
time
In
matches
Xsd
matches
Xsd
matches
Xsd
matches
Xsd
matches
Xsd
In
Classpath
matches
Dtd
matches
Dtd
matches
Dtd
matches
Dtd
matches
Dtd
In
Classpath
equal
To
Path
ends
With
Path
starts
With
Path
contains
Path
detailed
Cookie
matcher
and
and
and
and
and
or
or
or
or
or
to
Hamcrest
Matchers
value
value
comment
comment
expiry
Date
expiry
Date
domain
domain
path
path
secured
secured
http
Only
http
Only
version
version
max
Age
max
Age
same
Site
same
Site
filters
filters
replace
Filters
With
replace
Filters
With
filters
expect
with
with
Args
with
No
Args
given
when
given
given
get
get
post
post
put
delete
delete
head
head
patch
patch
options
options
get
post
put
delete
head
patch
options
get
post
put
delete
head
patch
options
get
post
put
delete
head
patch
options
request
request
request
request
request
request
request
request
basic
ntlm
form
form
preemptive
certificate
certificate
certificate
digest
oauth
oauth
oauth2
oauth2
register
Parser
unregister
Parser
reset
create
Test
Specification
apply
Session
Id
If
Applicable
use
Relaxed
HTTPS
Validation
use
Relaxed
HTTPS
Validation
enable
Logging
Of
Request
And
Response
If
Validation
Fails
enable
Logging
Of
Request
And
Response
If
Validation
Fails
key
Store
trust
Store
trust
Store
key
Store
trust
Store
key
Store
proxy
proxy
proxy
proxy
proxy
proxy
apply
Key
Store
apply
Trust
Store
config
basic
spring
Security
with
Additional
Field
with
Additional
Fields
with
Logging
Enabled
with
Logging
Enabled
with
Logging
Enabled
with
Logging
Enabled
form
Auth
Config
and
get
Form
Action
get
User
Input
Tag
Name
get
Password
Input
Tag
Name
get
Log
Config
is
Logging
Enabled
get
Log
Detail
get
Additional
Input
Field
Names
has
Additional
Input
Field
Names
has
User
Input
Tag
Name
has
Password
Input
Tag
Name
has
Form
Action
requires
Parsing
Of
Login
Page
get
Key
Store
Type
get
Trust
Store
Type
get
Port
get
Trust
Store
get
Key
Store
get
SSL
Socket
Factory
strict
Hostnames
allow
All
Hostnames
x509Hostname
Verifier
get
X509Hostname
Verifier
key
Store
Type
trust
Store
Type
port
trust
Store
key
Store
ssl
Socket
Factory
and
with
using
cert
Auth
Settings
control
Name
file
Name
header
headers
mime
Type
charset
with
and
charset
empty
File
Name
build
apply
Content
To
Spec
set
Body
set
Body
set
Body
set
Body
set
Body
add
Cookies
add
Cookie
add
Cookie
add
Cookie
add
Cookies
add
Filter
add
Filters
add
Params
add
Param
add
Param
remove
Param
add
Query
Param
add
Query
Params
add
Query
Param
remove
Query
Param
add
Form
Param
add
Form
Params
add
Form
Param
remove
Form
Param
add
Path
Param
add
Path
Params
add
Path
Params
remove
Path
Param
set
Key
Store
set
Trust
Store
set
Trust
Store
add
Headers
add
Header
set
Content
Type
set
Content
Type
no
Content
Type
csrf
csrf
disable
Csrf
set
Accept
set
Accept
add
Multi
Part
add
Multi
Part
add
Multi
Part
add
Multi
Part
add
Multi
Part
add
Multi
Part
add
Multi
Part
add
Multi
Part
add
Multi
Part
add
Multi
Part
set
Auth
set
Port
set
Url
Encoding
Enabled
set
Session
Id
set
Session
Id
add
Request
Specification
set
Config
build
set
Base
Uri
set
Base
Uri
set
Base
Path
log
set
Trust
Store
set
Key
Store
set
Relaxed
HTTPS
Validation
set
Relaxed
HTTPS
Validation
set
Proxy
set
Proxy
set
Proxy
set
Proxy
set
Proxy
set
Proxy
and
clone
set
Body
set
Body
set
Body
set
Headers
set
Cookies
set
Content
Type
set
Content
Type
set
Header
set
Status
Line
set
Status
Code
build
is
Rest
Assured
Response
ra
Response
expect
Status
Code
expect
Status
Code
expect
Status
Line
expect
Status
Line
expect
Headers
expect
Header
expect
Header
expect
Cookies
expect
Cookie
expect
Cookie
expect
Cookie
expect
Cookie
expect
Response
Time
expect
Response
Time
root
Path
root
Path
append
Root
Path
append
Root
Path
no
Root
Path
detach
Root
Path
expect
Content
Type
expect
Content
Type
expect
Body
expect
Body
expect
Body
add
Response
Specification
log
register
Parser
set
Default
Parser
build
get
Response
Parser
Registrar
rest
Assured
Config
get
Content
Type
from
Content
Type
get
Name
get
Value
has
Same
Name
As
equals
hash
Code
to
String
size
exist
has
Header
With
Name
list
get
get
Value
get
Values
get
List
iterator
as
List
headers
to
String
get
Name
get
Value
has
Value
get
Comment
has
Comment
get
Expiry
Date
has
Expiry
Date
get
Domain
has
Domain
get
Path
has
Path
is
Secured
is
Http
Only
get
Version
has
Version
get
Max
Age
has
Max
Age
get
Same
Site
has
Same
Site
equals
hash
Code
to
String
set
Comment
set
Expiry
Date
set
Domain
set
Path
set
Max
Age
set
Secured
set
Http
Only
set
Version
set
Same
Site
build
size
exist
has
Cookie
With
Name
list
get
get
Value
get
List
get
Values
as
List
iterator
cookies
to
String
get
Content
Type
Strings
to
String
get
Accept
Header
with
Charset
with
Charset
from
Content
Type
matches
get
Order
filter
filter
log
Request
To
with
add
Log
response
Logger
log
Response
To
log
Response
To
log
Response
If
Status
Code
Matches
log
Response
If
Status
Code
Is
log
Response
To
If
Matches
url
Decode
filter
clone
Response
If
Needed
is
Pretty
Printing
Enabled
throw
IAE
error
Logger
log
Errors
To
filter
allow
Multiple
Cookies
With
The
Same
Name
Or
Cookie
Not
Previously
Defined
extract
Response
Cookies
cookie
Origin
From
Uri
get
Cookie
Store
set
Value
get
Value
has
Value
has
Value
send
next
filter
measure
Time
filter
request
Has
Session
Id
Defined
has
Stored
Session
Id
get
Session
Id
has
Session
Id
set
Response
Headers
set
Cookies
set
Content
set
Content
Type
set
Status
Line
set
Status
Code
set
Session
Id
Name
set
Filter
Context
Properties
set
Connection
Manager
set
Default
Content
Type
set
Rpr
set
Decoder
Config
set
Has
Expectations
set
Config
get
Rpr
get
Config
body
headers
header
cookies
detailed
Cookies
cookie
detailed
Cookie
content
Type
status
Line
session
Id
status
Code
response
as
as
as
as
as
as
as
json
Path
json
Path
xml
Path
xml
Path
xml
Path
html
Path
path
as
String
as
String
as
Pretty
String
as
Byte
Array
as
Input
Stream
is
Input
Stream
print
pretty
Print
peek
pretty
Peek
and
Return
then
Return
get
Body
get
Headers
get
Header
get
Detailed
Cookies
get
Cookie
get
Detailed
Cookie
get
Session
Id
get
Cookies
get
Content
Type
get
Status
Line
get
Status
Code
get
Content
get
Has
Expectations
get
Default
Content
Type
get
Decoder
Config
get
Session
Id
Name
get
Connection
Manager
get
Response
Headers
get
Log
Repository
set
Log
Repository
get
Groovy
Response
get
Filter
Context
Properties
set
Groovy
Response
time
time
In
get
Time
get
Time
In
is
Serializable
Candidate
or
Null
do
Request
doesnt
Have
Entity
should
Apply
Content
Type
From
Rest
Assured
Config
Delegate
parse
Response
get
Content
Type
connection
Config
get
Parser
get
Non
Default
Parser
register
Parser
register
Default
Parser
unregister
Parser
has
Custom
Parser
has
Custom
Parser
Excluding
Default
Parser
is
Uri
should
Send
Token
As
register
Request
Log
register
Response
Log
get
Request
Log
get
Response
Log
safe
Rethrow
safe
Rethrow0
build
Error
to
Byte
Array
original
Response
get
Response
get
Content
Encoding
wrap
Response
Entity
get
Content
get
Content
Length
get
Cause
set
Encoder
Config
encode
Stream
encode
Text
encode
Form
encode
Form
encode
XML
encode
JSON
create
Entity
create
Entity
create
Entity
create
Entity
build
Default
Encoder
Map
get
At
try
To
Find
Matching
Encoder
put
At
property
Missing
property
Missing
iterator
content
Type
To
String
to
String
get
get
post
post
patch
patch
request
request
request
do
Request
do
Request
parse
Response
build
Default
Response
Handlers
default
Success
Handler
default
Failure
Handler
get
Handler
get
Parser
set
Content
Type
get
Content
Type
set
Content
Encoding
set
Uri
get
Uri
set
Headers
get
Headers
get
Client
set
Content
Encoding
Registry
set
Proxy
shutdown
get
Uri
set
Uri
get
Request
get
Content
Type
set
Content
Type
get
Request
Content
Type
set
Request
Content
Type
set
Allow
Content
Type
set
Properties
From
Map
set
Headers
get
Headers
send
set
Body
set
Body
find
Response
Handler
get
Response
get
Context
set
Context
get
Method
create
Http
Request
get
Content
Encoding
wrap
Response
Entity
get
Request
Interceptor
get
Response
Interceptor
to
String
process
process
has
Encoding
to
String
matches
find
get
Name
get
Value
has
Value
to
String
equals
hash
Code
clone
get
Headers
is
Success
get
Status
get
Content
Type
get
Data
set
Data
get
Context
get
At
property
Missing
iterator
get
Entity
get
Locale
get
Status
Line
set
Entity
set
Locale
set
Reason
Phrase
set
Status
Code
set
Status
Line
set
Status
Line
set
Status
Line
add
Header
add
Header
contains
Header
get
All
Headers
get
First
Header
get
Headers
get
Last
Header
get
Params
get
Protocol
Version
header
Iterator
header
Iterator
remove
Header
remove
Headers
set
Header
set
Header
set
Headers
set
Params
convert
To
URI
set
Scheme
set
Port
set
Host
set
Path
set
Query
NVP
set
Query
get
Query
get
Query
NVP
has
Query
Param
remove
Query
Param
add
Query
Params
add
Query
Params
set
Fragment
to
String
to
URL
to
URI
as
Type
clone
equals
format
has
Value
encode
parse
contains
Key
get
put
put
All
remove
basic
basic
ntlm
ntlm
certificate
oauth
oauth
oauth2
oauth2
process
get
Oauth
Service
get
Request
Token
Endpoint
get
Authorization
Url
get
Access
Token
Endpoint
is
Empty
O
Auth
Token
Param
Is
Required
get
Authorization
Url
get
Access
Token
Endpoint
get
O
Auth
Signature
Type
get
Content
Encoding
wrap
Response
Entity
get
Content
get
Content
Length
get
At
set
At
get
Attribute
remove
Attribute
set
Attribute
find
Content
Type
get
Default
Encoders
set
Interceptors
size
exist
has
Entity
With
Name
list
get
reverse
get
Value
get
List
get
Values
iterator
as
List
to
String
add
add
reset
size
validate
contains
Matchers
requires
Text
Parsing
requires
Path
Parsing
validate
get
Description
remove
Quotes
If
String
fallback
To
Response
Body
If
Content
Parser
Is
Null
is
X
Path
Matcher
requires
Text
Parsing
requires
Path
Parsing
get
Key
set
Key
get
Matcher
set
Matcher
get
Rpr
set
Rpr
validate
Cookies
get
Expected
Description
get
Mismatch
Description
get
Cookies
get
Key
And
Value
Of
Cookie
set
Cookie
Property
get
Cookie
Name
set
Cookie
Name
get
Matcher
set
Matcher
body
body
all
all
everything
everything
headers
cookies
if
Validation
Fails
if
Validation
Fails
if
Validation
Fails
status
if
Error
if
Status
Code
Is
Equal
To
if
Status
Code
Matches
log
With
log
With
log
With
log
With
get
Print
Stream
should
Pretty
Print
print
to
String
append
New
Line
If
All
print
print
add
Proxy
add
Body
add
Cookies
add
Headers
add
Multi
Parts
add
Single
add
Map
Details
append
Four
Tabs
append
Two
Tabs
append
Three
Tabs
append
Tab
get
Name
get
Value
parse
Response
then
determine
Proxy
body
body
body
body
body
status
Code
status
Code
status
Line
status
Line
headers
headers
header
header
header
header
cookies
cookie
cookies
cookie
cookie
cookie
root
Path
root
Path
root
root
no
Root
no
Root
Path
append
Root
Path
append
Root
Path
detach
Root
Path
content
Type
content
Type
content
Type
body
body
content
and
using
assert
That
spec
parser
default
Parser
extract
log
status
if
Error
if
Status
Code
Is
Equal
To
if
Status
Code
Matches
body
body
all
all
everything
everything
headers
cookies
if
Validation
Fails
if
Validation
Fails
if
Validation
Fails
log
Response
log
Response
log
Response
time
time
on
Fail
Message
original
Response
get
Matcher
From
Response
Aware
Matcher
on
Failure
query
body
body
all
all
everything
everything
headers
cookies
if
Validation
Fails
if
Validation
Fails
if
Validation
Fails
get
Status
Code
get
Status
Line
has
Header
Assertions
has
Cookie
Assertions
get
Response
Content
Type
get
Root
Path
get
Log
Detail
get
Content
get
Control
Name
get
Mime
Type
get
Headers
get
Charset
get
File
Name
has
File
Name
basic
ntlm
digest
form
form
certificate
certificate
oauth2
oauth2
oauth
oauth
preemptive
none
body
body
body
body
body
body
body
redirects
cookies
cookies
cookies
cookie
cookie
cookie
params
params
param
param
query
Params
query
Params
query
Param
query
Param
form
Params
form
Params
form
Param
form
Param
path
Param
path
Params
path
Params
config
key
Store
key
Store
trust
Store
trust
Store
trust
Store
key
Store
relaxed
HTTPS
Validation
relaxed
HTTPS
Validation
headers
headers
headers
header
header
content
Type
content
Type
no
Content
Type
accept
accept
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
auth
csrf
csrf
disable
Csrf
port
spec
session
Id
session
Id
url
Encoding
Enabled
filter
filters
filters
no
Filters
no
Filters
Of
Type
log
response
and
with
then
expect
when
given
that
request
base
Uri
base
Path
proxy
proxy
proxy
proxy
proxy
proxy
host
port
auth
with
Port
with
Host
with
Auth
with
Scheme
and
get
Host
get
Port
get
Scheme
get
Password
get
Username
has
Auth
equals
hash
Code
to
String
get
Argument
with
Arg
arg
equals
hash
Code
basic
oauth2
status
if
Error
if
Status
Code
Is
Equal
To
if
Status
Code
Matches
params
parameters
uri
method
get
get
post
post
put
put
delete
delete
head
head
patch
patch
options
options
get
post
put
delete
head
patch
options
get
post
put
delete
head
patch
options
get
post
put
delete
head
patch
options
request
request
request
request
request
request
request
request
max
follow
allow
Circular
reject
Relative
get
Base
Uri
get
Base
Path
get
Derived
Path
get
User
Defined
Path
get
Method
get
URI
get
Port
get
Content
Type
get
Authentication
Scheme
get
Request
Params
get
Form
Params
get
Path
Params
get
Named
Path
Params
get
Unnamed
Path
Params
get
Unnamed
Path
Param
Values
get
Query
Params
get
Multi
Part
Params
get
Headers
get
Cookies
get
Body
get
Defined
Filters
get
Config
get
Http
Client
get
Proxy
Specification
get
Undefined
Path
Param
Placeholders
get
Path
Param
Placeholders
path
remove
Form
Param
remove
Path
Param
remove
Named
Path
Param
remove
Unnamed
Path
Param
remove
Unnamed
Path
Param
By
Value
remove
Param
remove
Query
Param
remove
Header
remove
Cookie
remove
Cookie
replace
Header
replace
Cookie
replace
Cookie
replace
Headers
replace
Cookies
remove
Headers
remove
Cookies
validate
time
time
body
body
status
Code
status
Code
status
Line
status
Line
headers
headers
header
header
header
cookies
cookie
cookies
cookie
cookie
cookie
log
root
Path
root
root
Path
root
no
Root
Path
no
Root
append
Root
Path
append
Root
Path
append
Root
append
Root
detach
Root
Path
detach
Root
content
Type
content
Type
content
Type
body
body
when
given
that
request
response
and
with
then
expect
spec
parser
default
Parser
log
Detail
on
Fail
Message
get
Content
Type
deserialize
serialize
get
Object
To
Serialize
get
Object
To
Serialize
As
get
Content
Type
get
Charset
read
read
read
skip
available
close
mark
reset
mark
Supported
apply
integer
is
supported
checks
if
is
castable
returns
false
when
object
is
not
castable
get
Type
get
Type
As
Class
compare
To
as
String
as
Byte
Array
as
Input
Stream
create
get
Data
To
Deserialize
get
Type
get
Charset
is
Jackson1In
Class
Path
is
Jackson2In
Class
Path
is
JAXB
In
Class
Path
is
Jakarta
EE
In
Class
Path
is
Gson
In
Class
Path
is
Johnzon
In
Class
Path
is
Yasson
In
Class
Path
get
Data
To
Deserialize
get
Type
get
Charset
set
Data
To
Deserialize
set
Type
set
Charset
exist
In
CP
exists
In
CP
request
and
response
spec
can
be
defined
statically
basic
authentication
filter
is
applied
param
with
int
query
param
given
config
is
stored
in
writer
reset
rest
assured
logging
if
response
validation
fails
works
logging
if
response
validation
fails
doesnt
log
anything
if
validation
succeeds
configure
Web
Test
Client
Instance
rest
Rest
Assured
merges
request
params
by
default
merges
query
params
by
default
merges
form
params
by
default
replaces
path
params
by
default
replaces
request
params
when
configured
to
do
so
replaces
query
params
when
configured
to
do
so
replaces
form
params
when
configured
to
do
so
replaces
all
parameters
when
configured
to
do
so
merges
all
parameters
when
configured
to
do
so
given
rest
assured
is
initialized
with
controller
rest
assured
is
reset
after
each
test
adds
accept
by
content
type
adds
accept
by
string
value
adds
accept
by
media
type
given
config
is
stored
in
writer
reset
rest
assured
logging
param
works
logging
query
param
works
logging
form
param
works
can
supply
string
as
body
for
post
base
path
is
prepended
to
path
when
logging
logging
if
request
validation
fails
works
doesnt
log
if
request
validation
succeeds
when
request
logging
if
validation
fails
is
enabled
given
rest
assured
is
initialized
with
controller
rest
assured
is
reset
after
each
test
base
path
is
prepended
to
path
default
base
path
is
slash
double
slashes
are
prevented
base
path
can
end
with
slash
and
path
doesnt
have
to
begin
with
slash
base
path
doesnt
have
to
end
with
slash
even
though
path
doesnt
begin
with
slash2
path
parameters
are
automatically
supported
document
generation
is
executed
can
use
integer
value
for
status
code
matching
can
use
hamcrest
matcher
for
status
code
matching
can
use
spring
http
status
for
status
matching
request
method
accepts
enum
verb
request
method
accepts
enum
verb
and
unnamed
path
params
request
method
accepts
string
verb
request
method
accepts
string
verb
and
unnamed
path
params
static
request
method
accepts
string
verb
static
request
method
accepts
enum
verb
and
path
params
throws
iae
when
http
verb
is
not
supported
by
web
test
client
query
params
are
merged
path
params
are
merged
implementation
form
params
are
merged
params
are
merged
attributes
are
merged
multi
parts
are
merged
request
body
is
overwritten
when
defined
in
specification
request
body
is
not
overwritten
when
not
defined
in
specification
base
path
is
overwritten
when
defined
in
specification
base
path
is
not
overwritten
when
not
defined
in
specification
web
test
client
instance
is
overwritten
when
defined
in
specification
web
test
client
factory
is
not
overwritten
when
not
defined
in
specification
cookies
are
merged
when
defined
in
specification
cookies
are
not
overwritten
when
not
defined
in
specification
content
type
is
overwritten
when
defined
in
specification
content
type
is
not
overwritten
when
not
defined
in
specification
headers
are
merged
when
defined
in
specification
headers
are
not
overwritten
when
not
defined
in
specification
path
params
are
merged
when
defined
in
specification
path
param
are
not
overwritten
when
not
defined
in
specification
path
param
are
logging
configs
of
same
type
are
overwritten
when
defined
in
specification
config
is
not
overwritten
when
not
defined
in
specification
logging
is
overwritten
when
defined
in
specification
logging
is
not
overwritten
when
not
defined
in
specification
configurations
are
merged
configure
Web
Test
Client
Instance
rest
Rest
Assured
can
send
header
using
header
class
can
use
mapping
function
when
validating
header
value
validate
may
fail
when
using
mapping
function
when
validating
header
value
can
send
header
using
header
name
and
value
can
send
multiple
headers
can
send
headers
using
map
can
send
headers
using
headers
class
can
Use
Response
Aware
Matchers
For
Header
Validation
uses
predefined
web
test
client
instance
param
with
int
uses
predefined
standalone
uses
static
web
test
client
configure
Web
Test
Client
Instance
rest
Rest
Assured
unnamed
path
params
works
request
and
response
spec
can
be
defined
statically
response
validation
fails
if
any
property
in
the
response
is
not
valid
response
validation
kicks
in
even
when
no
then
clause
is
specified
configure
Web
Test
Client
Instance
rest
Rest
Assured
can
receive
cookies
can
use
response
time
validation
in
web
test
client
extension
can
extract
response
time
in
web
test
client
extension
configure
Web
Test
Client
Instance
rest
Rest
Assured
doesnt
automatically
add
x
www
form
urlencoded
as
content
type
when
putting
params
automatically
adds
x
www
form
urlencoded
as
content
type
when
putting
form
params
can
supply
string
as
body
for
put
can
supply
object
as
body
and
serialize
as
json
can
supply
multipart
file
as
parameter
for
put
given
writer
and
captor
is
initialized
reset
rest
assured
assert
JSON
Equal
logging
of
both
request
and
response
validation
works
when
test
fails
logging
of
both
request
with
uri
function
and
response
validation
works
when
test
fails
logging
of
both
request
and
response
validation
works
when
test
fails
when
configured
with
log
detail
logging
of
both
request
and
response
validation
works
when
test
fails
when
using
static
response
and
request
specs
declared
before
enable
logging
doesnt
log
if
request
or
response
when
validation
succeeds
when
request
and
response
logging
if
validation
fails
is
enabled
logging
is
applied
when
using
non
static
response
specifications
process
Cookies
header
headers
greeting
string
Body
json
Reflect
multipart
File
Upload
redirect
greeting
string
Body
json
Reflect
get
First
Name
set
First
Name
get
Last
Name
set
Last
Name
equals
hash
Code
process
Content
Type
process
Query
Params
simple
Greeting
greeting
With
Path
Param
greeting
With
Path
Param
greeting
With
Required
Content
Type
greeting
get
Id
get
Content
greeting
greeting
On
Base
Endpoint
cookie
process
Secured
Request
parser
With
Unknown
Content
Type
greeting
string
Body
json
Reflect
multipart
File
Upload
multi
Value
Param
multi
Value
Param
three
Multi
Value
Param
parser
With
Unknown
Content
Type
configure
Web
Test
Client
Instance
adds
default
charset
to
content
type
by
default
adds
specific
charset
to
content
type
by
default
doesnt
add
default
charset
to
content
type
if
charset
is
defined
explicitly
doesnt
add
default
charset
to
content
type
if
configured
not
to
do
so
configure
Web
Test
Client
Instance
rest
Rest
Assured
can
supply
multipart
file
as
parameter
for
patch
configure
Web
Test
Client
Instance
rest
Rest
Assured
can
send
cookie
using
cookie
class
can
send
cookie
using
cookie
name
and
value
can
send
multiple
cookies
can
send
cookies
using
map
can
send
cookies
using
cookies
class
unnamed
path
params
works
simple
get
works
given
controller
is
assigned
to
rest
assured
rest
assured
is
reset
using
static
parser
its
possible
to
parse
unknown
content
types
using
non
static
parser
its
possible
to
parse
unknown
content
types
configure
Mock
Mvc
Instance
rest
Rest
Assured
unnamed
path
param
works
should
succeed
with
get
method
when
named
parameter
should
succeed
with
get
method
when
unnamed
parameter
should
succeed
with
get
method
with
named
parameter
and
unnamed
parameter
should
succeed
with
get
method
when
named
parameter
is
single
map
value
should
succeed
with
get
method
when
named
parameter
is
multi
map
value
should
succeed
with
get
method
when
named
parameter
per
add
method
should
fail
with
get
method
when
does
not
has
params
should
succeed
with
request
method
when
named
parameter
should
succeed
with
request
method
when
unnamed
parameter
should
succeed
with
request
method
with
named
parameter
and
unnamed
parameter
should
succeed
with
request
method
when
named
parameter
is
single
map
value
should
succeed
with
request
method
when
named
parameter
is
multi
map
value
should
succeed
with
request
method
when
named
parameter
as
value
pairs
should
succeed
with
request
method
when
has
only
unnamed
parameter
should
fail
with
request
method
when
does
not
has
params
can
extract
rest
assured
web
test
client
response
configure
Web
Test
Client
Instance
rest
Rest
Assured
automatically
adds
x
www
form
urlencoded
as
content
type
when
posting
params
can
supply
string
as
body
for
post
can
supply
object
as
body
and
serialize
as
json
can
use
predefined
matcher
for
response
aware
matching
is
User
Configured
web
Test
Client
Config
with
new
Config
config
and
set
with
is
User
Configured
get
Decoder
Config
decoder
Config
get
Encoder
Config
encoder
Config
get
Header
Config
header
Config
get
Json
Config
json
Config
get
Log
Config
log
Config
get
Object
Mapper
Config
object
Mapper
Config
get
Session
Config
session
Config
get
Xml
Config
xml
Config
get
Async
Config
async
Config
get
Multi
Part
Config
multi
Part
Config
get
Client
Config
client
Config
web
Test
Client
Config
get
Param
Config
get
Web
Test
Client
Param
Config
param
Config
param
Config
get
Web
Test
Client
Config
get
Matcher
Config
matcher
Config
attribute
Update
Strategy
form
Params
Update
Strategy
request
Params
Update
Strategy
query
Params
Update
Strategy
path
Params
Update
Strategy
is
User
Configured
param
Config
merge
All
Parameters
replace
All
Parameters
form
Params
Update
Strategy
request
Params
Update
Strategy
query
Params
Update
Strategy
and
with
attribute
Update
Strategy
status
matches
Xsd
matches
Xsd
matches
Xsd
matches
Xsd
matches
Xsd
In
Classpath
matches
Dtd
matches
Dtd
matches
Dtd
matches
Dtd
matches
Dtd
In
Classpath
equal
To
Path
ends
With
Path
starts
With
Path
contains
Path
web
Test
Client
given
with
standalone
Setup
standalone
Setup
standalone
Setup
web
App
Context
Setup
application
Context
Setup
reset
get
get
get
post
get
get
get
request
request
request
request
request
request
request
request
request
request
post
put
post
post
post
post
delete
put
put
put
put
put
delete
head
delete
delete
delete
delete
head
patch
head
head
head
head
patch
patch
patch
patch
patch
options
options
options
options
options
options
enable
Logging
Of
Request
And
Response
If
Validation
Fails
enable
Logging
Of
Request
And
Response
If
Validation
Fails
when
config
get
post
put
delete
patch
head
options
request
request
to
Valid
Http
Method
get
consume
With
get
post
post
put
put
delete
delete
head
head
patch
patch
options
options
get
post
put
delete
head
patch
options
get
post
put
delete
head
patch
options
get
post
put
delete
head
patch
options
request
request
request
request
request
request
request
request
send
Request
build
From
Path
add
Request
Elements
log
Request
If
Applicable
get
Base
Uri
perform
Request
build
Uri
validate
Unnamed
Path
Params
validate
Named
Path
Params
verify
No
Body
And
Multipart
Together
apply
Request
Body
apply
Multipart
Body
apply
Attributes
apply
Param
add
Multipart
To
Req
Spec
apply
Query
Params
apply
Param
apply
Path
Params
apply
Params
apply
Param
apply
Form
Params
apply
Param
get
Multipart
Body
is
Multipart
Request
set
Content
Type
To
Application
Form
Url
Encoded
send
Request
build
From
Uri
Function
log
Request
If
Applicable
get
Rpr
status
original
Response
to
Rest
Assured
Response
assemble
Headers
build
Result
String
convert
Cookies
get
Http
Status
By
Reflection
body
body
all
all
everything
everything
headers
cookies
if
Validation
Fails
if
Validation
Fails
if
Validation
Fails
params
log
With
log
With
to
Request
Specification
log
With
get
Uri
get
Uri
Variables
new
Builder
uri
uri
Variables
build
to
Standard
Response
assign
Config
content
Type
content
Type
content
Type
accept
accept
accept
headers
headers
headers
header
header
log
params
params
param
param
query
Params
query
Params
query
Param
query
Param
path
Params
path
Params
path
Param
form
Params
form
Params
form
Param
form
Param
attribute
attributes
body
body
body
body
body
body
cookies
cookies
cookies
cookie
cookie
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
config
config
spec
session
Id
session
Id
when
standalone
Setup
standalone
Setup
standalone
Setup
web
Test
Client
web
App
Context
Setup
application
Context
Setup
and
to
Request
Specification
get
Request
Body
get
Request
Content
Type
get
post
put
delete
patch
head
options
request
request
consume
With
get
get
post
post
put
put
delete
delete
head
head
patch
patch
options
options
get
post
put
delete
head
patch
options
get
post
put
delete
head
patch
options
get
post
put
delete
head
patch
options
request
request
request
request
request
request
request
request
get
Base
Path
get
Web
Test
Client
Factory
get
Cookies
get
Request
Headers
merge
Config
get
Form
Params
get
Query
Params
get
Path
Params
get
Params
get
Attributes
get
Multi
Parts
get
Request
Logging
Filter
get
Async
Config
get
Rest
Assured
Web
Test
Client
Config
get
Log
Repository
set
Request
Logging
Filter
get
Rest
Assured
Config
base
Path
serialize
If
Needed
to
Web
Test
Client
Param
Config
convert
then
build
is
Assigned
build
is
Assigned
of
of
of
apply
Configurers
And
Filter
build
is
Assigned
content
Type
content
Type
content
Type
accept
accept
accept
headers
headers
headers
header
header
log
params
params
param
param
query
Params
query
Params
query
Param
query
Param
path
Params
path
Params
path
Param
form
Params
form
Params
form
Param
form
Param
attribute
attributes
body
body
body
body
body
body
cookies
cookies
cookies
cookie
cookie
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
config
config
spec
session
Id
session
Id
when
standalone
Setup
standalone
Setup
standalone
Setup
web
Test
Client
web
App
Context
Setup
application
Context
Setup
and
get
Configured
Web
Test
Client
Factory
set
Body
set
Body
set
Body
set
Body
set
Body
add
Cookies
add
Cookie
add
Cookie
add
Params
add
Param
add
Param
add
Query
Param
add
Query
Params
add
Query
Param
add
Path
Param
add
Path
Params
add
Path
Params
add
Form
Param
add
Form
Params
add
Form
Param
add
Attribute
add
Attributes
add
Headers
add
Header
add
Header
set
Content
Type
set
Content
Type
add
Multi
Part
add
Multi
Part
add
Multi
Part
add
Multi
Part
add
Multi
Part
add
Multi
Part
add
Multi
Part
add
Multi
Part
add
Multi
Part
set
Session
Id
set
Session
Id
add
Web
Test
Client
Request
Specification
set
Config
build
set
Base
Path
set
Web
Test
Client
set
Standalone
Setup
set
Standalone
Setup
set
Web
App
Context
Setup
log
and
params
get
post
put
delete
patch
head
options
request
request
consume
With
request
method
accepts
enum
verb
request
method
accepts
enum
verb
and
unnamed
path
params
request
method
accepts
string
verb
request
method
accepts
string
verb
and
unnamed
path
params
static
request
method
accepts
string
verb
static
request
method
accepts
enum
verb
and
path
params
throws
iae
when
http
verb
is
not
supported
by
mock
mvc
configure
Mock
Mvc
Instance
rest
Rest
Assured
merges
request
params
by
default
merges
query
params
by
default
merges
form
params
by
default
replaces
path
params
by
default
replaces
request
params
when
configured
to
do
so
replaces
query
params
when
configured
to
do
so
replaces
form
params
when
configured
to
do
so
replaces
all
parameters
when
configured
to
do
so
merges
all
parameters
when
configured
to
do
so
configure
Mock
Mvc
Instance
rest
Rest
Assured
supports
using
result
handlers
using
the
response
dsl
merges
result
handlers
using
the
dsl
supports
defining
result
handlers
statically
merges
statically
defined
result
handlers
with
dsl
defined
using
response
spec
custom
Result
Handler
handle
response
message
is
formatted
with
rest
assured
description
type
response
message
is
formatted
with
hamcrest
description
type
param
with
int
query
param
given
config
is
stored
in
writer
reset
rest
assured
assert
Json
Equals
Non
Strict
logging
if
response
validation
fails
works
logging
if
response
validation
fails
doesnt
log
anything
if
validation
succeeds
can
use
predefined
matcher
for
response
aware
matching
can
use
custom
matcher
for
response
aware
matching
matcher
adds
accept
by
content
type
intercept
adds
accept
by
string
value
intercept
adds
accept
by
media
type
intercept
given
config
is
stored
in
writer
reset
rest
assured
logging
param
works
logging
query
param
works
logging
form
param
works
can
supply
string
as
body
for
post
can
supply
byte
array
as
body
for
post
base
path
is
prepended
to
path
when
logging
logging
if
request
validation
fails
works
doesnt
log
if
request
validation
succeeds
when
request
logging
if
validation
fails
is
enabled
request
and
response
spec
can
be
defined
statically
given
rest
assured
is
initialized
with
controller
rest
assured
is
reset
after
each
test
base
path
is
prepended
to
path
default
base
path
is
slash
double
slashes
are
prevented
base
path
can
end
with
slash
and
path
doesnt
have
to
begin
with
slash
base
path
doesnt
have
to
end
with
slash
even
though
path
doesnt
begin
with
slash2
request
and
response
spec
can
be
defined
statically
response
validation
fails
if
any
property
in
the
response
is
not
valid
response
validation
kicks
in
even
when
no
then
clause
is
specified
path
parameters
are
automatically
supported
can
disable
automatic
spring
rest
docks
mvc
support
javax
principal
authentication
works
get
Name
spring
security
principal
authentication
works
spring
security
authentication
authentication
works
spring
security
set
authentication
also
set
principal
spring
context
holder
is
cleared
after
test
spring
context
holder
is
cleared
after
failed
test
statically
defined
authentication
works
get
Name
can
override
static
auth
config
with
none
get
Name
spring
context
holder
is
cleared
after
failed
test
when
auth
is
statically
defined
statically
defined
auth
has
precedence
over
statically
defined
request
spec
statically
defined
defined
request
spec
may
include
auth
dsl
defined
defined
request
spec
may
include
auth
can
use
integer
value
for
status
code
matching
can
use
hamcrest
matcher
for
status
code
matching
can
use
spring
http
status
for
status
matching
get
First
Name
set
First
Name
get
Last
Name
set
Last
Name
equals
hash
Code
configure
Mock
Mvc
Instance
rest
Rest
Assured
can
send
header
using
header
class
can
use
mapping
function
when
validating
header
value
validate
may
fail
when
using
mapping
function
when
validating
header
value
can
send
header
using
header
name
and
value
can
send
multiple
headers
can
send
headers
using
map
can
send
headers
using
headers
class
can
Use
Response
Aware
Matchers
For
Header
Validation
configure
Mock
Mvc
Instance
rest
Rest
Assured
can
send
attribute
using
attribute
name
and
value
can
send
attributes
using
map
uses
predefined
mock
mvc
instance
param
with
int
uses
predefined
standalone
uses
static
mock
mvc
configure
Mock
Mvc
Instance
rest
Rest
Assured
unnamed
path
params
works
can
use
response
time
validation
in
mock
mvc
extension
can
extract
response
time
in
mock
mvc
extension
test
Invoke
Method
test
Invoke
Method
With
Typed
test
Invoke
Method
With
Typed
Array
test
Invoke
Method
With
Type
test
Invoke
Method
Without
Param
test
Get
Argument
Types
test
test
query
Param
header
greeting
string
Body
json
Reflect
greeting
greeting
set
Authentication
Set
Both
redirect
greeting
string
Body
json
Reflect
greeting
greeting
With
Path
Param
greeting
With
Path
Param
greeting
With
Required
Content
Type
attribute
get
Id
get
Content
save
File
greeting
greeting2
cookie
set
Cookies
set
Detailed
Cookies
parser
With
Unknown
Content
Type
string
Body
call
too
Long
Awaiting
call
greeting
string
Body
json
Reflect
multi
Value
Param
multi
Value
Param
three
Multi
Value
Param
parser
With
Unknown
Content
Type
mock
mvc
example
for
get
greeting
controller
mock
mvc
example
for
post
greeting
controller
configure
Mock
Mvc
Instance
rest
Rest
Assured
doesnt
automatically
adds
x
www
form
urlencoded
as
content
type
when
putting
params
automatically
adds
x
www
form
urlencoded
as
content
type
when
putting
form
params
can
supply
string
as
body
for
put
can
supply
object
as
body
and
serialize
as
json
given
writer
and
captor
is
initialized
reset
rest
assured
assert
Json
Equals
Non
Strict
logging
of
both
request
and
response
validation
works
when
test
fails
logging
of
both
request
and
response
validation
works
when
test
fails
when
configured
with
log
detail
logging
of
both
request
and
response
validation
works
when
test
fails
when
using
static
response
and
request
specs
declared
before
enable
logging
doesnt
log
if
request
or
response
when
validation
succeeds
when
request
and
response
logging
if
validation
fails
is
enabled
logging
is
applied
when
using
non
static
response
specifications
configure
Mock
Mvc
Instance
rest
Rest
Assured
unnamed
path
param
works
should
succeed
with
get
method
when
named
parameter
should
succeed
with
get
method
when
unnamed
parameter
should
succeed
with
get
method
with
named
parameter
and
unnamed
parameter
should
succeed
with
get
method
when
named
parameter
is
single
map
value
should
succeed
with
get
method
when
named
parameter
is
multi
map
value
should
succeed
with
get
method
when
named
parameter
per
add
method
should
fail
with
get
method
when
does
not
has
params
should
succeed
with
request
method
when
named
parameter
should
succeed
with
request
method
when
unnamed
parameter
should
succeed
with
request
method
with
named
parameter
and
unnamed
parameter
should
succeed
with
request
method
when
named
parameter
is
single
map
value
should
succeed
with
request
method
when
named
parameter
is
multi
map
value
should
succeed
with
request
method
when
named
parameter
as
value
pairs
should
succeed
with
request
method
when
has
only
unnamed
parameter
should
fail
with
request
method
when
does
not
has
params
can
use
multipart
with
path
params
query
params
are
merged
path
params
are
merged
form
params
are
merged
params
are
merged
attributes
are
merged
multi
parts
are
merged
request
body
is
overwritten
when
defined
in
specification
request
body
is
not
overwritten
when
not
defined
in
specification
base
path
is
overwritten
when
defined
in
specification
base
path
is
not
overwritten
when
not
defined
in
specification
mock
mvc
instance
is
overwritten
when
defined
in
specification
mock
mvc
factory
is
not
overwritten
when
not
defined
in
specification
cookies
are
merged
when
defined
in
specification
cookies
are
not
overwritten
when
not
defined
in
specification
content
type
is
overwritten
when
defined
in
specification
content
type
is
not
overwritten
when
not
defined
in
specification
headers
are
merged
when
defined
in
specification
headers
are
not
overwritten
when
not
defined
in
specification
path
params
are
merged
when
defined
in
specification
path
param
are
not
overwritten
when
not
defined
in
specification
path
param
are
logging
configs
of
same
type
are
overwritten
when
defined
in
specification
config
is
not
overwritten
when
not
defined
in
specification
interception
is
overwritten
when
defined
in
specification
interception
is
not
overwritten
when
not
defined
in
specification
logging
is
overwritten
when
defined
in
specification
logging
is
not
overwritten
when
not
defined
in
specification
authentication
is
overwritten
when
defined
in
specification
authentication
is
overwritten
when
using
dsl
and
defined
in
specification
authentication
is
not
overwritten
when
not
defined
in
specification
configurations
are
merged
impl
Of
adds
default
charset
to
content
type
by
default
doesnt
add
default
charset
to
application
json
by
default
adds
specific
charset
to
content
type
by
default
doesnt
add
default
charset
to
content
type
if
charset
is
defined
explicitly
doesnt
add
default
charset
to
content
type
if
configured
not
to
do
so
doesnt
duplication
of
content
type
extract
Content
Type
mock
http
servlet
request
builder
interceptor
works
intercept
configure
Mock
Mvc
Instance
rest
Rest
Assured
can
supply
string
as
body
for
patch
can
supply
object
as
body
and
serialize
as
json
unnamed
path
params
works
configure
Mock
Mvc
Instance
rest
Rest
Assured
can
send
cookie
using
cookie
class
can
send
cookie
using
cookie
name
and
value
can
send
multiple
cookies
can
send
cookies
using
map
can
send
cookies
using
cookies
class
can
receive
cookies
can
receive
detailed
cookies
given
controller
is
assigned
to
rest
assured
rest
assured
is
reset
using
static
parser
its
possible
to
parse
unknown
content
types
using
non
static
parser
its
possible
to
parse
unknown
content
types
can
extract
rest
assureds
mock
mvc
response
can
extract
spring
mvcs
result
can
extract
spring
mvcs
response
configure
Mock
Mvc
Instance
rest
Rest
Assured
automatically
adds
x
www
form
urlencoded
as
content
type
when
posting
params
can
supply
string
as
body
for
post
can
supply
object
as
body
and
serialize
as
json
configure
Mock
Mvc
Instance
rest
Rest
Assured
can
supply
string
as
body
for
async
post
with
config
in
given
can
configure
timeout
with
time
unit
using
the
async
dsl
can
configure
timeout
in
milliseconds
using
the
async
dsl
exception
will
be
thrown
if
async
data
has
not
been
provided
in
defined
time
with
config
in
given
can
supply
string
as
body
for
async
post
can
supply
string
as
body
for
async
post
without
syntactic
sugar
exception
will
be
thrown
if
async
data
has
not
been
provided
in
defined
time
dont
Automatically
Apply
Spring
Security
Mock
Mvc
Configurer
dont
Automatically
Apply
Spring
Rest
Docs
Mock
Mvc
Support
automatically
Apply
Spring
Security
Mock
Mvc
Configurer
automatically
Apply
Spring
Rest
Docs
Mock
Mvc
Support
automatically
Apply
Spring
Security
Mock
Mvc
Configurer
automatically
Apply
Spring
Rest
Docs
Mock
Mvc
Support
should
Automatically
Apply
Spring
Security
Mock
Mvc
Configurer
should
Automatically
Apply
Spring
Rest
Docs
Mock
Mvc
Support
is
User
Configured
with
mock
Mvc
Config
log
Config
session
Config
object
Mapper
Config
json
Config
xml
Config
encoder
Config
decoder
Config
header
Config
async
Config
mock
Mvc
Config
multi
Part
Config
get
Client
Config
client
Config
param
Config
matcher
Config
and
set
with
get
Log
Config
get
Encoder
Config
get
Decoder
Config
get
Session
Config
get
Object
Mapper
Config
get
Json
Config
get
Xml
Config
get
Header
Config
get
Async
Config
get
Multi
Part
Config
get
Param
Config
param
Config
get
Mock
Mvc
Param
Config
get
Mock
Mvc
Config
get
Matcher
Config
new
Config
config
is
User
Configured
merge
All
Parameters
replace
All
Parameters
form
Params
Update
Strategy
request
Params
Update
Strategy
query
Params
Update
Strategy
attribute
Update
Strategy
session
Attributes
Update
Strategy
attribute
Update
Strategy
form
Params
Update
Strategy
request
Params
Update
Strategy
query
Params
Update
Strategy
path
Params
Update
Strategy
session
Attributes
Update
Strategy
is
User
Configured
param
Config
and
with
expect
assert
That
apply
status
mvc
Result
get
Mvc
Result
mock
Http
Servlet
Response
get
Mock
Http
Servlet
Response
matches
Xsd
matches
Xsd
matches
Xsd
matches
Xsd
matches
Xsd
In
Classpath
matches
Dtd
matches
Dtd
matches
Dtd
matches
Dtd
matches
Dtd
In
Classpath
equal
To
Path
matcher
ends
With
Path
matcher
starts
With
Path
matcher
contains
Path
matcher
mock
Mvc
given
with
when
standalone
Setup
standalone
Setup
web
App
Context
Setup
result
Handlers
result
Handlers
post
Processors
post
Processors
reset
get
get
post
post
put
delete
delete
head
head
patch
patch
options
options
get
post
put
delete
head
patch
options
get
post
put
delete
head
patch
options
get
post
put
delete
head
patch
options
request
request
request
request
request
request
request
request
principal
authenticate
principal
authenticate
principal
With
Credentials
authenticate
authentication
authenticate
with
authenticate
enable
Logging
Of
Request
And
Response
If
Validation
Fails
enable
Logging
Of
Request
And
Response
If
Validation
Fails
config
invoke
Method
invoke
Method
invoke
Constructor
get
Argument
Types
get
Var
Args
Arguments
assemble
Headers
convert
Cookies
perform
Request
get
Mvc
Result
get
Rpr
assemble
Status
Line
validate
Unnamed
Path
Params
validate
Named
Path
Params
send
Request
verify
No
Body
And
Multipart
Together
build
Base
Uri
apply
Query
Params
apply
Param
apply
Path
Params
apply
Multi
Parts
And
Get
Request
apply
Params
apply
Param
apply
Form
Params
apply
Param
apply
Attributes
apply
Param
apply
Headers
apply
Cookies
apply
Multipart
Body
apply
Request
Body
array
Name
Of
set
Content
Type
To
Application
Form
Url
Encoded
is
In
Multi
Part
Mode
log
Request
If
Applicable
get
get
post
post
put
put
delete
delete
head
head
patch
patch
options
options
get
post
put
delete
head
patch
options
get
post
put
delete
head
patch
options
get
post
put
delete
head
patch
options
request
request
request
request
request
request
request
request
with
and
timeout
timeout
then
async
to
Valid
Http
Method
expect
assert
That
apply
status
original
Response
is
Spring
Security
Test
In
Classpath
then
mvc
Result
get
Mvc
Result
mock
Http
Servlet
Response
get
Mock
Http
Servlet
Response
params
parameters
body
body
all
everything
all
everything
headers
cookies
if
Validation
Fails
if
Validation
Fails
if
Validation
Fails
log
With
log
With
log
With
to
Request
Specification
to
Standard
Response
is
Spring
Security
In
Classpath
serialize
If
Needed
mock
Mvc
standalone
Setup
standalone
Setup
web
App
Context
Setup
interceptor
and
post
Processors
auth
content
Type
content
Type
content
Type
accept
accept
accept
headers
headers
headers
header
header
log
params
params
param
param
query
Params
query
Params
query
Param
query
Param
path
Params
path
Params
path
Param
form
Params
form
Params
form
Param
form
Param
attribute
attributes
body
body
body
body
body
body
cookies
cookies
cookies
cookie
cookie
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
config
spec
session
Attrs
session
Id
session
Id
result
Handlers
when
serialize
If
Needed
get
get
post
post
put
put
delete
delete
head
head
patch
patch
options
options
get
post
put
delete
head
patch
options
get
post
put
delete
head
patch
options
get
post
put
delete
head
patch
options
request
request
request
request
request
request
request
request
get
Rest
Assured
Config
set
Request
Logging
Filter
change
Mock
Mvc
Factory
To
assign
Config
get
Mock
Mvc
Factory
get
Base
Path
get
Params
get
Query
Params
get
Path
Params
get
Form
Params
get
Attributes
get
Request
Body
get
Authentication
get
Rest
Assured
Mock
Mvc
Config
get
Request
Headers
get
Cookies
get
Request
Content
Type
get
Multi
Parts
get
Request
Logging
Filter
get
Result
Handlers
get
Request
Post
Processors
get
Interceptor
base
Path
principal
with
principal
principal
With
Credentials
authentication
none
get
Log
Repository
get
Async
Config
session
Attr
merge
Config
get
Control
Name
get
File
Name
get
Content
get
Mime
Type
is
Input
Stream
is
Byte
Array
is
File
is
Text
build
get
Already
Configured
Mock
Mac
Configurers
is
Assigned
after
Configurer
Added
before
Mock
Mvc
Created
is
Spring
Rest
Docs
In
Classpath
of
convert
intercept
principal
with
principal
principal
With
Credentials
authentication
none
async
with
and
timeout
timeout
then
set
Auth
set
Post
Processors
set
Body
set
Body
set
Body
set
Body
set
Body
add
Session
Attrs
add
Session
Attr
add
Cookies
add
Cookie
add
Cookie
add
Params
add
Param
add
Param
add
Query
Param
add
Query
Params
add
Query
Param
add
Path
Param
add
Path
Params
add
Path
Params
add
Form
Param
add
Form
Params
add
Form
Param
add
Attribute
add
Attributes
add
Headers
add
Header
add
Header
set
Content
Type
set
Content
Type
add
Multi
Part
add
Multi
Part
add
Multi
Part
add
Multi
Part
add
Multi
Part
add
Multi
Part
add
Multi
Part
add
Multi
Part
add
Multi
Part
set
Session
Id
set
Session
Id
add
Mock
Mvc
Request
Specification
set
Config
build
set
Base
Path
set
Mock
Mvc
set
Standalone
Setup
set
Standalone
Setup
set
Web
App
Context
Setup
set
Mock
Http
Servlet
Request
Builder
Interceptor
add
Result
Handlers
log
and
get
Configured
Mock
Mvc
Factory
params
parameters
auth
content
Type
content
Type
content
Type
accept
accept
accept
headers
headers
headers
header
header
log
params
params
param
param
query
Params
query
Params
query
Param
query
Param
path
Params
path
Params
path
Param
form
Params
form
Params
form
Param
form
Param
attribute
attributes
body
body
body
body
body
body
cookies
cookies
cookies
cookie
cookie
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
multi
Part
config
spec
session
Id
session
Id
session
Attrs
session
Attr
when
standalone
Setup
standalone
Setup
mock
Mvc
web
App
Context
Setup
interceptor
and
post
Processors
authenticate
reset
sets
static
json
schema
validator
settings
to
null
validates
schema
in
classpath
json
Schema
Factory
should
Parse
Uri
And
Urls
As
Json
Node
should
Use
Checked
Validation
checked
Validation
parse
Uri
And
Urls
As
Json
Node
json
Schema
Factory
and
with
settings
matches
Json
Schema
create
Schema
Instance
matches
Json
Schema
In
Classpath
matches
Json
Schema
matches
Json
Schema
create
Schema
Instance
matches
Json
Schema
create
Schema
Instance
matches
Json
Schema
create
Schema
Instance
matches
Json
Schema
using
using
to
URL
matches
Safely
describe
To
load
Schema
validate
Schema
Is
Not
Null
create
Settings
create
create
Schema
Instance
has
Type
as
reset
log
Params
log
Param
to
String
Body
to
Serialized
Body
to
Byte
Array
cookies
cookies
cookie
session
Id
headers
get
Request
Content
Type
headers
find
Content
Type
build
Application
Form
Encoded
Content
Type
map
To
Array
remove
Merged
Headers
If
Needed
headers
append
Charset
To
Content
Type
merge
Config
with
Timeout
async
Config
timeout
timeout
timeout
In
Ms
is
User
Configured
with
is
User
Configured
get
Decoder
Config
decoder
Config
get
Encoder
Config
encoder
Config
get
Header
Config
header
Config
get
Json
Config
json
Config
get
Log
Config
log
Config
get
Object
Mapper
Config
object
Mapper
Config
get
Session
Config
session
Config
get
Xml
Config
xml
Config
get
Async
Config
async
Config
get
Multi
Part
Config
multi
Part
Config
get
Client
Config
client
Config
get
Param
Config
param
Config
get
Matcher
Config
matcher
Config
convert
To
Rest
Assured
Config
to
Param
Config
is
User
Configured
serialize
If
Needed
find
Encoder
Charset
Or
Return
Default
apply
Params
apply
Param
log
Params
And
Headers
log
Param
log
Param
log
Param
log
Param
log
Request
Body
log
File
Request
Body
file
To
String
subpath
works
for
lists
subpath
with
explicit
type
error
messages
on
invalid
subpath
looks
ok
can
extract
values
from
html
error
messages
on
invalid
subpath
looks
ok
when
received
node
is
not
root
error
messages
on
invalid
subpath
with
root
name
less
than
six
characters
looks
ok
error
messages
on
invalid
path
looks
ok
get
First
Name
set
First
Name
get
Last
Name
set
Last
Name
equals
hash
Code
get
Greeting
set
Greeting
get
Greeting
set
Greeting
xml
path
supports
namespaces
when
declared
correctly
xml
path
doesnt
support
namespaces
when
not
declared
xml
path
supports
declared
namespaces
xml
path
supports
declared
namespaces
without
manual
escaping
can
configure
namespace
aware
to
false
xml
path
supports
deserializing
input
stream
using
with
given
charset
xml
path
cannot
correctly
deserialize
input
stream
using
wrong
charset
deserializes
single
sub
node
using
jaxb
deserializes
root
node
using
jaxb
deserializes
another
sub
node
using
jaxb
deserializes
xml
document
including
list
using
jaxb
cannot
deserialize
list
when
using
get
Object
deserializes
list
using
get
List
xml
path
supports
custom
deserializer
deserialize
xml
path
supports
custom
deserializer
using
static
configuration
deserialize
initialize
Using
Ctor
And
Get
List
get
Node
Children
As
List
With
Type
Node
Returns
A
List
Of
Nodes
initialize
Using
Given
And
Get
Attributes
initialize
Using
With
And
Get
List
initialize
Using
With
And
Get
Children
return
Items
items
With
Price
Between
Ten
And
Twenty
multiple
Gets
With
One
Instance
Of
Xml
Path
root
Path
Not
Ending
With
Dot
root
Path
Ending
With
Dot
converts
Non
Root
Object
Graph
To
Java
Objects
converts
Root
Object
Graph
To
Java
Objects
first
Category
Attribute
From
Java
getting
Children
From
Java
get
First
Item
Name
get
Single
Attributes
getting
Leaf
Returns
Value
Instead
Of
Node
get
All
Item
Names
get
Entire
Object
Graph
get
Location
Of
Records
get
First
Two
Years
Of
Records
get
First
Two
Years
Of
Records
As
Integers
get
The
Earliest
Record
get
First
Two
Years
Of
Records
Using
Escaped
Attribute
Getter
get
Name
Of
Last
Country
get
Name
Of
First
Car
get
Int
Parses
A
String
Result
To
Int
depth
First
Searching
Using
Double
Star
Notation
depth
First
Searching
Using
Un
Escaped
Double
Star
Notation
depth
First
Search
Double
Star
With
Param
get
UUID
Parses
A
String
Result
To
UUID
get
List
Returns
List
When
Node
Children
Found
get
List
Returns
List
When
List
Found
get
List
When
Using
Explicit
Type
Converts
The
List
Members
To
That
Type
get
List
When
Not
Using
Explicit
Type
Doesnt
Convert
The
List
Members
To
Any
Type
get
List
Automatically
Transforms
Single
Object
Results
To
A
List
get
Automatically
Transforms
Single
Object
Results
To
A
List
When
Specified
In
Path
root
Depth
First
Searching
When
Using
Double
Star
Notation
root
Depth
First
Searching
When
Using
Escaped
Double
Star
Notation
root
Depth
First
Searching
When
Using
Double
Star
Notation
When
Path
Starts
With
Dot
root
Depth
First
Method
Searching
can
Parse
Path
With
Double
Escape
Chars
can
Parse
Tags
With
Dot
If
Using
Escaping
can
Parse
Tags
With
Escaped
Minus
can
Parse
Closures
With
Escaped
Dots
In
Equal
Expression
converts
List
Members
To
Explicit
Type
xml
Path
Supports
Prettifiying
The
XML
xml
Path
Supports
Pretty
Printing
The
XML
xml
Path
Supports
Pretty
Peeking
The
XML
xml
Path
Supports
Peeking
The
XML
can
Parse
Xml
Filtered
Attributes
parses
Xml
Root
Tag
Called
Properties
parses
Non
Xml
Root
Tag
Called
Properties
disable
Dtd
Validation
Works
setting
feature
works
setting
features
works
xml
Path
Works
With
Soap
xml
Path
Can
Extract
Node
From
Soap
doesnt
Need
To
Escape
Lists
With
Hyphen
Without
Brackets
trying
to
get
an
attribute
that
doesnt
exists
returns
null
get
size
is
Empty
iterator
to
String
node
Iterable
get
get
Path
node
Iterator
list
get
List
get
Backing
Groovy
Object
left
Shift
has
Next
next
remove
attributes
name
iterator
to
String
get
children
get
Attribute
get
Float
get
Double
get
Char
get
Boolean
get
Long
get
Int
get
Short
get
Byte
get
get
Path
value
get
List
get
Backing
Groovy
Object
left
Shift
has
Next
next
remove
default
Charset
features
features
feature
validating
is
Validating
namespace
Aware
is
Namespace
Aware
allow
Doc
Type
Declaration
is
Allow
Doc
Type
Declaration
properties
properties
property
disable
Loading
Of
External
Dtd
charset
charset
default
Parser
Type
has
Default
Parser
Type
has
Custom
Jaxb
Object
Mapper
Factory
default
Deserializer
has
Default
Deserializer
default
Parser
Type
default
Object
Deserializer
jaxb
Object
Mapper
Factory
declared
Namespaces
declare
Namespaces
declared
Namespace
jaxb
Object
Mapper
Factory
has
Declared
Namespaces
with
and
xml
Path
Config
new
Default
Jaxb
Object
Mapper
Factory
Or
Null
attributes
children
name
value
get
Attribute
get
size
is
Empty
node
Iterable
node
Iterator
list
get
get
Path
get
Path
get
Node
get
Nodes
using
using
get
get
get
List
get
List
get
Map
get
Map
get
Object
get
Object
As
Type
get
From
Path
get
Int
get
Boolean
get
Node
get
Node
Children
get
Char
get
Byte
get
Short
get
Float
get
Double
get
Long
get
String
get
UUID
param
peek
pretty
Peek
prettify
pretty
Print
given
given
given
given
given
given
with
with
with
with
with
with
from
from
from
from
from
from
parse
Text
method
set
Root
set
Root
Path
get
As
List
get
As
List
convert
Elements
List
To
convert
Object
To
parse
Input
Stream
method
parse
Reader
method
parse
File
method
parse
URI
method
parse
Input
Source
method
get
Xml
Path
Config
method
change
Compatibility
Mode
change
Config
invoke
reset
deserialize
create
create
