should
Return
Unique
Mock
Based
On
All
Selectors
should
Return
Unique
Mock
When
Request
Body
Is
Null
should
Return
Unique
Mock
When
Request
Header
Is
Null
should
Return
Unique
Mock
When
Request
Body
And
Headers
Are
Null
should
Return
Null
When
Request
Body
Does
Not
Match
should
Return
Unique
Mock
With
No
Request
Headers
should
Return
Unique
Mock
With
No
Request
Headers
And
Query
Params
should
Get
Mock
With
Textual
Response
By
Route
And
Http
Method
should
Get
Mock
With
Binary
Response
By
Route
And
Http
Method
should
Get
Mock
With
Empty
Response
By
Route
And
Http
Method
should
Get
Mock
With
Response
And
Request
Headers
should
Get
Mock
With
Request
Body
should
Find
All
Mocks
By
Entity
Status
should
Return
Null
When
There
Are
No
Mocks
In
The
DB
should
Return
List
Of
Mocks
By
Entity
Status
generate
File
delete
Test
File
should
Return
Response
Content
Type
For
Valid
Application
Type
should
Return
Null
For
Invalid
Application
Type
should
Return
Response
Content
Type
For
Valid
Audio
Type
should
Return
Null
For
Invalid
Audio
Type
should
Return
Response
Content
Type
For
Valid
Image
Type
should
Return
Null
For
Invalid
Image
Type
should
Return
Response
Content
Type
For
Valid
Video
Type
should
Return
Null
For
Invalid
Video
Type
should
Return
Response
Content
Type
For
Valid
Text
Type
should
Return
Null
For
Invalid
Text
Type
should
Return
Null
For
Invalid
Multipart
Type
should
Return
Null
For
Invalid
Application
Type
When
Empty
Or
Null
should
Return
Null
For
Case
Sensitive
Response
Type
Strings
should
Return
Null
For
Sql
Injection
Strings
should
Return
Response
Content
Type
For
Textual
Response
Content
Types
should
Return
Response
Content
Type
For
Binary
Response
Content
Types
should
Return
Http
Method
For
Valid
Method
should
Return
Null
For
Invalid
Method
should
Return
Null
For
Invalid
Method
When
Empty
Or
Null
should
Return
Null
For
Case
Sensitive
Method
Strings
should
Return
Null
For
Invalid
Method
For
Sql
Injection
Strings
should
Close
Response
Writer
Without
Writing
Any
Response
should
Write
Passed
Binary
Response
To
Http
Response
should
Throw
IO
Exception
When
Response
Writer
Is
Not
Accessible
should
Return
Textual
Response
Writer
When
Response
Type
Is
Textual
should
Return
Binary
Response
Writer
When
Response
Type
Is
Binary
should
Return
Empty
Response
Writer
When
Response
Type
Is
Empty
should
Return
Empty
Response
Writer
When
Response
Type
Is
Null
should
Write
Passed
Textual
Response
To
Http
Response
should
Throw
IO
Exception
When
Response
Writer
Is
Not
Accessible
should
Respond
With
Proper
Response
And
Status
When
Mock
Valid
Mock
Is
Returned
By
The
Controller
should
Respond
With
Proper
Response
And
No
Response
Headers
When
Mock
Valid
Mock
Is
Returned
By
The
Controller
should
Respond
With404
When
Generic
Controller
Returns
Empty
Mock
should
Respond
With404
When
Error
Response
Writer
Is
Null
should
Respond
With404
When
Error
Response
Writer
Throws
Exception
should
Respond
With500
When
Writer
Throws
An
Exception
should
Forward
Request
When
Request
Is
For
UI
should
Pass
Request
To
Next
Filter
When
Request
Is
Not
For
UI
should
Return
Model
With
Text
Response
Factory
should
Return
Model
With
Text
Response
Factory
When
Response
Header
Is
Not
Null
should
Return
Model
With
Text
Response
Factory
When
Response
Content
Type
Is
Null
should
Return
Model
With
Binary
Response
Factory
setup
Mock
should
Return
Mock
Data
When
Matching
Mock
Exists
should
Return
Mock
Data
When
Matching
Mock
Exists
With
No
Request
Headers
should
Return
Mock
Data
When
Matching
Mock
Exists
Without
Query
Params
should
Throw
Matching
Mock
Not
Found
Exception
When
No
Matching
Mock
Exists
should
Throw
Matching
Mock
Not
Found
Exception
When
Request
Headers
Do
Not
Match
should
Throw
Matching
Mock
Not
Found
Exception
When
Entity
Status
Is
Not
NONE
should
Return
Implementation
For
Textual
Response
should
Return
Implementation
For
Binary
Response
should
Return
Implementation
For
Null
Response
should
Return
Request
Body
String
When
Servlet
Request
Has
Request
Body
should
Return
Null
When
Reading
Request
Body
Throws
Exception
should
Return
One
Query
Param
And
Value
should
Append
And
Return
When
There
Are
Multiple
Query
Params
should
Return
Empty
String
When
There
Are
No
Query
Params
should
Return
True
When
Exact
Match
Switch
Is
True
And
Headers
Match
Exactly
should
Return
False
When
Exact
Match
Switch
Is
True
And
Headers
Do
Not
Match
Exactly
should
Return
False
When
Exact
Match
Switch
Is
True
And
Headers
Do
Not
Have
Same
Headers
should
Return
True
When
Exact
Match
Switch
Is
False
And
Headers
Have
At
Least
One
Matching
Header
should
Return
True
When
Exact
Match
Switch
Is
False
And
Headers
Have
No
Matching
Fields
should
Return
Header
Map
When
Request
Has
Headers
should
Return
Null
When
Request
Has
No
Headers
should
Return
Http
OK
When
Matching
Mock
Exists
Without
Query
Params
And
Textual
Response
And
Status200
should
Return
Http
OK
When
Matching
Mock
Exists
With
Query
Params
And
Textual
Response
And
Status200
should
Return
Http
Bad
Request
When
Matching
Mock
Exists
With
Query
Params
And
Textual
Response
And
Status400
should
Return
Http
Not
Found
When
Matching
Mock
Does
Not
Exist
should
Get
Entity
Status
setup
Mock
should
Get
Current
Auditor
Success
should
Get
Current
Auditor
Returns
Null
When
Name
Does
Not
Exists
should
Get
Current
Auditor
Returns
Null
When
User
Does
Not
Exists
list
All
Supported
Http
Methods
list
All
Supported
Response
Content
Types
list
All
Supported
Entity
Status
should
Return
All
Supported
Http
Methods
should
Return
All
Supported
Response
Content
Types
should
Return
All
Supported
Entity
Status
setup
Test
should
Pass
Validation
When
Password
Is
Valid
Bcrypt
Hash
should
Fail
In
Validation
When
Password
Is
Not
Valid
Bcrypt
Hash
should
Fail
In
Validation
When
Password
Is
Null
provide
Parameters
should
Convert
Token
To
Duration
In
Seconds
should
Convert
JSON
String
To
Map
When
Valid
JSON
String
Values
Are
Passed
should
Convert
JSON
String
To
Map
When
Valid
JSON
String
Is
Passed
should
Return
Null
on
Convert
JSON
String
To
Map
When
In
Valid
JSON
String
Values
Are
Passed
should
Convert
Map
To
JSON
String
When
Valid
JSON
Maps
Are
Passed
should
Return
Null
on
Convert
Map
To
JSON
String
When
In
Empty
JSON
Maps
Are
Passed
should
Return
Null
on
Convert
Map
To
JSON
String
When
Writer
Throws
Exception
should
Convert
JSON
String
To
Map
With
Lower
Case
Keys
When
Valid
JSON
String
Values
Are
Passed
should
Convert
JSON
String
To
Map
With
Lower
Case
Keys
When
Valid
JSON
String
Is
Passed
should
Return
Null
On
Convert
JSON
String
To
Map
With
Lower
Case
Keys
When
String
Is
Invalid
generate
List
Of
Mocks
generate
Mocks
Pageable
get
List
Mocks
Response
In
Pageable
Format
generate
List
Of
Mocks
generate
Optional
Mock
generate
Optional
Mock
generate
Optional
Mock
generate
Mock
generate
Mock
generate
Mock
generate
Mock
With
Headers
And
Body
generate
Default
Entity
Status
generate
Archived
Entity
Status
generate
Deleted
Entity
Status
generate
Textual
Response
generate
Textual
Response
generate
Binary
Response
generate
Binary
Response
generate
Response
Content
Type
generate
Request
Body
Type
generate
Http
Method
generate
Http
Method
generate
Response
Content
Type
generate
Request
Header
generate
Request
Header
generate
Response
Header
generate
Response
Header
generate
Request
Bodies
For
Mock
generate
Request
Bodies
For
Mock
create
Mock
Request
create
Processed
Mock
Request
create
Processed
Mock
Request
With
Headers
And
Body
create
Mock
Request
With
Null
Request
Values
create
Mock
Request
With
File
get
Mock
Multipart
File
get
Valid
Http
Method
get
Valid
Response
Content
Type
get
Valid
Request
Type
archive
Mock
unarchive
Mock
delete
Mock
get
Generic
Response
Wrapper
get
Current
Auditor
generate
List
Of
Platform
Settings
generate
Platform
Settings
generate
Platform
Settings
create
Platform
Settings
Request
create
Processed
Platform
Settings
Request
get
Generic
Response
Wrapper
convert
Object
To
Json
String
convert
Map
To
Json
String
convert
JSON
String
To
Map
convert
JSON
String
To
Map
With
Lower
Case
Keys
change
Key
Case
To
Lower
generate
Random
UUID
generate
Random
Alphanumeric
String
generate
Random
Alphanumeric
String
generate
Random
Alphabetic
String
generate
Random
Alphabetic
String
generate
Random
Number
generate
Random
Number
generate
Unique
Mock
Name
get
Request
Headers
generate
Request
Headers
As
String
generate
Request
Body
generate
Request
Body
As
String
generate
Response
Headers
generate
Response
Headers
As
String
find
One
By
Content
Type
get
Http
Method
By
Method
find
By
Status
find
All
By
Entity
Status
find
All
By
Entity
Status
And
Deleted
At
find
One
By
Request
Body
Type
should
Return
Http
Ok
List
Platform
Settings
Api
Returns
Empty
should
Return
Http
Ok
List
Platform
Settings
Api
Returns
List
Of
Mocks
should
Return
Http
Ok
List
Platform
Settings
Api
Returns
Null
should
Return
Http
Ok
Update
Platform
Settings
Api
Returns
Valid
Platform
Settings
Data
should
Return
Http
Bad
Request
Update
Platform
Settings
Api
Returns
Null
Platform
Settings
Data
setup
Mock
should
Return
List
Of
Platform
Settings
When
DB
Has
Platform
Settings
should
Return
Empty
List
Of
Mocks
When
DB
Has
No
Platform
Settings
should
Return
Null
For
List
Of
Platform
Settings
When
DB
Not
Synced
should
Return
Null
For
Update
Platform
Settings
When
Platform
Settings
Request
Is
Null
should
Return
Null
For
Update
Platform
Settings
When
DB
Returns
No
Existing
Records
should
Return
Platform
Settings
For
Update
Platform
Settings
When
Platform
Settings
Request
Is
Valid
should
Map
Request
Model
To
Processed
Request
Modal
should
Respond
With
Error
When
Max
Upload
Size
Exceeded
Exception
Is
Encountered
should
Return
Null
When
No
Max
Upload
Size
Exceeded
Exception
Is
Encountered
should
Return
Http
Ok
List
Mocks
Api
Returns
Empty
should
Return
Http
Ok
List
Mocks
Api
Returns
List
Of
Mocks
should
Return
Http
Ok
List
Mocks
Api
Returns
Null
should
Return
Http
Ok
Pageable
List
Mocks
Api
Without
Query
Params
should
Return
Http
Ok
Pageable
List
Mocks
Api
Returns
Empty
should
Return
Http
Ok
Pageable
List
Mocks
Api
Returns
List
Of
Mocks
should
Return
Http
Ok
Pageable
List
Mocks
Api
Returns
Null
should
Return
Http
Bad
Request
Get
Mock
By
Id
Api
Returns
Null
Data
should
Return
Http
Ok
Get
Mock
By
Id
Api
Returns
Valid
Mock
Data
should
Return
Http
Bad
Request
Delete
Mock
By
Id
Api
Returns
Null
Data
should
Return
Http
No
Content
Delete
Mock
By
Id
Api
Returns
No
Content
should
Return
Http
Bad
Request
Force
Delete
Mock
By
Id
Api
Returns
Null
Data
should
Return
Http
No
Content
Force
Delete
Mock
By
Id
Api
Returns
No
Content
should
Return
Http
Bad
Request
Delete
All
Mocks
Api
Returns
Null
Data
should
Return
Http
No
Content
Delete
All
Mocks
Api
Returns
No
Content
should
Return
Http
Created
Create
Mock
Api
Returns
Valid
Mock
Data
should
Return
Http
Bad
Request
Create
Mock
Api
When
Mock
Already
Exists
should
Return
Http
Internal
Server
Error
Create
Mock
Api
When
Service
Throws
Exception
should
Return
Http
Bad
Request
Create
Mock
Api
With
Invalid
Parameters
For
Route
In
Request
Returns
Validation
Errors
should
Return
Http
Bad
Request
Create
Mock
Api
With
Invalid
Parameters
For
Http
Method
In
Request
Returns
Validation
Errors
should
Return
Http
Bad
Request
Create
Mock
Api
With
Invalid
Parameters
For
Status
Code
In
Request
Returns
Validation
Errors
should
Return
Http
Bad
Request
Create
Mock
Api
With
Invalid
Parameters
For
Description
In
Request
Returns
Validation
Errors
should
Return
Http
Bad
Request
Create
Mock
Api
With
Invalid
Parameters
For
Query
Params
In
Request
Returns
Validation
Errors
should
Return
Http
Ok
Update
Mock
By
Id
Api
Returns
Valid
Mock
Data
should
Return
Http
Bad
Request
Update
Mock
By
Id
Api
When
Updated
Mock
Is
Duplicate
should
Return
Http
Internal
Server
Error
Update
Mock
By
Id
Api
When
Mock
Update
Service
Throws
Exception
get
Generic
Response
Wrapper
should
Return
Http
Ok
Export
Template
Csv
Return
Csv
Template
File
should
Return
Http
Internal
Server
Error
When
Export
Template
Csv
Throws
Exception
should
Return
Http
Ok
Export
Mocks
Csv
Return
Csv
File
should
Return
Http
Internal
Server
Error
When
Export
Mocks
Csv
Throws
Exception
should
Return
Http
Bad
Request
Error
When
Export
Template
Csv
Export
Import
Feature
Is
Disabled
should
Return
Http
Bad
Request
Error
When
Export
Mocks
Csv
Export
Import
Feature
Is
Disabled
should
Return
Http
Ok
Archive
Mock
By
Id
Api
Returns
Archived
Mock
should
Return
Http
Bad
Request
Archive
Mock
By
Id
Api
Returns
Null
should
Return
Http
Ok
Unarchive
Mock
By
Id
Api
Returns
Unarchived
Mock
should
Return
Http
Bad
Request
Unarchive
Mock
By
Id
Api
Returns
Null
should
Return
Http
Ok
Search
Mocks
Return
Mocks
As
Pageable
For
Search
Query
should
Return
Http
Bad
Request
Search
Mocks
Unable
To
Get
Mocks
Due
To
Invalid
Search
Column
setup
Mock
should
Return
Template
File
Name
should
Return
File
Name
should
Write
Mock
Template
Headers
To
Csv
Writer
Success
should
Write
Mocks
To
Csv
Writer
Success
should
Validate
Import
Export
Mock
Feature
Success
should
Validate
Import
Export
Mock
Feature
Throws
Export
Import
Disabled
Exception
setup
Mock
should
Return
List
Of
Mocks
When
DB
Has
Mocks
should
Return
Empty
List
Of
Mocks
When
DB
Has
No
Mocks
should
Return
Null
For
List
Of
Mocks
When
DB
Not
Synced
should
Return
Filtered
List
Of
Mocks
When
Entity
Status
Is
Valid
should
Return
Non
Filtered
List
Of
Mocks
When
Entity
Status
Is
Invalid
should
Return
Non
Filtered
List
Of
Mocks
When
Status
Parameter
Is
Null
should
Return
Filtered
List
Of
Mocks
When
Http
Method
Is
Valid
should
Return
Non
Filtered
List
Of
Mocks
When
Http
Method
Is
Invalid
should
Return
Non
Filtered
List
Of
Mocks
When
Status
Http
Method
And
Expected
Response
Type
Parameters
Are
Null
should
Return
Filtered
List
Of
Mocks
When
Status
And
Http
Method
Is
Valid
setup
Mock
should
Return
Null
When
Mock
Id
Is
Null
Or
Empty
should
Return
Null
When
Mock
Id
Is
Invalid
Format
should
Return
Mock
When
Mock
Id
Is
Valid
should
Return
Null
When
Mock
Does
Not
Exists
should
Return
Null
For
Create
Mock
When
Mock
Name
Already
Exists
should
Return
Mock
For
Create
Mock
When
Mock
Request
Is
Valid
should
Return
Mock
For
Create
Mock
When
Mock
Request
Is
Valid
With
Request
Headers
And
Body
should
Throw
Mock
Already
Exists
Exception
For
Create
Mock
When
Mock
Already
Exists
should
Throw
Runtime
Exception
For
Create
Mock
When
Execution
Fails
should
Return
Mock
For
Update
Mock
When
Mock
Request
Is
Valid
With
Textual
Response
should
Return
Mock
For
Update
Mock
When
Existing
Mock
Has
No
Textual
Response
should
Return
Mock
For
Update
Mock
When
Mock
Request
Is
Valid
With
Binary
Response
should
Return
Mock
For
Update
Mock
When
Existing
Mock
Has
No
Binary
Response
should
Throw
Runtime
Exception
For
Update
Mock
When
Mock
Validation
Fails
should
Throw
Mock
Already
Exists
Exception
Exception
For
Update
Mock
When
Mock
Name
Already
Exists
should
Throw
Mock
Already
Exists
Exception
Exception
For
Update
Mock
When
Mock
Already
Exists
should
Throw
Runtime
Exception
For
Update
Mock
When
Execution
Fails
should
Call
Flush
Bin
should
Not
Call
Flush
Bin
setup
Mock
should
Return
Null
For
Archive
Mock
By
Id
When
Mock
Id
Is
Null
Or
Empty
should
Return
Mock
For
Archive
Mock
By
Id
When
Mock
Id
Is
Valid
should
Return
Mock
For
Archive
Mock
By
Id
When
Mock
Id
Is
Already
Archived
should
Return
Null
For
Archive
Mock
By
Id
When
Mock
Id
Does
Not
Exist
should
Return
Null
For
Archive
Mock
By
Id
When
Mock
Id
Is
Already
Deleted
should
Return
Null
For
Unarchive
Mock
By
Id
When
Mock
Id
Is
Null
Or
Empty
should
Return
Mock
For
Unarchive
Mock
By
Id
When
Mock
Id
Is
Valid
should
Return
Mock
For
Unarchive
Mock
By
Id
When
Mock
Id
Is
Already
Unarchived
should
Return
Null
For
Unarchive
Mock
By
Id
When
Mock
Id
Does
Not
Exist
should
Return
Null
For
Unarchive
Mock
By
Id
When
Mock
Id
Is
Already
Deleted
setup
Mock
should
Return
False
For
Delete
Mock
By
Id
When
Mock
Id
Is
Null
Or
Empty
should
Return
False
For
Delete
Mock
By
Id
When
Mock
Id
Is
Invalid
Format
should
Return
True
For
Delete
Mock
By
Id
When
Mock
Id
Is
Valid
should
Return
False
For
Delete
Mock
By
Id
When
Mock
Id
Does
Not
Exist
should
Return
False
For
Delete
Mock
By
Id
When
Mock
Deletion
Throws
Exception
should
Return
False
For
Force
Delete
Mock
By
Id
When
Mock
Id
Is
Null
Or
Empty
should
Return
False
For
Force
Delete
Mock
By
Id
When
Deletion
Fails
With
Exception
should
Return
False
For
Force
Delete
Mock
By
Id
When
Mock
Id
Is
Invalid
Format
should
Return
True
For
Force
Delete
Mock
By
Id
When
Mock
Id
Is
Valid
should
Return
False
For
Force
Delete
Mock
By
Id
When
Mock
Id
Does
Not
Exist
should
Delete
All
Mocks
Success
should
Delete
All
Mocks
Throws
Exception
should
Flush
Deleted
Mocks
should
Flush
Deleted
Mocks
Throws
Exception
setup
Mock
should
Return
Null
When
Search
Column
String
Is
Null
Or
Empty
should
Return
Null
When
Search
Column
Is
Invalid
should
Return
Null
When
Search
Column
Is
Valid
Return
Mocks
As
Pageable
should
Return
Request
Body
From
DB
When
Request
Body
Already
Exists
should
Save
New
Request
Body
To
DB
When
Request
Body
Does
Not
Exists
should
Return
Null
When
Request
Body
Is
Null
should
Return
Null
For
Request
Body
When
DB
Operation
Throws
Exception
should
Return
Request
Headers
From
DB
When
Request
Headers
Exist
should
Save
Request
Headers
To
DB
When
Request
Headers
Does
Not
Exist
should
Return
Null
When
Request
Has
No
Headers
should
Return
Null
For
Request
Headers
When
DB
Operation
Throws
Exception
should
Save
Response
Headers
To
DB
When
Response
Headers
Exist
In
Request
should
Return
Null
When
Saving
Response
Headers
To
DB
Fails
should
Return
Null
When
Request
Has
No
Response
Headers
should
Return
Http
Method
From
DB
should
Throw
Exception
When
Http
Method
Is
Null
In
Request
should
Return
Response
Content
Type
When
DB
Has
Matching
Response
Content
Type
should
Return
Null
When
Request
Has
No
Response
Content
Type
should
Map
Request
Model
To
Processed
Request
Modal
should
Map
Request
Model
To
Processed
Request
Modal
When
Request
Body
And
Request
Headers
Are
Empty
should
Map
Request
Model
To
Processed
Request
Modal
When
Request
Body
Is
Null
should
Map
Request
Model
To
Processed
Request
Modal
When
Request
Header
Is
Null
should
Map
Mock
Pageable
To
List
Mock
Response
Pageable
set
User
Permission
Validator
get
Authentication
set
Authentication
get
Authorities
get
Credentials
get
Details
get
Principal
is
Authenticated
set
Authenticated
get
Name
get
Authentication
set
Authentication
get
Authorities
get
Password
get
Username
is
Account
Non
Expired
is
Account
Non
Locked
is
Credentials
Non
Expired
is
Enabled
get
Authorities
get
Credentials
get
Details
get
Principal
is
Authenticated
set
Authenticated
get
Name
should
Validate
If
User
Is
Allowed
To
Perform
Action
should
Throw
User
Not
Permitted
Exception
When
User
Is
Not
Permitted
should
Return
Stored
User
Details
When
User
Exists
should
Throw
Username
Not
Found
Exception
When
User
Does
Not
Exist
should
Respond
With
Status
OK
When
User
Password
Is
Updated
Successfully
should
Respond
With
Status
Internal
Server
Error
When
User
Password
Update
Fails
should
Respond
With
Status
Internal
Server
Error
When
User
Is
Not
Allowed
To
Update
Password
should
Return
Users
With
Status
OK
When
Users
Exist
should
Return
Status
No
Content
When
No
Users
Exist
should
Return
User
Info
With
Status
OK
When
User
Id
Exists
should
Return
Status
Not
Found
When
User
Id
Does
Not
Exist
should
Return
User
Info
With
Status
OK
When
User
Name
Exists
should
Return
Status
Not
Found
When
User
Name
Does
Not
Exist
should
Return
Status
Internal
Server
Error
When
An
Exception
Occurs
should
Return
Status
OK
When
User
Activation
Is
Updated
should
Return
Status
Internal
Server
Error
When
User
Activation
Status
Update
Fails
should
Respond
With
Status
OK
When
User
Role
Is
Updated
Successfully
should
Respond
With
Status
Internal
Server
Error
When
User
Role
Update
Fails
should
Return
Auth
Token
With
Status
OK
When
User
Is
Valid
should
Fail
With
Status
Un
Unauthorized
When
User
Authentication
Fails
should
Respond
With
Status
OK
When
Auth
Token
Is
Valid
should
Respond
With
Status
Bad
Request
When
Auth
Header
Is
Not
Present
should
Respond
With
Status
Bad
Request
When
Auth
Header
Has
No
Valid
Token
should
Respond
With
Status
Un
Authorised
When
Auth
Token
Is
In
Valid
should
Return
User
Roles
With
Status
OK
When
User
Roles
Exist
should
Return
Status
Internal
Server
Error
When
Service
Throws
Exception
should
Respond
With
Status
OK
When
User
Is
Available
should
Respond
With
Status
Internal
Server
Error
When
User
Is
Not
Available
should
Return
Status
OK
On
Saving
New
User
Successfully
should
Return
Internal
Server
Error
When
Service
Throws
Exception
should
Return
Bad
Request
Error
When
Password
Is
Not
Encoded
should
Return
Bad
Request
Error
When
Role
Is
Invalid
should
Delete
User
When
User
Is
Present
should
Throw
Username
Not
Found
Exception
When
User
Is
Not
Present
should
Save
New
User
should
Throw
Exception
When
User
Already
Exists
should
Throw
Exception
When
Saving
New
User
Fails
should
Return
Mapped
User
Roles
When
User
Roles
Are
Present
In
The
DB
should
Throw
Failed
To
Fetch
User
Roles
Exception
When
DB
Returns
Empty
User
Roles
should
Return
All
Users
When
Users
Exist
In
DB
should
Return
Null
When
No
Users
Exist
In
DB
should
Return
User
Info
When
Users
With
The
User
Id
Exist
In
DB
should
Throw
User
Name
Not
Found
Exception
When
Users
With
The
User
Id
Does
Not
Exist
In
DB
should
Return
User
Info
When
Users
With
The
User
Name
Exist
In
DB
should
Throw
User
Name
Not
Found
Exception
When
Users
With
The
User
Name
Does
Not
Exist
In
DB
should
Return
True
When
Token
Is
Valid
should
Return
False
When
Token
Is
In
Valid
should
Return
False
When
User
Is
Not
Present
should
Set
Activation
Status
When
User
Is
Present
should
Throw
Username
Not
Found
Exception
When
User
Is
Absent
should
Update
User
Password
When
User
Exists
should
Throw
Username
Not
Found
Exception
Exception
When
User
Does
Not
Exists
should
Update
User
Role
When
User
Exists
should
Throw
Username
Not
Found
Exception
When
User
Does
Not
Exist
should
Throw
Illegal
Argument
Exception
When
User
Role
Is
Invalid
should
Map
User
Roles
List
To
User
Roles
Response
List
should
Return
Mapped
Users
should
Return
Mapped
User
Info
should
Return
JWT
should
Validate
Token
should
Check
Token
Expiry
should
Respond
With
Status
OK
When
User
Is
Present
should
Skip
Actual
Filtration
When
Endpoint
Is
Not
A
Mimock
Api
should
Respond
With
Status
Un
Authorized
When
Token
Is
In
Valid
should
Respond
With
Status
Un
Authorized
When
User
Is
Not
Present
find
By
Method
find
Request
Bodies
For
Mock
By
Request
Body
And
Deleted
At
Is
Null
find
One
By
Request
Body
Type
find
By
Status
find
Request
Header
By
Request
Header
And
Deleted
At
Is
Null
find
By
User
Name
find
All
By
Deleted
At
Is
Null
Order
By
Name
find
User
By
Id
find
User
By
User
Name
find
By
Content
Type
find
One
By
Route
And
Http
Method
And
Query
Params
find
All
By
Entity
Status
find
All
By
Http
Method
find
All
By
Textual
Response
Is
Not
Null
find
All
By
Binary
Response
Is
Not
Null
find
All
By
Textual
Response
Is
Null
And
Binary
Response
Is
Null
find
All
By
Entity
Status
And
Http
Method
find
All
By
Entity
Status
And
Textual
Response
Is
Not
Null
find
All
By
Entity
Status
And
Binary
Response
Is
Not
Null
find
All
By
Entity
Status
And
Textual
Response
Is
Null
And
Binary
Response
Is
Null
find
All
By
Http
Method
And
Textual
Response
Is
Not
Null
find
All
By
Http
Method
And
Binary
Response
Is
Not
Null
find
All
By
Http
Method
And
Textual
Response
Is
Null
And
Binary
Response
Is
Null
find
All
By
Entity
Status
And
Http
Method
And
Textual
Response
Is
Not
Null
find
All
By
Entity
Status
And
Http
Method
And
Binary
Response
Is
Not
Null
find
All
By
Entity
Status
And
Http
Method
And
Textual
Response
Is
Null
And
Binary
Response
Is
Null
find
All
By
Entity
Status
And
Deleted
At
find
All
By
Mock
Name
Ignore
Case
Containing
find
All
By
Description
Ignore
Case
Containing
find
All
By
Route
Ignore
Case
Containing
find
One
By
Mock
Name
find
One
By
Route
And
Http
Method
And
Query
Param
Values
And
Request
Bodies
For
Mock
And
Request
Headers
And
Deleted
At
Is
Null
find
One
By
Route
And
Http
Method
And
Query
Param
Values
And
Request
Bodies
For
Mock
And
Deleted
At
Is
Null
find
One
By
Route
And
Http
Method
And
Request
Bodies
For
Mock
And
Deleted
At
Is
Null
find
Unique
Mock
find
Unique
Mock
find
Unique
Mock
find
By
Role
Name
find
All
By
Deleted
At
Is
Null
main
depends
On
Post
Processor
database
Startup
Validator
custom
Open
API
get
Api
Components
get
Bearer
Jwt
Security
Scheme
get
Api
Info
pre
Handle
get
Origin
handle
As
Preflight
Request
check
And
Handle
As
Mock
Request
set
Response
Headers
set
Preflight
Headers
write
Response
write
Error
Response
set
Status
And
Content
Type
formatted
Path
add
Interceptors
write
write
write
write
get
Writer
For
serve
Mock
Request
http
Method
validate
Request
Headers
build
Query
Param
Map
response
Factory
get
Matching
Factory
Implementation
response
Body
type
Of
Response
response
Body
type
Of
Response
response
Body
type
Of
Response
response
Body
type
Of
Response
do
Filter
serve
Request
generate
Mock
Request
full
Path
With
Query
Params
get
Header
Map
does
Mock
Have
Matching
Headers
do
Headers
Loosely
Match
do
Headers
Match
extract
Query
Params
get
Query
Params
List
get
Request
Body
mapped
Model
get
Content
Type
get
Response
Header
create
Resource
Success
to
String
enum
From
Text
get
Default
Mock
Entity
Status
get
Deleted
Mock
Entity
Status
get
Archived
Mock
Entity
Status
find
By
Entity
Status
get
Default
Mock
Entity
Status
get
Deleted
Mock
Entity
Status
get
Archived
Mock
Entity
Status
find
By
Entity
Status
to
String
to
String
to
String
to
String
is
Deleted
is
Archived
can
Edit
Mock
to
String
to
String
get
Current
Auditor
get
Current
Auditor
list
All
Supported
Http
Methods
list
All
Supported
Response
Content
Types
list
All
Supported
Entity
Status
list
All
Supported
Http
Methods
list
All
Supported
Response
Content
Types
list
All
Supported
Entity
Status
list
All
Supported
Http
Methods
list
All
Supported
Response
Content
Types
list
All
Supported
Entity
Status
initialize
is
Valid
initialize
is
Valid
convert
JSON
String
To
Map
convert
Map
To
JSON
String
convert
JSON
String
To
Map
With
Lower
Case
Keys
change
Key
Case
To
Lower
is
Not
Null
Or
Empty
is
Arg
Null
is
Arg
Not
Null
duration
In
Seconds
get
Duration
From
list
All
Supported
Platform
Settings
update
Platform
Settings
get
Generic
Response
Wrapper
list
All
Supported
Platform
Settings
update
Platform
Settings
get
Default
Platform
Settings
list
All
Supported
Platform
Settings
update
Platform
Settings
get
Default
Platform
Settings
map
is
Header
Matching
Set
To
Strict
export
Template
Csv
export
All
Mocks
In
Csv
Format
validate
Export
Import
Feature
For
Platform
create
Mock
get
All
Mocks
get
Mocks
As
Pageable
get
Mock
By
Id
soft
Delete
Mock
By
Id
hard
Delete
Mock
By
Id
delete
All
Mocks
update
Mock
By
Id
get
Generic
Response
Wrapper
search
Mocks
archive
Mock
By
Id
unarchive
Mock
By
Id
get
Generic
Response
Wrapper
resolve
Exception
flush
Bin
get
All
Mocks
get
Mocks
As
Pageable
get
Mock
By
Id
create
Mock
set
Response
For
New
Mock
build
New
Mock
With
update
Mock
validate
Mock
To
Be
Updated
build
Mock
To
Be
Updated
set
Response
For
Mock
To
Be
Updated
is
Mock
Name
Already
Exists
hard
Delete
Mock
By
Id
soft
Delete
Mock
By
Id
delete
All
Mocks
flush
Deleted
Mocks
flush
Bin
generate
Template
File
Name
generate
File
Name
validate
Export
Import
Feature
export
Mock
Template
Csv
export
Mock
List
To
Csv
search
Mocks
archive
Mock
unarchive
Mock
hard
Delete
Mock
By
Id
soft
Delete
Mock
By
Id
delete
All
Mocks
flush
Deleted
Mocks
get
All
Mocks
get
Mocks
As
Pageable
archive
Mock
unarchive
Mock
generate
Template
File
Name
generate
File
Name
validate
Export
Import
Feature
export
Mock
Template
Csv
export
Mock
List
To
Csv
close
write
Data
write
Headers
write
Template
Headers
get
Csv
Template
Headers
get
Csv
Headers
get
Name
Mappings
get
Export
Cell
Processors
get
Mock
By
Id
create
Mock
update
Mock
request
Body
request
Headers
response
Headers
find
Http
Method
From
Query
String
http
Method
find
Http
Method
Internal
response
Content
Type
search
Mocks
map
get
Request
Body
Map
get
Headers
Map
map
authorize
Based
On
Http
Method
And
User
Role
configure
configure
setup
CSRF
setup
Cors
Config
authentication
Manager
Bean
password
Encoder
do
Filter
Internal
is
Not
A
Mimock
Endpoint
is
Auth
Header
Valid
should
Proceed
With
Token
Validation
get
Token
For
User
set
Error
Response
get
Authorities
get
Password
get
Username
is
Account
Non
Expired
is
Account
Non
Locked
is
Credentials
Non
Expired
is
Enabled
equals
update
Password
get
All
Users
get
User
Info
validate
Auth
Token
does
Header
Have
Valid
Token
add
New
User
update
User
Activation
Status
update
Password
update
Password
get
All
User
Roles
authenticate
generate
Claims
load
User
By
Username
add
New
User
is
Token
Valid
delete
User
get
All
Users
get
User
By
Id
get
User
By
User
Name
update
User
Role
update
Password
get
All
User
Roles
update
User
Activation
Status
mapped
User
Response
mapped
User
Response
map
User
Role
Response
extract
Username
extract
Expiration
extract
Claim
extract
All
Claims
is
Token
Expired
get
Token
Expiry
Timestamp
get
Signing
Key
generate
JWT
validate
Token
is
User
Allowed
To
Perform
Action
get
Current
Role
get
Current
User
Name
main
download
File
From
URL
get
Password
Authentication
